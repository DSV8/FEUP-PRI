{
    "id": "LYzBa_nNqv0",
    "title": "Never use a Docker container without doing this first! (And don't create one either!)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2024-06-16T14:00:13Z",
    "video_url": "https://www.youtube.com/watch?v=LYzBa_nNqv0",
    "category": "Science & Technology",
    "tags": [
        "docker",
        "docker scout",
        "hack",
        "hacker",
        "hacking",
        "cybersecurity",
        "cve",
        "information security",
        "docker hack",
        "hacking docker",
        "docker cve",
        "log4j",
        "python",
        "xss",
        "jscript",
        "node",
        "nodejs",
        "xss attack",
        "kali linux",
        "penetration testing",
        "ethical hacking",
        "bug bounty",
        "cross site scripting",
        "cross-site scripting",
        "red teaming",
        "cyber security",
        "kali linux install",
        "kali linux 2022",
        "ethical hacker course",
        "ethical hacker",
        "javascript",
        "ajax",
        "jquery",
        "node js",
        "node js hacking",
        "portswigger"
    ],
    "views": 74701,
    "likes": 2099,
    "comments_count": 83,
    "description": "Don't make the mistake of downloading (pulling) a Docker container without first doing this very important security check! So many Docker containers contain software that have CVEs (Common Vulnerabilities and Exposures). And don't create a Docker container without first making sure that the dependencies you use don't have CVEs. Make the world a more secure place by using Docker Scout.  Big thanks to Docker for sponsoring this video!  // Learn more here //  Docker Scout:  Docker   // PDF // Docker Scout PDF:   // David's SOCIAL //  Discord:   X:   Instagram:   LinkedIn:   Facebook:   TikTok:   YouTube:   // MY STUFF //     // MENU // 00:00 - Introduction 00:35 - Docker Scout Demo 04:58 - Key Takeaways 05:52 - Install Docker Desktop 06:16 - Download GIT 08:19 - Launch GIT BASH 09:00 - Open PowerShell 09:26 - Pull and Analyze the Container 10:15 - Advantages of Docker Scout 11:25 - Demo: Finding and Fixing Vulnerabilities 12:42 - Login to Docker Scout 13:44 - Enable Docker Scout 14:18 - Overview 16:15 - Docker Desktop 17:36 - Update Dockerfile 18:10 - Build and Push Updated Docker Container 18:51 - Fixing Vulnerabilities 20:14 - No Recommended Fixes 21:25 - Options for Discovering Vulnerabilities 22:26 - Fixed Vulnerabilities 23:39 - Further Fixes 25:42 - Achieving 100% Compliance 25:59 - The Power of Docker Scout 26:18 - Outro  cve docker docker scout scout docker hub docker cve rust java jscript xss c python  #docker #hack #cybersecurity",
    "description_links": [
        "https://dockr.ly/4engpsI",
        "https://www.docker.com/",
        "https://davidbombal.wiki/dockerscoutpdf",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/@davidbombal",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "you really don't want to download and use Docker containers without checking them first with Docker Scout so don't just pull Docker containers and use them make sure that you check them for CVEs and vulnerabilities with Docker Scout you also don't want to push Docker containers that you haven't checked because you may be using software that has vulnerabilities in it I also love this picture that shows how modern software is reliant on a piece of code that someone has created just think about Log4j great example of how many many systems were impacted because of problems with Log4j little piece of software that a lot of systems used but let me show you an example in Docker Scout I'm going to search for mongo, mongo 1 billion downloads I'm going to pull the latest Docker container I'll analyze it now through Docker Scout notice the vulnerabilities in this 2 critical 29 High severity 15 medium severity 13 low severity let's look at the packages and the CVEs now this isn't old software this was created a month ago at the time of this recording there are 71 vulnerabilities in this Docker container notice here CVEs 2023 this has a CVEs score of 9.8 out of 10 here's another one 9.8 and we have 29 CVEs 7.5 7.8 and so forth and you may think it's fine for me to pull this Docker container because there have been so many downloads of it why not but be careful and notice this is a 2023 CVE affecting this Docker container this was updated 9 days ago we can see that the fixed version here is1.19.9 for standard library look at the CVEs we've got a description of the CVE we can see that this was updated 9 days ago we can see that the fix for golang is 1.19.8 CVS score 9.8 this is a problem don't believe that just because this docker container has been downloaded a billion times that is used by many many people that there aren't CVEs or issues with the docker container let's look at Mongo Express I'll pull that container 100 million downloads on this container I'll go to Docker Scout have a look at Mongo Express latest analyze the image notice it has 1 critical severity vulnerability 3 High severity vulnerabilities again if we click through we can see the information about it so this CVEs 2023-45133 shows us problems with software used within the docker container this has a 9.3 CVEs score okay so that's just two examples of Docker containers that have been downloaded many many times but have critical vulnerabilities in them Docker Scout allows you to understand your application dependencies so it's not just for people who are using Docker containers it's also for developers who are creating Docker containers how do you know that the dependencies that you're using as part of your application don't have CVEs? how do you analyze for vulnerabilities and act quickly with suggested remediation options? so in this video I'll show you this Docker container that I'll create and I'll show you the issues with the docker container and then how to resolve the issues in the docker container so as you can see here my Scout-demo:v7 Docker container doesn't have any issues but that's not how it started when it started life it had 2 critical severity vulnerabilities 16 high and 8 medium severity vulnerabilities we can see through Docker Scout the fixable and critical High vulnerabilities the goal is to get to the point where we have a 100% compliance with copy left licenses that we're not using root users for a Docker containers that's a common problem that the critical and high vulnerabilities have been fixed high-profile vulnerabilities have been fixed we're not using outdated base images and we have supply chain attestations in our Docker container so here I have 100% compliance that's where I want to go to not always possible so this is the goal look at the docker containers that you're creating and make sure that you're not making common mistakes like using a root user or that your code or your dependencies have vulnerabilities in them what's great about Docker Scout is there's a free plan unlimited local image analysis for remote images up to three repositories you got a team option at $9 a month and then there's a business option I really want to thank Docker for sponsoring this video and creating the software because it's a big issue today people are using containers all over the place but are not always aware of the vulnerabilities in those containers and developers who create vulnerabilities and use software again famous one being Log4j are not aware of the vulnerabilities and critical CVEs in their software now in this video I'm going to show you a bunch of options some people may be commenting already David why are you using Windows? I'm just using Windows for this demonstration because a lot of people use Windows but this could also be used on Mac OS or Linux as an example others of you may be commenting saying why using a GUI application I want to use Powershell or I want to use the CLI I'm going to show you how to use those options in this video as well but to help you my team and I have created a PDF which you can download using the link below use this video as a reference guide but also use the PDF if it helps you in the PDF it shows you as an example how install docker a desktop on a Windows computer and how to install git on a Windows computer so I'm going to show you that now but if you're not interested in seeing how to install this software then jump to this timestamp where we get into the actual demonstration of the product and show you how you can fix vulnerabilities and CVEs in your Docker containers so the first thing we need to do is install Docker desktop so from our PDF which I've linked below once again you can click on this link or simply go to docker.com/products/ Docker-desktop I'm going to download docker for Windows as you can see here they have options for Mac as well as Linux Mac includes both options for Intel as well as the M Chips but I'm going to Simply download for Windows it's about 476 Meg in size while that's downloading I'm going to download Git as well so I'm going to go to git-scm.com and I'm going to download that for Windows so click here to download the latest version and as you can see that's downloading it's about 64 meg in size okay so the software has successfully downloaded I'll go to the directory double click on Docker desktop installer say yes to install the software now in this example I'm using the home version of Windows so it's going to use WSL but if you're using a professional version of Windows you could either use WSL or hyperv so choose whichever option you prefer in this example I'm just going to click okay to complete the installation so as an example notice here it says use WSL2 rather than Hyper-V okay so once the installation is completed you need to click close And restart your computer once Windows has rebooted and we've logged back in we need to accept the docker subscription service agreement so I'll click accept but just before I do that notice Docker desktop is free for small businesses fewer than 250 employees and less than 10 million in annual revenue personal use education and non-commercial open source projects otherwise it's a paid product so I'm going to accept the license and then we're told do we want to use advanced settings or recommended settings I'm going to go with recommended and click finish I'm going to allow the app to make changes to my device and now you can either sign up or you can sign in to Docker desktop I'll install Git by double clicking on the executable I'm going to allow Git to make changes to my computer a lot of options here but I'm simply going to press next next and next to install the software so a whole bunch of options available but for a very basic install I'm just going to go with all the defaults so just click next next next next next and click install you can read the release notes but I'm not going to do that I'm going to Simply launch Git Bash there you go I've got Git Bash running on my computer so PWD as an example shows you where I am in my directory structure okay so I have both Git Bash installed as well as Docker desktop installed on my computer okay so now that we've got the installation completed we can get into the nitty-gritty of the docker Scout software now one of the things you need to be aware of is Docker Scout uses a software bill of materials it knows what's part of the docker container so you don't have to keep on scanning your Docker containers to make sure that there are no vulnerabilities in them massive benefit of Docker Scout okay but let's demonstrate this cuz that's going to be more fun what I'll do is open up PowerShell and use the command Docker software bill of materials help to see the various options here so as an example for an image we can see a summary of discovered packages we can write a report output to a file various options available okay so let's have a look at the software bill of materials for the latest mongo container so what this is going to do is it's going to pull the container and then analyze it so it may take a while for the output to show but then you go we can see for apt as an example the version and the type it's a Debian package we can see a whole bunch of software and dependencies in the bill of materials now that's nice but we might want to Output that using the system package data exchange format so I'll clear the screen again okay so what we're doing once again is pulling the image analyzing it and then pushing the output to a file so dir here we can see our Json file and opening that up in Visual Studio code you can see the software bill of materials right here as an example package manager we can see the Ubuntu distro 22.04 there's a whole bunch of information available in the software bill of materials now once again the big difference between Docker Scout and other vulnerability scanners which form part of your CICD pipeline is that with other systems you get a snapshot of the vulnerabilities when you run the scan which is essentially a static snapshot of all the vulnerabilities at the time that you ran the scan but that's not constantly updated you'd have to keep on running the vulnerability scan whenever you update your image Docker Scout however uses an event driven model with its image analysis it extracts the software bill of materials and other image metadata and then evaluates it against the following advisories so you could go to this page as an example docs.docker.com/scout/advisory-db-sources and it shows you the various databases that are used to check if there are any CVEs or vulnerabilities in the image what's great about this is the continuous process of comparing vulnerability data against the image software bill of materials leads to finding new vulnerabilities as they are announced and these vulnerabilities show up on the docker Scout dashboard you can also add your own internal advisories to the mix ensuring that you have the most complete vulnerability scan for your project Big Goal here is to worry less about vulnerabilities and focus more on your code now let's go through a demo showing you how you can use a scout Docker image and look for the vulnerabilities and then fix them so that you go from in my example V1 I went through many iterations of this testing barriers things to V7 where I had no vulnerabilities hopefully it'll go a lot quicker this time around and I'll show you how you can quickly and easily fix vulnerabilities in a container first thing I'll do is run git bash as an administrator I'll say yes and here we go make it bigger I'll move into my Docker demo directory and and then what I'll do is clone the docker Scout demo from GitHub so ls there we go so I'll move into that directory ls again we can see package information you can see various files including Docker file package Json and so forth now just be aware that various Integrations are supported so you can connect to third party projects to extend Docker Scout functionalities into your software development life cycle so as an example we've got Docker Hub which I'm demonstrating but we've got Azure we've got Elastic Container Registry we've got gitlab here we've got Jenkins and so forth whole bunch of options available with Docker Scout including team collaboration with slack or teams okay but let's get back to the code so I'll clear the screen and let's use Docker login to login so it says here authenticating with existing credentials login succeeded how did that work it works because I'm logged into Docker Scout using the docker desktop so if this login fails make sure that you've got Docker desktop downloaded and running and that you've logged in to your account now I already have a scout demo repository so let's change the name slightly here so I'll call this scout demo 2 V1 so what I'm going to do is build my container and then push it to my account but I'm going to call this scout demo 2 V1 just because this has tripped me up notice you need to put a dot or period if you prefer at the end there so I'm going to press enter now and notice it's busy building it and we'll push it to my organization so you can see here it's busy pushing it and that's now completed okay next thing we need to do is enable Docker Scout on the repository so we use the command Docker Scout repo enable organization name and then the repository and we can see now that Docker Scout has now been enabled on that repository we can now manage it through the docker Scout dashboard and they give us a URL to the docker Scout dashboard I already have that open but let's use their link and as you can see here we've got Docker Scout demo created 5 minutes ago and Docker Scout is active on this repository now if I click on overview I can see that my values have dropped now so default non-uses 50% critical and high vulnerability issues 50% so one of my images complies one image doesn't comply supply chain attestations also only one image complies so if I click on vulnerabilities as an example we can see that in Scout demo 2 pushed 7 minutes ago there are 20 vulnerabilities this is not good including CVEs with a score of 9.8 so we've got two CVEs with 9.8 and we can see details of this we can see here that buffer overflows can be used 9.8 CVEs score very very bad so going back to overview once again notice we have fixable critical and high vulnerabilities in this image if I click on V1 here we can see at the top here we have 2 critical severity vulnerabilities and so forth notice the image hierarchy on this Docker container here are a whole bunch of problems and once again if we click through we can see the various CVEs so as an example 9.8 or what about 7.5 here we get information about the various CVEs but you probably don't want to spend all your time reading about the CVEs you want to solve this problem and get the container updated before I show you that once again through Docker desktop I could search for something so in my private Repose I can see Docker Scout here which I could pull so this is Scout demo 2 notice the original Scout demo V7 has no vulnerabilities but if I look at Scout demo 2 V1 and analyze that I can see very similar information as I saw online so here's the desktop application here's what it looks like online what you may find is that Docker Scout online will give you more information than Docker desktop so make sure that you look at both versions when trying to investigate vulnerabilities okay but on Docker desktop I'm going to go to Docker Scout once again go to demo 2 V1 view the packages and CVEs and at the top here notice we've got options for recommended fixes so not only are you seeing issues which is okay but you want to know how to fix images so let's go to the recommendations for the base image so we're told here as an example to change the base image we can see the current image and then we can see updates to the image so as an example here 3.19 was updated 4 months ago now what's interesting is the information shown here is good but you may worry about the medium severity CVEs and this is where the CLI gives you more information so in the CLI I'm going to use the command Docker Scout recommendations this is in Powershell and notice we can see base image is Alpine 3 we can see critical vulnerabilities Etc and scrolling down and notice here we can see the latest release is 3.20 in the docker desktop application we can see a minor update being 3.19 and then we can change this code in the docker file so not only are we told the issue but then we're told how to fix our file so what I'm going to do here is I'm going to update the docker file to 3.19 but then run it again to show that we can update it to 3.20 to get rid of all the CVEs so I've opened my Scout demo folder in vs code and if I go to the docker file notice at the top here that's what we want to change so I'll delete that and I'll paste in the recommendation from Docker desktop so literally just copy this from Docker desktop and update the file it even tells us what to do here so replace your old tag with this new one in your Docker file so I'll save that okay so what I'll do now is build and push my updated Docker container in this case V2 to Docker Hub and there you go building okay that's done now so in Docker Scout under images I can see demo 2 I've got V2 here so I'll click on V2 here the most recent image I'll go to fixable critical and high vulnerabilities click on my image V2 and notice we can see that there's an issue in Express so we've got a 2024 CVE here and details about that CVE if you want to read about it but we're not going to worry about that here what we want to do is fix this so back in Docker desktop I'm going to search for scout I'm going to pull version 2 go to analyze that I'm going to analyze the image notice once again 2 high severity vulnerabilities 5 medium click on view packages and CVEs go to recommended fixes for the base image change base image and notice we're told to use 3.20 which is the latest release now this was updated 7 days ago at the time of this recording our unspecified CVEs go down by two we need to change this code so I'm going to copy that back in Visual Studio code I'll change Alpine from 3.19 to 3.20 save that I'll build and push this to Docker Hub but as version three okay so that's now been pushed now back on the docker Scout website unfortunately we still have two vulnerabilities so in our V3 image we still have vulnerabilities notice here Express 4.17.1 CVE score 7.5 if I go to the docker desktop and pull version 3 of the demo and then analyze that image we can see something similar 2 high severity CVEs Express 4.17.1 has a problem now an issue here is when I look at recommended fixes notice no recommendations are available at this time so that's a problem how am I going to fix this so going back to the website let's have a look at the actual CVE information so CVE-2022- 24999 what are we told here the fix version is 4.17.3 affected ranges are below 4.17.3 npmjs if we go and look at the actual npmjs website we can see version 4.19.2 here published 2 months ago 4.17.3 fixes it but the latest release is 4.19.2 what does the CLI show us so if I run Docker Scout CVEs we should see something very similar notice 2 high 1 medium vulnerability in packages we can see the analyzed image once again 2 high 1 medium Express 4.17.1 has an issue here is the CVE information once again for the high vulnerability and here's the CV information for the medium vulnerability so there are a lot of options here you could use the website you could use Docker desktop or if you prefer use the CLI to find out similar information but the most important thing is how do I fix this so under package.json we can see dependencies here being expressed 4.17.1 that's the problem that we found with Docker Scout again this package has a CVE score of 7.5 and once again you could just click here to see information about the CVE directly within Docker desktop Okay so we're going to do here is change this to 4.19.2 so change the express dependency to that version and what I'll do is change the version to V4 once again it's V3 that has the problem okay so build and push to Docker Hub okay so that's now completed go to the website click on overview now that's what we want 100% for our fixable critical and high vulnerability there are no issues or no vulnerabilities at the moment so that's great in Docker desktop let's pull version 4 under Docker Scout version four analyze it the result we want no vulnerabilities everything is clear back on the website look at images version 4 of our demo no vulnerabilities we however only have a three out of six compliance whereas my version seven of the previous demo has six out of six so if we look at compliance we can see that default non-root user is not compliant click on details ensures the image specifies a nonroot username for the final stage we haven't done that yet so that's a problem we also have issues with the supply chain attestations if we look at details here stuff is missing so going back to overview we may have 100% here but we're only getting 50% on default non-root user and our supply chain attestations so we need to fix those as well okay so within vs Studio code I'm going to go to Docker file and we need to add some details here okay so first thing we're going to do is create a group and a user so we're going to use this command once again to create a group and a user we're going to change the working directory of the app and we need to change the ownership of the working directory to the nonroot user so notice we changing the ownership here and we switching to the non-root user so again we've created a group and a user the working directory is going to have its ownership changed to the non-root user and we're going to switch to using the non-root user okay I'll save my changes and let's old version five and push that to Docker Hub okay so that's now been done on the website click on overview we had default non-user being 50% and now it's 100% so we've solved that problem 100% for copy left licenses default non-user critical and high vulnerabilities high-profile vulnerabilities outdated base images but we've got 50% for supply chain attestation so my V5 is still not fixed so we need to fix these two violations and again we can look at the fixes on how to solve this back in Docker desktop let's pull version 5 of our app go to Docker Scout version 5 analyze the image no CVE here but if I click on the Cog at the top scroll down make sure that you've got this checked but if yours is unchecked check it and then click apply and restart so once again just back in the overview on the website notice we're getting 50% here because this V5 image doesn't have the supply chain attestation fixed you have to run the following command to ensure that your artifacts have both the s bomb and providence attestations so let's run that on V5 which is the current version that we've got you can see that that's successfully Run Okay so there you go we have 100% compliance copy left licenses we're not using a root user our vulnerabilities have been corrected there are no critical and high vulnerabilities in our containers our supply chain attestations have been fixed and so forth this is what's fantastic about docker Scout it makes sure that the containers that we are using and all of us use containers these days whether we know it or not are secure and that the containers that developers create are better secured big shout out to Docker for sponsoring this video and making the world a safer Place through the creation of Docker Scout I'm David Bombal I want to wish you all the very best [Music]",
    "transcript_keywords": [
        "Docker Scout",
        "Docker Scout version",
        "Docker Scout CVEs",
        "docker Scout demo",
        "image Docker Scout",
        "scout Docker image",
        "Docker Scout notice",
        "docker Scout software",
        "docker Scout dashboard",
        "Docker container",
        "Docker",
        "command Docker Scout",
        "Docker desktop",
        "run Docker Scout",
        "docker Scout website",
        "Docker container notice",
        "Docker Scout recommendations",
        "Docker Scout including",
        "Docker Scout online",
        "enable Docker Scout"
    ],
    "transcript_entity_values": [
        "next next next next",
        "these days",
        "three",
        "golang",
        "1.19.8 CVS",
        "7.5 7.8",
        "CV",
        "7.5",
        "two",
        "four",
        "only one",
        "2 V1",
        "5 minutes ago",
        "8",
        "Docker Scout",
        "Jenkins",
        "2 months ago",
        "Docker",
        "Linux",
        "Docker Scout I",
        "a month ago",
        "Intel",
        "Express 4.17.1",
        "2024",
        "David Bombal",
        "Docker Scout",
        "20",
        "Express 4.17.1 CVE",
        "CVE",
        "3.20",
        "annual",
        "9.8",
        "less than 10 million",
        "4",
        "4.17.3",
        "29",
        "3",
        "4.17.1",
        "today",
        "4 months ago",
        "Powershell",
        "2023-45133",
        "Windows",
        "Linux Mac",
        "2 V1",
        "one",
        "Alpine 3",
        "Alpine",
        "24999",
        "PDF",
        "about 476",
        "Windows",
        "Express",
        "the M Chips",
        "1 billion",
        "first",
        "15",
        "Mac",
        "about 7.5",
        "Docker Scout",
        "WSL",
        "next next",
        "Windows",
        "Integrations",
        "2023",
        "Docker Scout",
        "Docker Hub",
        "David",
        "Git",
        "9 days ago",
        "4.19.2",
        "Git Bash",
        "9",
        "3.19",
        "Debian",
        "Json",
        "fewer than 250",
        "1",
        "5",
        "16",
        "10",
        "7 minutes ago",
        "9.3",
        "six",
        "7 days ago",
        "Docker",
        "Cog",
        "50%",
        "seven",
        "third",
        "five",
        "2",
        "100 million",
        "100%",
        "13",
        "71",
        "GitHub",
        "GUI",
        "PowerShell",
        "Azure",
        "CLI",
        "Scout",
        "22.04",
        "Mongo Express"
    ],
    "transcript_entity_types": [
        "DATE",
        "DATE",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "CARDINAL",
        "GPE",
        "PERSON",
        "DATE",
        "PERSON",
        "GPE",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "DATE",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "MONEY",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "DATE",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "ORG",
        "WORK_OF_ART",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "LOC",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "PERSON",
        "PERSON",
        "DATE",
        "CARDINAL",
        "PERSON",
        "MONEY",
        "CARDINAL",
        "NORP",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "ORG",
        "PERCENT",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "PERCENT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG"
    ]
}