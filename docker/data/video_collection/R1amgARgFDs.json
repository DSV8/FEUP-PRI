{
    "id": "R1amgARgFDs",
    "title": "Real World Hacking Demo with OTW",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2023-07-09T14:00:15Z",
    "video_url": "https://www.youtube.com/watch?v=R1amgARgFDs",
    "category": "People & Blogs",
    "tags": [
        "sql injection",
        "hack",
        "hacking",
        "hacker",
        "pegasus",
        "cybersecurity",
        "MOVEit",
        "sql",
        "otw",
        "occupy the web",
        "spyware",
        "malware",
        "iphone",
        "android",
        "infosec",
        "information security",
        "wifi",
        "linux",
        "tails",
        "privacy",
        "cyber security",
        "ethical hacking",
        "online privacy",
        "kali",
        "kali linux",
        "sql hack",
        "database",
        "moveit",
        "moveit breach",
        "breach",
        "moveit hack",
        "cyber",
        "real world",
        "real world hack"
    ],
    "views": 228986,
    "likes": 6910,
    "comments_count": 374,
    "description": "This is a real world demonstration of the SQL Injection attack used in the recent MOVEit hack. This is real world - not just a simple SQL attack. Big thank you to Juniper Networks for supporting the community and making this training free (and sponsoring my channel). Go to  to get lots of training and also learn how to get certified for $50 (Associate Level). Use this voucher code to register for your courses: DAVIDBOMBAL  If you have issues with the Juniper registration, please use these links that they gave me: For Login assistance link  Customer Support link-    // Mr Robot Playlist //   // Proof of Concept // Horizon3:   // David's SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // Occupy The Web social // Twitter:   // OTW Discount // Use the code BOMBAL to get a 20% discount off anything from OTW's website:   // Occupy The Web books // Linux Basics for Hackers:  Getting Started Becoming a Master Hacker:  Top Hacking Books you need to read:   // Other books // The Linux Command Line:  How Linux Works:  The Car Hackers Handbook by Craig Smith:  Hacking Connected Cars by Alissa Knight:   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // MENU // 00:00 - Coming Up 00:55 - Juniper Free Training (Sponsored segment) 01:51 - OccupyTheWeb books and new books 03:57 - The MOVEit breach explained 05:20 - Clop website // Companies affected 08:52 - The two different vulnerabilities 10:26 - The truth about SQL Injection 12:21 - Using Shodan 14:05 - Proof of concept of the exploit 16:18 - SQL Injection example 20:35 - MOVEit hack analysis / How it was done 28:57 - CVE-2023-35708 SQL Injection vulnerability explained 30:36 - What is Taiwan Semi-Conductor (TSMC) and why they got hacked 31:01 - SQL Injection hack in the real world 32:45 - OccupyTheWeb online classes 33:46 - Union statement // Stacking queries demo 37:02 - Upcoming OccupyTheWeb courses and classes 39:50 - Conclusion  MOVEit sql sql injection hack hacking hacker pegasus cybersecurity  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   Disclaimer: This video is for educational purposes only.   #hacking #cybersecurity #sql",
    "description_links": [
        "https://juniper.net/davidbombal",
        "https://userregistration.juniper.net/loginassistance",
        "https://support.juniper.net/support/requesting-support/",
        "https://www.youtube.com/playlist?list=PLhfrWIlLOoKNYR8uvEXSAzDfKGAPIDB8q",
        "https://www.horizon3.ai/moveit-transfer-cve-2023-34362-deep-dive-and-indicators-of-compromise/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://twitter.com/three_cube",
        "https://davidbombal.wiki/otw",
        "https://amzn.to/3JlAQXe",
        "https://amzn.to/3qCQbvh",
        "https://youtu.be/trPJaCGBbKU",
        "https://amzn.to/3ihGP3j",
        "https://amzn.to/3qeCHoY",
        "https://amzn.to/3pBESSM",
        "https://amzn.to/3dDUZN8",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "This is real hacking. This is not TikTok hacking. Oh, we have a problem that's trying to stop me. It's okay. If I can just get past their firewall, we may have a chance. The organization who has been executing these hacks is a company, a group known as Clops. And they have a website on the dark web where they keep track and they show you who they have hacked. So this has been now, it has been exploited, but Moveit or progress are trying to get everybody to patch, but as we know, not everybody patches when new patches come out. Since the attack has come out, we have a proof of concept that has been developed. And let me show you that. This is a proof of concept of the exploit. I've got it over here in Kali. Here it is. Okay, this is something I really love. You can get free training using the link below. Go to juniper.net/davidbombal and get free networking training, free security training, DevOps training, a whole bunch of other training for free from Juniper. Not only do you get free training, but if you go through their assessments, you can get a discount on your exam and you can get certified for $50 at the associate level, for example. I really want to thank Juniper for sponsoring my channel. I really want to thank them for creating this free training and making it affordable to more of us. Many of you have told me that it's difficult to pay for some of the training out there, but here's your chance. You can get free training from Juniper and by going through an assessment, you can get your exam for a very good price, $50. I love this kind of stuff. I love it when big companies support the community and help educate and change lives. Big shout out to Juniper for doing this. Hi Everyone, David Bombal, back with OccupytheWeb, He is my most requested guest. So really happy to have him back. OccupytheWeb, welcome. Hey, thanks David. It's always good to be on the best IT and Cybersecurity channel on YouTube. I really appreciate you saying that, OccupytheWeb, and you are one of the big reasons that people love my channel. I'll just say this for everyone who's watching. I was on Reddit the other day and someone commented about David's YouTube channel. It isn't so good, but what keeps it good is OccupytheWeb. So, OccupytheWeb, thank you for making my channel great. I enjoy it. It's always a good time with you David. So just for people who haven't seen our previous videos, he's the author of this book, Linux Basics for Hackers. Fantastic book. Look on Amazon, it gets amazing reviews. Also, Network Basics for Hackers, as well as Getting Started Becoming a Master Hacker. OccupytheWeb, I know you don't like to give timelines, but I've had people say, \"When is your new book coming?\" So hopefully we're going to see another book from you at some point, right? Probably see two new books from me next year in 2024. The one that I keep on getting questions about is the Cyber Warrior Handbook. That one probably coming in late 2024. So look for that. It's going to be based upon a lot of our experiences in Ukraine. It's going to be a Cyber Warrior What kind of techniques, what kind of hacks did we use in Ukraine and what other cyber warriors can use in the future? So look for that. That's coming from No Starch Press. We hope to have some updated editions of the other books as well coming out. So I'm working on it. A lot of people think that writing a book is a quick and easy process, but it takes time and you have to work with editors and companies who then publish them. Sometimes it's a year between finishing a book and actually having it published. So just be patient, folks. I don't know where you get the time because you're doing so many other things as well. So I really appreciate you taking the time to share your knowledge on YouTube. I believe today we've got a really interesting topic that's very fresh. As I said offline, I want to keep quiet and let you take us on this journey. So MOVEIt, I believe, is what it's about, right? Yeah, MOVEIt is. MOVEIt's the software that is a file transfer software that's used by a lot of large organizations around the world. And it's been hacked. And it's compromised a lot of companies. It's going on right as we speak. It began at the end of May. And okay, we started seeing it. And it's happening. Well, this morning, okay, we saw Taiwan semi-conductor got hit with it. And I mean, the list of companies is really, really long. I could just name just a few: Siemens, Schneider Electric, UCLA, Airlingus, BBC, British Airways, and many, many more. And so I think we're up to about 150 companies that have been hit. And this is still taking place. I can show you the organization who has been executing these hacks is a company, a company, a group known as Clops. And they have a website on the dark web where they keep track and they show you who they hack. And if you want, I can show you the website. Yeah, this is Clops' website. This is on the dark web. And they have a long list of companies that they've hit. I didn't know they hit new odds too. Okay. And it's more and more every day. And this is kind of their, it's a Russian language web, a Russian language group who's doing this. It says, sorry, sorry, sorry, we got a lot of emails about government data. We don't have any government data, anything directly residing on exposed or bad protected, not encrypted, wild, transferred. It's very important, right? These guys are Russian language native speakers. And They've been very effective. We've talked on here before about real live hacks that sometimes take weeks, months, years. It's apparent that these guys have been working on this for at least two years, two years to be able to execute this. We see them scanning these sites as of two years ago. I think it was July 2021. It's the first time we saw them scanning sites. So they've been working on this for at least two years. One of the things that they say here is that I find kind of humorous is that they say, we are a penetration testing service. Okay. Wow. Yeah. So they're calling themselves a penetration testing service. We are only financially motivated and do not care anything about politics. Now, I find that a little disingenuous maybe is the best word for it. When somebody says they're not interested in politics, I've explicitly stated that I get a question about why are you saying this? Because one of the things that we note is that the focus of these attacks are against companies in Britain and companies in the US, both of whom are major supporters of Ukraine and the war with Russia. And this is a Russian hacking group. Right. And basically, they are a ransomware organization. But in this case, they don't look like they're ransoming. They're more extorting money from the organizations. They're saying, we've got all your data. Unless you pay us, we're going to reveal all of your credit card information and personal identifiable information of your customers. In the case of Taiwan Semiconductor, it looks like they may actually have intellectual property that is important for Taiwan Semiconductor, who is the largest boundary of semiconductors in the world. You can see down below us as we see BBC decide to take what we told them an email and like what most media do, twisted to their own interests. So here's kind of instructions they give people who they've hit about what they need to do to be able to avoid. And basically, they're extorting money out of companies. And this is a piece of software that's mostly used by very large organizations to be able to transfer data safely, they thought. That's a positive idea. They have supposedly safely between different cloud organizations, cloud groups. I like that they sign it off as friendly club, friendly top here at the bottom, right? As long as you pay us millions of dollars in ransomware. As long as you pay us millions, I think they're asking $70 million from Taiwan semiconductor as of this morning. This is a pretty serious situation. And like I said, they've been working on at least two years. There's a couple of there's at least two different vulnerabilities involved in here. And there's one, the first one was CVE 2023 34, and then there's CVE 2023 35708. All right, here it is. In progress, progress is the name of the company. Progress, move it transfer before 2021 2006. You can see the version numbers there. A SQL injection vulnerability found in the move it transfer web application that could allow an unauthenticated attacker to gain access to move it transfer database. And on the database engine being used, you see people are using various databases. MySQL, SQL server, Azure, they can basically take over and move the data to wherever they want. And they can put they can get themselves sys admin privileges as well as then put in remote code execution. They can put their own remote code into an and and execute the data from the database. This is in CESA. It's a severe. We're severity is very high. Okay, 9.8 right here. That's about as high as you can go to 10. So this is pretty serious. It's interesting because a lot of people would say on YouTube, you know, SQL injection is old school. No one's going to use it anymore, but it has an example of it just being used. Yeah, that's interesting. Come in. I know a lot of people say that they say, Hey, you know, SQL injection was nobody uses that anymore. Yeah. Well, here's the truth. All right, SQL injection has been around since the beginning of the web. All right. And so when if you have gone through a cybersecurity class or hacking class, they probably demonstrated a really simple SQL injection where you can send SQL command. So let's talk about what SQL injection is. SQL injection is sending SQL commands through a web form to the backend database. As you know, almost every website has a backend database. And this MySQL is probably the most popular. The open source database that's not owned by Oracle. And the way to prevent SQL injection is to basically sanitize the inputs. So that means that you don't allow SQL commands to go to the backend database. And in some cases, you don't allow any of the SQL special characters or SQL keywords go to the backend database. But there's ways of getting around it. And that's what these folks did. They looked at the code and they were able to figure out ways to get around that sanitization process. And so they were able to send some SQL commands into the database that basically gave them the added themselves in as an admin user in the database. And then once they're as admin, they can do whatever they want. It might be interesting to take a look at Shodan to see how many of these systems there are in the world. Shodan is a website that catalogs all of the banners that websites and ports on the websites present to themselves. And you can find an awful lot of interesting stuff on it. So we can go and we're using the favicon to be able to identify it. And so these are there's 2000 systems that are still connected. Now as of a few days ago, it was 2500. And so now we're at the down to about 2100. There's at least two ways to be able to find these websites. One of them is using the fabricant that's specific to that. There's a piece of software. Of course, you could also just put in Movit. And that'll reveal about 500 in the head. And 780. Look at more than I remember. Here's Siemens Energy. Okay, these are the guys who just got hit recently. Siemens Energy. And these are the companies who are using Movit. You see it right here. It's in there's Movit. There's Movit. Movit. Trouts for SFTP. These are the companies who are using Movit. Now Movit or Progress Software has gone and put out some patches. But it seems like every once a week we find or they find and other people find more vulnerabilities in the software that allows a Clop to be able to take over these websites and exfiltrate, you know, terabytes of data that they can then use and hold for ransom from these companies. These are big, big companies. You're not going to find small companies using this. It's mostly you can see some of the organizations listed here. This is how Clop is finding their targets. It's one of the ways they're finding their targets. They're simply looking up in Shodan and some of the other search engines they can find. And we're seeing there's still a lot of them. They're still connected to the web. Since the attack has come out, we have a proof of concept that has been developed. And let me show you that. This is a proof of concept of the exploit. I've got it over here in Kali. Here it is. It's a, I don't know how many lines, 300 lines or so. And you can see that there's some SQL injection right here. And they're basically inserting into the database some tokens to give them access. These are our SQL injection statements right here. Now generally when people think about SQL, they're usually thinking about some select from where statements. These are insert and update statements. This allows them to insert themselves as a user and even a privileged user on the site. And once they have privileged user, they can log in. You can see it allows logins with an external IP inserted into host permits and then go ahead and insert themselves to permit their IP address. And it's kind of just some interesting analysis on the web by Horizon3.ai. I think there's a name of the company and the Huntress and a few others. I think it also Rapid7 has done some good analysis of the exploit. One of the things that they did and often times what we do to be able to determine how an exploit works is you simply take a look at the code, the MOVEIt code both before and after the patch. Right. So those of us around the outside who are privy to what's actually going on, you can simply look at the code before a patch and after the patch and see what the differences are. And then once you see what those differences are, then you can recreate the exploit. And that's what basically where this comes from right here is that this proof of concept comes from basically greening the patches. So when we see how the company tried to close the vulnerability, we can see what they did and then recreate the exploit. So that's what this is here. This is basically recreating the exploit or reverse engineering the exploit based upon looking at the patch that was built for this particular exploit. One of the things that you're often taught in SQL injection. Let's see what we want. We forgot to, I just got a little database up here. This is DBB. It's a GUI for working in databases in Kali and in other Linux distributions. But generally when you talk about a SQL injection, what they'll teach you is to do something that goes select. It's going to write a few simple SQL statements. So generally, what they'll teach you is something like this. Select star from and then a table name say, you see this is a sample database over here. So it's select star from say album. All right. Okay. And then where artist ID let's go name where let's change it to instead of album, we'll change it to artist just to make it more interesting. We're artist and we'll go name is equal to whatever. Right. We could go let's go ahead and let's take a look at this database just so we can put together some examples here. We're going ahead and execute and here's you know, here's some of the people who are in that database. It's all musicians. Let's try something that's Aerosmith is easy to go ahead and we're going to go where I was just thinking of that as an easy name. Where name is equal to and gotta use the when you're talking about text, it has to be in single quotation marks and let's go 'Aerosmith' when you're talking about SQL. All right. So then you can go ahead and just go and get entered. All right. So here we have this is a simple select statement. It's called a query in SQL and what we've done is simply asked the database for this particular quote select all the columns to star from the table artist. You see the artist over here. Where name is equal to erosmith. Now typically in when people are teaching how to do SQL injection, what they'll do is they'll throw in dash dash. Okay. Dash dash is a comment character. So it's means that everything that comes after it is not seen by the database. So you know, the classic is or one is equal to one and this would be actually sending this back through a form and I'm just going to show you the classic SQL injection and then what these guys did, which is really quite different and quite advanced. So here this is this is the classic one that's taught in all hacking cybersecurity classes. I'm going to expand it a little bit. So here's a login form where it's asking us for a name and a password. What happens is that one can go ahead and put in their name and then use a single tick all right to close because the form has a single tick on its side. Right. They have to close the single tick and then go or now this is a logical or so it has to be either OTW is a user in the database or one is equal to one which is always true and then dash dash which means that everything that follows after it is going to be ignored. All right. This is the classic that is used everywhere to teach SQL injection. Now if I were to be able to if I'm building a web application and I don't want SQL injection to take place, what I will do is I will try to strip out these ticks and these dash dash what have you so they don't get past the form into the database. Unfortunately what happened is that in the case of MOVEIt they left the ability to put commas between the fields like commas between the fields and the the clap folks were able to exploit those commas by stripping out the commas and being able to do their own injection. Here's here's the horizon website. Okay. And this is these are the folks who were born the first to come out with a good analysis of it. Okay. Here you can see the path the SQL injection. So path that a vulnerable user get users with email address that's the that is the function that has a SQL in it that they are able to exploit and what they were able to do here's the email address here is that the function goes ahead and allows them to put here to his right down below here. All right. Select user name and you can see if you look closely that there are some commas. There are commas between the fields right here and what they did was able to exploit that and see it says right here. So the part of the query and email. Okay. Has been uncleaned argument. We didn't strip out and sanitize the input. The only copy is the injections that prior to the call the self provisions receipts variable is split on commas. Our injected SQL statement should avoid having commas to continue proper execution. We can work around needed meeting commas by reusing the SQL injection several times to do sequential statements such as insert and update. Now as we found as we see over here in the proof of concept here we go back here. That's what they're doing here is that they're going ahead and doing inserts and updates to the database and they're inserting themselves into the database. They're inserting themselves as users. They've created a fake token and then they inserted there and see right here insert into token ID values token ID and then they updated the user external tokens and then they've gone ahead down below and inserted into the database. They are IP addresses that you know this is a system that has white listed IPs that means that they only allow certain IPs to connect to this application. So what they've done is going to put in their own IP addresses so that it permits them to access this data that's built into the cloud-based database services and so this is a pretty sophisticated and took a fair amount of time for them to be able to find the SQL injection vulnerability. This is an example of improperly sanitized SQL where they tried to strip out any of the special characters but they missed what and as a result they were able to exploit this but once again this is years of work of trying to analyze this code to be able to find this one flaw in the way that they took the data that's input through the form and then sent it back to the database. So almost every form, every form would probably say pretty close to every form has to take the data that you put into the form and send it back to the database whether it's authentication or you're like searching for a product or you're searching for a particular customer. When you go ahead and do a search on the form to be able to find that a customer or a product then that's taking that information that you have put input into the form and then taking that and putting it into a SQL statement as an SQL query and pulling the data off the database and showing oh here's the product that will meet that criteria. Here's a customer that will meet that criteria. In the old days, it was pretty easy to be able to do SQL injection. The classic one is using that one is equal one is equal to one and using the dash dash but now people have gotten pretty sophisticated and are stripping out all of those SQL special characters but occasionally they make a mistake and here's an example of where they made the mistake and as a result, we have millions of dollars worth of extortion or ransom that's being paid to this particular Russian-speaking group. Now we say Russian-speaking group doesn't necessarily mean that they're Russian. There could be as many countries where Russia is still a primary language and many people, for instance in Ukraine, speak Russian and all the other Russian republics who are now free countries. Russian is still the dominant language but we don't know where these guys are from. The US government has offered a ten million dollar bounty to be able to identify them. This is pretty impressive work. This is an example of somebody spending years and years analyzing code to be able to find and in this case, they probably didn't have the code itself but what they were doing is they were probably simply sending inputs and one of the things that you do to find an exploit in any piece of software is what's called fuzzing and fuzzing is the process of sending random or semi-random inputs into an application to see if you can break it. That's fuzzing. There are lots of different fuzzing tools out there. My guess is that that's what these guys did, is that they fuzzed this and they fuzzed it for years using multiple types of input to be able to break this off. We're going to once you break it then you can analyze to see what caused it to break everything. We said this took them two years of doing this and it's not you know it's not a YouTube video or the TikTok video where it's 30 seconds or less to take over a Taiwan semiconductor or a BBC or British Airways this is years and years of tedious work that's involved in this. So this is real hacking. This is not TikTok hacking. Oh, we have a problem they're trying to stop me. It's okay if I can just get past their firewall we might have a chance. And this is where it takes a lot of really talented and smart people years of work to accomplish it. And it was caused the comma, right? That's that that was it. That was the door. The comma. It allowed the commas to be able to be passed exactly and they were able to exploit that to be able to do their own SQL injection and the injection is different than typically a hot and hacking class and that these are these are inserts and updates. I mean so when we go ahead and put a new line into a database it's an insert statement. Okay when we want to update the line in a database it's an update statement. So this is a little bit different than the query that we're working on the simple query we're working on here. So we can update the database if we have proper credentials, right? Do it update or insert and if you've ever looked at the code that creates a database it's full of inserts and updates and that's what these guys were doing. They were inserting themselves into the database that decided who could have access. So these were these were a database of authorized users and they put themselves in and then gave themselves permissions and put themselves on the IP whitelist so they could access the database and that's all you can find all of that in that proof and concept and I think that proof and concept we remember correctly comes out from the horizon as well you can take a look at it and analyze it yourself but here it is here it's a python script and then it starts off by just creating a bunch of functions. The guy who sends a POST request to get guest access ASPX with specific data, this data causes a guest access ASPX to generate a CSRF token for our current session. That's where they begin and they, you know, rather than go, it's wherever you might have a color, but where they end up is inserting themselves into the authorized user database and are able to act just like the root or sysadmin and do all of that that individual can do, and they just exfiltrated the data and then are holding it hostage until they get paid. I'll keep on the web, that's amazing. Thanks so much for the demo. I've got some questions, so you mentioned the two CVEs. You've shown us one, right? What was the second CVE, bot? The second CVE is similar to 2023 E35708. Let's put that up on the screen as well. It's another SQL injection. It's the same product at a different place, though. It says \"in progress move\" it, uh, transfer and gives you the version numbers. A SQL injection vulnerability is going to identify and move it, transfer web application that could allow an unauthenticated attacker to gain unauthorized access to move its transfer database. Very similar, but it's a different location. This was found about two or three weeks after the initial, and I think this one originally was, this one was found was not being exploited in the wild. It was actually one that was discovered by researchers while they were looking at the code and they were trying to figure out, you know, what had happened. I think a huntress is a company that actually discovered this particular vulnerability in the same code in the same product in a very similar way, just in a different place in the code. So this has been now it has been exploited, but, uh, move it or progress is trying to get everybody to patch. But as we know not everybody patches when new patches come out and sometimes people wait days week months and if obviously Taiwan, Taiwan semiconductor got hit today they know that they've got the software and they know a patch is out there but they haven't gone ahead and patched yet and they may end up paying as many as 70 billion dollars or 70 million dollars by the way if those who don't know Taiwan semiconductor Taiwan semiconductor is the largest semiconductor foundry in the world they're not necessarily a developer of chips they are a maker of chips they're like a manufacturer of chips so they've got huge revenues and they could pay a 70 million dollar ransom and we'll see if they do it's just i mean it what's so fantastic about this um video and i really appreciate you sharing is you've taken us from the look this is the theory this is what you learn in a class to here's it actually being used in the wild and um i think a lot of people make the mistake with like sequel injection and stuff saying this stuff will never happen i'll get these comments always on youtube this is so dumb it will never happen um for various technologies but here's an example of it actually being used at the moment. Exactly and what i've said before we've talked about previously is that these things you know were easy to do 20 years ago could you could do that simple sequel injection i mean i think i was able to do those simple sequel injections as little as like 10 years ago right there was still some websites that you could use those those simple sequel injections and get authorized on that particular website but most software today has been updated and proved and become more secure so you have to be more sophisticated it doesn't mean that it can't be done means that you need to up your game to be able to use that type of of a sequel injection but most websites know you're not going to be able to do one is equal to one dash dash and be able to authenticate yourself on the system you might find some i mean there's probably somewhere on the web some old website that somebody's left behind with old software and then you could do that but when you're talking about secure sites right then you got to get a lot more you you need to really up your game to be able to do an attack like this this like i said took at least two years probably with a dozen researchers working for two years to be able to develop this so the question is always how do i learn this stuff have you got a class because i know you run lots and lots of classes are you covering this in any of your courses well we do uh we do advanced web app hacking course that we just finished up and we did we focused on that class a lot of it on advanced sequel injection really not this sophisticated even even in that class it's an advanced web app hacking class and even at that we didn't get this sophisticated this is really this is state of the art this is you know this this is big time hacking this is APT type of hacking you know there's it like i said you you would have to spend years of research to be able to find this vulnerability but yeah we do have a class called advanced web app hacking we also have database hacking where we focus on sequel injection and there's lots of different sequel injection type of attacks this is kind of the state of the art the most sophisticated sequel injection you're going to see out there there are other sequel injection attacks you know there's there's this is the classic union statement just kind of give you a if you've ever been into a sequel injection class you know the classic is the union statement sometimes you can go ahead and stack statements on top of each other so in sequel we have the ability to be able to stack queries on top of each other all right so here we go union and what a union command does is allows you to take one query and stack it on top of another query and then sometimes in the form you can go ahead and connect one query to another query but there's the rules of it and the rules are that you have to have the queries have to have the same number of columns otherwise they'll throw an error but sometimes the error can be really useful to attacker one of the things that we teach people who are on the defensive side is do not allow error messages to get out because the error messages convey information that the attacker can use against you and union statements will throw an error message that if it is conveyed to the attacker gives them way too much information that allows them to effectively use a union statement so you can do this select star or whatever number columns that you want and from saying those have to be the same table can be a different table so we can go say let's go to the album table and then go where and let's see on the album we have columns are we've got title right so where title is equal to and then whatever title album title this allows us to connect okay two SQL statements together using the union and the union requires the same number of columns so here if we were running this we would likely throw a error message because we don't have the same number of columns and that error message is going to be able to use that to determine how many columns there are and then keep on sending these union statements to the back end database until you have the column numbers right and then essentially you can connect two SQL statements together to be able to access the data that you want and maybe even do an update or an insert like these folks did the clock so that's this is kind of this is kind of the next level of SQL injection using the union statement and it's oftentimes you need to spend a lot of time doing kind of kitten miss trial here to get the union right but when you do you can pull out all kinds of information and or do things like updates and inserts on the database or if you're just interested in doing a doc attack you can go delete the whole database or delete the table right and and so then you would just the system if you had system admin privileges you can delete the tables the database and do some serious damage to the company or the owner of the database you've got to tell me you've got some cool amazing courses or classes coming up soon right at the time of this recording we're in about July um yeah we have we have some interesting classes coming up we have in July we have SDR for hackers where we're going to be able to use a software to find radio to be able to intercept cellular and satellite signals or we're going to be doing it advanced SDR for hackers in 2024 we have AI for cybersecurity coming up in September we have Bitcoin forensics coming up I think in December we have AI for cybersecurity in September we have Android hacking coming up in October and that's where we'll be looking at Pegasus and Pegasus twin for Android there we'll be building a FEMTO cell in December FEMTO cells you remember we did a mr robot on it where a FEMTO cell are what often referred to as cell extenders so people who can't get cellular service the the companies the cell companies sell a little product that essentially becomes a mini cell tower a mini cell tower that then connects their cell signal to the internet and back to the back end of the cell system those can be really effective hacking devices and they were used for instance in Pegasus the folks who did the Pegasus when they sold Pegasus to NSO group sold Pegasus to certain countries it initially required that the individual had to click on a link and sometimes people like you and I are careful won't click on the link but if they put a FEMTO cell or stingray nearby then it doesn't require any type of link because they're going to they're going to capture your cell signal right when they capture your cell signal then they can manipulate it in any way possible so we're going to build a FEMTO cell in that class we'll also be working on building stingrays as well which is the ability to be able to capture cell signals from any distance analyzing the SS7 flaw in the cell system mobile system has this big plot it called SS7 where the cell systems connect and that's often exploited by hackers to be able to for instance intercept two factor authentication yeah a bunch of bunch of interesting things coming up and hopefully people find them interesting I find them interesting I, I design classes the things that I'm interested in so other people might not be interested in it but it's the stuff that I'm interested in that we we design classes around that and I love it I mean I'm so grateful that you share a lot of that on YouTube so if everyone is watching occupied the web and I've discussed a bunch of topics one of the ones I know that a lot of people have asked for is Bitcoin tracing because that's something we we spoke about previously but this was like in the news that we decided to do this video first put it put in the comments below any topic that you want us to cover it's fantastic to be able to tap into OccupytheWeb's experience and knowledge so that we can all learn from him OccupytheWeb as always I really want to thank you for sharing thanks so much for putting this together so quickly oh of course I always enjoyed being here David and I thought this was a really timely subject with this this attack going on right now live and so I wanted to kind of help people understand what was going on in this this kind of mind blowing earth shattering a talk that's taking place but in our industry mind blowing earth shattering are every day occur exactly exactly",
    "transcript_keywords": [
        "SQL injection",
        "SQL",
        "database",
        "injection",
        "SQL injection vulnerability",
        "people",
        "SQL statements",
        "SQL injection statements",
        "Taiwan semiconductor",
        "years",
        "find",
        "sequel injection",
        "put",
        "lot",
        "web",
        "companies",
        "hacking",
        "classic SQL injection",
        "simple SQL injection",
        "SQL commands"
    ],
    "transcript_entity_values": [
        "YouTube",
        "us millions of dollars",
        "$70 million",
        "70 million dollar",
        "2021 2006",
        "No Starch Press",
        "CSRF",
        "youtube",
        "two",
        "Siemens Energy",
        "Linux Basics",
        "Siemens, Schneider Electric",
        "a dozen",
        "second",
        "YouTube",
        "2500",
        "Pegasus and Pegasus",
        "Ukraine",
        "at least two",
        "Linux",
        "Network Basics for Hackers",
        "December",
        "Russian",
        "30 seconds",
        "Bitcoin",
        "2024",
        "David Bombal",
        "POST",
        "about 2100",
        "CVE",
        "about July",
        "months",
        "July 2021",
        "Android",
        "Oracle",
        "ASPX",
        "Clop",
        "9.8",
        "780",
        "millions",
        "Moveit",
        "the end of May",
        "70 million dollars",
        "today",
        "OTW",
        "Clops",
        "about 500",
        "one",
        "Cybersecurity",
        "this is",
        "Britain",
        "OccupytheWeb",
        "YouTube",
        "DevOps",
        "two years",
        "ASPX",
        "first",
        "UCLA",
        "British Airways",
        "Russia",
        "Taiwan",
        "2023 34",
        "Airlingus",
        "300",
        "two years ago",
        "September",
        "Amazon",
        "BBC",
        "terabytes",
        "years",
        "late 2024",
        "2023",
        "this morning",
        "David",
        "Juniper",
        "IP",
        "2000",
        "Pegasus",
        "Reddit",
        "the Cyber Warrior Handbook",
        "SQL",
        "July",
        "50",
        "the old days",
        "SDR",
        "as many as 70 billion dollars",
        "days week months",
        "TikTok",
        "at least two years",
        "Russian",
        "US",
        "CESA",
        "10",
        "next year",
        "millions of dollars",
        "Taiwan Semiconductor",
        "DBB",
        "the other day",
        "Huntress",
        "20 years ago",
        "One",
        "10 years ago",
        "Juniper",
        "Movit",
        "a few days ago",
        "Aerosmith",
        "Kali",
        "ten million dollar",
        "a year",
        "GUI",
        "weeks",
        "OccupytheWeb",
        "about 150",
        "Azure",
        "FEMTO",
        "about two",
        "NSO",
        "October",
        "Shodan"
    ],
    "transcript_entity_types": [
        "GPE",
        "MONEY",
        "MONEY",
        "MONEY",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "GPE",
        "CARDINAL",
        "GPE",
        "ORG",
        "DATE",
        "NORP",
        "TIME",
        "NORP",
        "DATE",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "DATE",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "DATE",
        "MONEY",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "DATE",
        "GPE",
        "GPE",
        "PERSON",
        "ORG",
        "DATE",
        "ORG",
        "ORDINAL",
        "ORG",
        "ORG",
        "GPE",
        "GPE",
        "DATE",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "CARDINAL",
        "TIME",
        "PERSON",
        "FAC",
        "ORG",
        "DATE",
        "ORG",
        "GPE",
        "PRODUCT",
        "ORG",
        "DATE",
        "MONEY",
        "DATE",
        "ORG",
        "CARDINAL",
        "DATE",
        "ORG",
        "DATE",
        "LANGUAGE",
        "GPE",
        "ORG",
        "CARDINAL",
        "DATE",
        "MONEY",
        "ORG",
        "ORG",
        "DATE",
        "PRODUCT",
        "DATE",
        "CARDINAL",
        "DATE",
        "LOC",
        "PERSON",
        "DATE",
        "ORG",
        "PERSON",
        "MONEY",
        "DATE",
        "ORG",
        "DATE",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "DATE",
        "PERSON"
    ]
}