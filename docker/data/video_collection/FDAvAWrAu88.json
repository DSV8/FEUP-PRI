{
    "id": "FDAvAWrAu88",
    "title": "Facebook and BGP ðŸ˜‚ Fake route injection // Python Scapy DOS script EP 3",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-11-03T14:21:23Z",
    "video_url": "https://www.youtube.com/watch?v=FDAvAWrAu88",
    "category": "Science & Technology",
    "tags": [
        "facebook",
        "bgp",
        "bgp facebook",
        "scapy",
        "scapy bgp",
        "facebook down",
        "scapy tutorial",
        "kali linux",
        "scapy python",
        "python scapy",
        "ethical hacking",
        "scapy kali linux",
        "python hacking",
        "scapy in python",
        "scapy python 3",
        "scapy packet crafting",
        "scapy python3",
        "kali linux python",
        "hack cisco router",
        "scapy tool",
        "scapy sniffing",
        "hack cisco",
        "scapy python 3 example",
        "scapy python 3 tutorial",
        "hacking cisco",
        "hacking",
        "bgp hack",
        "bgp hijacking",
        "bgp protocol",
        "ccna",
        "hacker",
        "how to hack",
        "infosec",
        "python"
    ],
    "views": 43266,
    "likes": 2015,
    "comments_count": 128,
    "description": "Simple script to DoS Facebook by injecting fake BGP routes into the BGP routing table of a live BGP router.  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on Facebook or Internet BGP routers. I demonstrate in this video how Python and scapy can inject fake routes into BGP routing tables if BGP routers are not hardened. See the links below on how to protect your routers.  In other videos in this series, I showed you how to remove routes and reset BGP neighbor relationships.  You need to learn to code! Learn Python. Learn Networking. You are going to be very powerful and very scary if you combine knowledge of networking with Python scripting! But, do good.  Learn to code. Learn Linux. Learn Networking.  // MENU // 0:00    Introduction  0:23    Facebook BGP issue 0:45    Add fake routes = routing loop 1:25    lol.... routing loop 2:26    Be warned 3:19    Routing tables before script 4:05    Why we need to two routers 4:25    Cisco ISR router 4:48    Kali and Python script 5:28    Python script details 11:38  Create Python script on Kali Linux 12:15  Run Python script 12:56  Verify new route in routing table 13:40  Verify connectivity to Facebook 13:55  Change Python script 14:33  New Python script 15:00  Test Python script 15:12  Issue with BGP and script 15:58  Test script again 16:46  Successful routing table update 17:05  Facebook is not available (routing loop) 18:54  BGP is important!    // BGP MUSIC // You down with BGP:   // SCRIPTS // DoS BGP network:   Previous BGP video 1:  Previous BGP video 2:   Playlist:   // SCAPY RESOURCES // Website:  Documentation:   // SCAPY INSTALLATION // sudo apt update sudo apt install python3-pip sudo pip3 install scapy  // SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // BGP RESOURCES // NSA:  Cisco:  AWS:  Juniper:  NSRC:  Internet Society:     python bgp facebook bgp facebook meta bgp meta scapy ccna bgp scapy scapy bgp routing cisco routers fake cisco routers fake bgp routes cisco bgp cisco bgp routes fake router fake routers in network fake routes route injection python scapy ccna 200-301 python scripts kali linux linux kali kali linux 2021.3 kali linux 2021 oscp ceh security+ pentest+  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #hacking #python #bgp",
    "description_links": [
        "https://www.youtube.com/watch?v=RT-1DU33xIk",
        "https://davidbombal.wiki/bgpupdate",
        "https://youtu.be/39DGVpMt7eQ",
        "https://youtu.be/IFYBIjjXLbQ",
        "https://davidbombal.wiki/scapy",
        "https://scapy.net/",
        "https://scapy.readthedocs.io/en/latest/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://www.nsa.gov/Portals/70/documents/what-we-do/cybersecurity/professional-resources/ctr-guide-to-border-gateway-protocol-best-practices.pdf",
        "https://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html",
        "https://docs.aws.amazon.com/directconnect/latest/UserGuide/limits.html",
        "https://www.juniper.net/documentation/en_US/junos/topics/topic-map/bgp-tcp-sessions.html",
        "https://nsrc.org/workshops/2017/apricot2017/bgp/bgp/preso/05-BGP-BCP.pdf",
        "https://www.internetsociety.org/deploy360/securing-bgp/"
    ],
    "transcript": "- In this video, I'm gonna show you how to add a fake router to a BGP routing table and cause a routing loop between two routers. By doing this, I'm gonna stop devices from accessing websites such as Facebook. You down with BGP Yeah, you know me You down with BGP Yeah, you know me You down with BGP Yeah, you know me Who's down with BGP Every ISP You probably know about the incident recently with Facebook, where BGP routes were removed from the global internet routing table, and Facebook was basically taken offline for a period of time. It affected Facebook, Instagram, WhatsApp, as an example, and that's before the name change to Meta. Not sure if that's gonna help them solve these kind of problems in the future, but in this video, once again, I'm gonna show you how to add fake routes to a BGP routing table so that I can cause problems. So in this example, I'm gonna cause a routing loop between two routers in my typology. I have a router, 192.168.1.249, and that is the router that takes me to the internet or gives me internet connectivity. I've got another router, 192.168.1.246, that's the router on my desk here. Those routers have formed a BGP neighbor relationship. They are exchanging routes between each other, but what I'm gonna use is Kali and a simple Python script to inject fake routes into the routing table of one of the routers, in this case, 249, and cause a routing loop between those two routers. Basically, I'm gonna tell 249 that 246 has this route to get to Facebook, but 246, this router on my desk, sees 249 as its default gateway so 249 is advertising a default route to this router. So basically, I'm gonna inject a fake router into one of the routers, it's gonna see the other router as the best path to get to Facebook, but that router sees the first router as the way to get to Facebook. So they're just gonna bounce traffic between them and I'm gonna cause this routing loop. BGP is a very important writing protocol. The internet runs on BGP. If you didn't think that BGP was important, remember how Facebook went down. Because Facebook stopped advertising its networks to the global internet, basically all routes to Facebook were removed, no-one could access Facebook. Now, if you enjoy these types of hacking videos, please like this video, please consider subscribing to my YouTube channel and clicking on the bell to get notifications. That really does help me with the YouTube robots. I have created an entire series showing you how to hack networks using Python and Scapy, and this is just another example. But be warned that this is a more complex topic. If you really wanna understand all the details of the script that I've created, where I'm changing things such as MED or local preference or AS path, you need to have an understanding of BGP. But even if you don't understand BGP in a lot of detail, hopefully this shows you how important it is to learn Python. Python gives you a lot of power. Scapy makes it really, really easy to inject fake frames or fake packets into a network and do things that you shouldn't be able to do. Okay, without further ado, let's get started. How many people got a phone without a data plan How many people live their life like all the Amish can Well if you do, then you don't need the internet at all But otherwise, use your protocol You down with BGP Yeah, you know me Okay so once again, I've got two routers, 246, 249. Let's connect to 249, which is my internet router. I'll login, make this bigger. So show IP BGP. This command shows me the BGP routing table of this router. This is a Cisco router, 1941 router, once again connects my home network to the internet. It's got a default route to another router that's basically my ISP router, the way that this router gets to the internet, but my entire home network is behind this 1941 Cisco router. It's also learning some routes from 246. So for this hack to work, we need to mimic a session between two routers, and that's why I've got two routers in this topology. Have a look at the previous videos in this series if you wanna see more about the topologies, more about how I've set up the switch so that I can intercept packets between the routers. You need to have an established neighbor relationship between two routers, and then what we're gonna do is forge packets from one of those routers. This is not such an easy task to accomplish, but it is possible to inject fake packets into the network using Python and Scapy. Okay, so 246, that is once again this ISL router on my desk, Cisco Router, show IP BGP. It's got a default route to 249. So I'm gonna use Kali and my Python script to inject a fake route into the routing table of that router. In this case, the fake route that we're gonna inject is 12.12.12.12/32. That'll just be our first test and then I'll show you how to inject routes to Facebook to manipulate the routing tables and create a loop. At the moment, notice 12.12.12.12 does not exist as a route in the routing table of the ISR. It also does not appear in this router, which is our router, once again, to get to the internet. So on Kali, which is running in a virtual machine on this Windows computer, I'm going to run this Python script. So I'll talk quickly through the Python script and then I'll show you how we can inject this fake route. First thing we're doing is importing Scapy. Scapy is really powerful. Allows me to create all kinds of packets. Have a look at this series of videos where I show you a whole bunch of Scapy attacks. We're going to load BGP because we want to manipulate BGP in this example. We're gonna capture a packet where the destination address is 192.168.1.249, and it's a TCP packet. BGP uses TCP port 179, so I'm gonna capture a single BGP packet. We're gonna create a loop, and then I'm gonna create a new ethernet frame. I'm gonna set the destination and source of this new ethernet frame to the one that's captured. I'm gonna set the ethernet frame type, I'm gonna set the TCP port number, source port number, to the packet, I'm gonna set the TCP sequence number, I'm gonna set the acknowledgement number, I'm gonna set the source and destination IP address to the same as the packet that we captured. So basically, we're capturing a packet off the wire. This laptop is doing that. Once again, I've explained that in a previous video so I won't talk about it now. And then what we're gonna do, and this is quite difficult, it took me a while to create this. The documentation on Scapy isn't that good. A lot of you have asked me about Scapy documentation. Sometimes you just have to try things. Documentation isn't that great. You will find examples of Scapy and BGP on the internet, but they use Python 2.7, rather than Python 3. I'm using Python 3 here, and I just set a whole bunch of options to get this to work, including resetting or deleting some of the length attributes because otherwise, Scapy wouldn't send the packet. But what we're doing here is setting the BGP origin. So the BGP path attribute that we setting is BGP origin to IGP, so network command was used. We're setting the AS path to none as if it originated locally. We set the next hop to 192.168.1.246. So basically, I am setting the next hop to the route in my topology. Now, if you use a different network to what I'm doing here, you'll have to set the IP address correctly so set it to what your network is using. I'm setting the MED, or multi-exit discriminated, to 0, and I'm setting the local preference to 100. So basically, these are BGP attributes that you would typically find in a route that's advertised. So you can see a whole bunch of flags here such as some of them are transitive, BGP MEP is optional. We've got the type codes set here, so ORIGIN, AS_PATH, NEXT_HOP, multi exit discriminator, local preference. And then what I'm gonna do now is create a BGP packet based on the frame that we've captured and this new information. So BGP update, we're setting the source IP address to the IP address that we captured, destination to the destination IP address that we captured, time-to-live is set to 1. This is layer three. Notice line continuation, and this forward slash means that we now configuring the next layer in Scapy. So in this example, it's TCP, I'm setting the source and destination port numbers to those that we captured from the packet, the flags I'm setting to PA, I'm setting the sequence number to the sequence number that we captured up here. Notice sequence number is being incremented. Because I'm sending additional packets into the network, I'm gonna increment or change the TCP sequence number, and hopefully hit a sequence number that's valid. Set the acknowledgement number to the acknowledgement number that was captured. BGP header now, so this is the next layer, so notice layer three, IP, layer four, TCP. Now we're BGP, so layer seven, if you like. And we won't get into discussion of the different layers because people like to have arguments about where does a protocol reside? For now, we'll just say BGP is an application at layer seven. The marker, we set to this. This is a decimal equivalent of a bunch of Fs. Type is an update, this as an update packet, we wanna update to the BGP routing table. Next layer is BGP update. Withdrawn routes is set to none, but notice path attribute is set to the values over here. So setORIGIN, setAS, setNEXTHOP, setMED, set local preference. And the route that we're going to update here is an IP version 4 route, and that's the prefix. So if you wanted to change the route that you're gonna update, you would simply change the value here, change some of the other values, such as the next hop. Here, I'm gonna show the BGP packet that we've created just so we can see the output, and then I've found that you often need to delete some of the values because Scapy, in Python 3, doesn't calculate those values properly, so I'm simply deleting some of those attribute length values to make sure that it's recalculated and then I'm sending the packet. So sendp means layer two, so I'm sending a layer two frame and a BGP update. So layer two frame is frame1 that we created up here. So layer two, and then I am stacking my BGP update on top of that. That BGB update contains layer three, layer four, layer seven. And that's then being sent into the network. Multiple packets will be sent in this example. Okay, so there's our script. Let's see if it works. So I'll copy that script, and in Kali, I'll open up a terminal. ls shows me that I've got BGP Python scripts from previous videos here, but what I'm gonna do now is create a new Python script, bgphack3, and I'll paste in that script and I'll exit. Okay so once again, back on the router, show IP BGP, we don't have a 12 network in the routing table at the moment. sudo python3 bgphack3, that's the script that we're gonna run. Put in my sudo password. Now, BGP doesn't send a lot of traffic into the network. I can see using this command that I've got a neighbor relationship to 246. It's been up for an hour and 21 minutes. Now, when those two devices send traffic to each other, you can see that a packet was sent into the network. So as an example, notice there's the marker of all Fs. You can see the BGP route with the next hop information and, scrolling down, the actual route. So previously, we didn't have network 12 in the BGP routing table. Show IP BGP now shows us that that route has been added to the BGP routing table of this router. So again, previously it looked like that. Relationship has been been up for an hour and 21 minutes. Now the route has been added to the routing table, and if I type show IP BGP summary, time has incremented. So the relationship has stayed up and I've been able to add a fake route to the BGP routing table of this router. So simple as that to add a BGP route to the routing table of a BGP router. Now on my Mac, let's ping facebook.com. Facebook has been resolved to this IP address, 157.240.214.35. So what I can do is go into my script, and what I'll do is change that to 157.240. 214, I'll make this a 0, and make the mask /24. So /24 mask here, 157.240.214.0 is once again the IP address that Facebook resolved to. And I can ping Facebook from my Mac. What I'll do is copy this script and in Kali, let's create a new script called bgphack4, and I'll paste that scripting and I'll save the script. What we're gonna do now is run that script. But before I do that, I'll set up a continuous ping to facebook.com on my Mac. Press enter now and hopefully what should happen is that route should be added to the BGP routing table. Show IP BGP. Now this can happen. It looks like the neighbor relationship has been reset. I should have done a term mon but show IP BGP. Sometimes this happens where, if the router doesn't like the sequence numbers, it'll reset the neighbor relationship, but what I just did there is kill the BGP relationship. You can notice that the uptime for the relationship is now 14 seconds whereas previously, it was an hour and 20 minutes. So you can do like a denial-of-service attack by sending packets that the BGP router doesn't expect. Now, it still works in this example because that router has a default route to the internet, but let's see if we can run that again. So I'll run the script again. Okay, didn't work in this example. Let's try again. Now, tip with this kind of stuff. If it doesn't work, try again. It might not always work the very first time you try it. So BGP relationship. So that router's not in the routing table. We're at a minute and 43 seconds for the neighbor relationship. Hopefully, what will happen is the two routers will exchange routes. And there, they've just done it because we've sent to that packet. Relationship is still up. Show IP BGP. Notice router's in the routing table, and I'll just stop this. Notice I can't ping Facebook any longer. I'm getting Redirect Host. So if I try and ping again, and I'll just clear this to make it easier to see what's going on. Notice I can't get to facebook.com. I've caused a routing loop here and I can prove that by typing traceroute and facebook.com, and what you'll notice is it's just bouncing between those two routers, that is 246, 249, and I'll stop that. 246, 249. 246, 249. I've caused a routing loop now where any traffic that this Mac sends to Facebook.com is simply gonna be looped between those two routers. And if I try and do a ping again, notice the ping just fails. That's because, once again, I added this route to the BGP routing table of this router, telling it, to get to Facebook, it needs to go to 246, but if I look at 246, the router on my desk, show IP BGP, it's got a default route to 249. So 249 thinks that to get to 157.240.214.0/24, it needs to go to 246, this router, and this router thinks it needs to go to that router, and that router thinks it needs to go to this router. So we just have this loop of traffic between the two routers. So in my browser, if I try and go to facebook.com, notice I can't get there. Again, facebook.com. Error, unreachable. Site is not available because I have created this loop in the topology. I have essentially stopped all devices in my home network from getting to Facebook by injecting a fake route into the BGP routing table of a router. Because of the recent issues with Facebook, a lot of people have realized how important BGP is, and hopefully you've seen the same. BGP is extremely important. It runs the internet. It's the routing protocol that manages the internet. And hopefully this little demonstration has shown you what's possible using Scapy and Python. It took me a long time to write the script once again, because the documentation is quite poor, and all the examples I could find were with the older versions of Python, not Python 3. (techno music)",
    "transcript_keywords": [
        "BGP",
        "BGP routing table",
        "BGP routing",
        "router",
        "BGP Yeah",
        "routing table",
        "Facebook",
        "Python",
        "BGP Python scripts",
        "routing",
        "BGP router",
        "route",
        "routers",
        "BGP packet",
        "BGP update",
        "Scapy",
        "BGP route",
        "show IP BGP",
        "table",
        "Python script"
    ],
    "transcript_entity_values": [
        "first",
        "ISP",
        "157.240.214.0/24",
        "BGP header",
        "three",
        "12.12.12.12/32",
        "Facebook",
        "Mac",
        "ISR",
        "Python 3",
        "BGB",
        "router",
        "IGP",
        "246",
        "Cisco",
        "Python 2.7",
        "Amish",
        "BGP Every ISP You",
        "BGP MEP",
        "seven",
        "157.240.214.0",
        "12",
        "two",
        "four",
        "4",
        "249",
        "Instagram",
        "192.168.1.246",
        "Scapy",
        "AS_PATH",
        "an hour and 20 minutes",
        "TCP",
        "facebook.com",
        "Notice",
        "BGP",
        "YouTube",
        "3",
        "Facebook.com",
        "Fs",
        "Meta",
        "14 seconds",
        "MED",
        "IP",
        "Kali",
        "Python",
        "NEXT_HOP",
        "setMED",
        "Mac",
        "Facebook",
        "bgphack4",
        "BGP Python",
        "one",
        "a minute and 43 seconds",
        "192.168.1.249",
        "Python 3",
        "python3 bgphack3",
        "frame1",
        "Python",
        "0",
        "100",
        "TCP",
        "an hour and 21 minutes",
        "Cisco Router",
        "First",
        "179",
        "Windows",
        "Scapy",
        "192.168.1.246",
        "1",
        "214",
        "1941",
        "BGP",
        "ISL",
        "157.240.214.35",
        "157.240",
        "WhatsApp"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "NORP",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "NORP",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "DATE",
        "PERSON",
        "PRODUCT",
        "TIME",
        "NORP",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORG",
        "TIME",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "GPE",
        "PERSON",
        "PERSON",
        "PERSON",
        "PERSON",
        "PRODUCT",
        "CARDINAL",
        "TIME",
        "DATE",
        "ORG",
        "PERSON",
        "ORG",
        "WORK_OF_ART",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "TIME",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "PRODUCT",
        "ORG",
        "DATE",
        "CARDINAL",
        "ORG"
    ]
}