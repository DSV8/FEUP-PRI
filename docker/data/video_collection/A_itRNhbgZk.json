{
    "id": "A_itRNhbgZk",
    "title": "Extract iPhone and Android EXIF metadata from online photos using PYTHON // OSINT with Kali Linux",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-12-05T15:00:06Z",
    "video_url": "https://www.youtube.com/watch?v=A_itRNhbgZk",
    "category": "Science & Technology",
    "tags": [
        "python",
        "exif",
        "osint",
        "iphone",
        "android",
        "exiftool",
        "exif data",
        "exiftool kali linux",
        "exif data iphone",
        "exiftool mac",
        "exif data android",
        "exif viewer",
        "gps",
        "gps data",
        "iphone gps tracker",
        "iphone gps",
        "android gps",
        "apple gps",
        "exof",
        "osint tools",
        "osint python",
        "python hacking",
        "hacking",
        "ethical hacking",
        "hacker",
        "data from images",
        "metadata",
        "meta data",
        "geotags",
        "gps coordinates",
        "gps coordinates app",
        "gps coordinates iphone",
        "photo location",
        "exif data online",
        "exiftool windows",
        "kalil inux"
    ],
    "views": 191899,
    "likes": 9345,
    "comments_count": 366,
    "description": "Can you find out the locations of my photos? Put it in the comments below.  You need to learn to code! Learn Python. You are going to be very powerful and very scary if you combine knowledge of IT with Python scripting! But, do good.  // MENU // 0:00  Introduction - why this is important 1:19  Why you want to use this Python Script  1:52  Online Example  2:35  Python exe file version for Windows  2:59  Demo of extracting exif data 6:08  Script versus other applications 7:09  Python exif csv script 7:45  Remove exif data Python script 9:07  Python is not installed on the Windows computer 9:39  Python demo on Kali Linux - installing required software 12:20  Create Python script on Kali Linux  13:40  exif script demo on Kali Linux 14:36  Remove exif script demo on Kali Linux  // PHOTOS // Check my photos here:   // SCRIPTS // Python Exif script:  Python Exif CSV script:  Python Remove Exif script:   // SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  python exif osint iphone android exiftool exif data exiftool windows 11 exiftool kali linux kali linux exif data iphone exiftool mac exif data android exif viewer gps gps data iphone gps tracker iphone gps android gps apple gps exof osint tools osint python python hacking hacking ethical hacking hacker,data from images metadata meta data geotags gps coordinates gps coordinates app gps coordinates iphone photo location find photo location exif data online   Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #exif #osint #kalilinux",
    "description_links": [
        "https://www.flickr.com/photos/194419969@N07/",
        "https://davidbombal.wiki/pythonexif",
        "https://davidbombal.wiki/pythonexifcsv",
        "https://davidbombal.wiki/pythonexifremove",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal"
    ],
    "transcript": "- Do you know where these photos were taken? No, do you know exactly where these photos were taken? It's really important that you strip the Exif data from your photos if you upload them to file sharing websites such as this or to other websites on the internet. You probably don't wanna share your GPS location information with the entire world. Here's a real world example. VICE went and found John McAfee, who was hiding from the authorities, and they uploaded a photo, but someone made a mistake and the Exif data was available on the photo. Very shortly after this, John McAfee was arrested by the authorities. Now some websites such as Instagram and others will strip the Exif data when you upload the photo. But that raises another question. Do you trust Facebook? Do you trust Instagram with your location data? Your GPS data is stored within photos, such as these on platforms such as Flickr and other websites unless it's stripped out. (logo sound) Now if you enjoy of these types of ethical hacking videos, please like this video, consider subscribing to my YouTube channel and clicking on the be to get notifications that really does help me with the YouTube robots. I upload a whole bunch of ethical hacking content to my YouTube channel. So if you're into ethical hacking, why not subscribe to my YouTube channel. In this video, I'm gonna share a simple Python script to extract Exif of data. This is metadata attached to photos that you may upload online and can include a whole bunch of information, including GPS information. This type of information can be very valuable when doing an OSINT investigation or can be used by authorities to track people down or could be used for malicious purposes. Be careful uploading photos to websites, such as this example, Flickr. This is an older file sharing website because Exif data is contained within the photo. As an example, this photo just shows me on an airplane. So some kind of photo with me sitting in an airplane, but if I scroll down here, you can see the phone that took the photo. That's actually this phone. So this phone took that photo using the front facing camera. You can see other information, including the ISO and other photo settings. Show Exif data, shows me that this is a JPEG photo, shows me the resolution, shows me the software, shows me the date and time when this photo was taken, but it also includes location data if that's not stripped out. So I'm gonna show you this Python script that allows me to very easily extract the data. But what we've also done is create an executable file of this Python script. And I'll show you in a separate video, how you can take a Python script and make an EXE so that it can run on windows or as an example, a DMG file so that it can run on a Mac. You can very easily compile your Python scripts. But as an example, I'll double click on Exif.exe. The application runs; that's once again, this little Python script. There's the logo, but here it's running as an EXE. We prompted, do we wanna store the information in a file or show it on the terminal? So at the moment, notice we've got three EXE files here. We can store the information in the CSV. That's a second Python script that I'll show you and I'll show you how to remove the Exif data, but we don't have any other files. But when I run this application and push the data to a file, notice we have Exif data .txt here, and I'll open that up. And what you can see is a whole bunch of information about the photos, including a link to Google Maps. And what I've done here, is download all the photos from Flickr. So the photo that I'm interested in is this one, ending in three double nine. So I'll find that photo. There's all the Exif data. You can see the model of photo. Once again, you can see the version, but the piece that we're probably most interested in for this demonstration is the Google Maps link. And if I right click on that and open that link, you can see that it opens Google Maps and takes me to where this photo was taken. So this photo was taken in an airplane at San Jose International. At the time I was visiting Cisco in San Jose. And as you can see, there is the information about the photo. Now the script has the Exif data for all the photos that I've downloaded. You need to download the photos and put them in an images sub directory, where these EXEs are stored. The application or Python script will show all the Exif data for all the photos in that directory. So here's the first one. I'll open that link up. And that takes me to a stone circle near Keswick in the Lake District in England. So if I zoom out here, Keswick is the closest town to the stone circle where the photo was taken. That photo is the one that ends in B underscore zero in the images directory, that's this photo. So you can can see that that photo was taken by me after the stone circle. And what I could do as an example is have a look at the location where this photo was taken. And there you go, an example from Google Maps. Now you do find other applications out there that can extract information. You can even upload photos to a website on the internet. That'll give you the Exif data. I personally wouldn't wanna just upload my photos to a website to find the Exif data. I'd prefer to have a local application that I can control such as this Python script and I can enhance and do more things with. As an example, to simplify things and allow us to just use the URL on Google Maps, we've had to adjust some of the information. So in the Python script, we've had to make adjustments to the GPS coordinates to make it simple to simply click and go to the link. Other applications will require you to copy the GPS information. This just shows you an example of the power of Python. If you combine Python with other knowledge that you've got, you can do many, many things. And this is just an example of that. So the first Python script will extract all the Exif data and put it in a text file or display it to the screen. We've created another Python script that takes the Exif data and puts it into a CSV file. In this example, we have the compiled version of that. If I open up the created CSV file, there's all the Exif data in a CSV file. You can see the phone information once again, and scrolling down, you can see the Google Maps link, and you could click on that to find the location information on Google Maps. Now the third Python script that we created is to remove Exif data. So here's the executable version of that. Double click on that. Application runs, takes a while and then it closes. If I delete the Exif data and run the Exif tool again and try and get to the data, notice when I open the file, there's no data. The data has been stripped. So I've effectively removed all the Exif data and that's probably what you wanna before you upload your photos to some kind of photo sharing website or onto the internet somewhere. I'll copy the original photos back into the directory and I'll delete the Exif data file and run exif.exe again. So I'll restore the original files and notice all the Exif data is now available. So there's a demonstration of the Python scripts that allow me to extract Exif data into a text file or to the terminal. I can output that information to a CSV file and I can also strip the Exif data information. I've got three scripts: exif.py, exif_csv, and remove_exif. Now this Windows laptop doesn't have Python installed. I can't run these scripts. Python is not installed. So what we've done is create EXEs that allow you to run executable versions of the Python scripts. As an example, if I open up a terminal and type Python, you'll notice it takes me to the Microsoft Store because Python is not installed on this computer, but I'll still able to run the executables because these are compiled versions of the Python scripts. But now let's have a look at the Python scripts themselves. And in this case, what I'm gonna use is Kali or Kali Linux if you prefer. In this example, it's 2021.3 of Kali, and I'm gonna show you how to run these scripts. Now you need to run these two commands for the script to work. You need to install Pillow and you need to add JPEG files to the images directory. Now, for this example, I'm using this Flickr account where my photos are stored. Please don't go and use these scripts on people's photos if you don't have permission. So use this information ethically. Only use these scripts on your own photos or photos that you have permission to test them against. Feel free to use them against these photos that I've uploaded. Now let's see if you can work out where these photos were taken. Put in the comments below the location of these six photos. I've already given you the location of two photos, but as a challenge to you, put the location information below, like the closest city or the closest village or town where these photos were taken. Whereabouts where these two photos taken. There's some hints here. You can see some volcanoes in the background, but where did I take these two photos? Okay, so in Kali, I'm gonna open up a command prompt. Alice shows me that I have no files in this directory. Python 3 is however installed by default in Kali. In this example, it's 392. So what I'm gonna do is copy this command: Python3 -m pip install upgrade pip. Before I do that, I'll type sudo apt update to update my references. Put in my Kali password. Okay, so that's done. I'll paste in that command. Okay, no module named pip found. So let's do sudo apt install Python3 pip. Run the command again. Python3 -m pip install upgrade pip. Okay, that looks better. And then we're gonna install Pillow. Okay, so prerequisite software is installed. Now we can create the script. So I'll copy the script. Now we've put a lot of comments in the script, so I'm not gonna try and go through the script line by line, lots of comments available in the script to explain what it does. So let's create a file. I'll use nano because it's an easy to text editor. Exif.py. I'll paste that in. Exit out. Python3 exif.py. Now before I run the script, you need to have the images in the images sub directory. So I've already done that. I've downloaded the files from Flickr to the images directory. So notice under Kali images. There are the photos just like I had in Windows. Now you don't have to use Kali for the Python scripts. You can run the scripts on Windows, but that means that you have to install Python on Windows. But in this example, I wanted to show you that I'm not running Python on Windows. I'm running it in Kali, within a virtual machine. But you could run these scripts on Windows if you prefer. So I've already downloaded those files. So I'll say Python3 exif.py, and I'll push this information to a file. Alice shows me the Exif data file. So I could use less Exif data to view the data. And as an example, there's the Google Maps link and I'll open that link. And there you go. The first photo is the photo from South Africa. That photo is taken at Fort Schanskop in South Africa. This is in Pretoria. So as you can see, the Zuid-Afrikaans Hospital is there. There you can see it says Pretoria Central. Okay, now to remove the Exif data, we've got a remove Exif data script, so I'll copy that in Kali. Previously, the Exif data file displayed the Exif data when we ran the Exif Python script. So what I'll do is remove the Exif data file. So that's gone now. And what I'll do is create a remove Exif data Python script, and I'll paste that script in. I'll save that, so at the moment, we've got two Python scripts. This is the one we wanna run. Before I do that, I'll run Python3 exif.py just to show you that the file exif_data contains the Exif data at the moment. I'll remove that file once again. So file is gone. And I'll run Python3 remove_exif.py. Script runs for a little bit. You just need to wait for it to strip all the Exif data. And once it's run, it'll break out. So script is run. Let's run Python3 exif.py. Put that to a file, less exif_data. Notice no Exif data exists. We have stripped all the Exif data from the image files. Now in some cases, the image file is rotated, but you can fix that. But notice if I look at the properties of this file image, I don't see anything except the image size. Previously I would've seen more data, and I can show you that by looking at my backup copy. So here's my backup copy, properties, image. There is the Exif data, including the fact that it was taken by an iPhone. So that's all been removed by our Python script. Okay, so I won't bore you anymore. Three scripts available on my GitHub page. You can use the link below to get the scripts. Please remember that you should only use these scripts on images that you either own or have permission to run the Python scripts against. (logo sound)",
    "transcript_keywords": [
        "Exif data",
        "Exif",
        "Python script",
        "Python",
        "Exif data file",
        "data",
        "Exif data Python",
        "Exif Python script",
        "photos",
        "photo",
        "Google Maps",
        "script",
        "remove Exif data",
        "file",
        "Exif data script",
        "scripts",
        "Exif Python",
        "run",
        "data Python script",
        "information"
    ],
    "transcript_entity_values": [
        "first",
        "six",
        "the Lake District",
        "three",
        "Facebook",
        "Exif",
        "Mac",
        "Exif.exe",
        "Google Maps",
        "392",
        "San Jose",
        "CSV",
        "third",
        "the Microsoft Store",
        "Pretoria",
        "John McAfee",
        "Keswick",
        "two",
        "Instagram",
        "Flickr",
        "JPEG",
        "Three",
        "Fort Schanskop",
        "Pretoria Central",
        "nine",
        "zero",
        "second",
        "South Africa",
        "OSINT",
        "YouTube",
        "3",
        "iPhone",
        "the Zuid-Afrikaans Hospital",
        "the Google Maps",
        "Python",
        "Kali",
        "Exif",
        "ISO",
        "San Jose International",
        "CSV",
        "Google Maps",
        "GitHub",
        "Alice",
        "Python",
        "Cisco",
        "Python3",
        "England",
        "Kali Linux",
        "Windows",
        "the Exif Python",
        "2021.3"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "CARDINAL",
        "LOC",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "GPE",
        "ORG",
        "ORDINAL",
        "ORG",
        "GPE",
        "PERSON",
        "GPE",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "GPE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "GPE",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "LOC",
        "ORG",
        "PERSON",
        "PRODUCT",
        "ORG",
        "FAC",
        "PRODUCT",
        "GPE",
        "ORG",
        "PERSON",
        "WORK_OF_ART",
        "GPE",
        "PRODUCT",
        "GPE",
        "PERSON",
        "PRODUCT",
        "PRODUCT",
        "CARDINAL"
    ]
}