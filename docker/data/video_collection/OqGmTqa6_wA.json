{
    "id": "OqGmTqa6_wA",
    "title": "Faster Graphics That Cost NOTHING",
    "channel": "Techquickie",
    "channel_id": "UC0vBXGSyV14uvJ4hECDOl0Q",
    "subscriber_count": 4300000,
    "upload_date": "2021-04-21T18:06:16Z",
    "video_url": "https://www.youtube.com/watch?v=OqGmTqa6_wA",
    "category": "Science & Technology",
    "tags": [],
    "views": 353741,
    "likes": 26910,
    "comments_count": 909,
    "description": "Try FreshBooks free, for 30 days, no credit card required at   Learn about mesh rendering.  Leave a reply with your requests for future episodes, or tweet them here:   GET MERCH:  SUPPORT US ON FLOATPLANE:    LTX EXPO:      AFFILIATES & REFERRALS --------------------------------------------------- Affiliates, Sponsors & Referrals:  Private Internet Access VPN:  MK Keyboards:  Nerd or Die Stream Overlays:  Official Game Store:  Amazon Prime:  Audible Free Trial:  Our Gear on Amazon:    FOLLOW US ELSEWHERE ---------------------------------------------------   Twitter:  Facebook:  Instagram:  Twitch:   FOLLOW OUR OTHER CHANNELS ---------------------------------------------------   Linus Tech Tips:  Mac Address:  TechLinked:  ShortCircuit:  LMG Clips:  Channel Super Fun:  Carpool Critics:",
    "description_links": [
        "https://www.freshbooks.com/techquickie",
        "https://twitter.com/jmart604",
        "http://www.LTTStore.com/",
        "https://www.floatplane.com/",
        "https://www.ltxexpo.com/",
        "https://lmg.gg/sponsors",
        "https://lmg.gg/pialinus2",
        "https://lmg.gg/LyLtl",
        "https://lmg.gg/avLlO",
        "https://www.nexus.gg/ltt",
        "https://lmg.gg/8KV1v",
        "https://lmg.gg/8242J",
        "https://geni.us/OhmF",
        "https://twitter.com/linustech",
        "http://www.facebook.com/LinusTech",
        "https://www.instagram.com/linustech",
        "https://www.twitch.tv/linustech",
        "https://lmg.gg/linustechtipsyt",
        "https://lmg.gg/macaddress",
        "https://lmg.gg/techlinkedyt",
        "https://lmg.gg/shortcircuityt",
        "https://lmg.gg/lmgclipsyt",
        "https://lmg.gg/channelsuperfunyt",
        "https://lmg.gg/carpoolcriticsyt"
    ],
    "transcript": "- So you finally gotten your hot little hands on a shiny new graphics card for your PC. And you're confident that by pushing it to its limits you'll be able to run any game at mouthwatering settings. Oh, but it turns out there's a standing bottleneck that limits how many frames your GPU can push. And we're not talking about it your CPU or the PCI express slot. It's actually the GPU's pipeline. The set of steps that visual data has to go through in order to become a fully rendered image. But how does that pipeline bottleneck your gaming experience? Let's find out by learning how a graphics pipeline works. And we'd like to extend our warm thanks to Jianye lu senior program manager at Microsoft for helping us understand the problem and the solution that's starting to gain adoption. The first three steps of the pipeline called the geometry pipeline are really important and actually end up being where the bottleneck is. Step one is when the raw visual data basically just numbers plain numbers like mama used to make them goes through an input assembler, which takes the vertices of the triangles that ultimately make up a finished image and organizes them so that they're pointing at each other correctly. Step two, takes this organized set of vertices and puts them through a Vertex shader, which raises or lowers the vertices to create a 3d mesh of sorts. For example, the Vertex shader can create a bumpy texture on a wall or ripples on a pond. The third step is a rasterizer. This is the bit that puts pixels inside each triangle to fill out the image. Now, there are other steps beyond these three namely pixel shading which gives each pixel the appropriate color and lighting and the output merger which puts different visual elements together such as ensuring a character standing in front of a wall is displayed properly. So you'll only see the character and not the wall behind them. However, the big bottleneck we're talking about today involves those first three steps. Why are they such a bottleneck? I mean, the process seems pretty straightforward. Well, there are a few big reasons for this one is that that first step, the input assembler can only understand data that's organized in a very specific way. Typically it can't accept compressed data that can be moved around more quickly, or if a developer thinks of a more efficient way to organize their data the input assembler simply won't be able to understand it Two there are actually several optional stages after the Vertex shader. For example one is called a geometry shader that can take a point and expand it out to a particular shape such as a strand of hair. This is quicker than drawing a bunch of new triangles but the geometry shader and other optional steps have been added over the years as games and become more complex. They're essentially glommed onto the pipeline in a rigid sequential way that can't be processed in parallel meaning they take longer three because of this rigid sequence. You have to wait until you get to the rasterizer to start culling sounds dangerous or throwing away unused triangles that are way off in the distance or obscured by an object on the screen. This is a problem because by the time the data has gotten to the rasterizer phase of the pipeline the GPU has already done a ton of legwork rendering Unnecessary triangles sounds like my typical Wednesday evening. So because the geometry pipeline is so inflexible the solution isn't to retool it it's to replace it completely. This is where mesh shading comes in. One of the biggest features in the direct X 12 ultimate API instead of having discrete steps before the rasterizer the mesh shader is one stage. that can do a few really cool things. First the data that you feed into it can be much more arbitrary so it can understand compressed data and other data sets and old school input assembler couldn't you can't handle this new data old man essentially the mesh shader is almost like a mini programmable computer. So if a developer wants to accomplish some rendering task more efficiently, they can just code it in each of the processes above can also intelligently communicate with each other within a mesh shader. So instead of waiting to coal triangle so late in the process, it can be done earlier and the geometry can even be arranged in a way to make culling easier demanding even less GPU power. Oh, and we haven't even talked about the whole reason it's called mesh shading in the first place. It's a really fun term meshlets instead of working on one triangle at once, your GPU can instead work on meshes of multiple triangles in parallel. So instead of making a decision about calling one triangle your GPU can instead do them in batches, throwing out data it doesn't need to process and saving precious resources. Older Vertex shaders only saw a soup of points instead of an actual mesh, but mesh shaders are much smarter and they can know exactly what they're working with much earlier in the rendery process So what does all of this mean? Well, because your GPU doesn't have to work as hard for each frame. It means faster frame rates and more detailed environments. Ultimately, the things we all want from our graphics cards currently many game developers are looking at the best ways to implement mesh shading into their titles because it's such a customizable tool. And the old geometry pipeline has been around for such a long time. It might take a few years before we see widespread adoption of mesh shading in popular games. The good news though, is that there's already hardware support for it with newer consumer graphics cards. So by the time we see these games on the market chances are we'll all have next gen graphics cards that support these new features. Every one of us, yes, I can't wait. I can't wait for you to check out our sponsor freshbooks. They're an invoicing and accounting solution That's built for owners and their clients. They state that the average user saves 46 hours a month gets paid 18 days faster and increases their ROI by 11 times using FreshBooks. FreshBooks is a huge benefit for freelancers and small owners who don't have time to waste on invoicing, accounting and payment processing. Over 3000 business owners have rated FreshBooks an average of four and a half out of five stars on get app. And it's super easy to get up and running with award-winning support. So you'll never be alone. Try fresh books free for 30 days, no credit card required. Go to freshbooks.com/tech quickie and enter tech quickie in the, how did you hear about us section? Makes sense. Well, guys, that's a tech quickie video. Not sure if you've ever seen one before, but that's that's what it's like. Hey, speaking of like, you wanna like the video if you liked it, Hey, do you have a like, do you have I like to give out, please We love your likes. Also check out our other videos, comment below with videos of (indistinct) and don't forget to subscribe and follow tech quickie. Love you.",
    "transcript_keywords": [
        "data",
        "GPU",
        "mesh",
        "Vertex shader",
        "pipeline",
        "shader",
        "mesh shader",
        "mesh shading",
        "steps",
        "hot little hands",
        "geometry pipeline",
        "Vertex",
        "geometry",
        "triangles",
        "Step",
        "bottleneck",
        "geometry shader",
        "input assembler",
        "shading",
        "triangle"
    ],
    "transcript_entity_values": [
        "Vertex",
        "30 days",
        "three",
        "a ton",
        "One",
        "one",
        "3d",
        "freshbooks",
        "evening",
        "3000",
        "11",
        "FreshBooks",
        "API",
        "Microsoft",
        "third",
        "a few years",
        "first",
        "two",
        "Wednesday",
        "46 hours",
        "the years",
        "GPU",
        "four and a half",
        "Two",
        "PCI",
        "12",
        "CPU",
        "Jianye lu",
        "First",
        "five",
        "18 days",
        "today"
    ],
    "transcript_entity_types": [
        "ORG",
        "DATE",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "TIME",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORDINAL",
        "DATE",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "TIME",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "DATE"
    ]
}