{
    "id": "6uqgiFhW0Fs",
    "title": "Free Complete Course: You need to learn this programming language to be a senior developer!",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2024-02-04T15:00:04Z",
    "video_url": "https://www.youtube.com/watch?v=6uqgiFhW0Fs",
    "category": "Science & Technology",
    "tags": [
        "python",
        "dr chuck",
        "dr chuck python",
        "dr chuck python course",
        "learn to code",
        "software development",
        "software developer",
        "software engineer",
        "software engineering",
        "free python class",
        "free python tutorial",
        "how to learn to code",
        "coding tutorials",
        "how to code",
        "learn to code for free",
        "learn to code python",
        "python jobs",
        "coding bootcamp",
        "c programming",
        "c language",
        "learn c",
        "dr chuck c",
        "rust",
        "rust programming language",
        "c programming language",
        "rust vs c",
        "rust vs python",
        "rust python"
    ],
    "views": 324722,
    "likes": 8033,
    "comments_count": 718,
    "description": "Do you agree with Dr Chuck? That this is the most important programming language you need to learn, and the language you shouldn't use in the real world (in most cases). You need to learn C if you're serious about becoming a senior developer.   // C for Everybody Course // Free C Programming Course  Free course on YouTube (freeCodeCamp):     // YouTube Videos REFERENCE // Computer Science isnt programming  2023 Path Master Hacker Programmer (for free):   Best Programming Language Ever? (Free course):   What is a Master Programmer:   Building C and Bell Labs:   C and C++ At Bell Labs:   The Story of Python, by its Creator, Guido van Rossum:   Oral History of Guido van Rossum, Part 1:    // C book Audio by Dr Chuck //   // Python for Everybody // Python for Everybody:  Python for Everybody on Coursera:  YouTube:  Free Python Book:  Dr Chuck's Website:  Free Python Book options:    // Django for Everybody // Django for Everybody:  Django for Everybody for on Coursera:  YouTube:    // PostgreSQL for Everybody //  PostgreSQL for Everybody:  PostgreSQL for Everybody on Coursera:  YouTube:    // Web Applications for Everybody // YouTube:  Web Applications for Everybody:  Web Applications for Everybody on Coursera:  YouTube:    // Books // The C Programming Language by Brian Kernighan and Dennis Ritchie (the 1984 Second Ed and 1978 First Ed):  Computer Engineering for Babies by Chase Roberts:    // MY STUFF //    // SOCIAL // Discord:  Twitter:  Instagram:  LinkedIn:  Facebook:  TikTok:  YouTube:    // Dr Chuck Social // Website:  Twitter:  YouTube:  Coursera:   // MY STUFF //     // SPONSORS //  Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // MENU // 00:00 - Coming up 00:48 - The most important programming language 03:25 - The successor to C 04:44 - Dr. Chuck's free C course // C Programming for Everybody 09:07 - What should be your first programming language // Python for Everybody 10:45 - Object Orient Programming 14:32 - \"Stealing\" The C Programming Language book // Interview with Brian Kernighan 19:30 - The history of C and C++ 25:29 - The history of Python  26:58 - The path to becoming a master programmer 30:15 - Dr. Chuck's next course // Hardware for Everybody 32:29 - Free and available Dr. Chuck courses 36:33 - Where to get started 38:36 - When to use C 39:04 - Which programming language to learn next 41:15 - Learn different programming languages 42:25 - How AI/ChatGPT changes coding 51:20 - ChatGPT vs college essays 54:12 - The future of AI // Is programming still worth it? 57:49 - Visiting students around the world 01:00:22 - Conclusion  c rust c vs rust c course free c course dr chuck dr chuck master programmer  #c #rust #drchuck",
    "description_links": [
        "https://www.cc4e.com/",
        "https://youtu.be/j-_s8f5K30I",
        "https://youtu.be/z3o6yEzcnLc",
        "https://youtu.be/OVwJ5EMTSK0",
        "https://youtu.be/aQ_XTBmCXS8",
        "https://youtu.be/LZpkgKWzbBQ",
        "https://youtu.be/v8uLDu7LAEc",
        "https://youtu.be/CtAysS8AlsE",
        "https://youtu.be/J0Aq44Pze-w",
        "https://youtu.be/Pzkdci2HDpU",
        "https://www.cc4e.com/podcast",
        "https://www.py4e.com/",
        "https://www.coursera.org/specializations/python",
        "https://youtu.be/8DvywoWv6fI",
        "http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf",
        "https://www.dr-chuck.com/",
        "https://www.py4e.com/book",
        "https://www.dj4e.com/",
        "https://www.coursera.org/specializations/django",
        "https://youtu.be/o0XbHvKxw7Y",
        "https://www.pg4e.com/",
        "https://www.coursera.org/specializations/postgresql-for-everybody",
        "https://www.youtube.com/watch?v=flRUuodVPq0",
        "https://youtu.be/xr6uZDRTna0",
        "https://www.wa4e.com/",
        "https://www.coursera.org/specializations/web-applications",
        "https://www.youtube.com/watch?v=tuXySrvw8TE",
        "https://amzn.to/3G0HSkU",
        "https://computerengineeringforbabies.com/",
        "https://www.amazon.com/shop/davidbombal",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://www.dr-chuck.com/",
        "https://twitter.com/drchuck/",
        "https://www.youtube.com/user/csev",
        "https://www.coursera.org/instructor/drchuck",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "I I really have come to learn something this class took me four years and and I've really learned that uh C is probably the single most important programming language than anyone will ever learn and it is the programming language that no one should ever use once you learn to program you you probably need to spend a little time figuring out how programs code really works and if you go and use Django or you do databases or some other thing you kind of move away from the purity of what programming really is but secretly what I wanted to do is I wanted to take code that was written by chat PT and put it in this production software I'm like cuz I want to say like I want cat GPT to be a partial author of my software so I didn't want to look too close at it I just wanted because I test it out just fine right that's the worry that's the worry yeah hey everyone it's David Bombal back with the amazing Dr Chuck. Dr Chuck welcome! It's great to be here David uh I've been looking forward to this for as long as since we did our last recording uh last interview because uh I've been building this this course for four years and I looking forward to updating you on it yeah. You got to tell us about this because this is really exciting I believe I've heard you say this is about the best programming language right well I'm not sure about that I think that what this is is this is about the programming language that you should never write any code in unless you're writing some weird microcontroller or something I I've really have come to learn something this class took me four years and and I've really learned that uh C is probably the single most important programming language that anyone will ever learn and it is the programming language that no one should ever use and uh and so that's kind of an interesting irony because I I have been thinking a lot about the difference between a junior programmer who can kind of cut and paste things and fix syntax errors and a senior programmer who can see sort of through the mists and see what's really going on and be that senior uh developer and when there's a problem or when there's a performance problem they sort of have a six sense that allows them to see inside what's going on beyond just I wrote this code and it seems to work and yet. So I keep thinking that this this course is the the step from Junior programmer to senior programmer and the C programming language is the thing we all fall back on as senior developers whether we know it or not. I like the differ differentiation you made you said it's the most important language not what I the term I use the best but most important but something you shouldn't use can you explain what you mean by that? Well it's the most important because of the understanding bit that I just got done talking about but it's it's the it's something you shouldn't use because it's just a dangerous programming language right it uh you know everything is a pointer you can miss me mess up pointers you can over reference pointers you can mess up your stack I mean literally go if you go back literally for the past 25 years every single significant security failure in operating systems and softwares is almost always related to the C programming language like heart ple if you go all the way back to Heart ple that's a long time ago that was code in C okay and you know it's just when you write and see you have to be super disciplined you have to have code review and even when you do that something will get through it's just really dangerous to write professionally and see and then put that out there for the world to see I'm sure parts of the Cisco kernel are written in C and that's okay because people aren't hacking it and attacking it if you build a website and it's written in C or you build SSL and it's written in C that's dangerous. Yeah it's interesting because I I think we discussed it last time and just for everyone who in I'll link previous videos below you said that the successor perhaps to see might be Rust. Yeah although we that was some time ago we talked about Rust and Rust hasn't shown up in my uh feed much it uh it doesn't seem all that uh likely to becoming the successor and I've got some comments from people that talked uh on our last conversation whether or not Rust was the next thing and I think what had happened was is I had guessed that Rust instead of investigating Rust I imagine what Rust would be if I wrote it and I'm like if I wrote Rust if I designed Rust it'd be awesome but unfortunately Rust was not built by me and so it still has a number of the flaws of C still in it and so if if it has the flaws of C but it's got some modern affordances like what exactly is the point I mean somewhere between C and Python what's there because it still doesn't make it easy to do certain things and it's kind of like a little better C but then why so I think the jury on Rust is going to stay out I just don't see that it adds all that much above C and it doesn't necessarily solve all the problems of C, if it was like a real safe C I could I could get behind that but it's not. So just um I need to emphasize this just for everyone who's watching Dr Chuck the reason why we're having this conversation is you provide amazing resources for people around the world so I think we need to emphasize that the reason we're having this talk is you've released a new C course that people can access for free is is that correct? That is correct I uh it's called C Programming for Everybody it's out on Coursera and it is available for free on www.cc free.com Is this based on the the previous conversation we had was uh that very famous book that you love in the 1978 C book is that is that correct? I'm glad you brought it there you go I brought it. So yeah yeah it is based on that and so the again because the idea of C programing for everybody it's not that you're going to write code and be a professional C programmer C is foundational notion of technology, it is the moment in 1978 where software portability became feasible and practical irrespective of the underlying hardware and so if you look at everything up to 1978 we were using languages like Fortran or Cobol and if you had a CDC computer you wrote your stuff in Fortran system stuff non-system stuff if you were at a a Burroughs computer you wrote your stuff in Cobol and the Cobol on Burroughs computers was super fast and so the idea is you go from one computer to the other but you just have to completely change everything, all new operating systems, all new languages, all new library sets and and C was research inadvertent research into how to build one operating system, Unix, one programming language C and then have that work on virtually any piece of Hardware that you would come across and part of it was because the people at Bell labs in New Jersey were given a bunch of hand-me-down crappy computers they didn't have a lot of money so they had to build an operating system and a language for hand-me-down crappy previous generation or two generations back computers they had to make something work on them but then they they would get one hand-me-down this year and then they get a different hand-me-down next year and a different hand-me-down next then we have 12 hand-me-downs from this other thing that they were going to try to do some so they had to come up with a way to get an A working environment that let him get work done and yet was independent of the hardware that they were just being given as hand-me-downs and so this book the 78th edition which is becoming ever so rare that book is this it goes off an interview sorry go on it it did as a matter of fact after the last interview that price of that book spiked up to over $100 um it's it's somewhere between 25 and $75 right now this book is written in a style of a research paper like a research report from an in it's like well we were trying this and we tried that and this other thing worked and this worked pretty well and the we had two ways of doing this and this is the one thing and so these authors in this book break the fourth wall all the time they just aren't telling you here's the programming language C and here's where you put the semicolon no they're saying like here's what we were thinking in all the two things that didn't work out so well but we figured it out afterwards and so the 1984 edition of that book which I actually don't have a copy of the 1984 Edition took all that out because by 1984 the language was just like of course C what else would you ever do? and um so what I like is the notion that C's laid the groundwork for uh modern software portability and the book was written before it was an assured thing and so that's what I find super delightful about it and it you just you're reading the book and you're saying well how come this is such a hard problem the answer is because these are the people that made it possible to solve the hard problem and so you have to read it you go back in time and you read it and you're like everything was difficult in 1978 nothing was and this book was you ways to make it easier and that to me is the the most important thing it's like the movie Somewhere in Time where you just go back in time and you kind of live in a different time and enjoy that different time and then you come back to the present and you don't have to write the code any in this in this language so that's the fun part of going back in time learning a language with a you know wearing an old hat from 1978 right so I'm going to wear an old hat while I take this teach take this course and then you come back and you're in the modern world again and you have Python and you have dynamic memory you have more than 640k of RAM and all these kinds of things that that make life wonderful. So Dr Chuck some questions that people might have about the course should I take C as my first programming language? uh Absolutely not the key thing is is C learning C is the way that you learn about that first programming language and in and these days Python is pretty much the standard first programming language it doesn't waste your time there's no details like stack frames or pointers or anything like that in Python and you can you can go to work with python you can you can work in Artificial Intelligence you can work with data mining you can work in all kind web development all kinds of things in Python and so so it's foolish not to take Python as a first language and of course I teach Python for everybody which is the world's largest and most successful Python Programming course three million around the world have taken that course and so that's the first course no question. The interesting thing and we we talked before I am increasingly starting to think that C should be the second programming language um oh that's interesting I know when we talked two years ago I I thought that C should be like the fourth or fifth thing that you learn and the reason for that is that once you learn a program you you probably need to spend a little time figuring out how programs code really works and if you go and use Django or you do databases or some other thing you kind of move away from the purity of what programming really is and so this course C programming for everybody turned out so well and I didn't know how advanced it was going to be as a matter of fact I've been spent I spent four years working on this class and you and I I think talked two years ago kind of halfway through that half way through it takes me a long time to build new classes because you know there's a lot to it and so what I've kind of learned in the past four years of building this course is the the most difficult concept in all of programming is objectoriented programming it absolutely is and I think that most python courses most C courses most C+ plus courses and literally most Java courses do an awful job of teaching object ored programming and that's because they say well we're going to make an animal and then we're make a cat that inherits from animal and then we're going to make a dog that inherits from animal and we're going to make the cat meow and the dog bark now you know object R programming and if you ever are a professional programmer it is not about animals cats and dogs it's it's about solving problems of isolating code without you know and implementing things and changing implementations and there's so much to it that understanding object Orient programming is to me the key to becoming a successful professional programmer and so this course the SE course when when we talked last time I I didn't think I was going to talk about object writing programming in the C course as as a matter of fact I I had this whole story arc and I I I think of course this is stories I had this whole story where at the end I'm like and I'm not going to talk about object Orin programming and I had these two poems I read the end and one one was miles to go before we sleep both were from Robert Frost um in a forest dark and deep miles to go before we sleep snow is falling all that stuff and um and I had another one says I'm going to take The Road Less travel and the idea that I had when I was reading the poem The Road last traveled was I'm not going to teach you object rning programming and all most people at this point in the class teach you object rning programming so I had all these lectures recorded with these two poems in them at the very end of the class and and what happened was is I was teaching the class live because I did that a year ago I was teaching it on campus live and I'm like I had a bunch of really sh sharp students from courses I only had 12 students so I could talk to them continuously and and I said okay we're done now and they're like you're done I'm like yeah Road Road Less Traveled we're not going to go that way and they're go like you can't do that you have to tell us about objects and you have to tell us about C++ I'm like no but I don't like C++ and they're like yeah but we like C++ and so I had to go back first and edit the poems now there's only one poem in the thing and that is miles to go before we sleep and then what I decided to do was Focus the last third of the class which you know as of this time last year didn't even exist on implementing objectoriented programming in c and so what I began to do is I said let's just say you're at C and you're in 1978 and you're looking forward and you you think object programming is cool how would you build C++ if you were in C and then how would you build Python and the object orientation of python if you were in see and this turned out to be great I mean I just all of a sudden it's like giant Road opened up in front of me and the last the last few parts of the class are literally implementing dictionary string and list the core data structures of python and so we look at python code and then we Implement and see the kinds of things under the covers to implement the list object the string object and the dictionary object and then the the way the course ends the C course ends is we literally do as the last exercise of the course the first exercise of my python course except that we do it in C and so it's this it's this beautiful it's this beautiful kind of like whoa what a beautiful Story I mean again I think of this as a storytelling not as like yeah learn this learn that but it's this beautiful story now one of the things that's happened since we last talked I don't know if we talked since I interviewed um Brian kerigan the guy who wrote the book did did we talk about that no you no we haven't no you said you were going to talk to him at some point that was where we ended it last time well I mean start that story a little bit earlier right so there's this book from 1978 that you cannot buy it's not available online so the Reas part of the reason it took me four years to make it is the first two years I basically stole the book I bought a bunch of used copies of the book I cut off a spine of the best one I digitized it at high level and I OCR it and I put all that stuff in GitHub and I hired a bunch of graduate students to go over line by line fix every single thing to make a cool online version of this and I made all the uh code executable and I made all the all this stuff and I built this book without ever knowing if I was going to get in trouble and so a large part of the four years was talking to lawyers to see could am I going to get in trouble for what I just did I I just had to do it because it's just like I love this book so much so um but there was a good reason the book is out of print it's not available you would think about using it right yeah yeah and and and the lawyers told me there's a thing called fear use right it's academic purposes it's a historical thing so lawyers felt like I had a pretty good chance right I it was enough of a good chance for me to go forward so I built this perfect beautiful digital copy of the book and right before we were going to put it start the process to convert it to go on corsera I thought to myself that I better send a not this is a December last year 12 months ago I better send a note to Brian kernigan because even though my lawyers said that we would fight them and I had a good case I did not want to offend uh someone who I considered like a god right in the in computer science so I sent a note December of last year I mean December two years ago December 22 I said Brian I made this book and I hope you like it and I didn't hear from for a couple of weeks and then and then he uh he said hm that's interesting I have included on this email the editor of that book from Pearson and uh and so I'm like oh boy and so I I uh yeah and so I I I I replied to the email and I sent a note to Gary the fellow piar I said Gary I love this book it's a great book I'm using under fair use I think it's good thing and people are going to love and I love the 1978 Edition and Gary said could we get together on a zoom call I'm like oh damn that is not gonna go well at all so so Gary I I'm like I'm just like I thought should I should I call the University lawyers and tell them I'm going to get on a zoom call with Pearson should I call my own lawyers should I do whatever I thought about it for a very long time I finally say you know what I think I'm just going to go alone on this particular one and I'm going to schedule a call with Gary the Pearson editor of the book so I get on the call with Pearson and there's one other guy and the guy looks like me he's like old goatee white gray hair and he says the first thing out of his mouth is like man I love what you did with the book I'm like okay this is not going to be so bad this is not going to be so bad and then the next thing he said is could I have a copy of it I'm like what wow I'm like of course you can have a copy of it so it turns out that they have been um resurrecting old books and what I had done in creating in effect a pristine perfect digital copy of an old book that literally was only on paper they're like huh oh wow we have this online service and if we could get our hands on your book we could put that into our online service and I'm like uh boy this that's not how I thought this conversation was going to go at on so i' I've had an ongoing conversation with Pearson once Pearson and I were friendly I sent a note to Brian kigan and said could I come to Princeton and bring my camera gear and interview you and so I did I flew out to Princeton uh February of February 2023 and um we started doing an interview and some of my interviews I'm very ready for and some of them I'm not well prepared for I thought this one was so easy that I would be super well prepared for I wasn't I literally wasn't well prepared for an interview of Brian kernigan a person who I thought that I knew I'd watched YouTube videos of him so the first thing you know about Brian kernigan is he didn't really inent see Brian kernigan was the guy who wrote all the books and so if you look at the co-author k kigan and Richie Richie is the one that built the and kernan's like hey can I write your stuff down and just get it out as a textbook Richie's like yeah I don't care do whatever you want so Kuran was a leader and he was an important fellow he even wrote like a memoir his own Unix Memoir this one I got signed by him and he was like a leader at at Bell Labs he was like he was like a boss at Bell labs and so I started asking him questions and I he's like how what was it like to invent C he's like I didn't invent C I like oh boy but then he was kind and he told me a bunch of really good stories and then at one point we started talking about C++ and I want to give your viewers a poll and that is from like 1980 to 1984 BN strrip the inventor of C++ was working on C++ the question is what country was be strrip working in when he was building and evolving C++ or just kind okay so let's do a do we get in the comments we can we yeah we can let them go in the comments but so let me give you some choices a Norway B Finland C Denmark D UK e United States of America so know the answer well so if you know he's he's European he sounds European looks European I got an interview of him and um and he went I think he went to a university in Denmark the answer to the question hopefully by now you've all figured this out is e United States of America not just United States of America VN stroo the inventor of C graduated with his PhD from whatever University and was hired by AT&T Bell labs in M Hill New Jersey and so J strer was working on C++ two doors down from Dennis Richie working on C I mean seriously oh wow and so you look at the evolution of SE from 1978 79 through 84 C++ was in the building co-evolving things like the void type Etc and I'm like holy crap and then I had to redo the course again because I always thought that C++ was kind of like an annoyance right it was like oh there's C and then there's this weirdo European C++ thing not at all C++ was core to its development and as Brian tells in the interview his interview he's like oh yeah we loved him because he was he was so his C++ code generate such weird C code that it it broke everything you could possibly break and see and it helped us fix and so then you see this co-evolution of c and C++ in the early 1980s and so the next interview that I don't have scheduled yet but I've got agreed to is with GTO van rossom and once once I realized that a c and the C++ were one concept right they were not like a weird add-on I'm like now that I've done all this study of how you would build python in C I'm like I want wonder if gido van rossom has a weird connection and he wasn't just a weird guy from the Netherlands right just a random weird guy and we have this cover story on python that was oh for children and da d d da d da I think and we'll see when I get that interview I think that what we're going to find is that Ido van rosom in the in the 80s was going through the exact same thing that I'm going through in the last half of this course and saying what's the best way to use C and I think he if you look at the patterns over and over and over again in Python you see that there are imitations of how C++ did it but I think GTO was doing C++ one better I think gido looked at C++ and said no you don't quite have it right I'm going to build this language that's kind of a demonstrator of what C++ should be and I'm going to advance the actual research of what object or programming is forwards because I don't think C++ does a good job I'm putting words into his mouth and I hope he doesn't see this before this interview right but I that's that's right now that's my my hypothesis as to how it worked that he wasn't just making an easy to program language he was also trying to create a stellar absolute perfect best practice for what object earning programming meant by creating all these things and what's cool in C programming for everybody is we if if that's the path he took the last part of this course goes right down that path and you see just how beautiful and elegant it is and then you see things like how the dictionary has evolved from python 2 to Python 3 to python 36 to python 37 and on and on and then it turns out that that's just the natural thing you do as you start to build all these objects in C and so we build a hash which is what python 2os all the way up to python 3.6 it was a hash not a then we do a a a tree map and we do all these little things and we do multiple data structures and layering like a link list and a hashmap on top of each other and then a a link tree and a and and you're just like I think this is exactly what GTO van rossom was doing and thinking as he was building Python and if that's then the case right if if Kido van rossom was really trying to finish the research work that was started in SE with kigan and and C++ bejn spro strip if Yeo was really like I'm GNA finish this work that you all have started I think it's a beautiful beautiful concept and back to what I think was your first question is like that tells me that the right thing to do is to Learn Python and then learn C to get back to Python and then you have this like complete readiness for object-oriented programming and then you take like a Jango class and I talk about objector programming Jango class and you're like no I get that I know what that means and that's what senior programmers need to have that capability so that when they're taking a Java class and I say object blah blah blah they're there or JavaScript object blah blah blah and they're there so it is quite a journey and you know the because there is no textbook for what I'm doing because I'm really thinking this is research and a historical curiosity I mean I got to go where the story I'm I'm more of a documentary filmmaker than I am a a bookwriter right I think of this as like I run around with my backpack with a bunch of cameras do documentaries all over the place and then make a story from the documentaries and so um I just hope that people see this course as it is not just another Secour that just teaches from a random book this is like the history of computing orientation Technologies we know it because I'm a bit slow Python's written in C is that correct uh yes the main python that we use is of what you said right exactly s go now there's other pythons that are written in other implemented in other language but the but when gido started it was in C and by far the most popular python implementation is called cpython and you can look at the source code and you can see how what's in the current python today that makes dictionaries work and you can kind of if you know see you can look through that code and that's what you're doing in your course z a little bit I mean what I'm really doing is I'm writing simpler versions of what it would be so that you know it's like that'd be like in the first couple of weeks when G was writing python 1.0 back in '87 or whenever it was I'm I'm writing the code that he was writing on Christmas that year which is I'm going to write a string class and it's crude but at least it proves that I can write a string class and I can make it really easy to use and you know safe no pointer problems no security problems on and on and on so yeah so you basically python in C kind of the same thing is is that is that kind of right right not so much the language but the libraries right the the objects that you're you're using in in Python that's lovely so I mean I think that's a great explanation so that's why the full circle is there so you start with python go to C and you're back into python because you then you're basically writing python not the rest of your career you can write python or JavaScript or Java the rest of your career and not worry about C but C is make it so that you're not unsure of what it is that you're doing as you're writing an of the languages you are sure of what's going on this is quite a change from what we spoke about last time we you can just revisit it for people who haven't seen it our previous videos because you got the master programmer and if you can just explain that concept and then like you I've got it written here like 10 courses that that we mentioned last time it was python Jango PHP where and then SQL and then C but you've changed that I have changed that right and so so the the path to the master programmer in the in short is the idea that I want to create a set of courses that when a student completes those courses I'm willing to hire them so I've got a whole bunch of courses python Jango PHP as you mentioned SQL and now C and I thought that c was like the beginning of the more advanced phase of this master programmer but now I kind of think it's the second class in the path to the master programmer and then you take like a class like Jango and you're like oh object Orient I get it and you're so all of a sudden everything you're doing in Jango you're doing it from a a much stronger position and so it's not it's not that I don't like any of those courses that I that I have and they're still in the path to the master programmer um but the cclass is the second class in the path to the master programmer when my urg my originally I thought it was going to be the fifth class and the ironic thing is I'm kind of following the path computer science does a lot of computer science schools teach that's ironic it is ironic they teach python first and C second although they tend to teach C++ second which I think is a mistake but I I do think that what I'm doing articulates uh really well with computer science in that you my python course is not really recognizable as the first computer science python course and my C course is not really recognizable as the first computer science C course and and so if you're going to go and get a computer science degree people should take my python course and then they should take my C course and then they should go take a computer science degree right because the way they're going to teach you C and C++ and Python and computer science is rigorous they're they're really teaching you like the language you know how to change spark plugs I'm teaching the feeling of all these things I'm teaching the the kind of the the Gestalt of what python is from a gall perspective what C is from a good shult perspective and I'm preparing you very very well for a rigorous treatment of python C and C++ so that you will crush those courses so a big part of computer science is people walk into these courses and they're not really ready for them and so um I think that people should take python for everybody and see program for everybody in high school so that when they go get a computer science degree they're actually successful and they love it from end to end as compared to they're miserable they can't figure it out they don't actually learn anything and two years later they drop out and quit so for me these are pre-computer science classes these are not Replacements and even even the object Orient stuff I'm doing at the end of C programming for everybody it's not as strict and rigorous as the typical computer science class that's going to teach trees and Maps they're going to make a lot harder class but they're not going to care about the feeling of what what it means to be a hashmap and what GA was thinking when he was building one of these things and so so that's the path to the master programmer I really only have at this point in my mind two more classes to the path of the master programmer although there could be a third class yeah I mean you know me I change my mind all the time and once I teach things and I give them to students students tell me I'm wrong and I change so the next course I'm going to build is computer hardware for everybody I'm not going to computer architecture I'm going to talk a little bit about machine language Assembly Language I talk a little bit about Gates and I found a book and and um and here's the book it's called Computer Engineering for babies okay oh wow so if you hit this button the light lights up yep see that that's my level yeah so this is a wire and the light lights up that's a notk if you push it it turns to zero that's good that is very good this is an exclusive or if you push them both it's stays off if you push either one it stays on so I found this book Chase Roberts poor Chase Roberts is going to be featured on your podcast and he's going to sell way more books than he ever thought he was going to sell I probably warn him that is how I teach Hardware I mean I I sent a note to this guy I'm like I love your book and I want to write a second one he wrote a second one I didn't like his second book as well but I want to write a second one about starting with Gates and just it's not that hard started gates to learn a little bit and then you talk a little machine language so that I think and I think that might not be it's kind of like a one credit college class kind of like a survey of computer architecture and then I'm going to teach a Java class but by the time I'm teaching a Java class I'm G to teach you how to program like a professional right it's not just I'll teach the programming language Java and then I'll teach you how to program like a professional and we'll start looking at really hard problems and and that stuff so I'm not I'm not that far away at this point from what I think of as the last Master programmer class to the point where I'm starting to produce people that I will hire at that point yeah because last time you had assembly we you you still thinking of doing that assembly is an architect computer architecture is Hardware plus assembly I've been thinking more about it and now that the cclass is done I got so much done in that class the hardware and assembly class is kind of going to collapse into one and then last time you had rust and AWS but like based on the sort of what you see the I don't see rust as adding much value anymore at this point I just I wish it had I I think there is a place for a language that that has sort of like the low-level expectations of C but at the same time there's a number of libraries that make it uh much safer to use and that's the problem strings are not sa I want safe strings I want safe lists and I want safe dictionaries I mean that's that's really what I want as a c language that has python like underlying libraries Dr Chuck I just want to emphasize something so to make sure that everyone understands this you've got this path to master programmer and all the content is freely available is that correct yes it is yes it is it's also available on corsera but it's also just available on websites that I have up and you just go to you know online. dru.com and you see all of them and when new ones come out they'll be there as well so I'm committed to making all my material as free as possible I I don't think that that that precludes people paying for Content when you pay for Content there's somebody that kind of certifies that you've done the work it gives you a certificate it's one thing for you to say that you took a course it's another thing for somebody else to say that you took a course and so things like certification there's value in that but it costs money to certify you I mean you can't just to say oh yeah I'll self-certify well that doesn't say much so yeah and so the idea is that I I am really passionate about making software development as a career available to everyone everywhere in the world um regardless of uh how much money they have and regardless of the kind of resources that they have to bring to bear and I think our world will be a better place when we do that I love that because I mean that's the thing some people can afford it and they can get the extras but some people just can't afford anything and this gives them the opportunity to change their lives and I love what you're doing I love that you're doing that you said in our last interview something along the lines that $100 is a lot of money for a lot of the world yes absolutely um and I mean I I teach at the University of Michigan and you would think that everyone who steps foot in the University of Michigan is you know financially super solid and then we WE Post student student jobs and we get tons of applications and you think oh well isn't everybody rich and the answer is no it turns out even at a place like Michigan where there's a lot of wealthy people going to school there there are plenty of students that are not wealthy and they're they're fighting and they're fighting semester to semester and so if we think about these things as appealing to um you know those with limited means like and and not think of it as like oh this is a cool boot camp and I'm going to charge somebody $220,000 for a month worth of stuff and and you're going to sit and learn Ruby on Rails for 12 hours a day I mean I I find that really reprehensible that that's what people decide is the right thing because there are people that can afford to pay for that but I also think that those courses aren't all that useful and the long the long-term benefit of a you know two Monon $20,000 boot camp is nowhere near as good as carefully taking a bunch of free course materials and really uh understanding what's going on in those courses and taking your time and then growing your learning while you're going to work working and learning at the same time is way better than going to some boot camp and then walking out with a fresh load of stuff in your head that you think you're going to make money on but then you don't get a job and then it all FL it all goes away in another month so I'm glad you mentioned that because you mentioned earlier that someone could take Python and uh C and then they could go do computer science but let's say I don't want to go to university I just want to like get a job can I take this master sorry the road map to master programmer and um am I ready perhaps to get a job at that point absolutely absolutely so and and again you need to have some breath you need to have some breath so that when you walk into a job chances are good that you're not going to do exactly what you were taught in college and or in your boot camp and so you if you learn a bunch of different languages on the way to the master programmer then when you when they say we're using rust we' be like oh yeah okay I kind of know CN I kind of know python I know PHP and I know Java I'll figure rust out right and so whatever it is um you know Scala there's all these unfortunately there's all these like languages of the moment that seem to be exciting and they they they they contribute something but then they don't necessarily uh completely stick so if I'm starting out first language to start with python and then second language c yeah I wanted I just want to like hmer home on the on the point what's what I'm going to learn in C that I'm not learning in Python is it just a better understanding how programming works is it object oriented object orientated programming what am I getting that's the difference between those two and why why don't I just stick with python perhaps well if you if you take a python class uh you can be employed and that's what I'll call a junior programmer right and and there are lots of people that do pretty well as Junior programmers and they go to stack Overflow and chat GPT and you know paste a few things in and and get the work done that day and they move forward but there Comes This Moment where you get stuck if all you know is Python and all you've done is kind of basic python stuff you get stuck where you got to go find somebody senior right someone who's got done a lot more and the question becomes especially if for companies how do we get people from this sort of junior level to senior level and we can we we're pretty good at making junior level programmers these days with things like corsera Etc but then how do you make senior folks and that is where the cclass comes in so one of the things I'm I'm I'm trying to convince companies who have found the python class really uh useful is that the cclass is even more useful because it's going to take your current employees and it's going to up their game and it's going to give them the necessary tools to to kind of grow from Junior to senior and go from just you know you got a bunch of Junior programmers and they're doing a bunch of stuff but then you got all these senior people that kind of have to help them when they get stuck well how do you make more people to help everybody when they get stuck and that's where the C-Class comes in is it's the ones where you're not afraid and I guess you know I'm not afraid of what programming is when I'm done with a cclass and that's the that's one of the things I love about it and that's one of the things I love about having a computer science degree is I'm just not afraid eventually I'll put enough print statements in it darn it I'll figure it out and I don't care what language it is I don't care any of that stuff and that's what I'm trying to I'm trying to create a course that can take you to that point where you're not afraid of the technology that you're using but I shouldn't use C in production because of all the vulnerabilities and issues with C right no and I I sure hope you don't find a job where they tell you that your job is to write a whole bunch of C code because that that's really really difficult and should be reserved for the you know the most specialized of things and these days if you're going to do something super specialized you might want to use C++ because the problems that you are going to need to solve in a sort of a highly I don't know rigorous and scary environment C++ is probably the better tool to see for that I'm glad you said that because it was like okay so if I don't you see what do I learn is it rust is it C++ what do what do I learn next that's a good question um that that's that's a good question I'm looking at the I tend not to do anything I tend not to like teaching proprietary Technologies I tend to like teaching open source Technologies and if you look at the business world uh business World uses either open- Source Stacks which are like Python and Java or they use proprietary Stacks which are like Windows C and Visual Basic so you'll notice that I don't teach anything in the windows C Visual Basic World C++ is a weird thing right I'm not sure that a lot of general purpose folks use C++ for building web servers I know that Microsoft people use C for building web servers but I don't think open people I think they tend to either build them in PHP python or Java and so what I've done is I've covered what I consider the essential languages on the open side of the house I'm not pretending that I am a Microsoft certifi certified software developer right because those languages are completely different there's there's equivalences because C is more like Java than it is like C++ even though it uses syntax that's C++ like um and so I you know I'm not I'm not trying to sort of get into the business side but if you but a lot of places don't like using Microsoft Windows because of the continuous licensing uh problems that you have and whereas if you're starting a really big company the last thing you want to do is uh base it on a proprietary you know pay per click kind of a thing and so you're going to use python or Java or PHP or something like that JavaScript as well I also think it's that whole thing that Linux is you know I'd rather have learn Linux than than Windows yeah too and I'd rather te yeah the lamp yeah I'd rather teach Linux than teach Windows it just lasts longer and you know the the knowledge that you gain on Linux I think lasts longer than the knowledge you gain on Windows and I just think it's so portable um if you understand Linux I think I I just remember now you said in a in a previous interview you shouldn't because a lot of people make this mistake they think they must just learn one language and I think you said something along the lines five or six languages is what you should learn right yes absolutely absolutely and it's at some point you uh you need to learn a number of different languages because you have to relax when the syntax changes you can't have gotten so much that you're sort of like a savant on the syntax and if you see different syntax that it's somehow it it throws you for a loop the answer the concepts in any programming language are the same and until you've learned a bunch of programming languages you're not you're not operating in Concepts you're operating in syntax and that's that's a key and it's not easy to do you can't just say hey this week we're we're going to stop talking about syntax we're going to talk about Concepts blah blah blah blah blah two hours later and so you somehow know Concepts the answer is no you don't Concepts come to you just with repeated work and I love that because I mean I think and I I mean people in the can put all kinds of comments in you know feel free to put comments below but I I have this got feeling that if I know Linux it's easy to pick up Windows if I know C it'll be easy to pick up other languages um the and if well multiple languages it's easy to learn others so I love what you've done that it's open source rather than proprietary right Dr Chuck elephant in the room a lot of young people have asked me this it's pointless learning to code it's pointless doing anything intact networking coding cyber security whatever AI is going to eat all of our jobs what's your opinion about Ai and then perhaps later you can talk about chat gbt and how that's changing uh coding perhaps or what what's your opinion so perhaps you can talk about Ai and then come back to like is chat GPT like making us dumb something along those lines so I I'll just start by saying that chat GPT T is not going to take all of our jobs I mean if chat GPT was going to take all of our jobs the previous 85 or 90 different technological breakthroughs and C GPT is definitely a breakthrough but the previous breakthroughs are we're going to take our jobs and they didn't right I mean I whenever we are talking to anything mechanical whether it's chat GPT we get really upset really fast because they can't even take the simplest things right but so that it just taking our jobs is just such a foolish kind of dog whistle kind of way to think about it but chat PT is amazing chat PT is the you know the closest thing we've seen up till now to True artificial intelligence and there are some things that it does really well couple of quick stories right so last semester which was September 2023 I called the first semester of chat GPT and we had sort of seen it in the spring and the you know the April May time frame and we spent all summer like worrying about what was going to happen when September rolls around and and we got to F face students with chat GPT and my colleagues to a person we not going to prohibit it and not going to fight it I mean it's dumb that's like fighting search or that's like you know fighting text messages I mean it's just like stop find out a way to use it so I will say that when I prepared for my fall 2023 September 2023 course I put a lot of thought in to how to deal with a chat GPT Menace right meaning that a lot of I looked at my assessments I looked at how I taught and I'm like I gotta change I I gotta change all this stuff right the biggest thing I did to fight chat GPT is this it's paper I can't see clearly you left to explain sorry go on it's a piece of paper so the biggest thing that I did to fight chat GPT last semester was to use paper exams and I'm like ha oh that's interesting yeah yeah yeah I will give you a multiple choice question ABCD and you're walking in with a pen and a paper and two pages of notes and I don't care how you learned it but you're not going to take your ex my exam with chat DPT next to you you can do all my homework with chat GPT next to you all you want but you got to take my exam and it turned out it was great students love the exam I love the exam it felt really good I felt like I had built the best assessment that I had in the past 10 years of teaching and then this semeer comes along and I look back on it and I realized that the paper exam was a good idea cat GPT had nothing to do with it ultimately right cat GPT was just a thing my reaction was to do a paper exam and so what it turned out was it was a way for me to get the students attention and give them responsibility for learning so that they couldn't use chat GPT when they take the exam and so I like okay if that was good I'm going to switch and so this semester I'm using three exams and literally I've stopped thinking about chat GPT in my teaching completely right I mean I'll use it someday maybe some company will make a cool chat GPT that looks at all the videos I do and students can ask questions about something and I've seen prototypes of this already where you say how does time and a half for overtime to get calculated and it finds the exact place in all my lectures that I talk about that students will love that right because instead of having to watch all the lectures and remember what go went where they can ask a question about the lecture and be taken right to it does that make it so they don't have to learn anything no it actually makes it so it's easier to learn stuff because they're not looking at junk they don't want to look at so it's going to help it's it's going to help and um and so chat GPT made me think as a teacher what I'm doing right what I'm doing wrong how I could be better and it was all when it was all said and done the things I did to kind of deal with Chad GPT made me a better teacher and had almost when so said and done I should I just should have looked at myself and said how can I teach better how can I help my students learn better and and CHP just happened to be like the the scary the scary thing that got me thinking about that so that's that's one one chat GPT example so another chat GPT example had to do with I had a bug and the Sakai project which is a million lines of java and it has to do with double URL en coding and so was passing stuff and back and forth between servers and they got double URL encoded and um that's little percent signs on URLs and um turns out that some firewalls are starting to break wurl encoding they're starting lot not past wur coding so so I need to come up with a different way of passing this data back and forth and I wanted to use a technology called Bas 64 which turns it all into like hex numbers and digits and upper and lowercase letters but Bas 64 has like an equal sign and a couple of other weird characters that require WL coding anyways so I thought well how about this thing called Bas 62 which is exactly the same thing that base 64 except it doesn't have those characters that I didn't want in base 64 and and so I propped up chat GP PT cuz I couldn't find a b62 library b62 is a thing that's talked about but there was no b62 Library so I popped up chat GPT and I said could you write me a Java based B 62 library and it goes sure so I look at it like yeah that's pretty cool that looks good I look at this and I look at that I look at some of the code I'm like okay that looks pretty good I'm like could you write some Java DOC for that and it goes sure and so it writes the Java doc then I say could you write a unit test for that and it writes a unit test for it and like that's a cool unit test it even seem like it has a sense of humor like I do when I write unit tests and so I I took this stuff and I took this stuff and I threw it into a patch in Sakai as a fix for this bug and it did fix the bug right because I wasn't doing URL coding I was doing this B 62 and coding so I went through code review and the people reviewing it they weren't entirely excited about my Approach they think I should use B 64 because B 62 is not common and they look for a bunch of libraries but I I've kind of fought them on that I'm like I want to do this but secretly what I wanted to do is I wanted to take code that was written by chat GPT and put it in this production software I'm like because I wanted to say like I want cat gbt to be a partial author of my software so I didn't want to look too close at it I just wanted because I test it out just fine right that's the worry that's the worry yeah so so I kind of they had argued with me and I kind of beat him down and that ARG the code review people I beat them down in the argument so I over their gentle suggest questions I put it in and we hand it over to quality assurance and 24 hours later it breaks and the quality assurance person ran something and it blew up and I looked at the trace back and I could see exactly the line and I looked at the line of code I'm like oh I see why that broke exactly why I broke and so long story short luckily I'd been the corview people had argued with me long enough about this thing that I kind of knew exactly what I was going to do if it didn't work out so like in less than an hour I had a better solution that used B 64 with like a hack on top of it and it's like but we've done all this research cuz they' argued with me about why I was using this thing and I thought through all the Alternatives but I didn't want to do the Alternatives so it turned out when it's all said and done but chat GPT had taken a base 64 algorithm and changed 2third of it to be like base 62 but it's really hard to change the other third it turns out having to do with the fact that it's not a power of two they just wrote a bad Bas 62 Al Chachi V roal algorithm and I look at it I'm like oh that's exactly what Junior programmer would have done if you put a lot of pressure on them and said you only have one hour and I'm GNA based on when you write this code if you're not done with this code in an hour I'm going not going to hire you and so chat GPT feels a tremendous pressure when asked to write a Bas 62 encoding algorithm and so it reacted just like a junior developer and it was very confident it was right it was so confident that it was right and I was so happy that it passed the unit test which it did it turns out the year was probabilistic and you had to have all kinds of weird patterns to happen eventually the QA people did that and so that says wow it's a junior programmer it's prone to mistakes and it has no sense that it's wrong zero zero Z zero sense that it's wrong so I'm GNA I'm going to start a series of podcasts where I use chat GPT and kind of because it I've done a couple of other things where I've I've used it and I've learned it I I really enjoy it so the the other thing that you know at my age my friends had kids and they're going to college and the question becomes do you write your college essays using chat GPT and a friend of mine who also teaches at the University of Michigan has a son who's applying for college and he was really afraid that his son would use chat GPT or perhaps lose to someone who had written their essay in chat GPT so his strategy which was really I thought brilliant he's like do something that chat GPT would never conceive of doing and then write about that thing that you did and write passionately about the thing that you did so they bought an old car like a 1976 chel and they started working on the car together and his college essay was what he learned doing work on 1976 chel getting dirty and so think about it chat GPT can't work on a 1976 chel so it can't talk about its experience doing that so there are ways to write an essay that could never be written by AR arcial intelligence because artificial intelligence can't experience life they can talk about like you know the cause of the Civil War perhaps um but uh so I went from a year ago being scared of of chat GP to like it's just a it's just another thing and I want to learn how to use it and teach my students how to use it and companies will come up with cool uses for it and I will like that um but it's it's not going to stop anybody's need uh for becoming a programmer and frankly I think it increases the need to be a senior programmer because I think chat gbt has the same conceptual understanding of software development as Junior programmers and will'll make the exact same mistakes Junior programmers and the way I found the mistakes of the code that I wrote I let cat GPT write for me was when myself and two other senior programmers were going over it looking at where the flaws might be and Cat GPT just couldn't do that right and so I'm not worried I love chat GPT it's fine I just Snicker time people you know overestimate its capabilities so just to counter to that once that essay is online though the next version of AI will have that story and could grab that right uh absolutely absolutely without a doubt I mean I think the key thing though is as long as it's a personal Journey it's difficult for you to say um pretend that I just bought a 1975 chevel and pretend that I worked on it and write a story about how I learned leadership and uh problem solv solving while I did that I mean it it hard to ask the question even though you gave it that essay right um and and and so I I think it's difficult for chat GPT to have a truly personal thing that comes out I think it can describe things but it can't really share feelings and so where do you see it going because CH gbt is like V1 of a lot of what people have seen But AI it the talk about exponential increase in intelligence and stuff do you think if I was a young person and I'm just framing this always the questions that I get on YouTube is it worth me still getting into programming because I'm I fear that you know chat GPD perhaps can't do everything but what about five years from today I think that that question comes from people who are not yet programmers imagining going to a beginning programmer position and thinking that a lot of the things that you do as a beginning programmer have become easier with chat GPT so they maybe won't need as many people the problem is is that your goal when learning to program is not just to become a beginning programmer but to be a senior programmer and that's where the creativity just comes in right when you're creatively solving a problem I just don't think the cat GPT can help you I think chat GP can can help you write a a a a s a digital signature library or it can write help help you uh you know parse Json or whatever and so those are things that we tend to do as J Junior programmers but the concept of like whoa that's a really interesting problem chat jpt has no chance with those really interesting problems so that for me is why it is that uh programmers should not just assume that they're going to go and become a junior programmer and that's the end of their career and I and I also think that companies are going to want to take and invest and get their their employees doing higher level thinking which I think is just going to make the world a better place right you know if we just kind of have like a whole bunch of Junior programmers like a typing pool in a big big room with banging on keyboards continuously you know we're going to be better than that you know we're going to just like typewriters to word processors and so you're going to move up a level you're going to have to become uh creative and understand how how computers really work I think that it's going to be fine but I you know this is where talking about C programming for everybody I think people who are currently working are going to need some kind of education that leads them out of the kind of the mechanical into the creative in terms of software development I love that I mean it's a great answer because I've seen so many examples of the AI chat gbt just being the poster child creating code that's vulnerable so it looks fine and it works but it's not best practice it's vulnerable it's got issues like your example is great um only a senior programmer would pick up those issues I see it in networking on the networking side trying to get it to configure like um bgp or OPF or some kind of writing protocol it kind of does it but if you actually know what you're doing you spot all the mistakes yeah I mean that I mean it'll be it'll be helpful and and you know but but at the same time there are things that are just going to do really well and that is I mean I I can't wait until there is a company or an open source project that can scan a corpus of an online course and give you a a really rich index of that course because one of the one of the problems that I have in scaling courses is that there is a there is a conflict between personalization and scale and and people get stuck on the weirdest things and then they drop out in in in large large scale classes and if I can come up with ways and I I really believe that they're just like got stuck on one thing and then they got mad and then they left and then they gave up on their education that's at least online like that like on corsera or just online or free code camp or wherever you're going it's just too easy to quit but if I get something that can catch him at that moment and just give them a little bit of love a little bit of a little bit of encouragement and I don't think that requires like super genius software that just requires software that understands the material that I'm teaching from and can lead students to the right answers to the questions that they have Dr Chuck it sounds like you've been stuck like creating this course do you actually manage to travel at all so one of the things that I've been holding off with C programming for everybody is doing the thing that I love to do and that is go visit my students all over the world and I've you know been there 7 times and I think uh since Co I've only gone like three times I just they luckily ended up somewhere so I'm picking up my uh my travel and going to visit students more and more and I see that you go to conferences and come up to you and talk and and I'm a little jealous of that that's really that's really cool that you get to do that um and so I'm kind of kicking this off with a week and a half long trip to India uh with corsera where we're going to go and visit um we're going to visit a number of universities that have adopted my python course and I'm going to try to convince them to also adopt the C course and then we're going to go to a number of businesses that have adopted the python course and I'm going to try to convince them to do the C course for all the reasons that we've talked about right so in in University this is a great second course at at and but for businesses I think it's even more important because you might have someone who took a cclass 20 years ago but they didn't know why they took a cclass they didn't know what the value of that C-Class was my C-Class will give them the story the back story and it will it'll teach them what they should have learned from that cclass that they probably didn't back in the day when they were just taught a straight up cclass and so the other thing I'm hoping to do when I get to India is uh is meet some of the employees that I've got uh from the master programmer right I mean I've had a couple I don't have enough scale to do all of them but I'm going to meet some of the the the students that I that's have taken all my courses that I've hired I I know I get a lot of requests but I don't have right now I can't hire everybody who wants to come work for me but I'm going to meet some of my people for for the first time and I'm going to go visit uh I I think I told you that we have a a number of blind schools in India that use my python course to try to teach blind students how to program I think that you know visually impaired and programming actually really work well I you know you you some there's so many internal thoughts and Concepts and and constructs that we do as programmers and I don't think you need to see seeing is not as critical and uh so the other the other thing that that we we we've done is um uh I've hired uh some blind folks to do accessibility testing on uh on the sky project and I'm going to meet some of those as well so I I kind of put myself in a sort of in a cabin and finish this course and now that I'm done with this course I'm going to get back out in the real world and start meeting people again Dr Chuck I really want to thank you you know for giving so much to the world I mean I think you said there's 3 million students on your python course right y so 3 million lives potentially impacted in a in a major way just that through that one course I really want to thank you you know not trying to like create some boot camp and become like a millionaire overnight by charging $20,000 or whatever stupid money people charge but by giving to the world and um you know I come from South Africa originally and I've seen poverty I know that people they're very very clever people amazing people out there that if they just get the opportunity can change their lives change their family lives um and I really want to thank you you know for giving back to the world thanks for bringing that up I it it reminds me of a YouTube comment that I just got in the last couple of weeks where uh I I had posted a video and someone said Dr Chuck thank you for all of the great classes uh I took one of your classes a long time ago and now I'm a teacher and I'm teaching programming myself and I'm like oh that's really cool and then like a couple days later another person says and by the way way I'm a student in that person's class and I'm going to become a teacher too and so so I love it it just it's just so joyful to uh see the positive you just put something out there in the world and you hope that it does good and uh it is a joyful thing when it does Dr Chuck thanks so much really appreciate you spending so much time with me and sharing with the community as always big kudos to you for you know giving to the world and you know making the stuff available because people can change their lives through this so thanks so much thank you for doing what you do as as well",
    "transcript_keywords": [
        "chat GPT",
        "programming language",
        "Python",
        "GPT",
        "thing",
        "programming",
        "things",
        "kind",
        "David Bombal back",
        "people",
        "language",
        "programming language Java",
        "chat",
        "love chat GPT",
        "junior programmer",
        "python Jango PHP",
        "cat GPT",
        "fight chat GPT",
        "important programming language",
        "time"
    ],
    "transcript_entity_values": [
        "Microsoft",
        "AT&T Bell",
        "these days",
        "three",
        "Al Chachi V roal",
        "the previous 85 or 90",
        "1984",
        "Java",
        "Ido van",
        "Richie Richie",
        "jpt",
        "Fortran",
        "Cisco",
        "the spring",
        "overnight",
        "Focus",
        "PhD",
        "two",
        "second",
        "37",
        "hashmap",
        "100",
        "1975",
        "YouTube",
        "Orin",
        "Michigan",
        "OPF",
        "Bas 62",
        "Chad GPT",
        "Python",
        "Technologies",
        "the year",
        "FL",
        "the 80s",
        "Orient",
        "van rossom",
        "3 million",
        "the four years",
        "Linux",
        "Bas 64",
        "about five years",
        "Sakai",
        "Brian",
        "the past four years",
        "December",
        "20,000",
        "Jango",
        "1978",
        "million",
        "Netherlands",
        "February of February 2023",
        "a year ago",
        "David Bombal",
        "'87",
        "PHP",
        "the early 1980s",
        "Ruby on Rails",
        "DPT",
        "Django",
        "e United States of America",
        "12",
        "84",
        "GP",
        "Yeo",
        "64",
        "CDC",
        "India",
        "a couple days later",
        "C Programming for Everybody",
        "Coursera",
        "Bell",
        "Secour",
        "December two years ago December 22",
        "3",
        "another month",
        "today",
        "that day",
        "the first couple of weeks",
        "Computer Engineering",
        "one",
        "Cobol",
        "Robert Frost",
        "Python Programming",
        "the last third",
        "RAM",
        "Princeton",
        "Bas 62",
        "PT",
        "Windows",
        "Kido van rossom",
        "Jango",
        "Scala",
        "YouTube",
        "C++ two",
        "12 hours",
        "Bell labs",
        "first",
        "UK",
        "Road",
        "the last couple of weeks",
        "New Jersey",
        "Rust",
        "Jango PHP",
        "the day",
        "European",
        "1.0",
        "CHP",
        "two years ago",
        "kernan",
        "spro strip",
        "24 hours",
        "the past 25 years",
        "September",
        "GTO",
        "AWS",
        "Reas",
        "SSL",
        "1978 79",
        "Pearson",
        "M Hill",
        "South Africa",
        "all summer",
        "C++",
        "this year",
        "Jango PHP",
        "Content",
        "David",
        "GTO van",
        "Bell Labs",
        "just United States of America",
        "last year",
        "Dennis Richie",
        "SQL",
        "Chase Roberts",
        "University",
        "Linux",
        "Brian kerigan",
        "AI",
        "36",
        "Kuran",
        "GA",
        "last semester",
        "last year 12 months ago",
        "Bas 64",
        "B 64",
        "1976",
        "VN",
        "fifth",
        "Gates",
        "Norway",
        "78th",
        "Richie",
        "da d",
        "September 2023",
        "zero zero",
        "75",
        "Learn Python",
        "10",
        "SE",
        "next year",
        "six",
        "April May",
        "Somewhere in Time where",
        "Christmas that year",
        "a week and a",
        "Artificial Intelligence",
        "half",
        "B 62",
        "2third",
        "University",
        "third",
        "three million",
        "this week",
        "C++",
        "December of last year",
        "Gary",
        "GTO van rossom",
        "five",
        "20 years ago",
        "Heart ple",
        "Dr Chuck",
        "Brian kernigan",
        "2",
        "four years",
        "Burroughs",
        "a couple of weeks",
        "two years later",
        "the last half",
        "zero",
        "the University of Michigan",
        "two hours later",
        "the past 10 years",
        "less than an hour",
        "Hardware",
        "The Road",
        "3.6",
        "ABCD",
        "Denmark",
        "the Civil War",
        "Rust",
        "Cat GPT",
        "Princeton",
        "JavaScript",
        "the first two years",
        "www.cc",
        "220,000",
        "one hour",
        "GitHub",
        "OCR",
        "Brian kigan",
        "GPT",
        "over $100",
        "fourth",
        "62",
        "7"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "PERSON",
        "DATE",
        "DATE",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "TIME",
        "ORG",
        "WORK_OF_ART",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "PRODUCT",
        "MONEY",
        "DATE",
        "ORG",
        "PERSON",
        "GPE",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "GPE",
        "DATE",
        "LOC",
        "PERSON",
        "CARDINAL",
        "DATE",
        "GPE",
        "FAC",
        "DATE",
        "ORG",
        "PERSON",
        "DATE",
        "DATE",
        "MONEY",
        "PERSON",
        "DATE",
        "CARDINAL",
        "GPE",
        "DATE",
        "DATE",
        "PERSON",
        "DATE",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "ORG",
        "PERSON",
        "GPE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "GPE",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "DATE",
        "DATE",
        "DATE",
        "DATE",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "ORG",
        "GPE",
        "LAW",
        "ORG",
        "PRODUCT",
        "PERSON",
        "NORP",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "TIME",
        "ORG",
        "ORDINAL",
        "GPE",
        "FAC",
        "DATE",
        "GPE",
        "DATE",
        "EVENT",
        "DATE",
        "NORP",
        "CARDINAL",
        "ORG",
        "DATE",
        "PERSON",
        "ORG",
        "TIME",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "PRODUCT",
        "FAC",
        "GPE",
        "DATE",
        "LANGUAGE",
        "DATE",
        "PRODUCT",
        "ORG",
        "PERSON",
        "PRODUCT",
        "ORG",
        "GPE",
        "DATE",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "DATE",
        "DATE",
        "PERSON",
        "PRODUCT",
        "DATE",
        "ORG",
        "ORDINAL",
        "PERSON",
        "GPE",
        "ORDINAL",
        "PERSON",
        "PERSON",
        "DATE",
        "QUANTITY",
        "MONEY",
        "WORK_OF_ART",
        "CARDINAL",
        "PERSON",
        "DATE",
        "CARDINAL",
        "DATE",
        "WORK_OF_ART",
        "DATE",
        "DATE",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "GPE",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "NORP",
        "DATE",
        "PERSON",
        "PRODUCT",
        "CARDINAL",
        "DATE",
        "PERSON",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "DATE",
        "ORG",
        "DATE",
        "DATE",
        "DATE",
        "CARDINAL",
        "ORG",
        "TIME",
        "DATE",
        "TIME",
        "ORG",
        "WORK_OF_ART",
        "CARDINAL",
        "ORG",
        "GPE",
        "EVENT",
        "ORG",
        "PRODUCT",
        "PERSON",
        "PRODUCT",
        "DATE",
        "GPE",
        "MONEY",
        "TIME",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "MONEY",
        "ORDINAL",
        "CARDINAL",
        "CARDINAL"
    ]
}