{
    "id": "iD84waJKYh0",
    "title": "SQL Injection",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-04-30T15:50:55Z",
    "video_url": "https://www.youtube.com/watch?v=iD84waJKYh0",
    "category": "Science & Technology",
    "tags": [
        "sql",
        "sql injection",
        "sql injection example",
        "sql injection tutorial for beginners",
        "blind sql injection",
        "sql for beginners",
        "itprotv",
        "ethical hacking",
        "ethical hacking course",
        "ethical hacking career",
        "cyber security",
        "hacking course",
        "ceh",
        "oscp",
        "cissp",
        "itprotv review",
        "cehv10",
        "learn ceh",
        "ceh v10",
        "ceh exam",
        "hack",
        "cybersecurity",
        "learn hacking",
        "kali linux",
        "kali linux tutorial",
        "hacking",
        "ethical hacker",
        "hacker",
        "certified ethical hacking",
        "learn ethical hacking",
        "ethical hacking tutorial"
    ],
    "views": 157645,
    "likes": 4865,
    "comments_count": 275,
    "description": "Daniel demonstrates SQL Injection using sqlmap. This is one of his favourite tools.  Big thanks to ITPro.TV for sponsoring this video. In future videos, he will show us additional tools.  ====== Menu: ====== SQL Injection Demo: 0:00 Daniel's top 5 hacking tools: 1:40 SQL Injection: sqlmap and DVWA: 2:31 Don't get shiny bracelets: 3:32 Start attack: 5:44 SQL tables: 8:00 SQL dump: 9:35 SQL Hashes: 9:45 DVWA explained: 12:40 sqlmap command: 15:27 url: 16:06 sqlmap uses the website: 17:34 Change URL to handle special characters: 19:21 cookies: 20:04 How to find cookies manually: 21:41 sqlmap switches dbs: 23:55 sqlmap tables: 26:30  sqlmap columns: 27:31 sqlmap dump: 28:29 Login as a user: 29:45 Why is it called sql injection: 30:41 Can you write to the database: 32:45 What do you want to see? 34:48 How to build the same network: 36:23 It is still used in the real world: 37:31 How to stop this: 38:30  ======================== Download software and VMs: ======================== VM used:  Kali Linux:   ================ Links: ================ ITProTV Free Training:  My ITProTV affiliate link:   ==================== Connect with Daniel: ==================== LinkedIn:  Blog:   ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    sql sqlmap sql map sql injection sql injection demo kali sql kali linux sql  kali linux sql injection kali linux hacker hacking ethical hacking cybersecurity cybersecurity careers ceh oscp itprotv ejpt cissp ceh v10 blind sql injection elearn securtiy try hack me hack the box oscp certification  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #sqlinjection #sqlmap #cybersecurity",
    "description_links": [
        "https://www.vulnhub.com/entry/websploit2018-1,253/",
        "https://www.kali.org/downloads/",
        "http://davidbombal.wiki/freeitprotv",
        "http://davidbombal.wiki/itprotv",
        "https://www.linkedin.com/in/daniellowrie",
        "https://blog.itpro.tv/author/daniellowrie/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal"
    ],
    "transcript": "- Come on, hit Return. Let's get this. - Hit Return. Go, go, thing. Do. Do stuff. Oh yeah. It's going. Oh, look at this. It says, \"Recognized possible password hashes \"in column password.\" Well, how about that? Nice going there, SQLmap. Good call, and it says, \"Do you wanna store hashes \"to a temporary file \"for eventual further processing with other tools?\" So if I wanna try to crack those passwords myself, it can dump it to a file for me, and I can go after that later. I'm just gonna go with no because I don't want to. Now, it says, \"Do you want to crack them \"via a dictionary-based attack?\" Sure. (chuckles) Why not? We're already here. Might as well go ahead and fire away at that, so it says, \"What dictionary do you wanna use?\" I'm just gonna go with the default, which is the default dictionary that it has available and do you wanna use a common password suffixes? No. Again, I'm going with defaults, and there we go, and now it's churning and burning away at the passwords that it found. Already found one password 'cause we see it hit, right? Cracked password 'abc123' for hash. Here comes another one: cracked password 'charley' for this hash. Here's another password we've just cracked: 'letmein'. Here's another one: 'password' for this hash, and looks like maybe that's all of them. We'll see, right? It'll finish up. It's not a very long word list, so it shouldn't take too very long to finish up, but I love having, again, going back to that script kiddie, we're just pointing things at things, and letting it do what it's gonna do, and it was able to crack a few passwords for us, so it looks like that was all the passwords it cracked, and you can see it's a little janky because I've got the screen so blowed up, but... (swaggering music) - Everyone, it's David Bombal. Really excited to have Daniel from ITProTV back with me. ITProTV were very kind to sponsor this video, so big shout-out to them for sponsoring this video in a series of videos with Daniel. What I wanted Daniel to do is to show us, practically, how to hack networks, so I've brought him on to show us his top five hacking tools. Daniel, welcome. - Hey, thanks for having me back, David. I was super-excited when you contacted us about doing this, right? Going, \"Hey, you know what'd be cool? \"Showing people how these hacking tools can work \"and what they're all about.\" I was like, \"Heck, yeah. Any day of the week. \"Sign me up,\" so I'm glad to be back with you, man. - Yeah, mean it's, we mentioned it before. You can read about it. You can study it, but until you see it, it doesn't really hit home, and, I mean, I wanna try and make these videos as short as possible, so I'm gonna try and keep quiet- - Okay. - and just let you get on with the demo, so go for it. - All right, so if you're looking at my screen, you're going, \"Okay, what's Daniel got going?\" It says Vulnerability: SQL Injection. That sounds fun. It should be fun if everything goes according to plan, and what we're gonna do is we're gonna do a little bit of SQL injection, and we're gonna use a tool called SQLmap. SQLmap automates the process of us performing SQL injection. The only thing we need to do is try to identify the place in which a SQL injection might occur. Luckily for us, we have a vulnerable web application right here that is built purposefully for us to be able to do that, and test these things, play with these tools. This is called DVWA, or the Damn Vulnerable Web Application. I don't name these things. (both laugh) But it does a great job of giving us a playground in which to get into, and so we can check out things like SQLmap and other cool hacking tools, and we're gonna look at this one, maybe a couple of other things that will allow us to do this. I'm just running this locally on my machine in virtualization, so there is a server running. It has network capabilities. We're accessing it through the browser. It's that simple, right? We gotta love that. - Yeah, think we just, just for YouTube, sorry to interrupt you, we need to say that this is not any website out there. This is a local virtualization- - Absolutely. - Daniel's using a test network locally. It's a virtual machine on his local machine. - Yeah, yeah, yeah, yeah. I don't hack people's stuff without permission, and neither should you. It's a great way to get a nice shiny set of bracelets, though, and a cool cellmate, so we talked about that before. We don't want that. - We did. - Yeah. - [David] We did. - We wanna avoid that at all costs. All right, so here we just have the app, right? So it has an input box, and I wanna do something. It says a User ID, so I'm gonna assume they mean numerical IDs, so I'll just try number 1 because number 1's usually admin or something, and that's exactly what we see. That's comes true. Well, ID is 1. First name is admin, and Surname is admin as well. It's the admin thing, so it's just reaching into the background, pulling in this stuff from the database, and spitting it out on our website. Now, that said, I want to grab information that I'm gonna need to give to SQLmap, which is just two bits of info, nothing crazy. One is gonna be the URL itself. Sometimes, well, you're always gonna need the URL. It's gonna need to know where am I going? Who am I contacting and looking for? So I'm just gonna grab that URL right there, right? Slap that and ready to go, okay? Now, once I have that, I'm gonna need something else, possibly, which is, if it's doing any kind of session tokens or anything like that inside the cookies, you might need to grab that stuff. I've also already grabbed that, and put that in our SQLmap command, so that said, now that we have those two pieces of these elements, and you can get that through your, if you're like, \"How do I get a session token?\" You just gotta look in the inspector tools. You can look through there. Could use something like Burp Suite to grab that, which, spoiler alert, I use 'cause that's a simple way to do that, and once I have that, now I can feed those to SQLmap, and run SQLmap to see if it can automate the process of finding and exploiting an actual problem in this web application. - So let's hack it, and then I'll ask you to show us how to get that information manually. - Shall we, then? Let's do it. - Yeah, go for it. Go on. - Okay, let get here. I'ma grab my terminal. I've already pasted that stuff, all that information, right? Like there is my URL you can see that, right? - -url, and you just start the command with sqlmap. I give it the URL, --url. There it is. dvwa. There's the vulnerabilities. squli, and it's that id=1 that you see right there. That's what's gonna be the what's called injectable area. I know that because I know how SQL injections work, but if I didn't, it wouldn't matter. I just grab this, slap it in here, unlike, David likes to say, script kiddie the thing up and just see if the tool will work for me, right? So there's all that stuff. What else do we have? And then, below that, yes, there's the session cookie, so the security is set in there. - Yeah, yeah, we'll explain all of that in a moment, Joe. - Yeah, yeah, yeah. - All right, let's get in there- - Yeah, but hit Return. Let's get- - Hit Return. Go, go, thing. Do. Do stuff. Oh yeah. It's going. All right, so it's asking me a question at this point, just saying, \"Hey, \"it looks like the back end database is MySQL. \"Do you wanna skip other payloads?\" Yeah, I wanna skip other payloads. Do the thing. Do I want to include all remaining tests? I'm just gonna hit the defaults on this, so move along, little doggy, and now it's testing, right? It's doing all that automation stuff. It's looking- - Script kiddie mode, yeah. - Yeah. Oh, this is full-on script kiddie. It's funny, though. It is a valid tool, though. I only have... If I was an actual pen tester... It's asking me something else. It does say, \"Look, the GET parameter 'id' is vulnerable. \"Do you wanna keep testing the others?\" Nah, I'm good. If you got one, go ahead and hit it. You'll notice that's the default, but if I were a pen tester, I would want to, I wouldn't wanna spend all my time manually enumerating a SQL database. I would just wanna get that stuff. You'll notice, here are all the databases that it was able to see within that MySQL instance. We have a lot of them, right? But the one we're looking for is the DVWA, which is right there. Right, now I know the name of the database. Cool. I've figured something out. We've done something, and it worked. I enjoy it. All right, I'm just gonna press up arrow so I can get this going back again. Now, I need to enumerate that database a little bit, right? So I want to know what the tables are, so --tables in -D, which is gonna tell it the database, which is called DVWA, dvwa. Hit Go, and now it should tell me the names of the tables that are inside of that database, and we do see that right here: 2 tables. We've got one called guestbook and one called users. Which one would you like to look in, David? - I think, perhaps, users, yeah? - Users? Okay. I'm, I thought guestbook was gonna have all the money in it, but what the heck, right? If you want users- - [David] Admin gets user- - Yeah, this is your show, so we're just gonna go the way you like. All right, so I'm gonna go over here, and I'm gonna change this. I wanna look at the columns just to see what column names are available. Columns, like that. I wanna see the columns that are in that table, and then I also have to tell it -T for the table name, which is users. All right, firing away again, and there it goes. It's showing me the different columns, and the information that is stored inside of those columns, so there's one column called password. There's one called users. Well, it's not showing me the information in it. We will see that in just a second, so this is all nice, right? 'Cause you got password. You got user. You've got when they've last logged in, whether or not they've had failed logins, user_ids, all great stuff, Cool, we're about to own this database total money. We're actually gonna look in the database and see that information. Well, even farther, like down to the nitty-gritty, the important elements that could actually be useful for us if we were doing this as a, like a job or something, right? So I'm just gonna change this dash columns to dump. I want you to dump the database. Go, and as you can see, it does the thing. Oh, look at this. It says, \"Recognized possible password hashes \"in column 'password'.\" Well- - Nice. - How 'bout that? Nice going there, SQLmap. Good call, and it says, \"Do you wanna store hashes to a temporary file \"for eventual further processing with other tools?\" So if I wanna try to crack those passwords myself, it can dump it to a file for me, and I can go after that later. I'm just gonna go with no because I don't want to. Now it says, \"Do you want to crack them \"via a dictionary-based attack? Sure. (chuckles) Why not? We're already here. Might as well go ahead and fire away at that, so it says, \"What dictionary do you wanna use?\" I'm just gonna go with the default, which is the default dictionary that it has available, and, \"Do you wanna use a common password suffixes?\" No. Again, I'm going with defaults, and there we go, and now it's churning and burning away at the passwords that it found. Already found one password 'cause we see it hit, right? It's cracked password 'abc123' for hash. Here comes another one: cracked password 'charley' for this hash. Here's another password we've just cracked: 'letmein'. Here's another one: 'password' for this hash, and looks like maybe that's all of them? We'll see, right? It'll finish up. It's not a very long word list, so it shouldn't take too very long to finish up, but I love having, again, going back to that script kiddie, we're just pointing things at things and letting it do what it's gonna do, and it was able to crack a few passwords for us, so it looks like that was all the passwords it cracked, and you can see it's a little janky because I've got the screen so blowed up, but if you try to follow the bouncing ball, here's the first. Actually, what I can do is this. There's the first entry, right? That anything highlight is within that, so we've got a user_if of 1. We've got a user of admin. We've got where the avatar lies. We've got a last name of admin. There's the password hash, and it's kinda broke-a. Let me see if I can... There we go. S'make it a little neater for us. We can see that the password is in parentheses right next to the password hash, so I don't even have to go back up and try to one-to-one correlate thing. Puts everything right there, so now I have usernames and passwords from this application. I could then use those usernames and passwords, specifically that admin one, to log into the application as a admin, and perform further damage, so if I was an attacker, I would be going after all the goods, right? Find all that sensitive information: PII, credit card information, that kind of stuff, grabbing that, exfiltrating it, all through just pointing and clicking a tool at it, and unfortunately, I have found something that works even more simply than this in the wild. Obviously, we won't do that, but I could read their entire database, and it was a live website, and I'm like, \"Oh, this is not bad. \"We need to let people know that we gotta fix this up,\" but there you go. SQLmap, hopefully you're seeing, at this point, why I like this tool because it is pretty simple. It is pretty straightforward. You give it a couple pieces information, and you let it go on the thing, and you're in a database having a good time. - Okay, so video can end now. No, I mean, seriously, what I wanna do is I wanna now get you to explain what you did because we did the script kiddie top thing, which is fun. - Okay. - But now let's step back and work through the process so we understand what you did, so if you can go back to the website, and let's start there, so- - [Daniel] Sure. - I'm gonna try and bring the level down, so anyone who's new to this can kind of understand what we doing. - M'kay. - So basically, what you've got is you've got a website, and it's got a SQL database on the back end. - Yes. - Something like that, and when you put in the User ID of 1, it's basically sending a query to the database, and that information is returned back to the web page. Is that right? - Yeah, that's exactly right, so the code on the back end of this page, it's gonna, this page, this code is gonna take in the information that we feed it through the input, right? So we have input right here. That's all that means is a place that the person on the other end of the world, or the computer, or whatever is able to give it information, and it will take it in. That's just the basic idea when when we say input, so the user has a place to input. From there, it takes that input, and then it slaps it into a SQL statement in the code on the back end, on the server side, right? So the server that's generating this website, that's generating this web page, is servicing the web requests that we're making with it, has an area that says, \"If you take this in, \"and this value, this container has value, \"read whatever it is that's in there, \"and slap it in the SQL statement, \"and then use that to query the database\" because there's a language for querying SQL databases called Transact-SQL or T-SQL, and that's what's being done. There is a T-SQL statement in there that can be put in through, I guess this is a PHP application, so PHP can interface with Transact-SQL. You can put Transact-SQL statements in your PHP code, and it can process it for you, so it will then reach into the database. It will perform that Transact-SQL statement, get the results from it, send that back, put that inside of a variable. The variable would then be interpreted by your website's code, and then the code will get generated, and you have a website, and have things like this that return to the other side, so that's the basic idea of actually how most web applications work. I have a front end. This is what I see and what I deal with. I have places for input, and on the back end, I've got databases and server-side code that does things, and I wanna interact with that stuff and make it do weird things that it's not meant to do. SQLmap allowed us to do that. - So show us your SQLmap statement again so we can- - Sure, sure. (indistinct) over there. - [David] Pick your brain about it. - Let's do this. - So maybe just open another terminal or something, and- - [Daniel] Well, I'll just do up, and then- - [David] Oh, there we go. Yeah. - [Daniel] And I can get it in the middle of the- - Oh, there we go. Yeah. - [Daniel] Whoop. I'm actually firing it away. (laughs) Don't do that. All right, then I'll... Let's start with the first one, actually, 'cause that was the last- - Yeah (indistinct) beginning. - Let's see. There we go, so there's our statement. (David speaks indistinctly) - [David] You got the, the command is SQLmap. That's the application that we're running, yeah? - Correct, so this is the command. This is the binary, the executable, the program that we wanna run, and then you've gotta start giving it some information, right? So the first thing we give it is this --url. I think- - Where do you, where do you get that from? - So if you wanna know more about what SQLmap can do, most good programs give you help, so if I did sqlmap --help, and let that propagate, you can see they got all these wonderful things that we can do, right? So you can see here, I could've just used a -u or --url. I like using the longer form because it helps me remember this is what I'm doing with that, so when they have that available, I like to use that, and when I'm demoing, it's super helpful for people that are saying, \"Well, I know what a URL is. Okay, great. \"A -u, that could be a user. \"That could be something else,\" so when it's verbose like that, I like to use that. - [David] And the actual URL. Did you copy that from the website? Or where did you get the URL (indistinct) - Right, that's, exactly. You know when you go into your browser, and you type in I wanna go to google.com, or I wanna go to ITPro.TV, and you type that, and you hit Go, and it goes, in that bar, just copy and paste what you think would be a good site or a good URL to feed to SQLmap to say, \"Hey, look here. \"I think there might be a SQL injection vulnerability. \"Check that out for me, will ya?\" Or you're just like, \"I don't know. \"Here's a URL. Check it.\" If it doesn't like it, it'll say, \"Hey, this doesn't look right,\" and kind of complain to you, so it does give you some helps as well to tell you that, \"I don't think you're on the right track here.\" - So you actually pointing it to the website, not to the back end database. Is that, right? - Right, so the site itself is what interfaces with the database, so what I wanna do is I need those parameters that are sending that information, so sometimes, you get it all in the URL, like what we had here, so let me bring that back. - Can show that URL again. Yes, so- - Yeah, let me bring that back up, and then Control-C, there we go. - [David] So I mean, you've got vulnerabilities forward slash- Right. - Sorry. You got the domain name, and then it's a- - Right, then it's- - Bunch of stuff- - What's called a directory, right? You got a directory called DVWA. You got another directory called vulnerabilities, another directory called sqli or SQLI, and in there, after that, that's where we start giving it, where it's taking its parameters. This is where we're feeding it actual information input from us, and it's just formatting it in the URL. It could look different than this. You could just see the URL itself without that stuff, and those things can be added as what's called POST data. That's a HTTP method of interacting with an HTTP server, so- - Yeah, you often, you often see that question mark equals something (indistinct) - Yes, yes- - When you click- - So, so- - [David] When you look at URLs, yeah. - That question mark is saying, \"I have, \"I'm gonna define a parameter for you, \"and then I'm gonna give that parameter values,\" hence the equal sign, and if that's valid, then it will be able to, it'll be useful to the website itself, so that's what we see here, and that's why it's been programmed in the URL. - So Daniel, because you're a hacker and I don't trust you, can you go back to the website, and just copy the URL into the command prompt so we can compare the two. - [Daniel] All right, I'm gonna, there's the URL. Just highlight it, right-click, copy. - I can't trust you. - Right? Magic of TV. You just lost it all. (laughs) Paste. There we go, and- - [David] So that's essentially the URL, yeah? - [Daniel] Right, so if you look- - [David] And then you made a special change where you did like a backslash at some point. - I did, so there is an ampersand. If you guys, it looks, the and symbol that we typically think of. It's called ampersand, and you'll notice that in my code, or in my format, I put a backslash there. That ampersand can be interpreted by the Bash interpreter, the terminal itself, as a special character, and it was kind of freaking it out when I was working this up was \"Ah-oh, it doesn't like that.\" I need to negate that and tell the interpreter, \"That's not a special character. \"It's just a character treated as a regular character,\" so putting that backslash in there, that's what that was for. That's what did that. - [David] Okay, so we've got SQLmap is the application. - [Daniel] Yes. - [David] We've got URL, which is just one of the options for the application- - Absolutely. - [David] And then you copied the URL and made a slight adjustment. - [Daniel] I did. - [David] And then you've got like cookie security stuff. What's that about? - All right, good question, right? 'Cause this is something that you may or may not encounter. Most of the time, you're probably encounter having to do this. This --cookie, it's kinda broke up. You got cook over here and ie over her, but after that, you'll notice I put it in quotations, and you can use single quotes or double quotes. If there are single quotes or double quotes within your string, you'll probably wanna use the opposite to encapsulate it, so I'm encapsulating my cookie from my browser, so when you go to a lot of websites, most of 'em will give you a session token of some sort, and usually, that's within the form of a cookie, and that just lets it know that you are you, and I'm not David, and David's not me. It's the law of identity right there inside your web browser just going, right? And having a good time. - That's how goo, that's how Google tracks you, isn't it? Something like that? - Yeah, exactly. This is the, usually it's meant to give you enhancement to your experience, so I don't have to continue to tell you that I like brown shoes instead of black shoes, or whatever it is, right? It keeps that information, and it encapsulates that within a cookie, and here, we're just seeing that the session token itself is also in the cookie, and I need that, and I also wanted to make sure that security, right? So that's another piece of information it's giving me. I set the security standards for the website to be low, so we can do the demonstration without having to get way too technical, and making sure that everything just works fine, so I had to grab all that stuff, and just slap it in here. I used Burp Suite to do that because it can- - [David] Can you show us, can you show us how to do it manually if you don't have- - Oh, yeah, yeah. You can grab that stuff from the developer tools inside of your browser, so an easy way to get to that is just right-click, and go to Inspect Element, and that'll bring up your developer tools. They're usually in wicked tiny font. They are, and for me, since I'm using Firefox, I've got a little box here. Let me, let me, ooh, I'm hitting, I'm hitting things. (laughs) Let's do this. Let's see here. I've got this little box called Storage. If I click on that, you can see there are those values. Session ID, right? And if you look over, there's the value of that piece of token. This is a little, little truncated. We can kinda move that out, and you'll notice that security was set to low, so I can grab those values straight from this. Chrome will be different, and IE will be different, and Edge will be different. You just gotta kinda fiddle around inside of there, and look for wherever it's storing this information. Just kind of click around. Don't be afraid. 'S why we're hackers, right? We wanna understand things. We wanna poke it with a stick and see where things stuff, and (indistinct) just gotta find it, and once you do, hey, there it is. Grab it. It's separated by a semicolon. That's all you gotta do, so you got one value, like security equals low. Boom, semicolon, space. Next value, which will be PHPSESSID, I think it's called, and whatever it equals this value. Boom. I'm done. Put it in single quotes. You've got yourself a cookie. - [David] So I mean, if you scroll left on that 'cause you've Zoomed in, those are the two, yeah, so then you got PHP session ID, and security, and then you've got the actual values. - [Daniel] Yeah. - [David] That crazy number, that mode. - Yeah, which is, I think it's just a md5sum. It's just a hash value that they use so that you have some sort of unique identifier that's easy to create. - [David] And so if you go back to your command prompt, you literally copied those. I mean, you used Burp Suite to make it easy- - Yeah, 'cause I can just- - You're basically- - swipe and paste, but yes. - [David] But you're basically, if you can go back to that- - Just right here. - Yeah, so if we, there they are, so security's low. - And then the PHPSESSID- - And the session ID- - Yep. - [David] Okay, so, so we, the whole command we've explained thus far- - Thus far. - [David] And then, what's the, what's the dump and stuff again? - All right, so we actually went through quite a few different things. The first one we did was -dbs silver. Let's, let's do SQLmap- - Yep, let's do it again if you don't mind, and I will go slowly this time. - Yeah, yeah. I'm just gonna do the --help feature, and that way we can look for that- - Oh, okay, gotcha. - And let's see here. Where's that dbs hidin'? We might have to go into the man page. DBMS, so if you don't get enough information out of this, most of these things have, well, beyond help files, which is called man pages. Man sqlmap, and in there, I can just do a search for -dbs. There we go, and that -dbs functionality says Enumerate DBMS databases, so look for- - [David] What does that mean? - Look for, um, what, uh, what is that? 'S go back. So what that means is go back up here, and I wanna get there. DBMS is basically what is the database type? Find out what that is, and then look for the databases that are inside of it. That's generally, that's basically what the idea is: Just find out what type of database we're running here, and figure out whether there are any like what the names of those databases are that are running in that instance. - So could be like MySQL, as an example of a SQL database. - Correct. MariaDB would be another one, right? And maybe it's an Oracle database. Maybe there's a myriad of different databases that it can find, and you wanna know which one you're working with so that you can give it the right type of syntax and work with it correctly, so there you go. From there, once we got that information, then we were digging a little bit deeper, right? - [David] Do you mind running the commands again? (indistinct) - Sure, not, not a problem. Let's see here. - Let's start, let's go through the whole thing again, just slowly. - Sure. I'm just gonna start from the top. That way. Where we at? There we go, so there's the dbs, right? We run that, and this oughta run really fast now because it kind of caches this stuff, and then, you can see, it found available databases, and there were 17 of them, right? The back end DBMS was MySQL. Looked like it was greater than 5.0, so the version it gave, it gave me some versioning information, so all of these where it says available databases, anything underneath that is telling me this is the name of a database in this database server that I could reach into and give you information about. Which one would you like? Just like you were if you were actually at the terminal itself interacting with MySQL, going, \"Oh, okay. \"Show databases semicolon enter,\" and it would, pssht, it would spit this exact thing right out. You would go, \"Cool, I wanna use DVWA semicolon enter.\" Bam, and it would go, \"Okay, you're now using the DVWA database. \"What would like now?\" Next thing I want is those tables. What tables are in this? So from there, we just ran, we took dbs off, and we said --tables, and then -D for the database, which was called dvwa, so the -D is saying, \"My database name is going to be dvwa.\" Now, if that's not a legit database, it'll error out, and you'll have problems, but I wanna get the tables that are inside the database. Bam, fire away, and there they are, right? So I've got two tables inside of this database. One's called guestbook. The other's called users because you're a smart person. You decided let's look inside of that users table, right? That was the next thing we needed to do was to look in that users table, so backup, change this. Oh, actually, that can stay the same. I will do -T because the table is gonna be called users, and then I wanted to see what columns were available on that table, so I'll just change that to columns. Fire away, and it tells me here are the columns, the attributes of this table. There's information in those, and what type of information it is. This column is called password. This column is called user, and it is, it contains characters, right? We've got avatar, failed_login, so on and so forth, so at this point, as an attacker, or a pen tester, if that's what I am, hopefully that's what I am, and not an attacker, I'm going, \"Oh, this is all really good information for me \"as an, if I were an attacker, I've got, I've gotta have a talk, and write this up in my report saying, \"Okay, I was able to find usernames and passwords \"through SQL injection. \"Here's how I did that. \"Now let's talk about \"how we can remediate that problem,\" right? So now that I know that users and passwords are things that I want, I just wanna now just dump them information that was in the database, and that brings us full circle back to just dumping, so I just changed this from columns to dump, so that it will dump the contents, and that's when it was like, \"Oh we found hashes,\" right? It said, \"Looks like password contains password hashes.\" Cool. Do you want me to try to crack them? Sure, which it already did, so that was super-fast, and then, of course, it dumps the contents of the database. I can, I could kinda do this and show you. That would be more along the lines. I don't know if you guys. It's really, really small, but you can see it's a little nicer formatting. I can see it fine, but I know that's really hard for everybody at home, so I wanna keep it where you can see it. It's just giving me all those those columns, and the information inside of those columns, and those rows, and we are now king. We have a username and password. We can log into the system. If we wanted to, we could we could grab one of these, so like the user account here for gordonb, right? Okay, gordonb, his password is abc123. Let's give it a shot. Let's pretend gordonb is the admin of our web application. Let's go and see what happens when we go to the web application, right? I'll close these, and these tools. I will log out, and I will log in with gordonb password abc123. Oh look, we were able to log in, and it shows me logged in as gordonb right down here, so I'm now able to impersonate people, go in, make purchases on their behalf, change their information, do all sorts of horrible heinous things, so that's the importance of trying to keep databases safe from things like SQL injection, and using things like parameterization, prepared statements, input validation. These are all the things that we need to do. Of course, secure coding practices that implement all of those things so that we don't allow for this, but man, it sure was easy using SQLmap, and hence, why I like it. - Why's it called SQL injection? So just let me ask some very basic questions. - Yeah, so it's called SQL injection because of the idea around the input, right? I was able to input something into a SQL statement, and from there, that's what causes the problem, okay? And actually, I wonder if, yeah, I don't remember if DVWA does this. Let's go to SQL injection, and, oh yes, excellent, View Source, so they kinda give you this wonderful little thing, so you can kinda see what's going on, right? So this is the code that runs this, and there is this Transact-SQL statement that is causing our problem, okay? You'll notice it says SELECT first name, last name FROM users WHERE id =, and then it takes this parameter in. Whatever that is- - How, so I wanted to ask you how did you know one? That's just guessing because admin will probably be one, is that right? - Yeah, 'cause most of the time when it comes to user creation, the first user that gets created is the administrator because they're setting everything up, so it's a really good guess. If one's not it, maybe try zero 'cause a lot of systems count from zero, so you know, you bounce around there, and see if anything. Doesn't mean that other users couldn't also be admins. It just means it's a good bet to see if there is an admin user. It usually is number one, so there's that, but this statement is basically taking that information, whatever I put in that input box, it just slapped a one. Okay, one, that's fine, but what if I gave it like a special char? Remember how we had problems with that special character in my Bash interpreter? It was like, \"Oh, that was an issue.\" I had to negate that. You guys didn't see that, but 'cause I prepared for that, but if I didn't, we would get all sorts of funky, weird errors. It do something strange. That's what we're doing. That's why they call it injection because I'm injecting characters that are gonna cause it to do things that it wasn't designed to do, but does, nonetheless, so I'm injecting those into, and that's why we call it SQL injection. - So you're actually just reading from the database here. You're not really writing to the database. Does it have the ability to write? - Oh, yeah. It has the ability to write. That's a bit more technical. That takes a bit more effort to do. - We'll leave that for another time, but that's good to know. - Yeah, that's something I have done and can do, but it's definitely a lot more lift. You gotta understand a bit more about Transact-SQL to be able to perform that attack, but yeah, and then, if I can write to the database, I can do things like create users. I might even be able to reach, and not only write to the database, but also write to the file system that the database sits on and say, \"Hey, put a file in a slash temp directory, \"or put it right here in the web directory, \"and while you're at it,\" you know, \"make that file this,\" and it's, inside of that file's gonna be like some malicious PHP if it's a PHP application, and then, when I browse to that, it will execute that because it's all done under the context of the web application service account, so it just trusts it, and says, \"Hey, I created this. \"It's in the right spot. \"I will run it,\" and it's my malicious PHP code, and now I have shell access to the system, so this is the steps that we end up taking to gain actual interactive access to the system beyond just getting into the database, which is a fun feat in and of itself, and can be extremely devastating, which is what a lot of people want, but if I wanted to then turn this system into something I wanna pivot around in, I wanna use it to start looking for other machines on that backside, and finding, \"Oh, what's beyond the DMZ \"that I normally can't see, \"but because I have access to this, \"it does have access to those other systems, \"and now I can see them. \"Great, I've now got myself a nice little bot \"to do my bidding,\" and there you go. - Yeah, so I'm gonna put it to the, to everyone watching. Do you want Daniel to show us that, perhaps in a later video? If we get more complex, put your comments below. Let us know what kind of tools you wanna see Daniel cover. I mean, we've started with five of the ones that he likes most, but if you got any other suggestions, anyone, any other tools that you'd like him to to cover, not guaranteeing that we'll do it, but put your comments below, but Daniel, I had another question for you. - Okay. - Okay, you demonstrating these VMs. - Yeah. - Where did you get them from? - So this one, specifically, I got from VulnHub, vulnhub.com. They've got a lot of great CTFs, but if you search around, this one is specifically called WebSploit 2018, and it's actually kind of like a hacking gymnasium, a hacking playground. It's got a bunch of different really fun web applications that are specifically broken, and broken purposefully so that we can play with hacking tools without getting in trouble, right? So this is a great one. I always like having this one laying around because if I ever wanna test something, or I need just a playground to throw a new tool at, or see how it works, or something like that, I just spin this up in my virtualization environment, and start poking at it, and seeing what it does, so it's nice to have all those different types of applications. I can not only test and see if I understand a certain concept on one platform. Then I can jump to another broken application see if I can leverage those skills on that platform, and I didn't have to get another virtual machine and stuff. There's a bunch of different stuff in there. It has Juice-Shop in there. It's got WebGoat in there. It's got Mutillidae. It's got bWapp. It's all sorts of great stuff running in there, so I like it's kinda like a all-in-one solution for me. - So, I mean, just to, if someone wants to replicate what you've done, I mean, I'll put links below, but, I mean, you've got one VM running in VMware. - Correct. - And then you've got, that's the one that's running this application. - Yep. - And then you've got Kali, or Kali Linux, if you prefer, running in another VM, and you're just connecting them locally on your laptop. Is that right? - Yeah, because of the insecurity wrapped around these applications, you typically don't want to expose them at all to the Internet, so what you can do is just create a host-only environment, something that's controlled, and only within the virtualization software itself, and not actually reaching out beyond that, so that's what I've done here to keep everything on the safety. Like we like to keep like safety first. - Yeah, so I mean, it's basically limited to your laptop. - Yes. - But the great thing here is someone else can replicate this as well. - Oh, easily. - I'll put, I'll put links below if anyone who wants to download it. Anything else you wanna talk about with, I mean, this was a fantastic demo, so really, thank you for showing us. Anything else you wanna talk about the specific SQL injection pack? - You know, it's funny. You tend to, as you to teach these things from time to time, you kinda get jaded to the cool factor of it, and then, every now and then, a story will break on the news, and go, \"So-and-so was breached today \"due to what's called a SQL injection, \"or an injection attack,\" and you're like, \"Oh, there it is.\" You're thinking, \"I'm ridding the world of this.\" Nah, it's still out there. We're still humans. We still make these mistakes, these coding errors that allow for these type of things. As an attacker, they just have to be diligent enough to continually scan. They've got that on their side: plenty of time, so we need to be doing our best practices of making sure that we are using all the mitigations, and best-practice strategies, and security controls that we have available to us to keep this kind of thing from happening because if it does, well, we've seen how devastating it can be even if that's in a controlled environment. - So, I mean the, how would you stop this? Is this where it comes to like proper development? Someone who's gotta write their code right? - Yeah, so that comes back to I was talking earlier about the remediation strategies like you have, first, you'll probably start with some sort of input sanitization, so if I give you input as an end user, I wanna make sure that that input doesn't contain anything that could potentially cause a problem, so I'll make a list, and basically, what's called regular expression, and say, \"This is my list of characters \"that we're gonna not allow to pass through,\" so if I see 'em, I'm gonna strip it off, or maybe even warn, \"Hey, you've got a bad character there. \"Don't do that. We don't allow that.\" Most people just strip it off, though, and say, \"Okay, those characters aren't allowed. \"That character's not allowed,\" and programmatically, will re-form the input so that it is acceptable on the other end. Now, there are ways to get around that, so we also wanna make sure that we're doing things like prepared statements, and these are like instead of injecting into the statement, we say, \"Oh, this is the statement which you wanna make. \"I've got a list of statements that are fine. \"Let me use one I've already prepared \"so I'm not passing along that SQL injection,\" so that helps a lot with that. Those two things right there are the main ways in which we stay out of the weeds with SQL injection. - That's great. I mean it's, you often, like, you watch the \"Mr. Robot\" series, and then you think, \"Okay, is this actually real?\" And you've shown us a very simple example of an attack that anyone could, script kiddie, or someone who really knows what they're doing could leverage. - I think the \"Mr. Robot\" series has gotten a good rap because it has taken some pretty good pains to try to stay as accurate as possible, so it is extremely accurate when you watch a lot of what they're doing. I haven't seen too many mistakes. I can't think of any off the top of my head where I was like, \"Oh, uh, that's not right. \"That's not how that works.\" Typically, you're like, \"Oh yeah, that's legit right there,\" so it's a cool series as far as that goes. Obviously, it's got some interesting storyline to it as well, but- - [David] Yes. - The technical side of it is pretty on par. - That's great, Daniel, so thanks very much for showing SQL injection. To tease for the next one, what are you gonna show us next? - Oh, that's a good question. I wasn't prepared for that. I don't know 'cause I've got a few of 'em. Let's, how 'bout, how 'bout the next one we'll do is Metasploit? - Great, yeah, I look forward to it. Thanks very much. - Hey, no problem. Thank you. (swaggering music)",
    "transcript_keywords": [
        "yeah",
        "SQL Injection",
        "database",
        "SQL",
        "URL",
        "things",
        "password",
        "called",
        "information",
        "back",
        "thing",
        "stuff",
        "SQL database",
        "called SQL injection",
        "SQLmap",
        "kind",
        "User",
        "SQL databases called",
        "users",
        "Injection"
    ],
    "transcript_entity_values": [
        "first",
        "DBMS",
        "Bash",
        "Metasploit",
        "SQLmap",
        "PHP",
        "Mutillidae",
        "Oracle",
        "Juice-Shop",
        "Joe",
        "17",
        "PHPSESSID",
        "Chrome",
        "five",
        "Burp Suite",
        "Daniel] Whoop",
        "One",
        "two",
        "Control-C",
        "Storage",
        "SQLmap",
        "bWapp",
        "2",
        "PII",
        "zero",
        "second",
        "Edge",
        "WebSploit 2018",
        "Google",
        "David",
        "today",
        "number one",
        "Firefox",
        "DMZ",
        "Kali",
        "SQL",
        "SQLI",
        "HTTP",
        "one",
        "Robot",
        "VulnHub",
        "VMware",
        "Surname",
        "Bash",
        "View Source",
        "WebGoat",
        "Inspect Element",
        "SQLmap",
        "Transact-SQL",
        "SQLmap",
        "Daniel",
        "ITPro",
        "Kali Linux",
        "First",
        "1",
        "SQLmap",
        "VM",
        "YouTube",
        "David Bombal",
        "POST",
        "T-SQL"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "ORG",
        "PERSON",
        "PRODUCT",
        "LANGUAGE",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "DATE",
        "CARDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORDINAL",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "PERSON",
        "WORK_OF_ART",
        "ORG",
        "FAC",
        "ORG",
        "FAC",
        "ORG",
        "PERSON",
        "PERSON",
        "PERSON",
        "PERSON",
        "ORDINAL",
        "CARDINAL",
        "GPE",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG"
    ]
}