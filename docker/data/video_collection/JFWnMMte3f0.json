{
    "id": "JFWnMMte3f0",
    "title": "Mind Blowing ðŸ¤¯ Reverse Shell Demo with DNS data bouncing exfiltration!",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2024-03-31T14:00:17Z",
    "video_url": "https://www.youtube.com/watch?v=JFWnMMte3f0",
    "category": "Science & Technology",
    "tags": [
        "hak5",
        "hak 5",
        "hack",
        "hacking",
        "hacker",
        "infosec",
        "cybersecurity",
        "information security",
        "window",
        "microsoft",
        "windows 11",
        "reverse shell",
        "netcat",
        "omg cable keylogger",
        "remote access tool",
        "ncat",
        "ethical hacking",
        "reverse powershell",
        "powershell",
        "kali linux",
        "rubber ducky",
        "usb rubber ducky",
        "hak5 omg",
        "omg cable",
        "hak5 omg cable",
        "hak5 omg cable tutorial",
        "remote control",
        "windows 11 remote control",
        "windows 11 exploits",
        "netcat tutorial",
        "netcat windows",
        "netcat listener",
        "microsoft shell gallery"
    ],
    "views": 72015,
    "likes": 2338,
    "comments_count": 207,
    "description": "Big thanks to Brilliant for sponsoring this video! Get started with a free 30 day trial and 20% discount:   The First 200 people that sign up will get a special discount.  Disclaimer: This video is for educational purposes only.  // Jakobys SOCIAL// YouTube:   LinkedIn:   X:   Instagram:   GitHub:   TikTok:    // YouTube Video REFERENCE // Next Gen Hacker?:   The best Hacking Courses & Certs?  Your 2024 roadmap to Pentester success:    // David's SOCIAL //  Discord:   X:   Instagram:   LinkedIn:   Facebook:   TikTok:   YouTube:   // MY STUFF //     // SPONSORS //  Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // MENU // 00:00 - Coming Up  00:57 - Sponsored Section  03:01 - Intro  03:19 - Power Shell Gallery 05:05 - Modules  06:28 - Microsoft Patch  08:04 - Consulting with the Cybersecurity Community   08:58 - Microsoft Honeypot  10:09 - Models by Jakoby  11:33 - Running Models 12:01 - How Models Function 13:43 - The Vulnerability of The Site  15:30 - Ransomware 18:20 - Owning Models  19:13 - Bug Bounty Program  22:23 - Reverse Shell Generator  29:25 - Methods For Execution 31:49 - How To Solve  33:47 - Engage with the Ethical Hackers  34:20 - Exfiltration Data Bouncing  39:12 - Demo  39:56 - Capture DNS Traffic  41:01 - Running Vanish  50:05 - Running A lot of Testing, No Mans Land 52:29 - Get ahold of IamJakoby 54:08 - Hak5 Payload 55:57 - Imposter Syndrome 57:41 - Background Story into Hacking 01:07:27 - Stationed in Hawaii  01:10:00 - Conclusion   Disclaimer: This video is for educational purposes only.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #hak5 #cybersecurity #microsoft",
    "description_links": [
        "https://Brilliant.org/DavidBombal",
        "https://www.youtube.com/c/IamJakoby",
        "https://www.linkedin.com/in/i-am-jakoby",
        "https://x.com/i_am_jakoby",
        "https://www.instagram.com/i_am_jakoby/",
        "https://github.com/I-Am-Jakoby",
        "https://www.tiktok.com/@i_am_jakoby",
        "https://youtu.be/6jqJ7Ga5CoE",
        "https://youtu.be/10P4aoXdXTI",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/@davidbombal",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "And this is going to sound nuts, even saying out loud. When I do data exfil, you often have to provide your Dropbox link. You have to provide your Discord web hook. You have to provide whatever it is. But the thing is, is at the end of the day, you are providing something that you yourself own, you yourself has control over. What I'm about to show you is data exfil over public DNS. I'll try to reword that just in case you didn't catch. This is data exfil over other people's websites. Wow. Every single computer that ran that PowerShell module would get a unique reverse shell ran on their system that I would then have access to and full control over. The truth is I've always been kind of afraid to tell people like where the passion came from, but what was the event that caused you to make this a lifelong passion that you're going to put all your energy into? Do you know the difference between mean and median? Do you know what Simpson's paradox is? What about absolute deviation, variance and standard deviation? Brilliant has a course that can teach you what all of these mean and much, much more and their fundamentals of statistics course. They also have more advanced courses teaching topics like linear regression, hypothesis testing and sampling. There are many, many courses available on Brilliant, a whole array of courses teaching LLM statistics, data analysis and many, many more topics. What's great about Brilliant is they make statistics not to just understandable, but genuinely engaging rather than just watching someone talking, which puts you to sleep. You actively engaged in your learning by using interactive lessons. Again, you're not just listening. You actually doing, you're going to be creating graphs, exploring probability and understanding data like never before. Each course takes you on a journey from basic concepts to complex analysis. You'll learn to craft scatter plots, bar charts and get to grips with statistical techniques used in real scientific research. What's also great about Brilliant is they don't shy away from the tricky parts. You'll explore different sampling methods, uncover potential biases and understand what truly makes data reliable. These courses are designed to be intuitive and engaging. They equip you to read scientific literature critically and understand the world through the lens of data. With Brilliant, statistics become an accessible essential skill. I really want to thank Brilliant for sponsoring this video and supporting my channel without companies like Brilliant supporting me. I wouldn't be able to create as much free content as I can. So big thanks to Brilliant for not only creating amazing courses, but also for supporting my channel to join the statistics revolution with Brilliant. Start with any of their comprehensive courses today. You can visit brilliant.org/davidbombal for a special offer available for the first 200 signups. Let's conquer statistics together with Brilliant. Hey everyone is David Bombal back with a very, very special guest. Jakoby, welcome. Um, how you doing, David? I really, really appreciate you for having me on. Choose your hacker. I am Jakoby. Demo part one. PowerShell gallery. All right. So here we are. We're looking at the PowerShell gallery, right? So this is the web version of it. Most people access the PowerShell gallery, obviously through the PowerShell console. Some of them don't even know that this website even exists. What is this just for everyone who's not, who hasn't seen it or don't know what it don't know what it is. Correct. So the PowerShell gallery is a centralized repository for people to share their code, share their scripts, share their modules. With the rest of the community, you know, it's really nice to have. And a lot of good things have come from it. But being, you know, PowerShell focused like I am, this is something I took a deep dive into. And there are definitely some things that you can do that you should not be able to do. And I definitely have reported these to Microsoft. Yeah. So you can go through here and like I'll type in C2. Essentially, what I was doing once upon a time is you have these descriptions for these PowerShell modules. Now, these descriptions for the PowerShell modules are easy to be queried from the PowerShell console. And you could put whatever data structure that you want inside of them. So I were to open up our show window right now and we were to look up that C2 module. We would literally just use our fimo C2 description. And you'll see that it will return the description fields for any of the modules you're looking at. That's a pretty standard, a pretty standardized feature. If you're looking here, you're going to see that my description kind of doesn't look like the rest of the descriptions in here. And this is kind of a journey that we went on to get to this point. Essentially, what I used to do is I would just put straight PowerShell code into the description of these modules. Now, with modules, there are certain safeguards in place to try to prevent the code from inside of them being run on systems without some sort of check. So, for example, in order to use install module to pull one of these down, you have to have the NuGet package on your system to give you access to this gallery. So you can't just upload code on here that would be, quote unquote, trusted without having some sort of gate to prevent it from instant execution. The thing is, is since you can query these, you can just take it and then instantly pipe it into IEX and it'll run the code that is in the description field. Now, in this instance, it won't run it right away because this is indeed Base64. So that was the original bounty that I turned in starting out. It ended up growing over time to be more exploitable. And to be honest, I don't want to share everything on here. I am still trying to work with Microsoft and get them to fix a few things. And I'm not trying to. Some of it's a little bit too much. So I'm not trying to put weapons directly into people's hands. After I was reporting this once upon a time, I had actually got a contact from Microsoft, reported it directly to that contact. And then two weeks later, there was an attempted patch that they put out. So what they ended up doing is they they put the description of PowerShell modules into PowerShell constrained language mode. It means there's only seven variables that you're allowed to use that are already predefined by the system. Henceforth breaking it so you can't put code into there and execute it. It won't work. So one of the first workarounds you would think to do is, well, I'll just convert it to Base64 first, because if it's in Base64, there are no visible variables. I can still keep code in there. I just need to convert it from Base64 and execute it. So I was sitting there almost laughing at them like, I can't believe you guys just that's all you're going to do. So I ended up trying to do that and converting it from Base64 or converting to Base64 in the description, pulling it down, converting it back and then executing it, and it actually wasn't working. We ended up doing a little bit of digging and did some research. And it turns out that at the end of all of these modules, you can't actually see it, but there is a hidden Punjabi character at the end of this right here, right past that equal sign. You can't see it, but they put it there so it breaks the code. So when you pull it down, it doesn't execute properly. Now, the reason that companies like this should really try to reach out to the people who found the vulnerabilities is because it only took us about 30 seconds to make a workaround for their new fix. And that is literally done. Yeah, that's literally done with nothing more than a regex statement. So I'll show you an example. So this is the workaround that we had for them putting the hidden Punjabi character at the end of the description module. So you'll see C2 right here. That's the module that we're looking at. They put that little Punjabi character at the end. All you have to do is do replace and this little regex statement and it'll wipe any characters from it that are not supposed to be in and then just execute it like normally. So it was an immediate, easy fix, an immediate, easy fix. So, you know, again, that's one of the reasons that when these companies, when we reach out to you and we tell you, hey, this is an issue, we found you should really consult us. And I was going to say it's a problem because people like you who are the ethical hackers need to the company should talk to you because you discover this stuff. If you don't fix it or don't engage with the cybersecurity community, then the black hat hackers are going to break in. Has this got anything to do with this hack that happened recently at Microsoft? Oh, see, look, someone's connecting the dots. I did look into that one with a friend of mine named James. And we did come to the conclusion that we think that Microsoft actually played them. I can't confirm it, but I think that hack that took place might have actually been a Microsoft honeypot. I think they might have actually done well on that one. On that one specifically. Now, the problem is, is that the way that they describe the attack, they didn't even want to say that they were hacked because someone got access to a legacy, you know, a legacy account and did escalation from there. And they said it was through brute force and password spraying as well. But the problem is, is that companies like these, they ignore certain vectors of attacks because they don't fall in the current guidelines for the bounties that they award. So they just sort of don't take them seriously. But the thing that's crazy about this and I'm about to show you this now. So C2, I am Jakoby. This is me. We're going to look at some of the other modules that I've done. The thing is, is I actually also I own the module called PowerShell. I own the module called PowerShell. Now, that alone shouldn't happen. No, that's crazy. I had to make some adjustments because I was doing some testing later. So this is my own information. But on top of that, on top of owning the PowerShell module from the PowerShell gallery, which is already trusted, if we go back to the previous version right here, you can see that the author is Microsoft and the copyright is Microsoft. You go to package details and it says it's owned by I am Jakoby and it's owned by the Microsoft Corporation. I can kick myself off of here and it'll say it's only owned by the Microsoft Corporation and this is trusted by so many different companies out there. And it gets even worse. So I wrote a script because once I realized that if you look right here, it shows that we have five thousand five hundred and thirty nine downloads. People are actively downloading this. So I had to start looking into it. And as it turns out, there are a significant number of modules in the gallery that are being auto installed on systems and being run. Now, the thing is, is whenever you make a module, you have to install the module, then you have to import the module and then you have to run something inside of it. But it's the only way that we've socially conditioned ourselves to use these modules. But the thing is, is the only reason when you run import module, the only reason it doesn't run any code is because people don't normally put the line to execute the code at the bottom of their modules, but there's nothing stopping you from doing it. So normally a module is just a function. It's not calling the function. You just import the function, then you use it yourself. Well, if you call the function at the bottom of your module, it will run when the module is just import. So we did testing with that. And again, thousands and thousands of people are downloading this module called PowerShell. I'm not going to go through the list of all mine, but I can say that I own PowerShell Core as well. I own Discord. I own Twitter. I own Facebook. I own a plethora of modules that have been getting installed onto computers and just run with no no checks. Now, again, Microsoft can say that's not our problem. It's not our responsibility to control who's downloading and using these. But the thing is, is there are at base level, there are certain module names that should not be able to be taken that you guys should own. You need to take PowerShell from me. You need to take PowerShell Core from me. You need to make it so I can't spoof the author. You need to make it so I can't spoof the copyright. And you definitely need to make it so the package details doesn't say that Microsoft owns this because that level of trust is the same type of thing that was taken advantage of for the current Microsoft hack that you're saying, assuming that it wasn't a honeypot like I'm trying to give them credit. It's that natural low level trust that can very easily be manipulated once you have a foothold and they just don't seem to take those kinds of threats seriously. This is an official Microsoft thing, right? This gallery, is that right? That's correct. Yeah, that's correct. And even honestly, just having the website itself is a vulnerability because you can go to the file list and you can see the files here. And if you go to them, you can see the code. So in here, I just put a fake function that just opens the calculator. But since this is actually here on a web page, if you go to inspect the source, you can actually pull this code directly from the page. So you can use invoke web requests on PowerShellGallery.com. This right here and then regex through the page source, grab the code and execute it with, again, without any of the restrictions that the PowerShell gallery is supposed to have, like with the NuGet package, the mini UAC prompt for it's not real UAC, but like the confirmation to download the module. And, you know, you have PSAES. This is Michael Gadjia. This MIchael Gadjia guy, he is probably the most popular contributor to the PowerShell gallery. You know, if you look at these PS Windows update, he is responsible for 513 million downloads, you know. Well, he's got PSAES like I was just showing you, which is a module that you use to encrypt files, encrypt strings, you know, using AES. Well, since he has the file list here, since he has them right here, like protect AES message, this is the code right here to use AES encryption. And I can pull this on any system that I get access to. I can pull this directly from this site and use it on a target computer, looking like it's coming from a trusted source, coming from MIchael Gadjia himself, and with slight, slight alterations. This is essentially ransomware right here. This is essentially ransomware. And it's just native on all systems. And again, this is just using modules that are already there. Anybody is allowed to publish to the PowerShell gallery without any verification at all. So this is just taking advantage of, you know, preloaded modules that are on here, not counting the fact that you can make your own, do whatever you want and that you have instant access to this URL. And it's trusted on most corporate systems that use the PowerShell gallery to any capacity. I mean, the stuff I've seen from you is like a lot. You use PowerShell a lot and Discord to get data out of systems, right? But this is like something even more scary than like doing a rubber ducky or something. And did I understand that right? Yeah, yeah. Just because it's, you know, it's instantly loaded. You know, I a lot of my payloads, even I'm often just pulling code like this from my own GitHub, from, you know, whatever source you want to host it at. But those are, you know, a lot of times those are blocked or people that do heuristic based behavior detection, you know, won't allow you to use, you know, invoke web requests and, you know, Dropbox or, you know, invoke web requests, Discord or GitHub or whatever it is. But it's not often that they'll try to block access to the PowerShell gallery. So it's, you know, it's just free. So you've raised this with Microsoft as well, right? Yeah. So I've actually had the bounty denied a total of five times now. So they are definitely aware. And like I said, they have been making changes. They did change it again, like I said. So the description itself is in restricted language mode, unless your module was made before they made that change and then your grandfathered in. So all those modules that I grabbed, I can still put code in the description like nothing and run it with no problem. They're essentially grandfathered in. Wow. So I mean, what do we do to resolve this? It's like just make noise that Microsoft hears, right? And they need to do something about it. So I have I have sent them, you know, I have sent them some suggested fixes the same way that I found out that there are a bunch of systems that are downloading my PowerShell. I'll go ahead and give you this one, Microsoft, if you're paying attention. I literally wrote a simple script that I pulled every single module out of the PowerShell gallery, which, by the way, is about 10,600 of them. They list their dependencies in the module. So I wrote a script that pulled every single module down. And then I looked at the dependencies for every single module. I took those dependencies and then I just checked to see if that module existed or if it was a blank dependency. And I now have a very long list of modules that call to other modules that don't exist yet, and I took them. I own them now. I own those modules that don't exist. So if I were to put malicious code into those modules that don't exist, all of those other modules would then download my module, my malicious module, and execute that code the same way that people have been doing with the PowerShell module itself, even something as simple as that. You need to do better monitoring of your gallery. That was really easy for me to find those. And again, it would be hard to implement fixes on those per se. I can't pretend like I have a perfect fix for you. I know that I've tried to engage in conversation with you. That way, maybe there could be some back and forth that would result in better security for you. But to be honest, there only seems to be one person I've talked to so far from Microsoft that would be willing to have that kind of conversation with me. But I don't know if they necessarily have to pull to do anything with it. So you've you've engaged with a bug bunny program, right? Correct. Yeah, that was the initial that was the initial way that I turned it in. And then I turned in another my the second time I turned it in was through there as well. And then I decided I left it alone for like eight months. And then I found some new stuff that I'm not going to talk about on here. I just I can't. It's not right. No, it's too dangerous. I found some new stuff and I was like, I was like, wow, I really need to escalate this. So I actually got a contact on someone through Twitter and reached out to them directly when I submitted all of that ice. And this actually broke my heart. I'm not going to lie. So when I submitted all of that, they didn't talk to me again ever. But two weeks later is when those fixes went in, you know, the power show strain language, putting the hidden Punjabi character at the end of the thing. And so it was heartbreaking to miss out on the bounty because it was a lot of money because even though it's small and dumb, but that's it seems small and dumb. But when you think about how like most most hacking attacks that take place nowadays, they almost always start with phishing. You know what I mean? So we're talking about low level. It's always the low level dumb stuff. So it's just weird that you don't take it seriously. It definitely hurt to miss out on that bounty. But on top of that, there's something I can't necessarily prove. Right. But like we all know that the work that I do is very niche. It's very specific. Like them putting that in character at the end of the description. Like that's very obvious that that was based off my work. Unfortunately, Microsoft, you made me really mad when you decided to not only give me my bounty, but then you I know you went through my GitHub and you made a bunch of changes based off of my work. And you actually know that as well. We had an interview set up for a couple of months ago and they released patch notes. I was on the computer at eleven thirty eight, making sure my stuff still worked for you and it wasn't anymore at midnight that night. They released patch notes that fixed a bunch of the exploits that I was using. And that led me to actually happening to close down my very first workshop that I was ever going to do. I was doing it on October 8th on my birthday. I was so excited. I had a bunch of people sign up for the class and they did so much damage to my work that I had to cancel the workshop and refund like seven grand, which is an insane amount of money for someone like me. And that's because they patched it right. That makes. Yeah. And it's it's it's heartbreaking. That it's heartbreaking and it's bad for you because I don't necessarily feel the same. I don't feel as compelled to turn stuff into you anymore. And I feel like other people probably feel similar. This is a problem. But it is a problem. A lot of people have this issue, right? Because they submit stuff to companies, they get ignored or they get sued. Companies need to do better and engage with a community of ethical hackers to, you know, secure their systems. Correct. And so I want to show you a project that I started working on a couple of months ago that has landed me some really amazing opportunities recently. And then when you see how something like this can be plugged into this PowerShell gallery exploit the same way I can put any code into any of these demo, polymorphic reverse shell generator. Right. So this is just Terminus. This is just an SSH client. We're just going into Linode server that I have. So, yeah, so this is a this is an app called Terminus. This is essentially just a SSH tool that I use to get into my Linode servers. And this is a project ShellSync that we've been working on for a while. And one of the cool things that we've built in here, we've kind of built a lot of tools, I built a little minimizer that it automatically minimizes your PowerShell scripts. You can put in any PowerShell script, you'll shorten it down to the shortest amount of variables and commandlets, aliases, everything, just minimize as much as possible. But the coolest thing that we've built so far together is a polymorphic reverse shell generator. So reverse shells, I'm sure a lot of you do know, but if you don't, a reverse shell is what us hackers use on a target's computer to get their computer to reach out to ours. That way we have control over their computer. Now, the thing with reverse shells is that, you know, any of the reverse shells that you'll find out there, they're so popular and common that they're basically instantly detected unless you're doing high level obfuscation and you got to do that by hand. It takes a while and it can be frustrating. So when you say we, that's you and a group of hackers. Is that correct? I have been fortunate enough that there have been a handful of different hackers that have crossed my path, that have helped contribute to the knowledge that I do have. All right, so we're just going to put on a basic Netcat listener right here. This is our, it's just going to actually, you know, even better. I got that we made this. It's going to go to our start listener. It looks a little better. The ShellSync, our C2 hub, we'll just be listening on port 80. Now, what we're going to do is we're going to come over here and put together an API that I use to call to. I feed it the information of the target computer and the computer that it wants to call out to. And what that is going to do is, okay, so this is what we got right here. So we're going to use invoke rest method. We're going to call. It's going to make that bigger to reuse invoke grass method. We're going to call out to our show sync website, our our API. We're going to go to our first shell endpoint. We're going to plug in our target computer as in here we want to call out to what port and that we want to do encoding right now and then just our our API key. Every time that I run this, what it's going to do is going to make a call up to our API. It's going to grab our template reverse shell that we have. And we have a couple of them that we rotate through. It's going to pull it down and it's going to obfuscate it, as you see right here. Yeah. Now, every single time that we run this, it's going to generate a brand new obfuscated version of that reverse shell every single time that it ran. This reverse shell has never been ran on a computer before. So there is not much for detection that you can do to stop. So, again, since it's just like my regular payloads that you guys have seen in the past, we do invoke grass method. We go to the site, we pull it down and we pipe it into IEX. And just like that, we have, you know, we have a reverse shell. I just realized something funny. You can you can overwrite functions on your computer if you didn't know, like regular functions like the Who am I function that is supposed to say what your name is. I changed it. So every time you run Who am I? It just replies with I'm the ghost in the machine. Just to piss off any hackers that would get into my system. If they run Who am I on my machine? It'll say I am the ghost in the sheet. So, you know, that is my desktop right there. You know, we'll run calculator. I'm sure it's going to open on the other screen. I now have full control over my computer from, you know, our ShellSync C2. Now, keeping in mind that five thousand two hundred people have downloaded and ran my PowerShell, my quote unquote malicious PowerShell module from the gallery, all it would take is plugging this single line right here. Instead of that start calc function that I had in that one example, this was inside of there, every single computer that ran that PowerShell module would get a unique reverse shell ran on their system that I would then have access to in full control over and when I try to tell you how effective this is, it's honestly hard to even do. But this is the best that I can tell you. I have friends that are so kind and they have access to systems where we can do some really awesome testing, a.k.a. I had someone have access to Sentinel one elastic and crowd straight. If you guys don't know, those are basically the top three antiviruses that the government uses, that the government uses. We have a one not ninety nine point nine. We have a one hundred percent success rate shelling any computer that we've tried. Now, you can go as far now if you wanted to be, you know, if you wanted to go far enough in quote unquote disabled PowerShell, right? Sure. Congratulations. You could potentially thwart us and knock our knock as a percent down. But nobody is like completely fully disabling PowerShell. It's just not typically a thing. I think that the closest that somebody is is going to be to possibly beating us. There is a company called ThreatLocker that does heuristic based behavioral detection. So they'll be looking to see if PowerShell is being ran with certain apps that have been decided are not normal for the current user and then will disable it. So that's probably the most creative approach we've seen to try and stop this. We have not got to. Officially work with them yet to do testing on it. I am really curious. But outside of that, this polymorphic reverse show can be put, I guess, right into those galleries and we would have access to every single one of those computers that ran it. That's crazy. Because the question I was going to ask you, and you've kind of answered it, is that how does that command get run? I mean, the way that you've always traditionally done it in the demos that I've seen on your code is like using an OMG cable or using a rubber ducky or something. But this is like an even another even more scary way using that gallery. Correct. So between using the gallery, I'll pull this over. OK, so when you're talking about methods for execution, these are some of the more advanced methods like right now, what you've seen me run was just basically this command right here and that is just the basic execution of it. And again, this is all we needed to beat every every government antivirus that we've tried so far. But if you wanted to go further, we have an encoding option with it as well, where this one, for example, will first it'll take that polymorphic reverse shell, it'll reverse it and then convert it to base 64. So then this is a line to do the opposite and then run it. This is reverse hex execution, double reverse execution, which, by the way, just reversing something twice beats a lot of antiviruses. Not these top ones, but it'll walk. Weirdly enough, you shouldn't just be able to reverse something twice and have it walk through Defender, but it actually does work. And of course, we had to make a version where we executed straight from the Power Show gallery. So this is grabbing it straight from the description field and then replacing the Jabi character that they put at the end to quote, quote, swerve us. My favorite by far is DNS X record execution. So I've made a video on this. If you guys didn't know, you can store payloads in DNS text records on your website and then you can query those DNS text records, just pipe them right into execution. So we have show saying that what the fuck is our website and our ass is our reverse shell short pops up as a subdomain, but it is our text record called reverse shell and it just has that reverse shell in it and then you can pipe it. So even if like the PowerShell gallery was actually disabled, DNS traffic is not something that's often monitored well enough to stop something like this. The scary thing is, OK, so you've made us worry now, how do we solve this? Is it the antivirus vendors need it? You need to engage with the antivirus vendors that you need to disable Power Show. You know, what can I do? Because I look at this and I think this is crazy. That is something that I am trying to work with people on to be able to put out a robust enough solution that it would be worthwhile on, I guess, on a mass scale, which, again, I was kind of impressed with a threat locker because like their whole thing is saying that EDR is not enough, which is that's kind of the point that I've been trying to make is that EDR is not enough. We can we can walk around it. So just for example, how they do behavior based detection, that is something that's really big and should be looked into. I'm not saying that it can be the perfect solution or it will be. But what I can say for sure is that what's being done right now is not enough. And in order to fix problems outside of the box, you have to think outside the box. I think that that's just an area where they're lacking. But, you know, you have you have programmers at Microsoft that are trying to prevent these things, but the hacker mentality, the hacker mindset is just something different. You just look at every individual thing and say, how can I break this? How can I turn this? How can I? And I feel like sometimes the people that are trying to defend against these kind of things, they just they just don't have the same mindset. They're not in the same place mentally to be able to identify threats like this or sometimes even see them when you spell it out to them. So, again, we have a pretty good introduction through the PowerShell gallery. We have full control over their system when they do execute this onto their system. And then on top of that, there's another project that I really want to show you. And we're going to load into this guy right here. Just while we're waiting. I mean, for me, the big lesson here is the the biggest mistake companies are making is they ignoring the ethical hacking community and they need to engage better because guys like you are finding the stuff. That is correct. So here we are. We have now exploited the PowerShell gallery. We now have a polymorphic reverse shell that we've placed inside of that gallery that is giving us full access to these people's systems. Great. Now we're on their system. We're finding the information that we want. We're finding the information that we need to gather and we want to exfil it. Demo part three exfiltration data bouncing. Now it's our goal to get this information back to us in the most undetected way possible, and in this instance, we are going to be using a technique called data bouncing shout out to the contractor and the pirate both side of the UK. After seeing my polymorphic reverse shell video, they reached out to us and decided to share this project that they were working on. They built this original project. I went back and rebuilt it in PowerShell and just tried to optimize it a little bit. So I'm going to go ahead and pull that up for you real quick. So this is a actually this isn't even private right now. I did indeed make this public so you guys can go check this out if you like. This is a technique called data bouncing. One thing that I've gotten kind of pretty well known for are my data exfil techniques, whether doing it through Dropbox, Discord, through DNS, through whatever it is. I love data exfil. The idea of just stealthily disappearing with data is it's just something that personally me is just so very exciting. So when they showed me this technique and they brought us on, it just absolutely blew my mind. And I want to make sure that I'm not trying to exaggerate when I say this. When they showed this to me, I laid awake for nights, like for like, I want to say weeks after I'd be laying in bed just in my head trying to conceptualize a method that would be better for exfilling data. And I couldn't even make something up in my head. The only thing I think that could possibly beat this is if you exfil data onto a USB drive and we also figured out teleportation, so you teleport that USB drive back to your house through actual teleportation, that is literally the only thing I could come up with that would be a better data exfil method than this. So we're going to go down. If you guys want, you guys can come through here. You check this out again. This is the original team. You go to the contractor.io forward slash data tack bouncing. And they have it all laid out here, how it works. This is the same thing that I went through and then just made a PowerShell version. Now, what this data exfil is, and this is going to sound nuts, even saying out loud, when I do data exfil, you often have to provide your Dropbox link, you have to provide your Discord webhook. You have to provide whatever it is. But the thing is, is at the end of the day, you are providing something that you yourself, you yourself has control over. What I'm about to show you is data exfil over public DNS. I'll try to reword that just in case you didn't catch. This is data exfil over other people's websites. Wow. And so you might ask yourself, well, what websites are vulnerable? Which ones can I use? How do you find out which ones? Well, fortunately, they made this really nifty video for you just to help you with that. This video is going to help give you an idea of what websites you can use for this data exfil method. Go ahead and check it out. Keep in mind this video is 10 minutes and 56 seconds long. Those websites. Oh, wow. Those are the websites you can use. And this will continue for the next 10 minutes and 56 seconds. Or I can make it really easy and I can tell you that it's any website that uses Akamai, aka about 88% of the Internet. So we'll go back to here. I decided they did this really cool thing. What there is where they call like their they call their files like the watcher, the receiver, the escapist. And I thought that was really cool. So I kind of wanted to follow that pattern. So I decided to use X-Men. So we have two files, one called Nightcrawler and one called Deadpool. Nightcrawler is going to take that information and bring it wherever you want it. Deadpool is going to take that big explosive brought in information, regenerate it and bring it back together. So you can come through here. I did make it a little gooey. So if you were to open PowerShell, this really couldn't be easier to use. You can do info, that's it. We'll do unit, U59, DB and then just gooey, DB, gooey, pipe it into IEX and it will open up this little box right here and this is all you need. You can anybody can use this. You run that one little line on your target computer. Now, this is a gooey. So you're not necessarily going to do this like, you know, in a real situation, you're not going to pull gooey out. But I just want to make it as easy to use so you can watch it and illustrate it. We are actually ourselves. We're not going to use the gooey. I just want to show you that is an option. You can check it out after I show you the CLI version. If you want to use the easier one, you can absolutely do that. So we're going to go ahead and put these back over here real quick so I can have access back to here. All right. So starting off, we're in DB. We're going to need another one. So let's duplicate that one. And then inside here, we're going to do their interact the sage client are make sure we're in the right less to do that about same sure they are CLS they do clear a log. Make sure they're clear real quick. And then we're going to start our interact the sage server. If you guys aren't familiar with this interact, sage is OOB out of bounds listener and you use it to capture DNS traffic. All right. So this URL right here is what's going to be important. Then we're here inside this one. We want to. Yes, I download PowerShell core on Linux. I use PowerShell even on Linux. So, yeah, yeah. We do everything in PowerShell over here. We do everything in PowerShell. So we're going to sing in here that we want to go into. So we have that logs that text right there. So we're going to go and go in there. You're going to see that it's empty. Perfect. All right. So now once we're in here, we have this URL. Now, conceptually, this was kind of hard for me to grasp it first, but it's such a genius technique. So the first thing that we want to do is we're going to load up. We're not going to load up the GUI. So if you don't want to GUI, you just use just DB. That's to get the command line interface in. So once we have that, let it run. All right. So now we have access to the function, to the nightcrawler function that's going to be called the vanish. Right. It shows I got to go to the desktop. The BB desktop CLS, it says pull it in. So we have to do that from the desktop. I have a file on my desktop that's just called AST test that text. Right. So again, this will get a smidge bit confusing, but I promise you I can help you guys walk right through this. What we want to do is we want to grab this URL right here and we're going to plug it in here. So this is where things can get potentially complicated. So what we're going to do is we're going to take this. This is the line that we're going to run. Now, you guys saw earlier that I was using resolve DNS name. Right. So I have a DNS text record called RS right here. You can use resolve DNS name on URLs and pull information from them. Now, something that not a lot of people know is that when you use resolve DNS name on a website, that website will let you know that resolve DNS was used on it by someone else. And you can capture that using this out of bounds listener that you see above. So again, if I run this, this is going to grab our reverse shell that we had in there. This is the DNS text record. OK, so now what we're going to be doing is we're going to be abusing all those websites that you just saw, I've been using Adobe dot com as the example, just because that's why the first one was a graph and it works. That's what we will be using today. So if you do invoke web requests, right, and we'll do Adobe dot com and grab the headers, this is going to give you the headers for Adobe dot com. Right. Now, something that you need to know about these headers is that you can modify them when you're doing invoke web requests, you can modify these headers, a lot of bug bounty people that do web apps will know this, this is how you can take advantage of a lot of different attack vectors out there, a behavior that not a lot of people are aware of is that if there is a URL inside of certain headers that you see right here, if there is a URL inside of them, AKA you put your own header and you make it a URL, the website that you are doing invoke web request to that being Adobe dot com in this instance, Adobe dot com will run resolve DNS on your URL. Their website will run resolve DNS on your URL. We're going to take advantage of that. So what we're going to do is we're going to plug our own URL in there and force them to run resolve DNS on our website. So that's this right here. This is our website that links to our out of bounds listener. Now, if we come back into here and we run that line that I was telling you about, we're going to run the vanish on this file going through Adobe dot com and then providing our out of bounds listener right here. So now if you go to our second instance, this is just showing what's inside of our folder. Like these are the logs. The logs are empty, right? So when we go back to here, we're going to run this and it's going to look like it errors out. Now, we'll come back to what Alida is. Alida is an overarching identifier. We'll just call it the ID for this file. We'll call it the ID for this file. You can name it whatever you want. We'll get back to that in a second. We're going to run this. It's going to look like it's airing out a little bit. Boom. But if we come over here, you see how it's spitting this out. Look, host adobe dot com dot Alida. And then it's got this little string of characters. We're going to let this run through to finishes. This is a quick file. I should not take long at all. So it's done. This is done. So now what you need to understand is we have a file called AST on our desktop that I was just telling you about, right? That file, what we did is we took that file. We took the contents of the file. We first converted the contents of the file to base 64, right? And then we converted it to hex. We took that data and we converted the contents of it from base 64 and then into hex, and then we've taken that one long hex string and it's being split up into chunks between eight and twelve characters long. So we're separating that data into a bunch of different chunks. Now, we want to send all those individual chunks over to us where we will reconstruct them. Now, in order to make that happen, we had to get a little creative. You'll see this first line right here. So it says four G four, six, five. G is just a separator. That's like a comma separated value. It's a G separated value. This four right here is actually saying how many segments total there are. This was a short message. There's only four segments. But we have encoded metadata into the string that is also containing the hex data. So this is the fourth chunk and this is the hex data from that fourth chunk. It's a small bit right there. We're using Alida as the name of the container that stores all of those individual chunks. Now, if we come back to here and we do LS again or I'm sorry, we'll do cat logs. You'll see that the logs are here on our server as well. The logs are actually here. So now essentially all we have to do is parse through this data right here. And that would be right up here. All right. Make sure that I have it. OK, so regenerate is there. Now we're going to regenerate it. And then we just want to name the container that we gave it, because again, all those chunks are being sent all around. We name the container. Oops, one second. Apparently I didn't put it into the profile, so just load it individually and now we'll do a regenerate. Sorry about that. Perfect. And if we do LS, if we did it properly, there should be a file called Alida.txt. So now we do cat on Alida.txt. And I think I oh, yeah, I just made it say it fucking work, dude, because I was excited and I can lie that's that's the little message. So we took that file that's on my desktop, which is to see where is it over here. So this is AST.txt right here. This is that text file, but open it up. And again, it's just a text file that says it fucking work, dude. But to be clear, you can do this with whatever you want. You can do this with images, with executables. Now, keep in mind, you're converting the whole thing to hex and then splitting it up in chunks and sending those individually. So it will take a unbelievably long time. But if you're just trying to exfil, you know, little bits of data, a password, a key, you know, whatever it is, this is a really efficient and unbelievably stealthy way to do it. So if we were to I probably should have did this, actually, if I would had Wireshark open while we did this and we were looking at the requests, it would show that this came from Adobe.com. It does not show our site. It does not show any trace of it at all. It comes straight from Adobe.com, which if the gears are turning in your head right now, you know that that opens up so many other vulnerabilities because we can do DNS cache poisoning and I don't want to say too much because some of this, we are still trying to turn in for a bounty. Like I said, this works on basically all systems that are running Akamai. And then on top of that, we identified a certain configuration on certain systems that are running Akamai that not only allow you to use them to exfil data. But when you're passing that data through them, you can put that file on their system, whatever happens to that file when it's over there. That's completely based off of their rules. Like what do they do? The same way we found out that they use resolve DNS name on URLs that are in the headers. What else is happening? What else do they do if a PHP file comes through? Are they going to run it? You know what I mean? You don't know. The point is, is that the possibilities are like right now. We've been trying to do a lot of testing, but obviously you have to have an insane amount of environments that you can test in to be able to do this efficiently. So actually, this is the next video that I'm putting out on my channel is on data bouncing. And our goal is to get the community involved in this. That way we can try to find out what those other vulnerabilities are or what projects you can make. Like we made a we actually made a texting app that uses this. We can text each other in PowerShell using somebody else's website and just send messages back and forth. And it's really cool because, you know, you have the dark net, you have the clear net. And all of a sudden, we think we found like fucking Harry Potter Diagon Alley. We found Diagon. You know, there's this place right in the middle that is no man's land. I don't know. It's just it's really exciting. It's it's it feels like, you know, new space, new new territory. And that's insane, dude. Wow. Yeah. So, again, cycling through all of this, all it takes is some small dumb mistake like Microsoft not fixing the PowerShell gallery and now all of a sudden I have five thousand downloads. That's just that one module, to be clear. Remember, that was just a PowerShell module. I am, quote unquote, typo, squatting or sitting on so many different PowerShell modules that are getting thousands of downloads just by default every single day. So between those downloading those, putting the polymorphic reverse shell into those full control and then basically an invisible data exfiltration that it can't be traced. Like it just you're going through public DNS. It's just you kind of went full circle. You got to you got to let us know at some point if you get if you get a bounty for this, because I mean, this is crazy. We are trying. And to be honest, I you know, we hope that other people start trying. You know, they already made this public. That website's public. My repository is public. If you guys want to go through, find out what you can do with this and see the vulnerabilities, because again, like I told you, we did find some systems that we can put a file on it and we have narrowed it down to thinking that this is a bad default configuration. That's what we think it is. Not confirmed, but you got to think that if we did find a consistent way to get files on the certain computers, that means that's technically you could apply for an RCE bounty on every website that it touches. You know what I mean? Every company or every website that it touches. So there is potential for a lot of bounties to be made. So, yeah, we just wanted to get this in front of the community and hope that, you know, everybody can come together and do some crazy shit with it. So the best way to get hold of you is a Twitter is a Twitter or access to school these days. What's the best way to get hold of you? So, you know, people are interested in this. 100% Twitter, 100% Twitter. But if you wanted to look me up on basically any social media, I am just I am Jakoby on all social media. Sometimes there's like a underscore on some of them or whatever, but you type I am Jakoby on any social media, you should be able to find me. And if you want to if you want to reach out, if you want to contribute, if you want to work on this, if you have any ideas and listen, no ideas are dumb. You need to understand that this started by just putting a URL in a header, which just seems I don't want to say it seems dumb, but anything can seem dumb or small until it works. So if you have anything that you want to contribute, feel free, reach out. Hey, dude, it's fantastic to have you here. Eventually, we've been talking about this for a long time. Just for people who don't know you, I'll just mention this. You are the payload winner in 2022 for Hack 5, but I'm going to do a really bad job introducing that. So you got to tell me what does that actually mean? What have you been doing? You know, all these awards that you win, dude, you do amazing stuff. So tell us about it. I appreciate you. Yes. So the Hack 5 Payload Awards is something that took place last year. It was the first year where they wanted to recognize people from the community who are contributing to them and, you know, creating different works that people could learn from and take apart and build their own work off of. I honestly I've been building payloads for Hack 5 for almost 10 years. I just personally, I didn't have the confidence to go out and show it. You know, I was looking at everybody else that was in the scene and, you know, just thinking about how talented they were and didn't allow myself to try to measure up to them. I just got probably about two years ago, I reached out to the Hack 5 Discord. I asked a couple of questions and just realized how nice the community was, how much they wanted to help the people that came into the community. And I was like, you know what, maybe I will start trying to share some of my work. So I shared some of it and they were pretty impressed with it. So I was like, OK, I'll submit it. I'll submit it. And, you know, I submitted my first payload. It got accepted. I got butterflies. I submitted two more like within the week and they had also got accepted. And at that point, you know, I was just feeling on top of the world. So I was like, you know what, I have this huge library that I've accrued over the last several years. I just updated them and just started rapidly submitting them. And I want to say probably within a month and a half, I was in first place on the leaderboard and then just held that position for the rest of the year. December came around and they did the awards and they handed out a bunch of awards. There was a lot of great people. You had Adam on the channel before Adam actually got third place as well. Not even in his area of specialty, he's just a talented kid. Peaks, he is another really talented kid. He won basically all the iPhone hacking awards that there were. He's just wildly talented. And I was fortunate enough that I received enough votes to take the first place position ever since then. Like I've been accepted into the community on a whole other level. And it's been amazing. I tell you what you said right there is so I think it's so important for many people to hear and it's inspirational that the imposter syndrome thing is a big problem in the community. You had all this stuff and all this talent and it was hidden away. And when you shared it, you won like number one. What a story, man. That's fantastic. I started being open about it, too, you know, because people would ask me, like, you know, did you just make all these recently? And I was like, no, I gotta be honest. I've been sitting on these for like eight years and it's it's actually happy and sad. At the same time, when I think about this, I started to be really open with my community and talking about things like imposter syndrome. And it was really cool because there's a lot of people that also go through it, that were finding the motivation to push past it. And then something that was really cool for me is actually the creators that I looked up to that I eventually got the privilege to talk to and they shared their experience and some of the people at the top of the food chain that you would never suspect, you know, they also, you know, it comes and goes. It's something that you can defeat for a while and then you might just have a bad week or something and it comes back. And there's so many people that struggle with it, even at the top. And it's sad, but also kind of motivating, knowing that they still, you know, beat it on regular occasions. And I see them being successful and it's highly motivating for me. And then that's just transferring down to the people that I also get to talk to. I think it's so important, you know, we just people, all of us, all of us are individuals going on a journey and you just got to make the most of who you are and where you've come from. And I want you to share a little bit, if you don't mind, about like your journey, because some of us have had much easier journeys than others. And your story particularly wasn't that easy. And that's putting it very badly. It was rough. So can you tell us how you got into hacking when you were a kid and sort of you mentioned something offline about a spark and a fire. Maybe you can take us through that journey of how you went or how you came to where you are today, you know, winning these awards and stuff. Yeah, absolutely. So I came to that realization that there was a huge differential between a spark and a fire when I did a podcast with another person that I really look up to. That's also been on your show. Shout out to Philip Wiley. I love you, by the way. Yeah, he's an amazing guy. And I was on there and he had started asking some of these similar questions and asked me how I got started. And the truth is, is I gave him the answer for how the spark was initially lit, like the thing that kind of piqued my interest at the beginning. The truth is, I've always been kind of afraid to tell people like where the passion came from, to be clear, there is a differential. You know, the spark is what got your initial interest. But what was the event that caused you to make this a lifelong passion that you're going to put all your energy into? Same for when I told him the spark came from literally me just being in fifth grade. And this is a wild scenario, right? This is a wild scenario. I lost my dad when I was 11 to suicide and I was put into a foster home. And fun fact, I actually found out when I got there that I went by the wrong name for 10 years, the people that I ended up getting adopted by were military. So I had to get a military ID that had a different last name on it than when I went by publicly to everybody. And I knew I was only going to be at this school I was in in fifth grade for the rest of that one year, and I decided to kind of wild out just a little bit. It was something small. I just, you know, just through the command prompt, I got the school's Wi-Fi password, which shout out Nelson Ledges in Ohio. You guys had your Wi-Fi password as Eureka, all capital letters. And then unknowingly, I started practicing something called password spray, where you just take that password and you plug it in everywhere that you can and just see if it works. And wildly enough, I had like a 90 percent success rate with everything that I tried. It turns out that password was almost universal. So you could get into the portal, look at your grades. So here we are in this little computer lab. We get this little break where we all get to go to the computers. And I'm showing off for these kids and like, hey, here's the Wi-Fi password so I can get into here. And at the same time, I was showing them my military ID that had a different last name on it from what I went by publicly. And again, I was only going to be at that school for the rest of that fifth grade year, so I decided let's go for it. I told them all I was in the witness protection program, that I was like hacking governments and I had to be, you know, I had to be protected. I never I never actually even told them the truth. I just told them that blew their minds and then left that year. Never talked to them again. So what's up, guys? If you you probably don't recognize me, but yeah, kind of kind of lied about some of that stuff back then. Yeah. So that that was the thing that kind of sparked my interest. And that's what turned this into a hobby. And, you know, for years and years and years, that's that's really all I was doing. I was just learning it because it was fun. It was exciting. It was just something to do. Now, there was a certain point in my life where a switch kind of flips, where it went from just being something I wanted to do for fun to being something now, as you see, is something I've dedicated basically my entire life to. And for me, that moment was when I was deployed to Iraq to fully understand this. I remember being a kid and I'd be watching you watching movies and such on TV. And, you know, whether it was like these movies about alien invasions or wars or whatever, I remember watching them and thinking how kept in the dark civilians were like always in these movies. Civilians were just completely lost. You know, then the military would come in and they'd be telling people, hey, you need to go here. You need to do this. And that knowledge and structure is something that I really wanted to have. I didn't like the idea of being left in the dark like a lot of these people in these movies and such. So for me personally, that was one of the big reasons I joined the military is I thought that it would get me in the know. You know, being infantry as I was and not even an officer, like being enlisted, it's hard to be in the know period, you know, being infantry especially. And I realized that in the military, when you're deployed, we have something called the QRF. This is a quick response force. These are the guys that while we're over there, we put them on rotation and you stay in full uniform, full kit, gun ready. That way, if anything happens, they have somebody that they can immediately send out to the seat. I was on the QRF for this particular day. It was just it was wild. It was it was so surreal, everything that happened over the next couple of days. We had to go show up to I think it was the building. There was an IP graduation. This is the Iraqi police. There was a graduation, you know, all, you know, huge class, hundred plus people went through and passed. As it turns out, two of those individuals that went through the entire academy were suicide bombers. And their whole goal was just to be in the crowd during graduation. And that's exactly what they did. And they did detonate in the crowd. There were people that lost their lives from that initial event that we had to respond to. And. It was a not great day. You know, that took place. They took some hostages and backed into this building. And it was it was just a lot. And so that event happened now. And we end up finding ourselves like two days later. We're back on I was at Cobb's Spiker at the time. We're in this huge chow hall and something if you guys didn't know, these military bases, they're not just for US soldiers. We had British guys. We had Australian guys. I think even had the Philippine Army there at one point. So in the chow hall, they have these TVs lining all of the walls. It'll either be football games or something big happens. It'll all be the news. You know, I was I was in Iraq when Bin Laden was killed, for example, that was on every TV. Now, I wasn't personally involved with that. So it didn't register the same way that this event did. The thing is, is this attack on the was broadcast internationally all over the world. So I'm watching we have TVs of like the British news and the Australian news, the American news and news from all these different countries that were talking about this event that happened. But they were all saying different things. Like they were all saying it was for a different reason or this is what happened there. This is what happened. And it was the first time that I felt at the center of this huge event where I could tell maybe not necessarily who was lying per se, but who was changing the narrative and how they were changing and how information was being disseminated and passed down like that was the day that I realized that I would never I would never make it out of that darkness of not knowing like I thought I would. And like, yeah, that was the day that I decided that cybersecurity was going to be the path that I took, that it was. In my head at the time, I was saying this is going to be the only way that I could for sure know that I'm going to get the knowledge that I can communicate with people who have access to the real knowledge to the real scenario situations. And yeah, yeah. So from that day is when I buckled down and, you know, completely self-taught at first, eventually, you know, Udemy came out and I started going for those courses and taking them and I've taken two of your Udemy courses, actually. Thank you. The networking. Yeah, the networking, it gave me caught up. When you're self-taught, it's really easy to only learn what you want to learn and what you need to learn in the moment. There's a lot of corners that you forget or don't touch or, you know, or a week on. After that day, like I I got out maybe a year after that. And then ever since then, I've done nothing but almost spend 18 hours a day. And that's almost without exaggeration, just building things, learning, taking courses, studying people. That's amazing. So, I mean, in school is where the spark was lit, right? Because you pretended to be this in the witness protection program and you were hacking the Wi-Fi network, did a whole bunch of stuff at school. But it was that time in the military where the fire lit and you decided this is it. I'm going to do cyber, right? Correct. And actually, and we kind of talked about this off camera for a second. You know, I when all that took place, I actually it was more of a question, I guess, actually, like, you know, is this what I should be doing? Is this, you know, is this the information sector that I should go to that I think is going to give me what I'm searching for? And, you know, I got I got out with that question in my head. Like, I knew for sure that that's the path that I wanted to go down. But I think there's a certain point, like, where it really, really clicks, I guess. This is really wild. And I haven't actually told a lot of people this. But so when I was in the military, I actually got stationed in Hawaii. So I was stationed in Hawaii. And when we got back from Iraq, me and a couple of buddies, we ended up getting a house together in a place called Waipahu. It was absolutely beautiful and something absolutely crazy. This is still mind blowing to me. I'm sure most people on this channel probably know who Edward Snowden is. Yeah. So he you know, everything went down in April of 2013. It was just a couple of months after that that the whole Edward Snowden thing blew up and he was all over the news. And it's crazy. But fun fact, Edward Snowden was actually my neighbor. He lived next door to me. Now, I had no idea or anything. You know, I don't know. I to be honest, I was questioning myself. I was questioning the things that I saw while I was in the military. I was questioning the the morality of these things that I saw. And I was questioning whether or not I should be doing something about it or if I should be saying something or if something had to be done. And I don't know. Just again, I never I I'd never really even spoken to him. Like I'd seen him like wave. But that just felt like a message from the universe that, yo, you are on the right path. This actually is a big issue and it really does need to be addressed. And I think I think you're finding your way. So when you talk about the very, very specific click, I was back home in Alabama where I graduated sitting on the couch when I saw everything with him come out. Yeah, it was it was wild. There was a lot to process. But I just remember sitting there and realizing that, yes, 100 percent there needs to be people like him. There needs to be people willing to step up and say the right things. It was a huge motivation. And that was the exact moment that I decided this is the route that I wanted to go. And I kept it to myself. And like I said, for years and years, I was just learning and doing solo personal projects, but it gets to a point when you realize that this isn't something that you can do alone and no one person like there's as much as Edward Snowden did by himself, it's still the whole point of everything that he said is that it's an issue that even he can't tackle by himself. It took me years to make that realization, you know, shouldn't have. But that specifically is what got me into content creation. And this is why I put such an emphasis in my content being being put out in a way that's easy to process for newer people coming into the cybersecurity field that want to get started. I want as many people in the cybersecurity field as absolutely possible. That's been that's been the motivation for the for the channel. We need it right. Because, I mean, there's so many hacks taking place. We need people like you to, you know, find the problems and help companies protect them. Jakoby, I really want to thank you for sharing not just your insane hacking skills, but also you sort of the motivation, you know, this the story. I love hearing the stories about where people were and where they are today because that motivates all of us because some of us, you know, may feel that we're just not worthy. We can't do this. You know, we're not good enough. I really want to thank you that you took your bad situation. I mean, the set the stories that you've told me, it's rough, but you turn that into something really good to help the community. Thanks so much for sharing. Absolutely. You know, it's important for people to know that there are, you know, mean people out there, but there are so many more people out there that do care about you, they care about what you've went through. They might not always have the best thing to say or know what to say. But easily one of my biggest regrets I have is been not reaching out to the community sooner, me thinking that I wasn't good enough or that I had to earn my right to just be liked on a base level. And it's not true. No matter, you know, your insecurities, the imposter syndrome, the mean things that, you know, your inner monologue says about you, they're just not true. There's people out there that that do care about you. And you should reach out to the community and you should try to whatever community it is that you want to be a part of, just go say hi to someone. Just go, hey, I'm interested in what you do. You want to tell me about it and you're about to make a friend. Part of buying the house I'm at now is I can legally tell people how many cats I have. I've been, I've been telling people for 10 years that I fostered them and I rehomed them and I lied and over the last 10 years I've rescued and kept 37 cats with both 36 are with me now, my oldest passed away. That's Luther. That's in my logo. I do that. It's great.",
    "transcript_keywords": [
        "people",
        "PowerShell",
        "PowerShell gallery",
        "module",
        "Microsoft",
        "PowerShell module",
        "thing",
        "data",
        "module called PowerShell",
        "modules",
        "make",
        "DNS",
        "run",
        "put",
        "gallery",
        "reverse",
        "Yeah",
        "kind",
        "show",
        "lot"
    ],
    "transcript_entity_values": [
        "Microsoft",
        "five thousand",
        "Hack 5",
        "these days",
        "three",
        "18 hours",
        "SSH",
        "80",
        "Akamai",
        "this particular day",
        "Alida",
        "10 minutes and 56 seconds",
        "PS Windows",
        "two",
        "four",
        "one second",
        "ninety nine point nine",
        "second",
        "37",
        "fimo C2",
        "Jabi",
        "Australian",
        "Waipahu",
        "years and years",
        "two weeks later",
        "the year",
        "only four",
        "about 88%",
        "Linux",
        "Iraq",
        "eleven thirty eight",
        "eight years",
        "Simpson",
        "C2",
        "almost 10 years",
        "a month and a half",
        "hundred",
        "December",
        "the next 10 minutes and 56 seconds",
        "thousands",
        "Alida.txt",
        "the Wi-Fi",
        "about two years ago",
        "100 percent",
        "David Bombal",
        "RCE",
        "five thousand five hundred and thirty nine",
        "I am Jakoby",
        "the last several years",
        "one year",
        "the end of the day",
        "IEX",
        "EDR",
        "Facebook",
        "Adobe.com",
        "Michael Gadjia",
        "USB",
        "PHP",
        "the last 10 years",
        "a week",
        "Hack 5",
        "Cobb",
        "the next couple of days",
        "Nelson Ledges",
        "API",
        "64",
        "five thousand two hundred",
        "10 years",
        "a couple of months",
        "today",
        "that day",
        "one hundred percent",
        "Diagon",
        "James",
        "one",
        "11",
        "Netcat",
        "the Microsoft Corporation",
        "64",
        "DNS",
        "Luther",
        "first",
        "UK",
        "Ohio",
        "Nightcrawler",
        "Punjabi",
        "ThreatLocker",
        "Jakoby",
        "the day",
        "NuGet",
        "Defender",
        "Wi-Fi",
        "MIchael Gadjia",
        "Alida.txt",
        "Harry Potter",
        "about 30 seconds",
        "April of 2013",
        "BB",
        "years",
        "Discord",
        "Philip Wiley",
        "I am Jakoby",
        "Bin Laden",
        "iPhone",
        "David",
        "a couple of months ago",
        "Terminus",
        "2022",
        "IP",
        "last year",
        "Hawaii",
        "two days later",
        "Diagon Alley",
        "36",
        "LLM",
        "PSAES",
        "that year",
        "Linode",
        "about 10,600",
        "Eureka",
        "Dropbox",
        "Sentinel",
        "thousands and thousands",
        "OOB",
        "fifth",
        "ShellSync",
        "the first year",
        "US",
        "midnight",
        "PowerShell Core",
        "six",
        "the Power Show",
        "200",
        "seven",
        "third",
        "American",
        "C2 module",
        "five",
        "Udemy",
        "AES",
        "One",
        "every single day",
        "the week",
        "Wireshark",
        "Deadpool",
        "a bad week",
        "100%",
        "90 percent",
        "QRF",
        "between eight and twelve",
        "Alabama",
        "GitHub",
        "a year",
        "GUI",
        "513 million",
        "weeks",
        "British",
        "like eight months",
        "Adam",
        "PowerShell",
        "Twitter",
        "LS",
        "Edward Snowden",
        "only seven",
        "CLI",
        "October 8th",
        "Power Show",
        "fourth",
        "the Philippine Army",
        "Iraqi"
    ],
    "transcript_entity_types": [
        "ORG",
        "CARDINAL",
        "EVENT",
        "DATE",
        "CARDINAL",
        "TIME",
        "ORG",
        "CARDINAL",
        "ORG",
        "DATE",
        "PERSON",
        "TIME",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "PRODUCT",
        "PERSON",
        "NORP",
        "LOC",
        "DATE",
        "DATE",
        "DATE",
        "CARDINAL",
        "PERCENT",
        "GPE",
        "GPE",
        "DATE",
        "DATE",
        "PERSON",
        "PRODUCT",
        "DATE",
        "DATE",
        "CARDINAL",
        "DATE",
        "TIME",
        "CARDINAL",
        "PERSON",
        "ORG",
        "DATE",
        "PERCENT",
        "PERSON",
        "ORG",
        "DATE",
        "PERSON",
        "DATE",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "DATE",
        "DATE",
        "LAW",
        "FAC",
        "DATE",
        "PERSON",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "DATE",
        "DATE",
        "DATE",
        "PERCENT",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "PERSON",
        "ORDINAL",
        "GPE",
        "GPE",
        "PERSON",
        "NORP",
        "ORG",
        "PERSON",
        "DATE",
        "PERSON",
        "WORK_OF_ART",
        "LOC",
        "PERSON",
        "ORG",
        "PERSON",
        "TIME",
        "DATE",
        "GPE",
        "DATE",
        "ORG",
        "PERSON",
        "ORG",
        "PERSON",
        "ORG",
        "PERSON",
        "DATE",
        "LOC",
        "DATE",
        "ORG",
        "DATE",
        "GPE",
        "DATE",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "ORG",
        "DATE",
        "GPE",
        "TIME",
        "ORG",
        "CARDINAL",
        "EVENT",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "NORP",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "PRODUCT",
        "PERSON",
        "DATE",
        "PERCENT",
        "PERCENT",
        "ORG",
        "CARDINAL",
        "GPE",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "DATE",
        "NORP",
        "DATE",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "ORDINAL",
        "ORG",
        "NORP"
    ]
}