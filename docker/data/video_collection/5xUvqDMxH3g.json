{
    "id": "5xUvqDMxH3g",
    "title": "Cisco VIRL 2: Massive New changes!",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2019-07-18T14:00:02Z",
    "video_url": "https://www.youtube.com/watch?v=5xUvqDMxH3g",
    "category": "Science & Technology",
    "tags": [
        "virl",
        "cisco virl",
        "virl cisco",
        "virl tutorial",
        "cisco virl 2019",
        "cisco virl images",
        "cisco virl 2.0",
        "cisco",
        "ccna",
        "cisco virl lab",
        "virl lab topologies",
        "VIRL",
        "Cisco VIRL",
        "Free VIRL",
        "Cisco VIRL Downloads",
        "VIRL Cisco",
        "VIRL images",
        "Cisco VIRL images",
        "download VIRL",
        "download Cisco VIRL",
        "VIRL IOS",
        "IOS VIRL",
        "Cisco VIRL IOS",
        "Cisco IOS",
        "VIRL GNS3",
        "GNS3 VIRL",
        "GNS3 VIRL IOS",
        "David Bombal",
        "free ccna labs",
        "free virl labs",
        "virl download",
        "cisco virl vs gns3",
        "ccnp",
        "ccna virl"
    ],
    "views": 18232,
    "likes": 358,
    "comments_count": 70,
    "description": "Massive changes coming in VIRL 2: No VM Maestro client, no OpenStack, entirely new middleware, new GUI, HTML5 client - lots of new and exciting changes!  Menu: Menu: 00:45 - Overview of Changes 02:55 - Introduction 03:20 - API Documentation 04:20 - Python client library 05:15 - OpenStack 06:50 - The Dashboard and new components 09:15 - Boot progress monitoring 10:40 - Device limitation 12:00 - Advice for sending Cisco requests 12:38 - Demo for interacting with console 17:04 - Web browser application 19:18 - Installation   19:35 - VNC 22:19 - Simulate and packet capture features 23:30 - Breakout Utility 26:09 - Do you need to run a VPN client?  28:45 - Release date? 29:25 - VIRL compatibility and demo  virl is CISCO'S POWERFUL, EASY-TO-USE, AND EXTENSIBLE NETWORK MODELING AND SIMULATION ENVIRONMENT. - Build highly-accurate models of existing or planned networks. - Design, configure, and operate networks using authentic versions of Cisco's network operating systems - Build using common platforms like IOSv, IOSv Layer-2, IOS-XRv, NX-OSv, CSR1000v and ASAv. All Included - Integrate 3rd-party virtual machines, appliances, VNFs, and servers. - Connect real and virtual networks to form high-fidelity development and test environments. - Design and test anywhere - VIRL is portable!  #virl #ciscovirl #virl2",
    "description_links": [],
    "transcript": "- When I was at Cisco Live recently, NetworkChuck and I spoke to Ralph and Simon about some of the changes in Cisco VIRL. VIRL 2.0 will hopefully be released sometime in 2019. I don't have an exact date for the release of this product but it's very exciting to see some of the changes that are taking place with Cisco VIRL. (mellow techno music) VM Maestro is gone. There's no need to have a thick client running on your computer any longer. Everything runs on the VM. You only need a web browser to interact with Cisco VIRL 2.0. No need for VM Maestro running on your laptop. Another big change is open stack is gone. They've basically rewritten the entire Cisco VIRL product. No open stack, which means less memory utilization, less CPU utilization. Rather than having this heavy open stack product crippling VIRL, they've gotten rid of that. You still have Cisco iOS images such as Cisco ASAV images, iOS V, iOS V layer two images that come as part of Cisco VIRL so when you purchase Cisco VIRL you get all those Cisco images and they're looking at adding additional images to Cisco VIRL, but the moral of the story is you get a VM, you get the application that allows you to run simulations such as Cisco iOS V and iOS V layer two simulations on Cisco VIRL. So you get the applications, you get the licenses. You get a light weight application that you can connect to with just a web browser. No need to install software on your computer any longer just to make a connection to the VM. This is great. You could run this in the cloud, and in this interview they are actually running Cisco VIRL in a data center separate from where we're talking to them, and they're just connecting via a web interface. You don't have to just use an html five client to access and interact with Cisco VIRL. You can directly SSH to the devices in your topology. So there are multiple ways to interact with the devices. Another big thing is they have developed a very strong API. Everything is API driven. So you could write Python scripts, you could write your own applications that spin up and tear down and interact with the topologies that you've created in Cisco VIRL. Massive changes have taken place now in the product. - We've done a complete revie. We've got the same virtual machines as before. Everything else is new. So we've rewritten the middleware stack that builds it all together. We've got a brand new UI on top, all web-based and really strong API driven approach, so everything can be automated as well as we walk through. - So the key here really is that we've built everything on top of an API. The API is the first class-citizen in this product. So everything that you do see here drives the API underneath it. So we have also the API documentation built right into the product as I can show you up here. So I go here and then do the API documentation and as you can see the API documentation is built right into the product itself. So everything from creating a lab, authenticating, adding notes to a lab, adding interface to a lab can be driven by the API. That is what the UI does. That is also what some wrap-all Python bindings do for us. So we have a Python notebook over here that Simon was showing in a classroom and that drives the entire lifecycle of a simulation using programming or using a script over here. So we can create a lab in that script, we add notes to a lab, we start the lab, we interact the lab, we stop the lab, everything is being done using those APIs. - [David] We were in the definite zone and a lot of people obviously are interested in automation and scripting. So I'm assuming because of the APIs you could write a Python script or something that could automate all of this? - That's exactly what we do here. So we have a Python client library. So we go back here and go into tools, client library, and this is the documentation for this client library which strives, it's just a wrapper around the API itself. Around these restful API calls. And as you can see here, this is pretty easy. So you connect to your controller, you create a lab, you add some notes to your lab, you add some interfaces into these notes, you link them together, you start the lab, you interact with the lab, you destroy lab. Everything is driven by code here. So the API is really the first thing that we did for this product and everything else sits on top of the API. - [David] You guys have told me off line that you did a lot of work to make it more light weight. Some of the problems Guy has said is VIRL is very resource intensive. - [Chuck] Yeah. - [David] Yeah, you've experienced that Chuck? - [Chuck] Yeah, you need a huge server in my data center. - Right. So as Simon mentioned in the beginning we really heard you loud and clear. And we wanted to get rid of open stack because open stack is such a complex element or was such a complex element in the entire stack with a ton of dependencies and a ton of things that were done that we didn't really use - It solves a different problem to what we're trying to do here. We're trying to build a good network simulation platform. So we've gone back, we've learned from what we learned from the first version and really built a custom middleware to replace the open stack to do exactly what we need for network simulation both for ease of use and also for real powerful programability. - And just to give you an impression, the previous version, if you start the previous version and without any simulation running, any node running, it used roughly six to seven gigabytes of memory just doing nothing. So this uses 600, 700 meg, doing nothing, which is quite a contrast. - [David] Oh wow. That's a huge change. - But the big difference is that six gig wasn't just six gig gone, that was six gig of things running that made it hard to install, hard to upgrade, hard to manage, hard to use. So removing a lot of that complexity and replacing it with a thin lightweight layer makes it much simpler to upgrade, install, et cetera. - [David] So I mean, it's quite noisy here, but I just want to confirm, you guys got rid of open stack, is that right? - Completely. We also got rid of VM Maestro. So VM Maestro was a Java eclipse-based user interface that was an application you needed to install on your machine to access the system. Everything is now driven using an html five web application. So this is like the dashboard, what we call the dashboard. It has different labs in here. And these labs, if I go into one of those, so if you have seen DNA Center before, so this is using components that have been developed for DNA Center. So we're making good use of something that was developed in Cisco that really fits the purpose here for us as well. A pretty interesting fact about this is that we've moved away from the lifecycle that was introduced in the previous product. So in the previous product we had when you start a simulation it creates Re-Ms and then when you stop the simulation those Re-Ms will be destroyed. So if you have things like crypto keys, if you have things like licenses that you do install inside of such AVM that depend on mac addresses or UUIDs or other things, right. Those are all gone if you stop the lab. In this case we do persistent labs. That means if you start the thing and you do something with it and you stop it, it will release the memory and the CPU, but it doesn't release the disk. So the disks will keep state. So the virtual machine will keep state. So if you bring it up next week again it will be coming up in the same state as it was before. So you can keep your licenses, your V-land ad, your crypto keys, your whatever IP set keys that you've created. All of that stuff will be staying the same which was a pain to use in the past, especially if you were using smart licensing inside of a virtual machine. So that was not really possible because fundamental characteristics of the virtual machine were changed between start, stop, start. And that is being kept the same by using persistence here. Another interesting piece here is that we are able to hotlink and hotadd new devices into running simulations. So we can bring up a simulation and that simulation runs, and then we add more devices to it. So maybe you forgot to add a server or a new node or something. So you don't have to bring down the entire system and then start it up again, which can take a significant amount of time depending on how large your simulation is. So in this case you can hotadd a device to it and then relink this thing on the fly to the existing network. - [David] So you can add a device while other routers are running like a server and then just connect it. - Correct, correct. That was also not possible in the past. And another interesting thing that Simon can explain is the entire effort we put into boot progress monitoring and the staggering of simulations, large simulations. - Absolutely. This here is a 16 router topology. We've also imported it from VIRL 1.0s with all the configs, all the interfaces and links, so we've got the direct import. If we launch this, this is running on a pretty big server, so it's not the best use case. But if you've got this sort of standard laptop on an Arcor on a small server and you hit launch in the previous version, that would try and start all 16 devices at once. Often that would end up with a couple failings 'cause it's just maxing out the CPU. So what we do now is we look at what the requirements of each device are. We look at the amount of memory and CPU available on the system, and then we'll try to stagger the launch. So for this one here we might launch four, five at a time, wait 'til they're booted up, server stabilizes, launch a few more. So especially when you're doing automation or you're launching a large topology you should just be able to draw your lab, hit start, get a coffee, come back, and it's come up, and it's come up reliably. We haven't got a failing as it's gone. We also do progress monitoring. So a big part we've got is splitting up the console so we can access that from multiple directions, and Ralph will show you that in a minute. But what we do is we monitor it when the nodes are starting up. We look for something like press enter to begin. When we see that we know the device is ready to go and we notify the user. So now you can draw a lab, hit start, come back later, and it'll tell you reliably when the device is actually ready to interact with. And that's really powerful if you're doing an automation scenario. - [David] So the nasty question as always, guys, I've gotta ask it is, is it still 20 devices is the limit, yeah? - Yeah, sorry. At the moment the product, we've rewritten the platform. The product remained the same. So 20 node at this current price point. CML will be the same. If you've got a current subscription it should continue over to the new version. - [David] So you're telling us online that you can actually technically have many more, it's just a licensing thing? - The platform actually supports a lot more. So we are very confident that we have provided a core, like the core of this system is actually capable of running nodes in the thousands. In the thousands. I'm pretty confident. - We haven't run that yet. - No, but with a single system we were already up into the hundreds like at the absolute minimum that the previous system can support. And this is just like a single compute node essentially. 'Cause that's also something about the architecture. We have a layered architecture where we have a controller and then the controller talks to computer drivers and the computer drivers drive to computer nodes. Right now this is a cluster of one. So we have one controller and one computer instance. But we want to in the next version we want to scale out horizontally so we can add much more of these compute nodes underneath and then leverage the capabilities that we've built into this architecture to actually drive four digit number of nodes. - [David] So guys, I think you mentioned this to someone who was standing here, is what's your advice if someone wants to so called like try and get Cisco to add more licenses? Is it like talk to the account manager, or what should they do? - Yeah, absolutely, so the feedback, yeah. Speak to an account manager, let them know. That goes both to the features on the devices and also the licensing model. Have a chat with the account manager. Let them know the market feedback. That should help a lot there. - [David] The community can contribute to the success of this. - Absolutely. - [David] By providing feedback to the account managers at Cisco. - Absolutely. We've listened to a lot of feedback here on what we needed to fix, what we need to improve in the new version. I think the similar argument can be made on the product side as well. - [David] Is it possible for you guys to show us a demo of something running like interacting with the consoles and stuff? - Oh, right, yeah, absolutely. That was something that I was intending to do. - And there's multiple ways to interact with the console now. - [David] Okay, so can you give us a quick interview of what they are or is that gonna be part of the demo? - We can give a quick overview. So basically, and this goes back to the clustering and architecture question. What we do is rather than connecting directly to a device, we multiplex that so we connect to it on the back end, and then provide multiple directions to connect to that. So you connect in through the browsers we're about to see. I'd mentioned before we're monitoring that in the background to tell when it's booted up. But then we can split that out in a number of different ways so we can have multiple users doing it. A really nice example of that was actually we're giving a demo the other day and we had an issue with Web-X. Rather than try to fix that we actually just both loaded up the topology of the customer and ourselves and just used that real time at the same time so multiple users on the console and on the devices worked on the front end. - [David] Is it just from an architecture thing. You guys kind of mentioned it very quickly. We used to have that VM Maestro client, that's gone now. - Yes. - [Ralph] Completely. - [David] And now we use a - [Chuck] Good. - [David] Yeah, good. You've got an html five client, right? - Right. It's just one option how to use the system, right? The html five, the web client basically drives the API, but there's multiple ways to interact with the simulation. So this is like the really quick way, in the browser, get the console, do something with the console, do something with the device. A lot of users want to use their native tools. They want to use their secure CRT or ITM or whatever to access these devices. So here's another way to do exactly this. So we do have a, you can secure shell to the controller, and then you get a terminal service. So let me do this real quick here. So we get this terminal server, and I can say, okay, show me my running labs on my controller. I get my labs here, and I can do a list of the devices that are running there. So I do see my router 84 is here on this lab id. So I can do a open ip two n zero and then the line. So it's actually, oops. Damn it, I have it already. And then I'm on the same device as you see it on here. - [David] Oh, so if you type in the one it shows in the other console. - That's correct. So I do the same, I do get the same output over here and here. And what I type over here is shown over there. So everything is multi-plex. This works for consoles, this also works for VNCs, if this is a server, like having a desktop or something, it also works for these kind of guys. - [David] Okay, so just to make sure I understand, on the right hand side there you did a pure SSH connection. - Correct. - [David] And then opened a console port into a router. - Correct. - [David] On the bottom left you've got an html five client just through your web browser. - Correct. - [David] And whatever you do in one is replicated into the other. - That's correct, it's all multi-plex. I can do this ten times and all we'll see the same output. - [David] So we could be sharing labs with other people in real time. - Correct. Like learning scenarios, so you can actually get to the same console and help your student. Or in an interview scenario, you can actually see what people do when they are trying to troubleshoot things. So that kind of stuff. Even though you are connected at the console, which is usually exclusive access. - [David] You mentioned VNC. So is VNC also going through the html five client? - Correct. So if I go to a different lab. Let me just finish this one here. - [David] Yeah, sorry, go on. - So the other thing that I can do here is, So the other thing that I can do here is I can directly connect to the node that I want to connect to. So if I disconnect to 422 I get this terminal server CLI thing, but if I know what I want to connect to I can do something like this. I can go and it's probably a different console. - [David] So in this case you're going directly to the console. - Right, see? So I'm directly on this other node and there's a ping already running on this other node. So I can directly connect to this guy without interacting with it. So for swifting scenarios or where I have a profile that opens up 10 consoles, I can specify which console I want to connect to. - That's right. And it's SSH and SSL, so we've tried to make everything best practice security wise as well. So anything you're connecting to locally to a remote server is all gonna be encrypted. It's really important. - And authenticated. - And authenticated too. Yeah. - [David] What I really like about this is in the past there's been this migration on these platforms to just using a web browser. It means that, like Chuck, in your example with your server in the data center, you just have to put from the date center, is that right? And you just open up a web browser to it? - Yes, that's right. - [David] You don't have to have a VPN or all that stuff? - That's fundamentally also something that we wanted to change and wanted to improve. Like the over all system installation and the delivery vehicle. So right now what we built internally is a 55 megabyte RPM. So the entire thing is a 55 megabyte RPM. Now if we can deliver that, that's a different question. But the OVA that is resulting from this is a fedora core. Like right now it's a fedora core based operating system underneath. It pulls in dependencies like libroid and KVM and whatnot, kimu. So that ends up with a 750 megabyte OVA which is still kind of okayish. But it is not including, obviously, not including those reference platform images which are cueco images. So we have those on a separate ISO which we just mount into the VM when it's running. But we keep these two things apart which means that it's also a lot less resource intensive on storage or to downloads new upgrades of the software because we keep those things, I mean the platforms themself. They don't change that often, but the code if you upgrade the code you don't have to download the same images over and over again. - [David] Yeah, so I mean, just so that I can confirm this, it's still like in the path of VIRL 1.0 where the iOSV layer two, iOSV images, et cetera, are available for download from the VIRL website? - That remains to be seen how that is exactly working because - They are all included. - [Ralph] That's right, they're included. - All the images are included. - How that's going to be distributed, what the distribution process will look like, that's a bit up in the air. - But from a product point of view they're included out of the box which is a big, you don't have to buy them or find them or whatever you do, they're included as it is. - [David] That's a big advantage. You get a full working platform html based and you get all the images. - And ideally with the new installation it's ready to go in hopefully only a few minutes. - [David] Yeah, 'cause the installation, I suppose you had feedback, guys found it difficult to install, stuff like that. So this is a lot simpler 'cause it's just the OVA, really. - That's right, and we've removed a lot of the complexity and dependencies so it's much more straightforward to install and upgrade. So hopefully you can get going in five, ten minutes kind of thing. - Yeah, so we said VNC, right? So let's go. Let's go to this guy here I think. What we saw over here, this is actually just a desktop over here. So I can go to this console. So this is the same console as this guy. - [David] And that's a Linux based server that you're connecting to. - [Ralph] That's an alpine server that has a desktop, so I can actually go here and start the VNC session into it. - [David] So html five VNC connection running within html five, all in a browser. - Correct, all in a browser. Now in this case what I can show you guys here is that we are running this pinged to the outside world. So maybe a quick word on the connectivity because that was also a big pain point of the previous product. So in the previous product we needed five different external interfaces connecting to a VM connecting to different V-lands and flats Snad and open stack goodness. - [David] I was going to say, the beautiful open stack. (laughing) Solves a different problem. - So what we do now is we just have a single interface going into the box. It's just a single interface that drives everything. So what we do here, we have this external connector and that external connector, if you are familiar with VMR work station or hyper V or whatever, those products they just offer you two options, basically. I mean, they can have more complex set-ups, but basically what they do is do you want to NAT, network address translate behind your host, or do you want to bridge in parallel to your host? And this is what this does. So I can go in here and edit the configuration and this is grayed out, but it basically says network address translation mode or bridge mode, and if it's in bridge mode it will show up like if this guy is dot 100 on my subnet, so this guy might end up on dot 101. - [David] Oh wow. Okay, so in other words, connecting, 'cause that would have been my next question. Connecting your VIRL topologies to physical devices is possible? - Right. Absolutely - And much, much simpler. - [David] Yeah, you just bridge. - You just bridge it out. So all of these guys, they can be, they can be on the same network subnet as this guy over here. - [David] What I also like, it's not something you really want to show, but there's a web socket disconnect, so you know when there's a problem like getting to your network, which can be nice if you're going remotely. - Yeah, so conference WiFi always pushes things to the limit, but what we've got is a web socket so everything gets fed back in real time. Any events from the underlying system as things boot if you're running the Python client live or you're adding nodes they'll show up straight away. Multiple people are using the same topology. You'll get all the feedback in real time instantaneously from the underlying system. - Another nice feature that I can show you guys is so on this guy there was a ping running, right? So we get the statistics on the link. So you see down there packets and byte cones, et cetera, et cetera. But the really interesting thing here is that I can run a packet catcher right in my UI, right? So I can go out and I can say I can specify a filter or I can specify a packet count. And then start this thing, oh it's already running. So I start it. And I do see my ping right in my browser. - [David] It's like wire shock light or something. - It's a wire shock light, and that's exactly the point. We want to provide different ways to do this kind of things. Like with the console, we showed you two ways to access the console already, in the browser, using SSH. Actually there's a third way. And here the same thing. We have a browser based really quick way to show a packet capture, but we want to have a pcap download button here which is the next thing, or one of the next things we need to do to get to a final version. But there will also be a third way to do that directly on your laptop in a remote system. So to run wire shock here and then connect to these guys directly on your lap top. - [David] So in other words you could have that in a data center and then somehow you get it running back to wire shock locally on your local computer. - So this brings me to what I call the break out utility. It's a little break out box. So what that is is we included. - [Simon] So basically everything's web based but we've got sometimes a need to run things locally, especially to get access to the wire shock or the ports, so this is trying to solve that problem. - [Ralph] So this is like a little go along binary that has a local web UI. So you download this binary and you run this it's nine megabytes of Windows or MacOS or Linux code, and you run this locally on your computer. I've ran it over here so this thing then creates a web UI which I can connect to which is this guy here. And let me just refresh this real quick. And I provide a configuration. So I pointed to this same controller like my browser did, provide my user credentials. Again this is encrypted and authenticated. So we see those labs that we were interacting with before. So I can go into this lab here and this has my desktop, this has my server, this has my iOS device, and I can map out ports. So that I could say, this guy should be reachable on port 9,000. The other guy should be reachable on port 9,001. So I can map these out. I can save them locally in a configuration file, and when I'm happy with this I can actually launch this and can turn it on. When it's on, you see these guys turn green. And now I can do something like new window. So I'm using my favorite tool here on my mac. Connecting to my mac itself, going through this tunnel of the break out utility. - [David] I just wanted to emphasize that this VIRL server is not running on your Mac. - No, the VIRL server itself runs in a data center in San Jose. That's why we rely on the conference network. - [David] Yes, but I mean that's a great thing. So you've just downloaded to your local host but you're actually connecting to a server somewhere else. - Authenticated and encrypted using this break out box that I provide, that I run here. - And you can reconfigure the ports without having to shut down the lab like before. So you can remap that just here. Stop the mapping, change the number of ports and what's connecting to what, restart it without touching a simulation. - [David] So I just want to ask the question that I know people are gonna ask. You're not running VPN client on your Mac? - [Ralph] No. - Not to connect to the server, no. - Well, I run a VPN client to get to San Jose into the data center. (laughs) - [David] So in other words, could you have this on the internet and then just connect it. - Of course. - It's just a web socket with an https. - And that's the beauty about the solution because we really expose a very minimal set of ports on the actual machine. We expose 80 which redirects to 443 for the web page and tls and all that goodness. We expose 22 for the terminal server. And there is port 9090 for low level like reused carpet for system administration purposes underneath, so like for a storage configuration or more complex network interface configurations of the base operating system, but that's pretty much it. - [David] That's amazing. So I just want to emphasize this. It's only to local host but it's getting mapped to this tunnel that you guys have made. - Exactly, so we map this out here, right? - [David] Magic. And then it ends up on that device. - [Ralph] And the same goes for as you can see here we also start the VNC mapping here. So I can actually use my VNC tool here and then click this guy. - [David] Oh, so VNC to local host. That is cool. That is very cool. - [Ralph] So if I go back here. - [David] The one on the left is html five browser, and the one on the right is this. - [Simon] Native mac. - [David] It's what, sorry what is it? - It's just running natively in a mac VNC client. VNC viewer here. - [David] So it's VNC to a local port and then getting mapped in some amazing way to the server. - [Simon] Through that web interface, yes. - [David] That's amazing. - The local web interface, yeah. - There's a lot of delay between those two. - [David] But that's great, I mean you can see it's the same client. Now I said, so this is actually like a second way to connect to my VNC connection, and for the packet capture as we were talking about before, we want to have the same thing. That's not built into the break out right now but we want to be able to click on the link and that link will then capture the packet, send it over the same connection to the breakout utility. The breakout utility will give you the ability to list out okay, what packet captures are actually running? And open up a local tab interface on my Mac or on my Windows machine, whatever, that can can connect my wire shock to so that I can capture those packets locally on my Mac and those packets on that interface are being fed from that TLS socket from my actually running simulation over here. So that's not in there yet, but the day only has 24 hours, right? (laughing) - [Simon] It's not far to do, though. - [David] I'm not gonna ask you this question, I know the answer. Release date, we're not allowed to say it 'cause it's under wraps. - Yeah, so we've been. - [Chuck] This is the pre-released version. - This is pre-released. So we're getting pretty close. The conference WiFi pushes it a little bit but most of the bugs have been ironed out. We've got a couple more just to do a bit more testing. We're hoping to get some field trials soon and hopefully a few months after that it'll be out, so we don't know exact dates, but on the engineering side, which is a big part, it's pretty close now. - [David] So we can hope maybe sometime this year. - I really hope so. - [David] We can't hold you to it, but hopefully. - I really hope so, yeah. - [David] Guys, can I ask you another question? Sorry, I just thought about this. And I'm gonna poke you now, so sorry. Genius three. Guys love genius three because multi-vendor. So can VIRL support more than just Cisco? - So we can run anything that runs in KVM and LR Midvert. So basically what we've got here is the page, we'll hide that one there, 'cause we're testing out various bits and pieces. Not all the images listed here all shipped. Some of them we're testing out. They might not be available. But essentially if it runs in KVM, you can just add a definition. So we can create a new definition. If we just look at one of these here. Basically this is just specifying the parameters that you need to run that node. So we've just got this sitting hard code these yaml files at the moment. A user can create their own. And this is just specifying how to run it. So the key parameters to speed it up in KVM. So you can just do basically this interface to create the specifications we need on the service side, upload the image, and then just drag and drop it in the canvas. So we'll show you how to build a network in a second. It'll look the same there. So basically if you've got an image from an account manager for a special platform that's not currently shipped, you can do it this way. If you've got a different Linux server or something you want to put in, you can do that. If you've got another multi-vendor network image that you want to put in as well, just add it in this way here. - [David] Yeah, I had to ask the question, guys. And I mean, it's a Cisco event, but sometimes I'll want to use cumulus, Linux, 'cause it's Linux based. - VIRL 1.0 supports multi-vendor, it'll do the same here. Absolutely. - Basically everything that can be run in a VM we can support here. I'm pretty confident. - [Simon] So we'll just walk through creating a new lab. So you hit the add lab button. It'll come up with a new tile. - [David] So this a brand new lab, yeah? - Yes, so we're starting it from scratch. And then we can just drag and drop in the devices. Once again, some of these we're just testing out. The ones that we'll be shipping will be the same as today. There may be some new ones, but we're still testing it out. So if something shows up here, it's not a guarantee it'll be in the final version. So we're just dragging and dropping devices here. We've got a switch, we've got a router, we've got a server. This is the external connector, so pretty straightforward. And then we just wire them together. It's just dragging onto it. We can choose the interfaces that we want to connect them on. So we can choose them specifically. Or we can just take the quick way and say I just want to grab the next free interface. And what we did when we specifically chose an interface on the switch, Ralph chose it back, he went to interface seven. So that meant one to six were free. So if we wanted to drop some other things in later once we've started it up we can drag it in and connect it on the fly. So we've just drawn a topology here showing us what we've got mapped and we can just hit start. Start it up. The external connector, we can choose whether we want it to be bridge or natted. We don't have the full order net kit. We just do a very basic version at the moment. We're just doing basically the interface provisioning, so to say the different interfaces on the device and those shot, people can add their own from there. We might introduce some more order net kit config in the future. So the incoming feedback will be really important. But at the moment we're just trying to focus on getting the basics right, and then we can increment from there. So we've got the config editor in the browser as well and then we can start this up. That will send it off to the server. They first go into the cueing state which is what I was saying before about the boot progress so it cues them all up and then figures out which ones it can boot based on the CPU load. It's a big server, small topology, so they all loaded. - [Ralph] Why don't you show this one here. - [Simon] We can see, yeah, the CPU status coming from the back end as they boot up so their desktop and switches are pretty light. IOSV is a big virtual machine, so it's taking it a bit longer to boot. We can see that as it goes. We can console in. - You see the stats down here as well, and there's also some things we can modify based on this node definition. Depending on the virtual machine we are running, we can modify certain things, properties of the individual node, like increase the memory or add additional disk space or increase the root disk of a Linux machine, for example. This is all possible down here. - [Simon] So you're gonna see it booting up here. And this is again, using the multi-plex console. Oh stay on it, it might be better for the boot progress. - [Ralph] What I can do, what I wanted to show you a route what I thought I said before is that you can edit. - [Simon] Now you can see it booted. - [Ralph] It did boot, yeah. So I could go ahead and say, oh, I forgot something, so I can add another desktop in here, while these other guys are already running. So I drag this new guy in here and I, let's move this away, and hook this one up, and use one of these ports that are still free. Connect the next one and then hit start again. So this guy is now booting up. - [David] So that just starts the devices that are not running yet, it doesn't reboot the other devices. - Right, yeah. It just looks at what's not started and starts them up. Or you can start and stop individual devices. - [David] I love the interface, it's very clean. Very modern. - Yeah, working with the DNA Suite team's been great. To be able to work with them. Had a few feature requests we've had to add in, but it works really well for simplicity. Really trying to make simplicity and ease of use a real focus here as well. Robustness and ease of use, our main design goals. - What I find really exciting is simulation products are only getting better. Genius three is getting better. Cisco VIRL is getting better. There are new kids on the block like EvenG. The options available to us as network engineers are only getting more and only getting better. It's a fantastic time to have access to all of these products whether you're just starting out with Cisco Packet Racer or you're trying to do complex stuff with Genius three or Cisco VIRL, lots of options available to us today. So what do you think? What do you think of the new changes to Cisco VIRL? Is it exciting? I think it is. Really nice to see these changes and I'm really looking forward to the next release of Cisco VIRL. (mellow techno music)",
    "transcript_keywords": [
        "Cisco VIRL",
        "VIRL",
        "Cisco",
        "running Cisco VIRL",
        "Cisco VIRL product",
        "running",
        "API",
        "lab",
        "Yeah",
        "server",
        "thing",
        "guys",
        "entire Cisco VIRL",
        "start",
        "things",
        "connect",
        "Guy",
        "VNC",
        "devices",
        "console"
    ],
    "transcript_entity_values": [
        "a ton",
        "Linux",
        "TLS",
        "three",
        "Cisco Live",
        "SSH",
        "Java",
        "55 megabyte",
        "ITM",
        "David] Magic",
        "80",
        "Cisco VIRL",
        "Cisco",
        "two",
        "four",
        "second",
        "Ralph",
        "MacOS",
        "Python",
        "Snad",
        "Linux",
        "ISO",
        "9090",
        "700 meg",
        "IOSV",
        "thousands",
        "two n zero",
        "five,",
        "CRT",
        "20",
        "22",
        "VNC",
        "750 megabyte",
        "API",
        "84",
        "Simon",
        "today",
        "one",
        "Arcor",
        "100",
        "Windows",
        "UI",
        "first",
        "ten",
        "2019",
        "Chuck",
        "iOS V",
        "443",
        "LR Midvert",
        "CML",
        "24 hours",
        "VPN",
        "Guy",
        "nine megabytes",
        "9,001",
        "SSL",
        "KVM",
        "NAT",
        "IP",
        "NetworkChuck",
        "only a few minutes",
        "roughly six to seven gigabytes",
        "VM Maestro",
        "Cisco",
        "Cisco iOS V",
        "VM",
        "16",
        "DNA Center",
        "10",
        "next week",
        "six",
        "hundreds",
        "Re-Ms",
        "VM Maestro",
        "San Jose",
        "seven",
        "third",
        "five",
        "AVM",
        "422",
        "a few months",
        "CPU",
        "9,000",
        "Mac",
        "101",
        "Cisco VIRL 2.0",
        "sometime this year",
        "Cisco",
        "VMR",
        "VPN",
        "ten minutes",
        "600",
        "CLI",
        "VIRL 1.0s"
    ],
    "transcript_entity_types": [
        "QUANTITY",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "QUANTITY",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "PERSON",
        "GPE",
        "ORG",
        "PRODUCT",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "DATE",
        "TIME",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "PERSON",
        "DATE",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "TIME",
        "PRODUCT",
        "PERSON",
        "QUANTITY",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "TIME",
        "CARDINAL",
        "PRODUCT",
        "NORP",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "GPE",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "DATE",
        "ORG",
        "CARDINAL",
        "PERSON",
        "CARDINAL",
        "ORG",
        "DATE",
        "GPE",
        "ORG",
        "ORG",
        "TIME",
        "CARDINAL",
        "ORG",
        "CARDINAL"
    ]
}