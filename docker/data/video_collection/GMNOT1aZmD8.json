{
    "id": "GMNOT1aZmD8",
    "title": "HTTPS Decryption with Wireshark // Website TLS Decryption",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-11-23T16:11:52Z",
    "video_url": "https://www.youtube.com/watch?v=GMNOT1aZmD8",
    "category": "Science & Technology",
    "tags": [
        "wireshark",
        "tls handshake",
        "wireshark tutorial",
        "tls decryption",
        "ssl decryption",
        "tls handshake explained",
        "tls handshake wireshark",
        "tls handshake protocol",
        "tls 1.3",
        "wireshark tutorial https",
        "https",
        "quic",
        "ssl decrypt",
        "tls 1.3 wireshark capture",
        "tls 1.3 wireshark decrypt",
        "tls handshake process",
        "wireshark tutorial kali linux",
        "tls decryption wireshark",
        "ssl decryption explained",
        "wireshark capture",
        "tcp",
        "wireshark packet analysis",
        "tls encryption"
    ],
    "views": 265734,
    "likes": 8273,
    "comments_count": 416,
    "description": "NOTE: Jump to 24:17 if you are only interested in the Wireshark capture and SSL decryption technical explanation. You can also follow along by downloading the Wireshark pcap using the link below.  Next video is available here:   Wireshark course:  Nmap course:   Learn how to decrypt TLS / HTTPS traffic using Wireshark.   // MENU // 0:00    Is it important to learn Wireshark 2:19    Will you get a better job?  3:16    Welcome Chris 3:40    Defcon presentation 5:44    Why TLS decryption 7:20    Wireshark capture 8:26    What is SSL and TLS 9:44    How do you get the capture (Man in the middle) 11:03  Key exports for Wireshark 13:56  Which keys are stored in the keylog 15:55  Client and server key generation 18:10  Process - keys and wireshark 21:00  Wireshark capture explained 24:17  TLS negotiation and Wireshark details 29:04  How to import the keys into Wireshark  // LINKS // PCAP file:  How to Decrypt SSL with Wireshark  HTTPS Decryption Guide:  Man in the middle Python script:  Chris TLS decryption:  Intro to Wireshark:   // MY STUFF //   // SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    //CHRIS GREER // Udemy course:  LinkedIn:  YouTube:  Twitter:   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  wireshark tls ssl http https https decryption tls decryption wireshark tls wireshark ssl https wireshark tls wireshark ssl wireshark ccna cisco ccna  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #wireshark #tls #https",
    "description_links": [
        "https://youtu.be/yodDbgoCnLM",
        "https://davidbombal.wiki/chriswireshark",
        "https://davidbombal.wiki/chrisnmap",
        "https://davidbombal.wiki/ssldecryptionpcap",
        "https://davidbombal.wiki/sslwireshark",
        "https://youtu.be/O1jpck31Ask",
        "https://youtu.be/5qecyZHL-GU",
        "https://youtu.be/OU-A2EmVrKQ",
        "https://www.amazon.com/shop/davidbombal",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://davidbombal.wiki/chriswireshark",
        "https://www.linkedin.com/in/cgreer/",
        "https://www.youtube.com/c/ChrisGreer",
        "https://twitter.com/packetpioneer"
    ],
    "transcript": "- Chris, just before we start and get into the weeds with Wireshark, I wanna ask you like a really important question. Is it important for a network engineer to learn Wireshark, or is it important, if I'm like trying to get into cybersecurity, I wanna be a hacker-type person, or ethical hacker, I wanna be on the red team or blue team, is it important for me to learn Wireshark, and if so, why? What's your answer to that? - Absolutely, resounding yes, David. Absolutely. What I've seen is that, especially in our industry, there is a gap and it's so important to fully understand how TCP works, to be a master of TCP, to really understand it well. To know what's going on on the wire, looking at the protocols, knowing what looks weird. So what Wireshark does is it gives us that window into a very important dataset, the packets. In fact, you might hear around the industry, packets don't lie, and that's because no one can fight with you. If you see something happening on the wire, that's the truth, it's not a guess. We're not relying on another metric, right there, we saw it in the traffic. So Wireshark allows us to collect that traffic and to understand that traffic. Now, from a where-can-it-send-you thing, basically what I've found is there's two major ways that Wireshark are used, the first is network analysis and troubleshooting. Something's broken, something's slow, let's fix it. And the other one, that's definitely gaining a lot of strength now, is using it for security and using it for incident response, looking for attacks. So either way, whichever way your career takes you, be it the Cisco route, network engineering route, it's gonna make you a better troubleshooter. You're gonna be able to understand things that are going to really help you resolve problems and not just throw them over the wall at somebody else, or on the other side, to be able to be either a red team or a blue team, you could either look at how systems respond to a pen test, for example, or you could be looking at traffic and saying, that looks like a strange flow. I think something's weird going on here or even doing malware analysis, all that can come down to understanding how things work at the packet level, which Wireshark allows us to do. - And do you think this, you know, will you be able to get a better job or will you be able to increase your earnings if you understand Wireshark better? - Absolutely. I think so. The difference between being able to explain something from a textbook example, or really understanding the underlying protocols, how things really work. So, yes, absolutely. - Yeah, I mean, that's always the problem, isn't it? Like, you do CCNA and you and I, you know CCNA years ago, it gives you an idea, but it doesn't cover a lot of stuff. And you've mentioned it many times, you need to understand TCP because TCP, in like newer protocols, which we'll talk about in this video, that's what's happening in the real world. And CCNA can only cover that much, you really need to learn this stuff. (bright upbeat music) Hey, everyone, it's David Bombal, back with a very interesting guest. Chris, tell us about yourself. - Hey, David. It's great to be here with you. I'm really excited. I'm just a packet person, kinda like yourself, a Wireshark guy that's out there looking around YouTube and trying to make sense of all this traffic. - You're too humble. Chris, you've got a YouTube channel, and I'll link that below, but tell us, you recently did a presentation. What was it? Where was it? And we're kinda deciding which topic to talk about, and hopefully I can twist your arm to do both, but tell us about this presentation that you did. - Not a problem, okay. So, yeah, so, I've been doing Wireshark analysis and training for some time, and one thing that happened recently is I've been pivoting into cybersecurity and doing more analysis on attacks, and how hackers do their thing, and trying to catch them in the packets. So that's been a pretty interesting field of study to get into. I know I've been watching your content, too, David, and that's been helping me to get up to speed. But one thing I did is I reached out to the DEFCON community and I noticed this last year for the DEFCON conference, that there was several sessions in the packet hacking village, but I noticed a gap, what I thought to be a gap there, in the focus on the material, and it was into specifically around TCP. So as you know, when it comes to hacking and trying to find vulnerabilities in systems, a lot of times hackers, they know the minutia of how things work, right? They're getting into very complicated systems. And so, I reached out to 'em, I said, I feel like there's a bit of a gap here. There's the application, so hacking a web server, okay, getting in there and messing around with the code, finding vulnerabilities, and there's also the network side of things, like you just recently did one on an ARP Poison, so that's really important to understand. But I saw this gap there around TCP, and I reached out and I just said, Hey, would you guys like just to do a TCP deep dive? How does TCP work? How does it look when a hacker might be enumerating a system? And how can you catch weird, right? So, I reached out to 'em and they said, let's go for it and I went ahead and was able to do a Wireshark TCP presentation there. I was real excited. - You're making it really difficult because I wanted to also get your TLS decryption point of view. Can you explain what you you've done some content on that before, what's that about? - Absolutely. So as you know, so you start looking at things in Wireshark, a lot of times you come up with things that are encrypted, encrypted flows. It can be hard to find anything that's open anymore, like open passwords and file transfers that are easy to extract. So recently on my channel, what I did is how to decrypt traffic in Wireshark. And fundamentally that comes down to being able to capture the session keys, any more with TLS. The way it works, especially with TLS 1.3, the point is that it's difficult to decrypt, right? That's the whole point. So to be able to decrypt it in Wireshark, we have to be able to- the easiest way to do it is to be able to store the keys locally on the client side or to store them server-side if we have access on that side, or to do a man-in-the-middle. So to just teach people how to do it, I went ahead and stored those keys locally on the client and then I was able to put them in Wireshark and decrypt. - So yeah, let's start with that one, 'cause I think that's a really interesting one 'cause I, like you said, I did this, like man-in-the-middle attack on WiFi using a Python script and I'll link to that video and your full video below. But perhaps you can show us that one first and then depending on how much time we have, we can look at like weird traffic on a network. So you up for that? - Absolutely. - Yeah. Go for it. - Let's do it. Okay. So to the demo, we're gonna go ahead and first, now this trace file, let me give you a little bit of background of how it was captured because that's important when we're doing decryption. So all I did is I just opened up a web browser, okay? And I went out to youtube.com, that's it. But, in order to be able to decrypt it, I had to capture the TLS keys, all right? So the way TLS 1.3 works is for every new TLS handshake, there's a new set of session keys that are created. There's actually five keys that are created, and we won't go down that too far, but basically, it stores it in a local SSL key log file. And for each operating system, you can usually get it to do it. Sometimes it gets a little tricky in terms of what browser to use. I've had the most success doing this on a Windows machine using Chrome. You can still do it with Linux, you can still do it with other operating systems. All the ones that I've tried have worked, but again, that's one of those things that we have to consider. So what I did... - Just to step back for people who are brand new. Can you explain just like in 30 seconds, what is SSL? What is TLS and why is this important? - Okay. That's a great question. So basically now, I mean, most of the traffic that we're sending over the internet is encrypted. And even locally, a lot of times when we're using local applications, we're using encrypted traffic. So the days of HTTP and things being open, and easy to analyze with Wireshark are disappearing. Our job as analysts, David is getting harder at a packet level. - It is, yeah. So, like when I did that man-in-the-middle attack, I had to use Telnet because Telnet is clear text, but the problem is like, if I did a man-in-the-middle attack and you going to YouTube, what you saying is all that traffic's encrypted, yeah? So I need to do something like, you're gonna demo now to try and capture the traffic from us, from a user session, yeah? - Exactly, that's exactly it. Back in years ago, Telnet, everything was HTTP, everything was open FTP. So any more, yeah. At times, we need to decrypt, so this is how we can do that with Wireshark. - So is it right to assume, like, what does capture that you've done here could have been done, like in a with a man-in-the-middle attack or did you have to do something else? And I don't want, I'm jumping the gun a bit, but like, if you can explain, how do I get to capturing this and seeing what you're seeing and I'm assuming that's what you're gonna show us. - Yeah, no problem. So basically yes, the answer is yes. Could it be done from a man-in-the-middle? Sure. Would it be much harder? Yes. So the purpose of security and encryption is to make what I'm doing really hard to do. That way I can't listen in on what David's doing, even at a coffee shop, it's not as easy doing it as a man-in-the-middle. To learn this, the simplest way would be to capture them locally from the client side, get used to how to decrypt things. And then depending on the kind of access that we have within the system, that's where we can begin to look at other locations, for example, on the wire man-in-the-middle or server side. So any one of those three, we then need to be on the client, on the server, or somewhere in the middle. - So I know I've jumped the gun, so you take it away and then hopefully at some point we can go to more like, how do you do man-in-the-middle, et cetera. Sorry, go on. - Absolutely, no problem. Okay. So first let me just back up just a moment, David. I'm just gonna bring in my terminal and what the reason here is, I just wanted you all to see at least on a Mac system. Let me pull this up for you a little bit. So this is on a Mac system, right? So I didn't break out the Windows box for this conversation we're having today, but basically, this is one way to do it. What all I'm doing is I'm just telling my local system to export what's called this SSL key log file. And basically, this is a variable, I'm telling my system when you go out and you're actually creating these TLS handshakes, store the keys locally and store them here. So for Mac, this is gonna be, I'll go ahead and give you a link that you can share with the good people that shows them how to do this, either on a Mac, on Windows or on Linux. But basically, I need to be able to store those keys locally. Once I have that key log, then I can go do my packet capture of whatever it is that I wanna do, whatever it is that I want to decrypt. Okay? Now Wireshark can only do decryption on certain types of applications. So HTTPS is one of them. Quick is another, and we'll we'll have that conversation another time, but basically, you can't just decrypt anything, right? So certain applications aren't going to lie to do that, certain mobile apps don't store the keys locally. So very specifically, we can do this when we're doing web so HTTPS and when the system will store those keys locally for the browser we're gonna use. So first, we had to store those keys. We had to set up our system to stash those keys in our key log. The next step would be to open up a browser that supports this, which Chrome or Firefox typically do. And then we can navigate to some site out there that we want to test this out with. I went ahead and chose YouTube. - Yeah. Good choice. - So, once I did that with Chrome, yeah, right? (chuckles) So I went ahead and hit YouTube and then those keys were stored to my key log. And I can go ahead and show you over on the Windows side. I can show you, maybe I'll give you on the Window side, I have some copy that shows you how to actually do it on the Windows side, so maybe I'll send that to you as well, if it's useful. - Yeah, definitely. - But anyway, so once I actually have the site up and those key logs are being stored in the key log, I have to be capturing that traffic too. So that there's the key, David, I need the packets and the key log from the same conversation. So that means if you're storing key logs, if you're doing this key log storage on your side, but you're not also capturing the packets, this won't work. - So I need to ask the question, sorry, just before we go any further, which keys are stored in this key log? So can you explain a bit about the keys? - Sure, absolutely. So TLS is what we're using now for Transport Layer Security, that's what TLS means. So TCP doesn't have a mechanism to secure a traffic and for a long time, applications didn't do their own security either. For example, Telnet. There wasn't any security at that level. So what was done was a new layer, if you would, well, was put in between those two parts of the whole chain and that's Transport Layer Security. So at first it started off as being SSL. We had SSL 1.0, 2.0, 3.0, TLS came around around late 2008-9. And then now we're at a TLS 1.3. So the keys that are used by TLS are generated for every handshake that it creates, which I'm gonna show you in Wireshark. I am talking about some concepts that are gonna make a bit more sense once I get into the packets. But those keys are created for a session and just like the keys to your car, they're stored, like those are specific keys, but the thing is, imagine if you went out to your car, David, every single morning and you had to use a different key, or every time you go into your house, it was a different key. That's what TLS does, it establishes a new key for every single TCP connection that you make, that's why we have to store them. It used to be that there was a master key that you could use. I could say, Hey David, here's a master key, you can unlock any TLS session. This is basically the granddaddy key for everything. That was easy to break 'cause it was persistent, it never changed. So now with TLS 1.3, that's why we have to do this. We have to store those keys because they change for every single TCP conversation. Hopefully that... - So when the client connects to the server, the client and the server both generates some kind of random keys out, right? Is it based off a private key or is it just some randomized key that they exchange? - That's exactly it. So they come up, they basically exchange information that allows them to arrive at the same key on each side, without passing that key to the other party. So it's a pretty complex way that they derive it, but to keep it very simple, that's basically what's done. That they are able to arrive at those keys on each side, without passing it to the other. - So just you and I, let's say, you and I wanted to set up a TLS session, you're the server and I'm connecting to your server as a client, you and I would exchange some information and then we come up with a shared key that encrypts the session, is that correct? - That's correct, exactly. So we arrive at the same key, only you didn't have to pass it to me and I didn't have to pass it to you, so that a passive listener could capture it. - So some similar kind of concept to IPsec or VPNs, isn't it? We kinda exchanging some, we have some kind of mechanism and like, I understand we don't wanna get into the math of it for now, but you and I exchange something securely, but we both come up with the same key without actually sending the key across the session, is that right? - Yeah. That's the idea behind TLS 1.3. So now, we don't have to basically it's protecting the session, right? It's keeping it secure. - So that key is stored in that key file that you showed us? For this specific session? - So when I'm telling exactly... - Please, sorry, go on. - I'm telling my system to store it locally. Where, if I don't tell it to do this, it could be embedded somewhere in the browser. It could be somewhere that I don't even know how to access, but in order for it to be available to me as an analyst, to then be able to decrypt my packets, I need to have access to those keys. So all I'm doing is I'm just basically saying, Hey, system, hey, environment, store those keys to this log. And then I can go in and I can decrypt my trace file using that log. - In this example, the Wireshark captures is taking place on the client that initiated the session because you got the key stored locally, is that right? - That is correct. And the reason why David, I think this is a good place to do it from is 'cause this is the simplest way to learn how to do it. - To start, yeah. Yeah, I agree. I mean, we can do man-in-the-middle and server side attacks in a separate video perhaps, but you gotta start with a basic, so brilliant. - Yeah, and for me, it's nice to be able to learn, Oh, okay, this is how those keys are stored. This is what they look like. This is what Wireshark is gonna need in order to decrypt, 'cause let me just tell you, when you're learning Wireshark decryption, you're going to run into a lot of failures at the beginning 'cause maybe we won't have everything exactly right, but this is absolutely the simplest way to do it. So let's just assume that I have both of those pieces. Let's just back up for a second. I'm storing the keys locally, I'm telling TLS, just dump them to this key log. And I start up Wireshark and I begin to capture. Then I go off to youtube.com from my browser. And then I stop the capture and then I can load those keys into Wireshark. That's the basic process. So here you can see on my screen, hopefully I'm coming through now. You can see my Wireshark. All right. So you can see up above that this is just a, is it large enough, does it look okay? - That's fine. - You can see it, all right? - Yep. - Okay. So basically what I have to do is, just at the very beginning, as you know, Wireshark, it could just could be a daunting thing to look at. In fact, I have a few options that I have enabled here for my security profile. Let me come over here to my TCP plane profile, which allow me to simplify things just a little bit, at least from my eyes. Now you might be thinking, Oh, wow, look at all those colors. What does all this mean? Ah, help. And that's okay, that's why I'm here. We're gonna walk through this together. So at the very beginning, you can see, okay, I do a YouTube DNS call. All right. I just go and knock on YouTube door. Hey, YouTube, what's go- Well, first I asked DNS, Hey, DNS, how do I get to YouTube? DNS comes back, Oh, here you go. Here's YouTube's IP. Great, fantastic. So after that, I go ahead and send a TCP SYN to YouTube to that same IP, all right? Just kinda fixing some of these columns. So now to kinda simplify my view here, let's go ahead and set a filter. I'm just gonna right-click packet four, and I'm gonna come down to conversation filter, TCP. What that will do is it'll set a filter for the four tuple of that TCP conversation. A four tuple is the two IPs and the two TCP port numbers. And we can see that up top on our filter bar, I got the IP of the client, IP of the server, and then I've got the two ports. All good, so far? - Yeah, that's great. - [Chris] All right, good. So the first thing that my machine does to YouTube is I gotta establish a TCP connection, right? So I knock on the door, I send out a TCP SYN to port 443. 33 milliseconds later, comes back with my SYN, ACK. So that's a good deal. That server has that port available. And I'm able to connect at the transport layer. This is just layer four, this is just TCP establishing the connection. Now you and I, David can have a whole lot of conversations about what's going on in here and what this MSS is and this Window Scale factor and SACK, and what all those things are, which, Hey, that's fuel for another time. - Let me just put it this way. I'm hoping that I can twist Chris's arm to come back for many, many Wireshark videos. So if you're interested, please put in the comments below, let us know the type of stuff that you wanna see. I'm gonna ask him to do like a detailed, deep dive into TCP, which would be great. So sorry, Chris, carry on. - Well, we'll see. Now that sounds like a good time, that sounds like a lot of fun, I can't miss that party. I'm not gonna miss that party. It's a TCP party, right? Well, because, and just to, if I may sidebar just for a minute, I'm very passionate about network engineers learning TCP. In fact, David, your audience coming from the networking background, even entering into the network world, TCP is a very important thing for them to learn. - It is so. Because really, I mean, throughout my career, it's something that I've seen as a network engineer. I came from the CCNA, CCNP world, that's what I started with. And I got to a point where we started to have problems on networks, that from a network perspective, were really difficult to troubleshoot. And these guys would come in almost like with Superman on their chest and their capes with these packet analyzers and they'd start capturing this traffic. And they would look over my shoulder and they would say, Oh, Chris, right there, the MSS is wrong, that's probably what our problem is. We're running into an MTU problem. And I'm just stunned, speechless looking at him like, I didn't know that that was, Whoa, TCP, hang on. There's a whole world here that I need to understand as well that ultimately David, I'm gonna get blamed for. Because application people usually coders, developers, they're using TCP, but they don't understand how it works. They're not deep dive TCP people, usually. So if there's a problem, they're gonna kick it to the network guys and say, \"Ah, TCP, that's a network thing.\" But here we can see, this is sitting on top of the network, but it's not necessarily something that I'm gonna specialize in, if I learned Cisco, right? So I'm very passionate about people learning that. So absolutely... - Definitely get you back. - Oh, for sure, anyway, thanks for the sidebar. Okay. TCP connection is now established. SYN-SYN-ACK, three-way handshake. Next, what happens? TLS. He comes in, we can see this on, in my protocol column. TLS 1.3, so now TLS needs to come in and say, all right, let's do our handshake. And this is where the client is gonna send out that, hello. And this is where if I come down into the details here, and again, just for purposes of time, we're not gonna get too crazy deep in the weeds just yet, but let's just take a look at some simple things. See, this is the weeds, right? There's a lot going on in here, but I'd like to draw your eye to something simple. Why don't we just come down to server name, the server name extension. This is called the SNI. Basically, my client is saying, Hey, here's a TLS handshake. Who do I wanna talk to? My server name at this IP address that I'm talking to, on this port, I wanna talk to youtube.com. Great. Well, there's some session IDs, there's this random string. These things all matter. But basically, what I'm doing is I'm saying, Hey, other side, let's go ahead and establish this TCP or this, sorry, TLS connection. Now the server, he comes back, TCP says, great, I got your Client Hello, this is an empty ACK, this is just TCP saying, I got that packet that took 32 milliseconds, which is about my network roundtrip time. So I'm pretty happy with that 32 seconds, 32 milliseconds. 14 milliseconds after that, the server comes back saying, okay, great, this is TLS. This is TLS saying, Hey, I'm here. This is my Server Hello, and right away, what happens is the server, it basically breaks its response in two pieces. It says, okay, here's my Server Hello. Now you notice the Server Hello is a little shorter than the Client Hello? The server saying, okay, great. Here's some of the key establishment stuff. Wonderful, here's my supported versions. I can go ahead and do TLS 1.3, but immediately after that, I go ahead and change my Cipher Spec. What this means is that the server is basically saying, Okay, I'm gonna give you a little bit of information, just enough to establish the key pair. And now I'm gonna encrypt my stuff. So in one roundtrip, we're encrypted. From this point forward, if I do not have the keys, I do not see decrypted information. Now in this case, I do have my key loaded. So what I'm gonna do, is I'm just gonna briefly change over here, David, just so the good people can see. If I go to default, this is just my default profile in Wireshark. The key is not loaded here. Look how this looks, if I don't have that extra key information, all I see is Client Hello, Server Hello come back and that's it. Everything is encrypted after that. That's all I did. - Pick an application data, let's see what you see? - Yeah, sure. There's application data. So I got my TCP header. I got my TLS layer there and then encrypted application data, that's all I get. - Yeah. So that's normally what you'd see nothing else, but just nonsense, yeah. - Exactly. It's just gibberish. And from, that's the point, right? - Yeah, exactly. - So, from a network analyst perspective, what do I get when I'm looking at an encrypted stream? Well, I'm going up and I can see network round trip time, I can see my Client Hello, I can see my Server Hello, I can measure that response time, so I can sorta get some idea on server delay, network roundtrip time, I can look for things like retransmissions or out of orders, or TCP types of issues that can let me to troubleshoot the network, or troubleshoot the application. However, as you can see, I'm pretty blind here. Now, this is what I'd like you to do, keep your eye on... If we come down here, you see where it says application data. This is toward the end of what we call that TLS handshake, which just happened. Let me flip back over to my other profile, gonna go to TCP plane, and you notice how now I have HTTP2. And now instead of application data, now I can see, Oh, here's WINDOW_UPDATE, PRIORITY. Here's all these streams that are being established. Here's a GET, that's an actual get string. So here's my a decompressed header. I can actually see the method that's used. HTTP method at youtube.com. So this is now decrypted, but how did I get there? How did I go to decrypt this? Well in this profile under TCP plane, what I did is I just went up to, now I'm on Mac, I go to Wireshark, preferences on Windows, Linux. You're gonna find preferences under the edit menu. You're gonna go to edit and then down here, preferences. On a Mac, Wireshark preferences, same thing, just two ways to get there. So what I have to do, is I'm gonna come down to protocols, gonna expand this. I'm just gonna hit the T key, and I'm going to come down here to TLS. And what I do with TLS is I literally just come down here to pre-master secret log file name. This is where I hit browse, and this is where I go ahead, and I bring in that key log file that I created, where I stored those keys. All I'm doing is pointing Wireshark over there. For your decryption, go look over here. - So if you're on the bottom left where it says, hypertext transfer protocol two, can you just expand that, bottom left? - Absolutely. You bet. Actually, David, that's a great question and a good place for your eyes to go because when I first started to decrypt TLS sessions, I saw HTTP2 and I went, Oh, there's more going on beyond that lock than I thought. So it's not just, HTTP 1.0 or 1.1, now HTTP2, or even with the next generation of HTTP. Now we see HTTP3 as well. - Can you, what is... Just for everyone's benefit, can you explain what's HTTP2 and you mentioned HTTP3, and I saw your file name is called Quick. Well, what's all that about? - Ooh, good question. Okay. So, here it is plain and simple, with HTTP2, or actually let me back up, HTTP1. (bright upbeat music)",
    "transcript_keywords": [
        "TCP",
        "Wireshark",
        "TLS",
        "key",
        "keys",
        "key log",
        "server",
        "David",
        "Yeah",
        "keys locally",
        "Wireshark TCP presentation",
        "Wireshark TCP",
        "basically",
        "client",
        "things",
        "Hey",
        "network",
        "SSL key log",
        "log",
        "traffic"
    ],
    "transcript_entity_values": [
        "first",
        "DEFCON",
        "a minute",
        "TLS",
        "three",
        "CCNP",
        "Mac",
        "443",
        "Chrome",
        "five",
        "HTTP1",
        "33 milliseconds",
        "SNI",
        "two",
        "four",
        "every single morning",
        "14 milliseconds",
        "Wireshark",
        "MTU",
        "Wireshark",
        "SSL",
        "Windows",
        "TCP",
        "1.1",
        "second",
        "Cipher Spec",
        "YouTube",
        "32 seconds",
        "DEFCON",
        "David",
        "today",
        "MSS",
        "Chris",
        "3.0",
        "IP",
        "Python",
        "Linux",
        "Mac",
        "Superman",
        "IPsec",
        "Windows",
        "one",
        "years ago",
        "Linux",
        "just two",
        "HTTPS",
        "Quick",
        "Cisco",
        "CCNA",
        "TCP",
        "this last year",
        "DNS",
        "30 seconds",
        "1.3",
        "Wireshark",
        "Windows",
        "32 milliseconds",
        "HTTP2",
        "YouTube",
        "David Bombal",
        "Firefox",
        "ACK",
        "CCNA",
        "Transport Layer Security",
        "2.0"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "PERSON",
        "TIME",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PERSON",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "QUANTITY",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "NORP",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "ORG",
        "TIME",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "PERSON",
        "ORG",
        "GPE",
        "CARDINAL",
        "DATE",
        "GPE",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "GPE",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "TIME",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "QUANTITY",
        "PRODUCT",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "WORK_OF_ART",
        "CARDINAL"
    ]
}