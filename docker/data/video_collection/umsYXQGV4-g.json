{
    "id": "umsYXQGV4-g",
    "title": "Free CCNP 350-401 ENCOR Complete Course: 6.4: REST APIs Part 6",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-05-24T17:11:53Z",
    "video_url": "https://www.youtube.com/watch?v=umsYXQGV4-g",
    "category": "Science & Technology",
    "tags": [
        "python",
        "ccnp",
        "encor",
        "cisco sdn",
        "rest",
        "rest api",
        "restful api",
        "350-401",
        "json",
        "ccna",
        "ccnp encor",
        "ccnp enterprise",
        "ccnp training",
        "new ccnp",
        "ccnp study",
        "cisco certifications",
        "cisco training",
        "cisco",
        "ccnp certification",
        "encor 350-401",
        "ccnp automation",
        "ccie encor",
        "cisco ccnp exam",
        "ccie enterprise",
        "cisco certification 2020",
        "cisco ccnp",
        "cisco encor training",
        "cisco encor exam",
        "ccnp review",
        "cisco ccna",
        "ccna study",
        "ccna training",
        "cisco encor test",
        "learn python",
        "python rest api"
    ],
    "views": 23117,
    "likes": 675,
    "comments_count": 86,
    "description": "This is a FREE complete CCNP 350-401 ENCOR Course. In this video I show you how to use Python and a REST API to create and delete multiple interfaces on a Cisco IOS XE router using the built in REST API.  It's important that you learn both REST APIs and Python for the ENCOR exam as well as the real world.  I will be covering all the topics in the Cisco CCNP ENCOR exam in this course. I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  Slides:    Previous video:   CCNP ENCOR playlist:   Menu: Overview: 0:00 CREATE lots of interfaces script: 1:15 DELETE lots of interfaces script: 5:44 ENCOR Exam Tips: 13:18  ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  GNS3 Academy: CCNA ($10): bit.ly/gns3ccna10 Wireshark ($10): bit.ly/gns3wireshark  DavidBombal.com CCNA ($10):  Wireshark ($9): bit.ly/wireshark9   Python REST API JSON CCNP CCIE CCNP ENCOR CCNP 350-401 CCNP Enterprise ccnp training CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccnp #python #restapi",
    "description_links": [
        "https://bit.ly/encorapi6",
        "https://youtu.be/DAajWlVcskw",
        "https://bit.ly/freeccnp",
        "http://bit.ly/yt999ccna"
    ],
    "transcript": "- Now, in the previous video in this course, which I've linked here and below, I showed you how to use a Python script to create a single interface, a loopback interface, on an iOS XE router using the REST API. I also showed you how to delete a single loopback interface on the router. In this video we're gonna take it a step further, we're going to use a loop to create a whole bunch of interfaces on the router, and to delete a whole bunch of interfaces on the router. Now, as I've said, don't get stuck on the fact that we're using loopbacks here. We're only doing that because it's easy, but I wanna start off slowly and through iteration. And over time, your scripts will get more and more complicated and you'll be able to do more and more tasks using automation. Don't lose sight of the fact that, at the moment, you may be able to do some of this quicker using the CLI, but there's no ways that you manually would be able to configure 100 switches as quickly as a Python script that's been optimized. Okay, so without further ado, let's get started. I'll show you how to use loops in Python to create a whole bunch of interfaces and delete them. (upbeat music) Yeah, yeah, yeah, let's go So the create script is very similar. All this is the same, except here, I've set an int number to five. I could make this 50, and I'll show you that in a moment, but let's start with five interfaces. So I've put this information before my for loop. What I'm doing here is I'm saying for x in range, int_number. That's basically gonna loop, based on this integer number. So it'll create a whole range of interfaces based on what I set this to. And I'll demonstrate that in a moment. So it'll start at zero. First IP address will be 1.2.3.0. I'm setting, x which is an integer, to a string, so that I can concatenate it with 123. So IP address is a variable, which is equal to 123, plus the string, x, which will be zero the first time this loops. I'm gonna print something so that we know what's going on, creating loopback with this IP address. We're going to send the payload to the router. This is the same as the previous example, except here I've set Loopback123 previously to Loopback1234, as you can see over here. This is what it looked like before, but now I'm saying plus. So, this will be zero, then it'll be 1234 and so forth, depending on what I've set this value to. It's a string value because I wanna concatenate it. Notice what I've done here, very important, I'm using single inverted commas, because this output is using double inverted commas. So here I've got single inverted commas, so that Python knows that I will now wanna add a variable to my script. Single inverted commas, double inverted commas. This will basically end up being one long string of data. Everything else is the same, but here at IP address I've done something very similar. So the first IP address will be 1230. The request is exactly the same, it's a post. And then I've got my status codes. So let's see what that does. So, I've got a create one interface Python script at the moment. Let's create lots of interfaces .py. And I'll paste the script in, Ctrl + X. Yes, to save the script. So, I've now got createlotsofinterfaces. Before I run that, let's see which interfaces exist on the router at the moment. So Python3, get interfaces. I can only see physical interfaces on the router. So Python3, createlotsofinterfaces.py. You can see it's saying creating the first loopback, we get a status code of 201. Second interface, third interface, fourth interface, and fifth interface. Notice it goes from zero to four. So I set this to five. It's looping, zero, one, two, three, four, five times. So it's created, according to the script, five interfaces on the router. So to verify that, let's look at Postman. So in Postman, click Send to get to refreshed the information. There's our physical interfaces, here are our loopback interfaces. I've created Loopback1230, 1231, 1232, 1233, 1234. Five loopback addresses were created on the router. Now, we could do that here as well by typing Python getinterfaces, and we'll be able to see the interfaces on the router. As you can see, there is 1234. Scrolling up, 1233, 1232, 1231, and 1230. Okay, but let's try and create them again. And let's see the error codes that we get back. Notice we're getting error codes 409. Object already exists. So we can't create those interfaces because they're already created. So let's delete those interfaces using a script. So this is very similar to the previous delete script, we're importing requests. We've got our username and password, payload is blank, headers are set to this, int is five. We've got a loop, for x in range, zero to four. We are going to delete this interface. Notice at the end here, I've got intname, per our previous script, but here it's loop 123, plus the string of x. We're getting our response, we're sending that to the router using delete and then we're printing the status code, and the response text. So I'll copy that script. Clear the screen on the Ubuntu PC, and let's create a script called deletelotsofinterfaces.py and I'll paste that in. Save the script. Python3 deletelotsofinterfaces. Before I run that, in Postman once again, if I click Send, I can see the loopback interfaces here. So, my five loopback interfaces exist. Let's delete the interfaces. Notice status code is 204. I did a print telling us what's happening, interfaces are deleted, now it's complaining about the configuration database being locked. So let's do a send again, it might not have deleted those last few interfaces. I can see here these two interfaces have not been deleted. So let's run that again. So 404 on these first interfaces, which is correct, because they were already deleted. So the first three are already deleted. Notice we are now getting 204 messages telling us that those last two interfaces are deleted. So that was a nice example of seeing the different error codes and knowing what to do because of those error codes. So just going back here again, we're told that the configuration database is locked. So I was probably going too quick for it to sink the information. But when I ran the script again, we could see 404 on the first three interfaces because they were previously deleted. And here we've got 204 messages telling us that those interfaces were deleted. So back in Postman, click Send. I can see that those interfaces have been removed. Okay, but let's create a whole bunch of interfaces. So I've got createlotsofinterfaces.py. So I'm going to edit that script. And let's make this 50 rather than five. So we'll create a whole bunch of interfaces on the router. So Python3, createlotsofinterfaces.py. I's creating the first loopback, creating the second loopback, third loopback, and that will just continue. In Postman, if I click Send, I can see, it's at that interface at the moment. Click Send again. We're at this interface. Click Send again. We're at this interface. So we can see the script busy creating the loopbacks on the router. And in Postman, I can verify that by doing a get. And notice we're at interface 12319. So it's created a loopback with this IP address. Click Send again. We're at Loopback12321. So 1.2.3.21, as the IP address on the router. And that'll just continue, I'll speed this up now, because all it's gonna do is keep looping and creating those loopback interfaces. So this is basically connecting to the router, creating a loopback, then it loops 'round, creates another loopback, loops 'round, creates another loopback and just continues. Okay, so we're at 44 already. So click Send. In Postman, we can see all the way at the bottom here, it's showing 46. Click Send again. We're at 49. So, as you can see there, the script has completed. It's created 50 interfaces. So go to the top here, started at 1.2.3.0, and went all the way down to 1.2.3.49. And in Postman, we can see that those interfaces have been created. So that's an example of how to use a loop and a Python script to create a whole bunch of interfaces. Now, it's a lot of work initially to set this up, but all I had to do was change this from five to 50 to get it to create a whole bunch of interfaces. And I could do the same with the deletion. I can just change five to 50 to delete all those interfaces. So back in Python, let's edit the deletelotsofinterfaces script. And just to prove a point, let's just make this 25 for the moment, so we'll only delete the first 25 interfaces. So Python3, deletelotsofinterfaces.py. So you can see it's deleting 1230, deleting 1231, and we're getting back the status code, which is correct, telling us that that interface has been deleted. In Postman, previously we had this Loopback1230. If I click Send again now, you'll notice that that interface has gone. The first interface after gigabit three is 1239. Now it's still busy deleting interfaces. So if I click Send again, this is happening in real time. First interface after gigabit three is Loopback1239. Now, it's interesting that it's still showing that interface, 1239, and 12310. Scrolling down, we see 12311, and then suddenly it jumps to Loopback12325. Going back to our Python script. Did we get any errors? Yes, we did. Notice we were going so quickly that it couldn't keep up. So 1239 wasn't deleted, neither was 12310, neither was 12311. We can see the error code 409. And then we can see the error response text, but it did delete up to 12324. So if I click Send again, we should have our physical interfaces, which we've got over there, and then we've got this loopback, this loopback 11, and then we've got 25, and the remaining interfaces. But what I'll do now is just delete them all. So let's set this to 50. And let's see what happens. That should now go through our script and try and delete them all. Ones that have already been deleted, notice, get a status code of 404. Now I'm emphasizing the status codes, you must know these status codes, so make sure that you learn the status codes for the ENCOR exam. So as an example, 404 is different to 204. 204 meant it did what it was supposed to do. 404 means that it's an error, that resource doesn't exist. So, again, for the exam, make sure that you learn your status codes. In the real world, you'll just learn this because you'll see them so often, or can refer to a reference guide. 404 is one, once again, that most of us probably know. But you can see it's busy deleting all the interfaces on the router. Let's click Send. With our get, the last physical interface is gigabit three, first loopback is 12342. Click Send again. Now it's at 12349. Click Send again. All the loopback interfaces are gone. We can prove that once again by running getinterfaces from the router. And, as you can see there, we only see our physical interfaces. Okay, so that was quite a long video, but hopefully at this point you're happy with these HTTP verbs: Get, post, delete. I've shown you how to do that using Postman, a graphical user interface. I've also shown you how to do that using a Python script or multiple Python scripts. So I've shown you how to delete one interface, or a whole bunch of interfaces, how to create one interface or a whole bunch of interfaces, and how to do a get to see the information on a Cisco XR router. So in this example, once again, we were using a Cisco, always on Sandbox, it's only one router, but I'll show you in other videos how to create stuff on multiple routers using CLI or using the REST API, etcetera. So hopefully, once again, you've enjoyed this video. If you have, please like it. Please consider subscribing to my YouTube channel, and clicking on the bell to get notifications. I'm David Bombal, wanna wish you all the very best. (upbeat music) Yeah, yeah, yeah, let's go",
    "transcript_keywords": [
        "interfaces",
        "click Send",
        "send",
        "interface",
        "script",
        "loopback",
        "Python script",
        "Python",
        "router",
        "create",
        "Postman",
        "click",
        "loopback interfaces",
        "delete",
        "interface Python script",
        "deleted",
        "codes",
        "status",
        "Notice",
        "bunch"
    ],
    "transcript_entity_values": [
        "first",
        "1233",
        "409",
        "1.2.3.0",
        "three",
        "123",
        "12310",
        "46",
        "1232",
        "12349",
        "25",
        "25 for the moment",
        "third",
        "49",
        "Cisco",
        "five",
        "1230",
        "four",
        "two",
        "1239",
        "Loopback12321",
        "12311",
        "iOS XE",
        "44",
        "1231",
        "204",
        "only one",
        "Second",
        "zero",
        "second",
        "12319",
        "YouTube",
        "the REST API",
        "12324",
        "IP",
        "1234",
        "201",
        "Python",
        "five to 50",
        "one",
        "ENCOR",
        "Postman",
        "XR",
        "11",
        ".py",
        "Sandbox",
        "404",
        "12311",
        "1230",
        "100",
        "Click Send",
        "fifth",
        "1231",
        "First",
        "Five",
        "CLI",
        "fourth",
        "David Bombal",
        "12342",
        "50"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "DATE",
        "DATE",
        "DATE",
        "CARDINAL",
        "TIME",
        "ORDINAL",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "GPE",
        "DATE",
        "PRODUCT",
        "DATE",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "ORDINAL",
        "DATE",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "CARDINAL",
        "NORP",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "PERSON",
        "ORDINAL",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "PERSON",
        "DATE",
        "CARDINAL"
    ]
}