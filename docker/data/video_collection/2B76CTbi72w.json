{
    "id": "2B76CTbi72w",
    "title": "Best Hacking Python Book?",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-07-11T14:00:02Z",
    "video_url": "https://www.youtube.com/watch?v=2B76CTbi72w",
    "category": "Science & Technology",
    "tags": [
        "python",
        "black hat python",
        "cyber security",
        "kali linux",
        "ethical hacking",
        "python programming",
        "penetration testing",
        "ethical hacker",
        "python for hacking",
        "python full course",
        "black hat",
        "book review",
        "how to hack",
        "cyber security course",
        "hacking books",
        "computer hacking",
        "learn black hat python",
        "python tutorial",
        "cyber security career",
        "cyber security analyst",
        "python hacker",
        "python hacking course",
        "python hacking tools",
        "scapy",
        "hack python code",
        "hack python book",
        "python hack wifi"
    ],
    "views": 309705,
    "likes": 7520,
    "comments_count": 295,
    "description": "The difference between script kiddies and professionals is the difference between merely using other people's tools and writing your own. Charle Miller, from the foreword (1st edition).  This is a great book if you want to learn Python for hacking and penetration testing. Sometimes the tools you want to use are not available on target systems and the only option is to use Python - so learn the tools and techniques you can use with Python in a pentest or ethical hacking situations.  // MENU //  00:00 - Coming up 00:26 - Intro 00:32 - Black Hat Python has been updated! 02:52 - How Black Hat Python started 07:00 - Why Python? 08:26 - Justin Seitz's background 10:33 - \"Make it work.\" 11:56 - Tim Arnold's background 15:21 - Simple to read for everyone 19:55 - Editor vs Integrated Development Environment (IDE) 21:06 - Learn to debug! 22:29 - Modules updated to Python 3 24:28 - The Networking chapter 27:09 - Favourite chapters 28:17 - Inspirations for the chapters 31:40 - You always learn 33:13 - Choosing Developer or Hacker  36:12 - Endless accessibility to learning material 37:08 - Is it necessary to know programming? 41:23 - Ruby knowledge for Metasploit 42:27 - Will Golang replace Python? 45:27 - Recommended coding languages 46:40 - The story of Hunchly 54:15 - From Pentester to OSINT 56:44 - Justin Seitz's stories 59:18 - How Hunchly works 01:00:52 - Will A.I. replace humans? 01:02:16 - Dark Web Mailing List 01:05:38 - Tim Arnold's story 01:09:02 - Advice for beginners 01:17:53 - Conclusion  // Buy the books // Black Hat Python:  Grey Hat Python:   // Justin's SOCIAL // Twitter:  E-mail: justin.seitz (at) hunch.ly Website:   // Tim's SOCIAL // E-mail: jtim.arnold(at)gmail.com  // David's SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  Apple Podcast:   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  python black hat python no starch no starch press osint hack hacking pentesting ethical hacking penetration testing black hat python white hat python grey hat python gray hat python cyber security kali linux ethical hacking python programming penetration testing ethical hacker python for hacking python full course black hat book review how to hack cyber security course hacking books computer hacking learn black hat python python tutorial cyber security career cyber security analyst python hacker python hacking course python hacking tools scapy hack python code hack python book python hack wifi  Disclaimer: This video is for educational purposes only.   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #python #hacking #kalilinux",
    "description_links": [
        "https://amzn.to/3yQIdTD",
        "https://amzn.to/3NQcA0H",
        "https://twitter.com/jms_dot_py",
        "https://www.hunch.ly/",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://davidbombal.wiki/applepodcast",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "- You know, it's all the same activity, I guess it's all in the intent behind it, right? Cause yeah, we were trying to steal stuff, you know, generally speaking, but we were under contract to do it. So yeah, it's definitely not encouraging people to go commit crime. It's encouraging people to behave badly under contract. (laughs) - No, I would like to say, I think it also shows you what the bad bad guys are trying to do with their techniques and you can see what kind of code that they write. (upbeat music) - Everyone, it's David Bombal, back with two very special guests, Justin and Tim, welcome. - Thank you. It's good to be here. - If you dunno who they are, they're the authors of this book, fantastic book, \"Black Hat Python.\" I've got the original, well, the first edition of this book, should I say? And at the back here, it says, \"The difference between script kiddies and professionals is the difference between merely using other people's tools and writing your own.\" So I like that. There is a second edition of this book. So, you know, either of you just answer the questions as you feel. What's the difference between the first edition and the second edition? - What this book does is it takes the first edition with the same ideas Justin had, and Justin wrote the first edition himself, but without me. And it's, it's his hacking ideas. Every chapter is a different hacking idea. And what I did was looked at it through a teacher's eyes and tried to add code and reorganize code and bring it up to current standards with Python 3. That's when Justin did the original, it was Python 2, and that's what everybody was using. So now everybody's using Python 3 basically, and that was a breaking change for Python. And so there was a little work to upgrade it to, to port it to Python 3. And also as I was using it as something to teach from locally, just to local security experts, I found what my students were getting bogged down with or, you know, they needed a little help. And so I added some more explanation to the book and also at the time, you know how security changes so fast. And the first edition, I think was 2015 and Windows XP was what everybody was using. And so now most people are using Windows 10 or 11. And this is only just about the Windows portion. There's a few chapters that are Windows-specific. And so I upgraded those to work with Windows 10 and 64 bit machines, where in the past it was for XP and 32 bit. So it's up to date on the current, right now, computers and software operating system that people are using and also updates to Python 3 in the new packages. But it stays with Justin's original ideas on each chapter. - So let's go back, Justin, tell us how this book came about. You know, it's a really, really popular book. A lot of people love it. So, you know, I wanna ask you about the name and stuff like that, but, you know, give us a bit of a story. How did this come about? - Yeah, I guess it kind of came on the heels of my first book, which was \"Gray Hat Python.\" I mean, we really didn't have a whole lot of creative juices flowing when we said, \"Well, let's just make it black hat. We'll run outta hat colors pretty soon.\" - Yeah. I was gonna ask you that, what's the difference? We'll have to get to that, but go on. - Yeah, and I guess for \"Black Hat Python,\" it kind of tied in more to the consulting and penetration test work that I was doing at the time. We were constantly faced with having to kind of write tools on the fly or, you know, we'd get so far into a network and get stuck because you know, all the tools we had didn't, you know, give us the ability to pivot somewhere or to leverage a particular vulnerability. So a lot of the time we were kind of writing tools as we went. And so I thought, you know, this might be a great time to capture some of these ideas, both things that I'd kind of done at my day job and kind of some of the things that, you know, you put in the research pages of your notebook, where you're like, oh, you know, it'd be really cool to build something that does this or does that. So yeah, it was kind of a different, it came from a different place definitely than my first book. - Yeah, so I mean, your first book is like malware, is that right? And your second book is like penetration testing. Is that kind of a summary, or could you give us the difference? - Yeah, so my first book was more heavily geared towards low-level reverse engineering, building tools from the ground up, so you know, like debuggers and, you know, how to automate bug hunting and how to help with exploit writing. So definitely more of a niche crowd that would be interested in kind of digging into the guts or, you know, operating system, internal stuff like that. So that's really where I was spending a lot of my time, you know, in 2007. Eight and nine was a lot more reverse engineering, exploit writing kind of low level work, writing, fuzzers, that type of thing. And then, you know, over time spent more and more time doing kind of traditional penetration testing work. - So the black hat isn't like trying to break into companies and steal, it's more for penetration testing. So ethical-hacking-type stuff, is that right? - Yeah. I mean, you know, it's all the same activity. I guess it's all in the intent behind it, right? Cause yeah, we were trying to steal stuff, you know, generally speaking, but we were under contract to do it. So yeah, it's definitely not encouraging people to go commit crime. It's encouraging people to behave badly under contract. (laughs) - Yeah, I mean it's. Sorry, go on, Tim. - No, I would like to say, I think it also shows you what the bad guys are trying to do with their techniques, and you can see what kind of code that they write. - You mean, I always get a lot of flack on YouTube and social media, but like why? And I mean, I think this has been young forever, is like, why are you teaching people to break in? But I mean, that's what a penetration tester or ethical hack is paid to do anyway. And if you dunno-- - Know, your enemy. - Yeah, exactly. If you dunno how to do it, how you're gonna stop it? So the book came out of the fact that there were tools, but you were limited by those tools. And hence you would write your own tools to do more than like the tool said that you had, is that right? - Yeah, exactly. And, you know, just, I worked for this great company called Immunity that was full of some of the best hackers around. And so it was, yeah, just trying to pull together, you know, as many good ideas as I had at the time that I thought would be genuinely useful for either a penetration tester or maybe somebody who's working at a startup where they don't even have a budget for pen tests, but they have somebody who's got security interest and they're able to kind of write some tools and do some tests themselves. But yeah, definitely, really, It was just trying to pull in some of these neat ideas that we had while we were doing this work on the fly. And we had a product called CANVAS that all the modules were written in Python. So there's a lot of the ability for me to kind of translate back and forth, thinking about, you know, stuff we had done in CANVAS and, you know, stuff that I was doing a standalone script sometimes. So yeah, really fortunate to be at such a cool company at the time too. - I was gonna ask you why Python, why not something else? Is that the original reason why you chose Python or was it more than that? - I fell in love with Python. One of my colleagues, Dave, had, you know, witnessed me doing everything in PHP for a number of years and including, yeah, stuff that you shouldn't use PHP for really. (David laughs) And he had kind of threw it at me and just said, \"Have you used Python yet? Like you should really like ditch PHP, start learning Python,\" particularly for some of the sysadmin tasks and stuff that I was doing. And I fell in love with it. I'm not a strong developer. I'm not someone who grasps things like object oriented programming, a lot of fundamental things that you would see in C and C++. What I loved about Python was that it was readable yet, like with very low kind of barrier to entry. You could very quickly become quite good at it. And in the security field, it kind of became this language that everybody was using, you know, to write libraries or, you know, binary parsers or whatever it might be. It's just at the time, everybody was writing Python. So yeah, it was not like, you know, for some philosophical reason or even some technical reason. I just fell in love with the language because I'm not a great developer and it was quite easy for me to do a lot of more complicated things inside of Python than anything else. - So your background's not programming, or what is your background? If you can give us like a bit of a history, I mean, you've explained why you got to Python but, and Tim, I want to come to you as well because I wanna ask you about a quote that kind of ties into this, but what's what's your background, Justin? - Well, I actually, yeah, I went to university unsuccessfully, originally to get into medicine. And I did get a certificate in computer programming and I've coded shortly after I could read, since I was really little. But yeah, I had a pretty interesting career path, I guess, from web development to sysadmin work, quality assurance to, you know, reverse engineering and pen testing. So I think the fact that I kind of showed up when it was time to actually transition to a full-time security job, doing this hacking work, I understood how Linux worked, I understood how Windows worked, I understood how networking worked. I could operate a web server, I could, you know, write code for a variety of different platforms and different stuff. So my knowledge was kind of an inch deep and a mile wide. So I was never particularly strong in any one of those given areas, but I just knew enough to kind of stitch together concepts from, you know, which became really useful as a hacker, right. Because that's a lot of it, is being able to stitch together concepts on the fly or understand why you might be running into issues in the middle of a penetration test or whatever it might be. And too often, you know, I see people maybe focus too much on how to run tools like Nmap or something instead of spending the time to actually learn operating system fundamentals or how a network actually works, right? So yeah, I came from this really bizarre background and had a couple of tech breaks in the middle of my career to do steel working and all kinds of other stuff along the way. - Yeah. It's amazing. I thought, you know, just by watching Mr. Robot, I'd become a hacker. But you're telling me otherwise, yeah? - (laughs) Yeah. I never ever turned on a set of sprinklers and I can't ride a skateboard either. So I think there's definitely maybe a few things out there, although I do like black hoodies. So, you know, maybe I got that going for me. - (laughs) That's brilliant. So Tim, I was doing some research. I think this is you that said this, \"When looking at code, make it work, make it understandable, make it fast,\" is that right in that order? - For me, that's true. And with Python, that's not that hard, make it work. You know, that means you might just draw out on a paper about what it is you're trying to do. And I think a few minutes putting something on paper is better than just starting to type code. But then once you know what you're trying to accomplish, then you can start writing the code to get it to do what you want. And then nearly every time, if it's more than just a little dirty script that you're just doing one of. So you can look at that and then reorganize it, maybe rename your variables so it says more of what it's trying to do, and another person, or you six months from now, can look at that code and understand what it's trying to say, what it's trying to do. And very seldom if I needed to make something faster, but that would be the last thing I would worry about, is how fast things go, especially in a hacking scenario because most of the time I'm not concerned about millisecond speed, so. But, yeah. That's kind of my mantra. Is, and I guess Donald Knuth said, \"Premature optimization is the root of all evils.\" So we don't wanna try to make it fast to begin with, let's just make it work. - So your background is coding and programming, is that right? Give us a bit of your history and how you got involved in the second edition. - Yeah, well, I guess, you know, everybody that's alive probably has a twisted path. I started out in science, as in agriculture, and went into statistics. And in statistics, I kind of just assumed you would know how to use a computer and you just kind of had to figure it out on your own. So I'm a little bit older than Justin, I didn't get to start when I was a kid. I started in college and doing four trans 77 stuff, so. - [David] Wow. - Yeah, it's been a while, but I really enjoyed working with computer programming and I was a statistician also, but I went more and more to programming until that's actually what I ended up doing, working at a corporation but I was a professional Python developer, and also did some publishing stuff with a typesetting language called LaTeX and some XML stuff, but mainly it has been Python. Yeah, you know LaTeX. - Well, I can't say I know it well, but I know some people love it. - Yeah. It's kind of an addicting language. It's very strange, but you know, it's another language and it's nice to broaden your horizons if you don't wanna just learn one language. But I think Python is such a great one to start with because it's pretty easy to understand. You can almost understand what a program's doing just on the first read. - Yeah. - And then there are all these wonderful libraries and that's covered in the book as well, some of the wonderful libraries you have to make your life a lot easier. - So, I mean, would you recommend, I was gonna say LaTeX as the first language, no, I'm joking. Would you like recommend Python as your first language? - Definitely. I think that would be a great one to start with. Like Justin, I started out, yeah, not with PHP, but with Pearl and I was doing all kinds-- - I remember Pearl. And I've worked with Pearl, yeah. - Oh my. - We all remember Pearl. - Yeah. - Yeah. - And so, you know, I thought, \"Well, Pearl is pretty cool. I can do whatever I want to.\" And then I saw, oh, no, look at Python. It makes it so much simpler to be able to get done what you want to do. And I just never really looked back and rewrote some of my Pearl scripts even as Python to help learn the language. But I think, and it is taught in universities as a beginning language too. - So how did you get involved? You were teaching at a college, is that right? Or university, is that correct? And then you were teaching hacking, is that right? Sorry, go. - No, I was teaching statistics. And then hacking is more like a side thing for me. I consider myself more of a developer programmer than a hacker. I mean, Justin's the one that brings the hacking, and that's why I kept his ideas of the first edition, because he brings all that hacking knowledge and ideas, the things that I wouldn't have known. And so I brought more of the programming discipline to it. And-- - It's a great combination though, isn't it? - I think it is. I really do. 'Cause Justin's ideas would push me. I learned a lot doing the book and most of it was really, really fun too, just to learn, oh, I know this part about programming but I did know it could be used to do this. Say, take a screenshot behind the scenes while somebody else is using the computer key loggers and things like that. It's just so much fun to make a little tool that can do so much. - But this book, is it recommended for beginners or do you need some prerequisite knowledge to go and get this book? 'Cause I think a lot of people watching this are gonna wanna get this book. It's highly recommended in the hacking community. So, you know, what kind of knowledge prerequisites would you need? - Justin, what do you think? - You know, part of me says, really, not a lot of prerequisite knowledge. I think that Tim in particular has done a great job of like kind of bringing you in, getting you set up and you can learn Python as you go. That's not gonna be for everyone so, you know, I think if you get stuck after a chapter or two or you feel like, you know, okay, I don't quite understand some of the concepts, any kind of introductory course in Python will get you there. You do not need to learn all of the ins and outs of Python. You don't need to learn, you know, how threading works or distributed queues or any crazy stuff that maybe a cloud-based developer would need to learn or someone designing a large enterprise system or a banking FinTech system. You just need the basics, how does a list work, how does a dictionary work? Then the rest of it really is just kind of very specific to the task at hand. So by the end of it, you're gonna learn how to, you know, talk to the internet using Python. You're gonna learn how to simulate web browsing, all kinds of stuff. And you'll write viruses, malware, whatever you want to call it too. So yeah, I don't think that there's a huge barrier to entry to get going with this particular book. - You know, I've seen in different spheres. Like there was this whole push in recent years in networks to use Python for network automation. And I always like to tell the story of me taking a university course. And the problem with the university course is they were trying to teach me math with Python and it meant nothing to me. And what I love about a book like this or any book where you're not trying to learn Python per se, you're trying to do something and you learn Python along the way. So it seems like that's kind of the same thing here. If I wanna hack, that's what I wanna do, Python is gonna help me tremendously. And I'm gonna learn Python if I don't know it too well anyway as I go through it, 'cause, I'm talking too much and I don't want you guys to tell me, but I've seen the code examples. You know, you kind of like mention what each line is doing. You explain what the code is doing, which is great. - I started out with the first edition of \"Black Hat Python\" teaching. And so I asked the students before they signed up to make sure that they knew the basics of Python. I mean, like Justin said, what a list is and how to write a function, you know, how to execute a program. Not a lot, but enough where we weren't starting with, what is a variable or something like that. So certainly, you don't need to be an intermediate programmer. You can still be a beginner. And I like what you said because that's the way I think we all learn, is I don't want to learn this language, I wanna learn how to do something with this language. - Exactly. Yeah. - And yeah. And I think for me, that's the way I've always learned something new, is by, I need a project to do that's real. And then I'll learn the foundation as I go. And I believe, definitely you'll learn a lot in \"Black Hat Python\" by looking at these different chapters. I would say if you're just, you know, pretty new to programming, chapter five, which is about web scraping is a really good one to start with. Any chapter would be fine but I think that is a gentle introduction to the language and to what we're trying to do. And it's pretty cool because you get some results you can look at quickly and that's always a plus because it gives you that feeling that, oh, I am doing it, I can do it. And so you build on that success. - I like what you did. I mean, right in the beginning you're like setting up col E in a VM or just showing, you know, use col E. It makes a lot simpler, a lot of the tools are already built into that. You basically teaching someone from zero. Sorry, go on. - Yeah, no, exactly. I think Justin, so it is in the first edition as well. And that kind of gets everybody to the same level quickly. And so by using these VMs, there there's so much, we don't have to say, \"Well, you have to install this. You have to install that.\" So it gets everybody up to speed pretty quickly. And then some things they choose on their own, whether they're gonna use an IDE or just a basic text editor to write their programs with it, it doesn't matter, we cover a little bit of that. - Let's start a war. Which is the best IDE? (laughs) - Yeah, yeah. Go for it, Justin. (laughs) - Oh no. - (laughs) I had to ask it just to like, get the flaming war going. I mean, let's put it this way, which is your favorite or which one would you recommend for someone who's new? I mean, it's so personal, it's like-- - It really is - let's argue about Vim versus Nano. - I remember the wars about Emacs and vi, but my favorite is VS Code. And, go ahead, Justin. - I've been using Wing IDE for 15, 16 years now. So I still use Wing, although I do see a lot more people using VS Code. I think they actually took Python seriously at some point in the last five years, whereas before it was kind of an afterthought. And so, yeah, I personally won't be switching from Wing. I'll be riding that Wing pony into the sunset for many years to come at home. - It's like tomato, tomato. It's like a router, router. It's like, whatever, you know, use what works for yourself. - Exactly. And they all do the same jobs, the debuggers and stuff like that. It's just a matter of getting to know your tools. - Yeah. And that's the biggest thing I think that I really like to drill into people too, or students of mine, is that don't worry about writing code, worry about debugging. Debugging is by far the most critical skill that you have both as a developer on the security side of things but naturally also if you're doing malware analysis or you're troubleshooting exploit code or whatever it is, any debugging skill is gonna be valuable for a security person long term. So I really like kind of hammer that into people, like, don't worry about being proficient at writing code, be extremely proficient at debugging it, tracking down errors, setting break points, single stepping code, all of that is stuff that translates whether you are looking at Python or whether you're stepping through, you know, assembly or ARM, whatever it is that you're looking at, it's all the same stuff at some level and really important to be able to do it. - Trying to find your mistakes is the hardest part often. - It is. - Yeah, absolutely. Yeah. - So when I was going through the, sorry, go on. - I was just gonna say both those tools, VS Code and Wing both have excellent debuggers so, yeah. It's definitely worth learning the tools on that end. - Yeah, I mean, did you find the one that works well for you? Is that kind of the moral of the story here? - [Justin] Yeah. - [Tim] Yeah. - And use Python 3, because the books now are all Python 3, is that correct? - It is. Yeah. I wouldn't advise anybody to start a new project with Python 2, but it's so helpful to understand Python 2 because there's so much code out there already, hacking code, or scripts that you'll find. And it's just nice to be able to look at those and understand what they're trying to do. - So in the book, did all the modules, all the modules that you were using are updated, is that correct? It's all Python 3 or did you have to like go back? 'Cause that's always been the problem. There's so much code out there that's Python 2. Did you find that all the stuff's updated and it didn't make your life too difficult or was it a bit of a nightmare? - No. Well, I wouldn't say a nightmare, but all of it has been updated except for the part that uses Gython, and that's the Java engine for Python and that is not, at the time I was writing, it wasn't upgraded to Python 3 and I don't think it is now, but we use that. I think the Python code really would probably work with 2 or 3, the way it is in the book. But that's the only thing that we had to worry about. Everything else has been upgraded. The last chapter was a huge update in-- - Volatility? - Volatility. Sorry. That's the last chapter of the book and unlike Justin, I did that as the last chapter that I wrote because I was waiting for them to upgrade their library because they were doing this huge update, rewriting it from, I think, just from scratch and they had had a huge reorganization of code. So when I was finishing the book, they had finished their rewrite. And so I was able to use what was current. So that was the one that was down to the wire, but we got it done in time for, you know, a second edition. - [David] That's great-- - But all the other libraries were fine. All the other libraries that we use have either been upgraded or supplanted since the first edition. So everything is, yeah, right up to the top. They were updated right up to the moment that we were publishing. - My favorite, I must say, just 'cause of my background, I suppose, is the networking portion, which you do right in the beginning. But I think that's just me being biased for my background and using Scapy. I credit some YouTube videos where I'm like inserting rights into BGP using Scapy and it was such a nightmare because Scapy seemed to, either the documentation or stuff wasn't updated correctly for Python 3. So I think what's great about what you've done here apart from many things, or in addition to many things, should I say, is you've given code that people could just download and they can download that directly from publishers, is that right? - Exactly. At nostarch.com, they can download the code there and it should work just as it is in the book. - So tell. Sorry, go on. - Yeah, I was gonna say about the networking, the first real coding chapter where you create a TCP server and different things on that level. And that seems to be a very popular chapter in making a clone of the netcat tool. And so whether you use netcat in your work after you read the book or not, you'll understand how netcat works because, you know, you've just created something that does the same thing and it might not be as flexible as netcat, but you can see the underpinnings of what that tool is trying to do. Scapy, I liked a lot. And that was a lot of new learning for me. I didn't really know Scapy and that's an impressive library. - Yeah, I mean, how did it feel for you coming from like the developer side, now getting into the networking, sort of the lower levels? Was it quite a learning experience or-- - It definitely was. Yeah. And I'd say on every chapter I learned something new. But especially with the networking, because before I was more or less a user of networking tools and I didn't understand how they worked, but when I went through what Justin had did, and obviously when you're teaching it to your students, you better be ready for questions. I did learn a lot, and especially that first real coding chapter when you're making servers and clients and that netcat replacement, and a proxy server as well, there's a ton of stuff in that chapter and it's really, really interesting. And the other one I liked a lot was when we made our structures to hold an IP packet or an ICMP packet, because you're defining down to the bites of what's going through the net. And so that was really fun for me, to see all that stuff that's going on in the network, how it's structured and how we can de-structure it in our programs and then get information from it. - So apart from that, are there any other parts that you like really want to talk about where you've had like a lot of great feedback or that you just really enjoyed? Like, I'm trying to get some ideas of like the cool projects we've spoken of like netcat, Scapy. Any other examples? Like web web scraping is great. Any other examples? I mean, I can go through the chapter list but that's a bit boring. Tell us about some of like the cool projects that you've got in the book. - I think, and I'm pretty sure Justin will agree, the one on the GitHub trojan is really, really cool and what's contained in that chapter just has like some toy things you could put on a, let's say you've compromised a machine and you're putting this GitHub trojan, putting a trojan on the machine, you can configure it to do different jobs and put it in your GitHub repository, what the results of those jobs are. And so that is really cool, but some of the other chapters that come later could be also used with the Trojan, like the screenshotter or the keylogger. So you could build more abilities into that GitHub trojan, just by tagging on to the succeeding chapters. - Justin, what gave you the ideas for the chapters? Is this based on like your experience or is this just stuff you were seeing? Because I mean, you're covering a whole bunch of stuff. Did you just try and cover as much as you could or is this like based on your experience? - I think it was kind of a blend between things I had encountered on the job. So for example, I had been on penetration tests where, you know, firing up netcat would alarm everything, but they left you a Python interpreter, right, which, major security failure, so you you'd have to write your own. Right? But also I think being able to, for me, it was also, there was lots of stuff I had to teach myself as I wrote the book. And that was kind of by design so that I could mitigate and kind of manage some of the burnout you feel when you're writing. The GitHub trojan was kind of this blend of both ideas and kind of, I thought, you know, this would be fun. But it wasn't something I had written prior to the book. It was something I had to, you know, learn and write as I went at the same time. So yeah, I think it's kind of a blend between the two. There certainly things in there, even the volatility stuff, same kind of thing where I was like, this is a terrible way to use volatility and I wanna show people how to do it because it's, you know, generally not used in the way that I described it. And so, yeah, it was partially me kind of having the idea and having a great publisher who was totally willing to say, \"Yeah, you at some level don't know what you're doing with this chapter, but we believe that you'll figure it out.\" And that's one of the great features of having No Starch, is that their team understands how good security and good programming books are written. It's not all gonna be inside of the chapter summary that you submit in your proposal. They know that there's a lot of freewheeling, that a good writer wants to be able to do and kind of do their own thing, right? So, yeah, it's kind of a blend. - Yeah. I was just gonna say about that particular chapter, Justin, you pushed me. (laughs) That chapter had some really advanced stuff in it. To be able to load a Python library by kind of hacking into the Python module, what loads those modules, and you could actually load a module through to GitHub. So you could write your own module, put it out on GitHub and then have your program load it. And that took me a while to understand what you were doing. And then when I did, it was like, oh gosh, this is really interesting. And I Googled around and tried to find other people doing it. I did find a little bit, but not very much. And so that was really creative. So yeah, that was a really good chapter and of course, if you were learning as you were writing, I certainly was too. And the last chapter on volatility, you're right. Using a defender's tool as an offensive tool is pretty creative idea. - Oh, thanks. Yeah. I mean, that's the thing, right? I think that it's always fun to, and I guess I've always been known as a bit of a contrarian. So I always loved being able to abuse tools used for defense and kind of giggle to myself as we use them on the offensive side, kind of on the pointy tip of the spear, right? That was always one of my favorite things to do. - What I love hearing is that both of you wrote the book, contributed different parts to the book, but you both learned as you wrote it. You know, you think the people who write books know everything. I mean, you guys know everything. - You know, you think your teacher in front of you just knows everything, oh, this is the way this works. But it's like most of the time, the teacher or the writer has to struggle to learn and be able to give that to a student or a reader in a way they can understand it. And yeah, I learned on every single chapter and there were some that pushed me more than others, 'cause it just depends on what you're stronger in, you know? So volatility, that was really interesting. And then writing a Windows, what do you call it? Malware, I guess, because it's to be able to not put any code on the disc and have Windows execute it and then you take control of the machine. That was amazing to me. And so yeah, I learned from Justin all the time. - What I love seeing, Tim, though, is, I mean, you come from a programming background, but you're getting excited by hacking. - No, definitely. Yeah, it's something, I just get that charge. I think we've talked about it before, is that dopamine hit, you know, when you are able to take over a machine. And of course it's not that I wish anybody harm, but it's just fun to be able to take over a machine when it wasn't designed to do that. So I think Justin and I share that we have a little bit of a problem with authority and it's just fun (chuckles) to do the wrong thing sometime. But yeah, this book is meant not to do harm, but to teach people how to do good. - So if you could go back, let's say you were 18, would you become a developer? Would you go straight into hacking? - Oh, if I knew about hacking at that time, I would've definitely gone into it, but it took me so many years to find out about hacking, which is kinda weird if I was a programmer. But now I just thought hacking was like, ah, that's that magic stuff those people do, I don't even know how their minds work. But then to be able to see, oh, this is how it worked. I can do this too. That's such a great feeling. So yeah, I might have gone into hacking, but it really helps to have some programming too. Like Justin was saying just now about his beginnings, a generalist. And I think that's really helpful for a hacker to be a generalist and be able to know, oh, there's this tool, volatility, that the good guys use. Let's see if we can use it for a bad purpose. - Yeah, I mean, my next question, and sorry, Justin, did you wanna say something on that as well? - Yeah, I don't know. I guess in hindsight I think the path I took probably lent itself well to, you know, being somewhat decent at hacking. I probably, if I would've known that there was a career in it, I probably would've tried to angle towards it, but I probably would've then sacrificed all the programming, networking, sysadmin experience I would've got, right? Because I didn't discover it till, you know, about 10 years into my career, roughly somewhere in there. But yeah, I did make a point of, once I was doing this as a job, to go around in my local city and tell students in high schools and elementary and middle schools and university, go tell them like there's a career in this and it's quite fun, and you should still learn all this other stuff. But you know, I wasn't told this when I grew up in my tiny little village of 500 people, you know, hacking was a career. That wasn't a thing. So I do try to make sure that the next generation of kids, they know that this is something you can go pursue right out of, you can be pursuing it as a bounty hunter while you're in high school. Right? And like, these are things that you can get started on now actually. You don't have to wait and you don't need a four-year degree. I was terrible at math. I was diagnosed with ADHD as an adult, relatively recently. And it made a lot of sense why there was certain parts of hacking that really latched onto my ADHD brain and why I struggled with traditional school and other things because I didn't realize that I had this going on. So I think that at some level, don't worry about what you think needs to be done. Just start doing, right? Don't worry if you're not strong in math. I'm terrible at math, barely narrowly made it out of high school with my math grades, and still bad at it, but you don't really need to be proficient at it. You know, there's a lot of misconceptions around stuff as it relates to hacking or computer science in general, right? You can approach this field from a bunch of different areas and be really good at it. - I like that. I mean, I think the opportunities today are great in that, like you said, you could go do bug bounty. You can do penetration testing. You don't have to, like you said, get a degree. You can just start. - Yeah. - There's books like your book. There are resources like TryHackMe, HackTheBox, stuff like that. - Yeah. CTFs too, right? - Yeah, exactly. - Yeah. TryHackMe is great. And just, you know, to get a Kali VM and start learning about the tools that are available there and doing toy examples, and you'll start to, you know, get some traction and be able to move forward with it. There's just so much educational material out there. That's really all you need, except you need a lot of motivation to make yourself do it. But if you're having fun and able to actually do something that makes you happy, you know, then that can feed your motivation. - But another controversial question, 'cause I've gotta ask these. Some people say you can't be a good hacker or a hacker unless you know how to code or program in Python or something. And some people say you don't need to. I quoted right, like in, there's this quote that you got at the back, \"The difference between script kiddies and professionals is that you can create your own tools.\" So is that right? I mean, what are your opinions? And you know, I like to just get like the raw opinions of people who are in the field and who have gone through this. Do you feel it's necessary? Do you feel it's gonna help you? You know, what's your, I mean, I'm assuming you're gonna say yes for Python, but like what are your feelings and your advice to young people? - I feel that there's a lot of hacking that I don't know about. The hacking that I've seen, I think you need some programming. But I don't know that you have to, because there's so many different types of hacking. Some web hacks, I don't think you need that much code. You need to understand what you're looking at, but you might not need to be an expert in it. But yeah, for me and what I've seen, I needed to know programming. But I'm biased because that's what I know to begin with. I don't know how I would look at it if I didn't know programming. So I would say, yeah, it would help to know enough code to write your own scripts and to understand other people's. But maybe you don't have to be a professional though. - Yeah, I think that at some level you don't need it, but it is a force multiplier if you are good at writing code. It will make you better in a sense of being able to automate tasks that might chew a bunch of time. It will make it so that you can debug and troubleshoot things. Even in your own tool chain, if you have a commercial tool that you've purchased that you use for web scanning or penetration testing or anything, being a developer, even when filing bug reports to those vendors, can be useful, right. There's a ton of different ways, but I'm always really cautious that I never want anyone to feel like, \"I shouldn't be a hacker 'cause I can't code.\" because that's just not the case. And I worked with some extremely skilled people that didn't really know how to code or weren't extremely proficient at it. They wrote, 99% of their code, was in assembly. You know, they never really had to leverage any kind of higher level or interpreted language like Python and they were amazing. Right. So I'm always conscious of like not trying to pigeonhole people or make them feel like they can't pursue a particular path because I guess I know that feeling where it's like, \"Oh, I shouldn't do computers 'cause I'm bad at math,\" which was actually totally nuts, right? Something I had to mentally overcome. So yeah. But knowing Python or any programming language is gonna be useful for you, definitely. - I like what you said there. I mean, cybersecurity, hacking, whatever, is a vast field and there's so many opportunities for so many people of different skill sets and different, you know, strengths and weaknesses. And I like what you said that, don't let the naysayers and all the other people stop you. 'Cause if you listen to them, you're not gonna do and discover what you're good at. Do what you're good at and do what you enjoy. I know you're really like open for trying to get more people to, you know, get involved and not limit themselves. So I think that's great advice, Tim, I like what you said, you know. You come from a developer background, I've done some dev in the past and I find that, you know, Justin, as you said, it really helps you if you understand even some basics of code in so many places. Like working with Scapy just allowed me, as an example, as a network, like focused person, if you like, to do things in a different way and understand things. It allows you to, you know, go deeper. Rather than just using a tool like Nmap, you can actually understand what's going on and manipulate it in ways that you couldn't do if you didn't understand code. So yeah. I like that it can really help you. Justin, I think you've said something about Metasploit. Having a bit of Ruby knowledge may help with that. Is that kind of correct? - (laughs) Yeah, actually. I'm terrible at Ruby. So I always had this like secret part of me that maybe HD would've would've made it Python in the end, you know, back in the day there was a handful of penetration testing products, all of 'em were written in Python and I guess the original Metasploit was Pearl. So yeah, if you wanna do Metasploit stuff, definitely you're gonna wanna be able to write some Ruby. And I actually haven't looked at Metasploit in quite sometime so for all I know they may have some sideways entry point there for a Python developer, but yeah, Ruby would be useful for that. And same thing, I think there's a handful of languages, Golang, Ruby, Python. You know, if you're somebody who easily picks up programming languages, I think that, you know, those are the three that are probably the most in use right now. - So do you think Golang will replace Python eventually in like field because of its concurrency and its speed and stuff, or do you reckon Python is still the one to learn today? - I still think Python is the one to learn today personally and I manage a product that is probably 50% plus of the codes written in Golan, but I still think that Python for security folks is gonna be the language. Go, I think is definitely, when you're talking about distributed systems, straight up performance, and just the fact that there are now books coming out where people are building security tools in Go, I think the nature of Go being a very cloud-focused language as well is gonna suit a lot of, you know, if you're building big distributed scanners, that type of thing, I think you're gonna see you will get some performance benefits. But I still can't see how one to one, how Go outside of performance, in my very humble opinion and biased opinion, I just don't see the intrinsic benefit between, you know, switching to Go over Python. There's just a, it's a different language and it is a bit more difficult to learn than Python. - Yeah, I would totally agree with what Justin just said. All the stuff and in the book, speed is really not an issue. If it was written in Go, it might be faster, but it really doesn't matter that much because the things we're trying to do, speed is not the problem. One of the cool things about Go is you can create an executable and ship it over to some other machine, but you can also do that with Python and we actually have an example where you use Pi installer and put the executable, the binary. So Python doesn't have to be on the actual, compromised machine where you can just put an executable there that'll run. So I don't see Python has any limitations for being really great hacking tool, especially with as much code that's already out there. I think it's good to know Golang, and like Justin, I think it's a great language, but maybe it's not necessary to be an expert in it. But knowing Python, and if you're gonna use Metasploit, then yeah, Ruby, but I think Python is kind of the main language being used right now. - Yeah. I mean, I didn't agree. I mean, it's like, there's so many modules available with Python and it can be used in so many domains. Hacking is just one of them. - Exactly. - It's such a versatile language and I love it that, you know, you said that we are not writing systems that are gonna be used by Google, by millions of users, it's just scripts that we using. So you don't need that performance necessarily. But I also like the fact that, you know, Justin, as you mentioned, like if you're doing more high performance stuff like scanners and stuff, maybe Golang is the way to go. So, just remind me the languages that you would recommend that I learn if I'm new to this. Start with Python, then would it be like Golang is my second language or what would you recommend? Like gimme three or, you know, kind of like a path of what should I learn, or is it just Python? - No, no. I would say JavaScript. You'd need to know JavaScript and Python just because there's so much JavaScript code out there that's vulnerable. And that's really all I can say, that those were the two main languages that I used. Justin, what do you think? - Yeah, I was gonna say Python, JavaScript, and like, you know, Node, kind of NPM understanding, that whole kind of ecosystem. And then after that, I think that, you know, whether it's Ruby or Go or whatever, those are great, nice to haves. But I think for the modern kind of attacker, you know, understanding that JavaScript, and again, that was, you know, I learned that I think before Python. So yeah, those would be my choices as well. And stuff I see come up all the time, both in penetration tests and, you know, tool building, all kinds of stuff. - Justin, tell me now, you have changed sort of, I mean, your path has been windy and since the first edition was written, you've kind of changed tech, if you like, or changed direction. Could you just tell us what's happened and what you're doing these days and feel free to plug your product, 'cause I know you've got a product. Tell us, you know, just what you're doing since the book was written and you know, what tools are available today? - Yeah, so around actually the time that \"Back Hat Python,\" the first edition was published, I just became increasingly more interested in open source intelligence. So at the time I had a huge interest in counter-terrorism issues and there was a lot going on in Syria and Iraq at the time as ISIS was really leveraging social media and pushing propaganda, you know, things that we're pretty familiar with now, but you know, eight to 10 years ago was actually some pretty new tactics for groups like this. And I found myself spending time writing code to crawl through Twitter and identify people of interest and building, you know, image recognition tools and all kinds of stuff that really, unless I was on a social engineering engagement or doing some reconnaissance, was really diverging further and further away from kind of the pure offensive security that I was doing. So in 2015 I decided to kind of go out on my own. My wife and I started a business and, you know, I started blogging about writing tools for OSINT, you know, whether it's blockchain related stuff, whether it was, you know, mining out metadata from the way back machine. I just found this stuff a lot more interesting. And along the way, I was also doing a lot of consulting. So I would assist companies that were doing investigations, defer related stuff, and I would be writing tools along the way and kind of assisting and kind of dealing with large unwieldy data sets. And I was doing kind of more traditional investigative work. And you know, I shot myself in the foot once, while I was researching some bad individuals here in Canada and didn't preserve and didn't keep screenshots and didn't take good notes. And then, you know, that's where our product Hunchly came from. I was kind of off at myself and said, I need to build something that solves this. - Tell us the story, sorry to interrupt you. There were guys that went to Iraq or somewhere, is that right? Can you tell us the story, cuz I remember, like you said, you were pissed off about it. Tell us, you know, why you were pissed off. - Yeah, so there's a couple of individuals here in Canada at the peak of the war, you know, we'd have what was called foreign fighters. And this is the same thing, US, UK, anywhere where people were leaving our countries and heading to Turkey to then get into the war zone and fight alongside, well, mostly we were concerned obviously I think with folks joining ISIS. And so these two individuals were here in Canada and I had found them through one of my crawlers, and not uncommon at the time, there was a ton of people who would kind of pop up and then disappear on social media that might be flying, you know, the black flag or whatever it might be. So one night I was laying down to go to sleep and I flipped my phone up and there was a news story from a major Canadian newspaper and it had their picture on it because they had left and gone over to Turkey. And of course now people, the authorities here in Canada were looking for them. So immediately I jumped up, headed to my laptop, 'cause I'm like, I recognize these two guys right away. I hopped on my computer and all their social media was gone. So their Facebook accounts were gone, everything was just gone. I had no screenshots of the stuff that they had put up leading up to them leaving. I had no documented history or anything as to why I even knew who these people were. And yeah, it wasn't a great feeling because I realized that I was fallible. I was somebody who I thought was pretty diligent and in the end made some pretty silly mistakes. And you know, I realized that I needed a tool because if I was doing this, there's probably other people who ran into this issue. So yeah, I built Hunchly. It wasn't even named Hunchly, it was this kind of horrifying collection of extension code and Python, and it just basically captured every page you browse to. There was no way to even go through the material after it captured it. You just had to grip in your terminal to kind of hunt through all the stuff you captured. But then yeah, I mean, through that lesson learned, as I was doing consulting work, we would get to kind of report writing phase in projects and I always had the materials. I always had screenshots, I always had the stuff that people were looking for. And eventually people I was working with were like, \"How do you always have, like, do you screenshot everything?\" Like, how come you always have this stuff? And I, you know, kind of explain, now I have this like crappy collection of code that's running, that's doing it for me because I shot myself in the foot and now I don't trust myself (laughs) to be a good documentarian, right? So, yeah. Then people were like, well, can you install that on my machine? So I would literally be like, you know, throwing stuff into Google drive and doing these remote desktop sessions to get Python installed and all of this. And I started to wonder, I'm like, I wonder how many other people have this problem. So I started asking around in the community and people were kind of responding back with, yeah, like I have that problem. So I'm like, okay, I'm gonna build a product and see what happens. And that's really where Hunchly was born and the first version of Hunchly was still Python. The dashboard was actually like an $11 HTML template I bought from like, Theme Forest, I think I. I probably have the receipt still somewhere, the logo, even the Hunchly logo, which is fairly identifiable now in the OSINT world, that was like a logo I snagged off of 99 designs, I think for a hundred dollars, something like that. So it was literally, I was just trying to get that MVP built and was pulling together whatever I could. And that's where Hunchly came from. And now I have a much better team of people who do a much better job of, you know, actually building a proper product. - But I love the story. I mean, it's that whole thing, why learn to code? Because you never know where it's gonna help you, And you doing coding in various spheres, and one of them being penetration testing, but then you pivoted, if you like, into OSINT. And you used those skills and you took them with you and you could build the whole product. It's that whole thing, you know, give someone a fish and they eat for one day. If you teach them to fish, they can feed themselves the rest of their lives. I'm a big advocate for learning to code. And you know, Tim, I'm the same as you, you know, once you've done dev, you can never look at the world the same way. And Justin, I mean, your story's a great example of that. So you pivoted from penetration testing to OSINT and built this tool and then built a business from that. Why OSINT? It it just more interesting or you needed a change? Why do you enjoy OSINT versus like traditional penetration testing? - That's a great question. Truthfully, I felt at the time that I could do a lot more good through OSINT. Yeah. I felt like I could actually do something or help close cases or find information that had impact immediately. I found at that point in my career, a lot of the work I was doing was for large financials. And so at some level you would hack into something, you would, you know, write your report. You would have the, you know, the follow up meeting with the security team and the developers, but you really didn't feel like you knew where the actual end impact was, right? - Yeah. Yeah. - You didn't feel like at some level, for me at that time, I started to lose touch with, you know, I'm helping to protect people's investments or whatever it was, when there were these human rights atrocities going on. When there were serious concerns around terrorism, there were, you know, things like climate, a whole bunch of things where I saw open source intelligence is this way that there's like some measurable impact, you know, there's something that can be done and it's not an abstract kind of outcome, right, were, you know, a development team fixes something in some system that no human being's ever gonna see. You have to really like get your mind to jump over a bunch of hurdles to get to that point where you're like, oh yeah, I see how that helped protect something. I found with open source intelligence, it's very direct, right? If you find evidence of a war crime that you have the ability like here's evidence and you know, you can actually, there's not so many mental leaps you have to make to see that you're doing some good. I love investigative work. I love digging at things until you find that answer. And that is very parallel to bug hunting in hacking or even penetration testing where you may spend countless hours or days, staring at and beating up a problem over and over and over again until something cracks, right. And that tenacity that a good hacker has translates incredibly well to open source intelligence, to just be tenacious and be willing to continue chasing stuff down until you get the answers you want. - So tell us some of the stories. I've heard some, I dunno if they've changed since you've done other podcasts in the past, have you got like one or two stories that are close to your heart or that you thought were wow? - I think that there's definitely been stories that have come back from our customers around Hunchly that are probably the closest things to heart. Cases where innocent people were released from jail, because evidence was preserved that show that they were innocent, where people were ultimately caught for crimes they did because our tool captured something they said online. I think those are always the things for me, where particularly as a technician, it's nice to have the human element behind those stories. - Yeah. - I think, you know, on the investigative front, I've been really fortunate to be involved in anything from corporate espionage investigations to, you know, assisting A-list celebrities in tracking down threat to life. You know, where, I think I've just been really fortunate and lucky. Like just really lucky throughout all my career to be exposed to all of these different angles and all these different kind of industries and people. But I don't have anything that's really leaping out at me as a war story that over, you know, I think there's a whole collection of stories along the way. - You're gonna have to write a book. - No. No more books. (Justin and David laughing) - I said I would never write another book after the first one. (laughs) And then after the second one, I was like, I can't believe I did that. And like, even in the last six months, I've contemplated writing a third one and I'm still like, there's gotta be something wrong with me somewhere. Right? And I can't use ADHD as an excuse now because I've been diagnosed, right? Put on medication. So it's not that. There's gotta be some other thing going on, you know. - I think, I mean, the book has such a big impact on people's lives. I mean, it's amazing, you know, as a reader, just to read, you know, right in front of you, someone's thoughts and you're taking years and years of knowledge, and you're crystallizing that into like a few hundred pages. There's a lot of power in that. Yeah. Books are amazing. And I mean the same with videos these days, you know, you can share so much experience in a short amount of time on a video. And it's amazing to just give back to others who are starting out. It's so much easier these days in some ways to learn, and it's also hard 'cause there's so much information out there. No, it's great. I mean, so Hunchly is basically in the background, is saving all this information. 'Cause I think some of the stories I've heard is, you know, someone goes and deletes their social media or tries to hide stuff and your tool is saving all of that and it's just running scripts and stuff in the background, is that right? - Yeah. It's really, the focus is on the human being. So Hunchly's job is to follow the human along. There's no automation, it's not leveraging any social media APIs or anything like that. But as the human investigator or researcher is doing their work, Hunchly's job is to preserve everything you look at and preserve it in a way that's court ready. So that it's forensically sound enough that if you need to produce it as evidence in a court, that you can do that. But you can imagine, you know, our folks in the CTI industry, they love it because when they're chasing hackers around or they're crawling through forums or whatever, if somebody disappears one day, they know they've captured everything while they're researching that group or that individual or doing dark web work where a hidden service might be up today but it is gone tomorrow. So that's its job in life. And then it has some tools built into it to just assist you as the investigator and to just stay outta your way, right? To kind of really let the human run with their gut instinct and their training and experience and kind of that intangible, you know, X factor stuff that human investigators have. Our job is to really just stay out of their way and to really, so people forget about the fact that we're even there. - So I've gotta ask you another dodgy question. Will AI replace humans? (Justin laughs) - Not in investigations, they won't. Never. There's just no way. There's a lot you can do with AI, there's a lot you can do with well trained machine learning models, but intuition, experience, drawing these disparate connections that, you know, the supercomputer that is our brain, AI can only get so far. And I see it being applied particularly in like image and video stuff where it's a great analytical tool. I think it's something that again is a force multiplier. It means that you can get good information or more contextualized information to the human faster or with lower effort but that human's the one that's gonna make sense out of it, you know, 9.9 times outta 10. So no, I don't see AI replacing human investigators anytime soon. - Yeah. I mean, exactly. I mean, I think as computers get more intelligent and help us, we just find other uses that, you know, they can take the low level tasks away and we can apply our brain powered things that they struggle with. It's funny 'cause everyone, you know, for years and years, computers are gonna take our jobs away, but it doesn't seem to have happened yet. And I don't think it's gonna happen in a lot of spheres. Maybe in some but not in a lot, for a while at least. Another product you got is the dark web you mentioned that. Can you tell people, 'cause there's a lot of interest, you know, perhaps in the dark web. What's this tool that you've got that goes onto the dark web? - Yeah, we have a very simple distributed scanner that is just taking inventory of hidden services on tour. And so it's job is just to kind of go out and it's not even doing any crawling or anything like that. Its job is pretty simple. It's just tell me what's up and what's down, and try to figure out any new hidden services that we might be able to discover in those 24 hours. The idea was to kind of give this very low barrier to entry for people getting into dark web work. You know, here's a spreadsheet where you can actually go look at, you know, whether there's hacking forums, whether it's CSAM, you know, child sexual abuse material, whatever it is that you need to investigate it, you have something that's very easy to kind of understand and kind of a good starting point. It will never replace amazing services like DarkOwl for example, or commercial services. But that was really the idea. Yeah, it's free. You just punch your email in and you get a report once every morning. - And where do you get that? Is that from, can you give us the link? - Yeah. It's at hunch.ly. At the very bottom, there's a dark web mailing list link that you can click on and that'll take you right to it. - I mean, we've gotta be careful what we say and obviously I wanna steer people in the right direction, but if I want to investigate some of the dark web, I could get that list and it'll give me some websites that I can go and look at, is that right? - Yeah. It'll give you a place to start, right? And it kind of gives you the title of the hidden service too. So you'll know if it's something you should avoid, right? It is illegal in, I believe your country, mine, and Tim's to even view abuse material, which means that, you know, if you see it labeled as abuse material in the spreadsheet, it's very clear that it's abuse material, you go browse there and view it you've probably broken a handful of laws. So we don't filter the results. We don't remove certain things from the results or anything like that so it's really worth, you know, paying attention to that. There are also people who have guides out there on how to do this stuff safely. You can disable images for example, in Tor browser or any other browser really, you can disable images so that when you're out there doing this stuff that you don't accidentally, you know, run into something you wish you hadn't. But yeah, it's totally free and we have an archive as well. It all gets filed away in Dropbox. We have an archive of every spreadsheet for the last four or five years since it started running. And so we are also hopefully in the next six months gonna be rewriting and kind of redoing some of it and kind of modernizing. It's actually like, it's all Python just running away, but it's uptime is measured in years. (chuckles) I'm a little scared to touch it, (laughs) but it is time for it to get a bit of upgrade. - But I mean, that once again just shows you the power of learning a programming language like Python, because you can apply it again in so many disciplines. You've written these wonderful tools, some paid some free, that people can use to improve their lives and the work that they do. And that started because you learnt Python in one sphere but then you've just pivoted into another. So Tim, what are you up to these days? Are you teaching \"Black Hat Python,\" teaching people to hack? What are you doing? - I am not near as interesting as Justin. - [Justin] Not true. - Well, I actually retired last year, so I'm not programming. I've been very interested in doing work like Justin was just talking about, trying to detect misinformation or setting up some AI models and, So I like-- - So you out there to prove Justin wrong, is that right? - No, no, no. What I actually found was that Justin's right. Well. - That's not something that gets said very often, by the way. (all laugh) - My own take on it is we need more than AI to be able to solve this problem. It is a huge problem. And like Justin, I wanted to do something where I could help and you know, it looks like the world is on fire and I wanted to be able to do something to help. And I thought that was a way. And for me, that's not where I wanna put my energy right now. So I'm kind of between ideas. I'm still looking for ways that I can make the world a better place using what I know, and that is mainly programming. And so I'm just continuing to pay attention to what I see and try to find a new idea when it comes. - We gotta convince you to like do like training more like courses or YouTube videos or something where you teach people. Because I think there's, in my experience, there's always a need to teach people stuff that's in the heads of the people that have walked the road before, if you like, or the experience. - I think that that's a really good suggestion. And the thing that kind of stops me is there's so much good material out there already that I don't think I can improve on it. I mean, I really think there's some wonderful material, especially with hacking. There's so much out there that you could bring yourself from knowing nothing to a real expert just by following this education that's free. - And you see, I've always got a counter to that because I think everyone has a voice and everyone has a unique perspective. And that's why I always encourage people to share. What's that old, old thing? Everyone has a book in them, is that right? I think that's the old way of saying it. It's like, everyone's got something to share. So yeah, I'd encourage you, please, create something and put on YouTube, put it somewhere that you share because you know, maybe you should start teaching some of these old languages because the world needs younger people to learn these older languages, right? - Well, - Bring back Fortran, Tim. - I don't know, like LaTeX? - [David] Yeah, exactly. - I don't know about that. I mean, I've tried to parse LaTeX use but it's a very strange, hard language. And I think people are pretty satisfied not to know it. - It's funny that you joke about Fortran because there's so many, I think some of the best paying jobs today are Fortran jobs. Because-- - COBAL. - the previous gen, or COBOL, yeah. Because it's like people are retiring and the older generation is no longer doing it so we need younger people to program. - Well, that's true. And our math libraries are, a lot of it is written in Fortran, that we use in our own programs. - I wanna thank both of you, you know, for talking to me for so long, but I wanna give you the floor. Could you share your thoughts to people who, say, are entering cyber security or people who are just like younger? And I don't wanna just say younger because the audience is a different range of ages. Is cybersecurity a good field? What would be your encouragement or your advice? Let's say you put yourself back at 18 or 25 or 30, you know, a lot of people unfortunately don't have role models sometimes, people who tell them they're dumb, they can't do it. You know, I always tell people to ignore those haters and you won't do the best, but like, what would you advise yourself if you had to go back but you were starting today. Would you go into cyber? Would you learn programming? You know, just give us your thoughts. - I feel like, Justin's background, even though it's twisty, it hits a lot of points: operating systems, languages. I think that it's good to have a good background that knows all those. Maybe not to be an expert in any of them, but when you know a little bit about the way something works, you can just find a way to get behind that, to be able to penetrate that. If you're interested in hacking, advice I would have is that programming, good word, force multiplier. It's good to know that there's so much free educational materials out there. And to not listen to people who say you can't do it. I see questions about, \"Is it too late to learn programming? I'm already 30.\" And it's like, come on, man. No, it's not. There's no age limit to this. You can learn it when, I mean, some of the things I was learning working on the book, I mean was 60. And it's like, this is fun, I'm learning. And there's nothing to stop you. They can't stop you from learning. You know, you can learn at any age and it's not like, you might be better when you're learning a foreign language when you're a child, but you can still learn no matter what age it is. And you can learn how to do stuff and see the results. And I think that's one of the best things about hacking, is you can see the result pretty quickly. And so you get that feedback that maybe a dopamine hit of doing something successfully. So I give the rest to Justin here because he's the one that knows the hacking world. - My response might be a bit surprising actually. So what I would suggest to anyone, whether you're interested in cybersecurity or hacking, specifically, and if I was to look back on, if I could have a conversation with younger Justin, before you worry about programming or networking or any of that, my suggestion to young folks is first invest, truly invest in your mental health, number one. Really, the sooner, and I say this to as many people who will listen to me. Every human being on earth benefits from therapy. Every human being. Hacking can be a mentally challenging job. It can be a job that seems to have unbounded frustration. It can be a job that can feel thankless for days on end, before you get a major break, and it's all worth it. It can be punishing for your mental health at times. And I think that really, and for me, and particularly what I see and what I've seen and through my own mental health journey is that I would've been a much better hacker and a much better developer, a much better colleague if I had invested as much time and energy in my mental health and engaged in therapy and these things that are largely taboo still. I would've been infinitely better at my job if I would've engaged in these things at a much younger age and treated them seriously. So my recommendation is that, with you investing in mental health and in a lot of cases that, you know, engaging in therapy even if you feel like you don't need it, it will pay dividends for you long before Python, network knowledge or operating system internals. So that's what I would've told young Justin and that's really what I continue to tell kids today, is, and people of all ages, right, is that this is a really crucial part to your life and to your career and actually really has serious benefits for any technician as well. It's just not talked about enough. - What age were you when you were diagnosed? With ADHD. - Last year, actually. So very well into my career, but, you know, as a young person and someone, you know, not so young anymore, had battled things like anxiety and depression, and didn't understand how to cope with a lot of these things and someone who now advocates for therapy for as many people as are willing to listen to me, it's one of those things that you don't realize how things like anxiety or depression, or even things like ADHD, just how deep they run into the things you do day to day. And there are also real fears and I have these discussions. Often I'll give a university presentation and I'll always have a student or two approach me afterwards and say, you know, \"I was diagnosed with ADHD and, you know, I was worried that this would impact my performance, or if I went on medication,\" you know, things like that. And I think that the reality is that just people are not talking about these things enough. They're not talking about anxiety and depression because they want to talk about technical stuff and they want to talk about, you know, I think there's a certain level of, you know, ego that it makes you vulnerable when you tell people that, yeah, you know, I have ADHD and I've battled anxiety or depression. I think people are sometimes a little afraid to be vulnerable like that. It's also because the social media landscape's pretty unforgiving most days, right? So, yeah, it's is really like, for me, I think these are really critical things and when you're 39 and you get diagnosed with something that you then look backwards and say, holy moly, that actually impacted a lot of my life. It's also important for people to know that like, whatever age you're at, if you feel like you're dealing with stuff that you can't, you know, so like you feel like you're too old or whatever to make a change or something positive is gonna come from, and I can assure you that you're never too old or too young and investing in your mental health, it will pay dividends far more than any other thing in your career, by far. - It's amazing to hear that because there's another guy I really respect, Stok, who's a bug bounty hunter. He's also recently changed but he was quite well known in the bug bounty sort of world. And he said exactly the same thing. He was recently diagnosed. And he said it changed everything for him when he understood a whole bunch of stuff. So I think it's fantastic advice. - [Tim] Yeah. - Yeah, I mean, it's so, it's. Sorry, go on. - No, well, you know, I was thinking along one track, thinking about the technical part when we were talking, and Justin just kind of opened up the world there and that's a really good thing. It's like, yeah, therapy for me changed my life and I'm a better developer, I'm a better person. And anxiety and depression were something that I thought that's well, you just live and you just have to tough it out. And I might still have a little bit of that here and there, but having therapy gave me tools to deal with that and it doesn't have to be crippling. So, yeah. I'm glad Justin said that. I totally wasn't thinking about the bigger world outside technology, but, yeah. - But Tim, what you said was really cool as well. I mean, you said you were, did you say you were 60 when you were learning some of the stuff in this book, is that right? I mean, that's an encouragement. I love that. I mean, I get that question all the time as well, is like, am I too old to learn Python, and I'm 25? Like, come on. (all giggle) I'm 30, right? It's too late. - Yeah. I know. Well, my mother picked up the iPad when she was 80, I guess, and she's learning how communicate with people that way. So she still learns, I don't think there's any time we can't learn. I hope not. - No. I mean, I love it. You're getting excited about like cyber and like, you know, owning a box and you like a bit, let's just say you're a bit more mature than most of us. And I think it's fantastic to hear that and it's fantastic to hear both sides. So I really appreciate both of you, you know, sharing, you know, your views. It's so important to hear both sides. Anything else you wanna say before we wrap it up? - This has been great. I really appreciate the time. And, and I truly mean that. - Yeah, this has been awesome. And I really appreciate the opportunity to bring both of us on, and you have a great channel and you do such a great job. So, just thank you so much for having us. - No, thanks to both of you. I mean it's amazing to be able to talk to the people behind the book,. Because Justin, like what you said right at the end here, you know, you are a human. You're like all of us. I mean, when you see a book like this you think these guys are like geniuses, they have no wrong. (Justin laughs) They're like perfect in every way. Sorry? - I said, far from it. (Justin and David laughing) - No, it's nice to be inspired. That both of you, you know, went on a journey like so many of us are. And Tim, I find it really inspirational that you were learning some of this later in life. And you're not letting that stop you. And you're getting excited about it. And Justin, how you took your knowledge and wrote books. And it's funny how you said you're a well known author but you struggle to write another book. We want you to write more books. (Justin laughs) It's nice to get, you know, all the emotions and the reality behind just the book, because the book in itself is just one part of you. So thanks so much for, you know, sharing more than just techy stuff. It's great to hear, you know, the stories. How can people connect with both of you, because I'm sure there's a lot of people that are gonna want to connect? Tim, I saw that your Twitter or the one that's listed, I think in the book or on the website is down. Have you got a Twitter account? What's the best way to contact you? - I am sorry about that. I found that social media was really making my life, it, wasn't helping so I'm just available by at tim@reachtim.com. - No, you don't need to apologize. I mean, it's a problem with social media and it's nice to hear that, you know, you two are really famous for writing the book, but you have the struggles that a lot of us have. So that's fine. There's no need to apologize. Sorry, go on. - Yeah, it's just it wasn't making me more healthy, (chuckles) so I guess it was going the other direction. So I just did what I felt like I needed to do. So thank. - And Justin, what's the best way to reach you? Is it email or social media? - Yeah. You can reach me on Twitter, jms_dot_py or just send me an email, justinseitz@ gmail.com, works perfectly fine. - So thanks again to both of you. I really appreciate you taking so much of your time and sharing and inspiring. I think that's the big thing I always wanna, you know, hopefully get out of an interview, and that's what's definitely happened this time, is inspiration for people to know that they, even if they're struggling, they can change their lives by studying, by reading, by, you know, putting the effort in. So thanks so much to both of you. - [Tim] Thank you. - Thank you. (upbeat music)",
    "transcript_keywords": [
        "Python",
        "yeah",
        "Black Hat Python",
        "kind",
        "people",
        "Justin",
        "Hat Python",
        "stuff",
        "book",
        "things",
        "learn Python",
        "lot",
        "code",
        "learn",
        "time",
        "thing",
        "hacking",
        "tools",
        "good",
        "great"
    ],
    "transcript_entity_values": [
        "a ton",
        "the last four or five years",
        "these days",
        "three",
        "Stok",
        "four-year",
        "32",
        "Java",
        "a hundred dollars",
        "25",
        "Back Hat Python",
        "Fortran",
        "Last year",
        "two",
        "four",
        "the last five years",
        "Scapy",
        "11",
        "one day",
        "tomorrow",
        "second",
        "YouTube",
        "OSINT",
        "years and years",
        "Google",
        "9.9",
        "Justin",
        "Python",
        "the last six months",
        "2015",
        "Canadian",
        "chapter five",
        "Iraq",
        "Python 3",
        "CTI",
        "80",
        "Python",
        "David Bombal",
        "Donald Knuth",
        "Windows",
        "Hunchly",
        "77",
        "Gray Hat Python",
        "Facebook",
        "Wing IDE",
        "PHP",
        "eight to 10 years ago",
        "XP",
        "millions",
        "six months from now",
        "39",
        "Windows XP",
        "MVP",
        "Node",
        "3",
        "today",
        "99",
        "Python 2",
        "a few minutes",
        "Kali VM",
        "those 24 hours",
        "Tor",
        "IDE",
        "one",
        "Immunity",
        "a mile",
        "TCP",
        "Ruby",
        "Python 2",
        "Eight",
        "CANVAS",
        "Windows",
        "30",
        "99%",
        "Justin",
        "first",
        "about 10 years",
        "500",
        "UK",
        "Hunchly",
        "Pearl",
        "the day",
        "Wing",
        "days",
        "FinTech",
        "Python 2",
        "years",
        "Canada",
        "DarkOwl",
        "nine",
        "ISIS",
        "C++",
        "Hunchly",
        "Trojan",
        "David",
        "IP",
        "last year",
        "Linux",
        "Nmap",
        "AI",
        "VS Code",
        "Golan",
        "Dropbox",
        "Windows 10",
        "Tim",
        "60",
        "Scapy",
        "VM",
        "US",
        "Dave",
        "OSINT",
        "10",
        "18",
        "Theme Forest",
        "Metasploit",
        "iPad",
        "15, 16 years",
        "Python",
        "Python 3",
        "Turkey",
        "TryHackMe",
        "50%",
        "third",
        "countless hours",
        "2007",
        "One",
        "recent years",
        "60",
        "2",
        "zero",
        "BGP",
        "Windows 10 or 11",
        "Golang",
        "Nano",
        "netcat",
        "Metasploit",
        "the next six months",
        "CSAM",
        "25",
        "Robot",
        "JavaScript",
        "Gython",
        "GitHub",
        "one night",
        "a few hundred",
        "Twitter",
        "Emacs",
        "Black Hat Python",
        "Syria"
    ],
    "transcript_entity_types": [
        "QUANTITY",
        "DATE",
        "DATE",
        "CARDINAL",
        "PERSON",
        "DATE",
        "CARDINAL",
        "ORG",
        "MONEY",
        "CARDINAL",
        "WORK_OF_ART",
        "ORG",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "PERSON",
        "MONEY",
        "DATE",
        "DATE",
        "ORDINAL",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "DATE",
        "NORP",
        "LAW",
        "GPE",
        "ORG",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "PERSON",
        "PERSON",
        "NORP",
        "PERSON",
        "CARDINAL",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "PRODUCT",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "WORK_OF_ART",
        "TIME",
        "ORG",
        "TIME",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "QUANTITY",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "DATE",
        "PERCENT",
        "PERSON",
        "ORDINAL",
        "DATE",
        "CARDINAL",
        "GPE",
        "NORP",
        "PERSON",
        "DATE",
        "PERSON",
        "DATE",
        "ORG",
        "ORG",
        "DATE",
        "GPE",
        "ORG",
        "CARDINAL",
        "ORG",
        "LANGUAGE",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "PERSON",
        "PRODUCT",
        "ORG",
        "PRODUCT",
        "PERSON",
        "ORG",
        "PRODUCT",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "GPE",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORG",
        "DATE",
        "PERSON",
        "PRODUCT",
        "GPE",
        "GPE",
        "PERCENT",
        "ORDINAL",
        "TIME",
        "DATE",
        "CARDINAL",
        "DATE",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "DATE",
        "PERSON",
        "PRODUCT",
        "ORG",
        "ORG",
        "TIME",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "WORK_OF_ART",
        "GPE"
    ]
}