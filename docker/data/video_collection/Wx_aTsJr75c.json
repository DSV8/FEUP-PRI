{
    "id": "Wx_aTsJr75c",
    "title": "Rat hacks website in 5 minutes ðŸ˜±",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-09-25T14:00:24Z",
    "video_url": "https://www.youtube.com/watch?v=Wx_aTsJr75c",
    "category": "People & Blogs",
    "tags": [
        "xss",
        "cross site scripting",
        "portswigger",
        "ajax",
        "jscript",
        "javascript",
        "xss attack",
        "xss video tutorial",
        "xss attack tutorial",
        "xss explained",
        "xss attack example",
        "xss bug bounty",
        "xss tutorial",
        "xss vulnerability",
        "xss vs crsf attack",
        "xss example",
        "xsser",
        "kali linux",
        "penetration testing",
        "ethical hacking",
        "bug bounty",
        "cross-site scripting",
        "red team",
        "cyber security",
        "kali linux 2022",
        "jquery",
        "node js",
        "node js hacking"
    ],
    "views": 279896,
    "likes": 7895,
    "comments_count": 244,
    "description": "XSS Rat shows us how he hacks websites in 5 minutes and get customers. He approaches companies and gives them 1 hour of free consultancy. But, he is often able to hack their website in 5 minutes - and gain a new client :) He then shows them how they can better secure their websites against actual attacks.  XSS Rat's new course:   // MENU // 00:00 - Coming up // Hacking websites in 5 minutes! 00:48 - Intro & Disclaimer 00:59 - How to hack websites with XSS  02:17 - Hacking websites demo 03:10 - CAPTCHA vulnerability 04:49 - CSRF token vulnerability 17:19 - Changing emails 20:36 - Client Side Template Injection 24:30 - Mass Assignment vulnerability 28:23 - Open Redirect vulnerability 31:54 - Stealing session tokens 34:44 - JWT vulnerability 38:37 - WordPress // Don't use plugins! 39:10 - Even experts can make mistakes 40:38 - Recommended security scanners 41:05 - Account takeover vulnerabilities 45:37 - Fight the cheese monster! // hackerats.com 52:00 - Thanks XSS Rat! // Free labs on hackxpert.com 52:52 - What to expect in the next video 53:26 - Conclusion  // Previous video // XSS hacking:   // NEW COURSE // Get XSS Rat's New Pentest course:   // Demo Sites // This video:  Others mentioned:  -  -   // David's SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // XSS Rat SOCIAL // Twitter:  YouTube: youtube.com/c/TheXSSrat Website:   // XSS Rat's Udemy course // New Pentest course:  XSS Survival Guide:   // XSS Rat's courses and bootcamps //   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  xss cross site scripting portswigger ajax jscript javascript xss attack xss video tutorial xss attack tutorial xss explained xss attack example xss bug bounty xss tutorial xss vulnerability xss vs csrf attack xss example xsser xsssa facebook xsssa kali linux penetration testing ethical hacking bug bounty cross site scripting cross-site scripting red teaming cyber security kali linux install kali linux 2022 ethical hacker course ethical hacker javascript ajax jquery node js node js hacking portswigger  Disclaimer: This video is for educational purposes only.   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended.   Thank you for supporting me and this channel!   #xss #javascript #hacking",
    "description_links": [
        "https://davidbombal.wiki/xssratpentest",
        "https://youtu.be/PzRQhpbYbeg",
        "https://davidbombal.wiki/xssratpentest",
        "https://hackxpert.com/00032422342/ratsite/",
        "https://hackxpert.com/labs",
        "https://hackxpert.com/ratsite",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://twitter.com/theXSSrat",
        "https://thexssrat.podia.com/",
        "https://davidbombal.wiki/xssratpentest",
        "https://www.udemy.com/course/xss-survival-guide/",
        "https://thexssrat.podia.com/",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "- So let's say that I'm a hacker. I've stolen this. I'm gonna go back to my normal browser, and in here, I'm gonna paste my session ID and my cookies. There we go. If I refresh my page now, suddenly I'm logged in as you, so just from stealing that specific cookie- - Let me see if I get this right. You offer them, like, an hours free consultancy. In five minutes or so, you find a hack or 15 minutes, whatever, and then they're like, \"Okay, we need to pay you now.\" - Exactly. - And just correct me if I'm wrong, but I believe what we're gonna do is do some demonstrations of how a rat like you, Cross-Site Scripting Rat, can break into companies within five minutes, and you're gonna do demos, but you've also got systems that people can access. Is that right? - Exactly. I'll give you a link to put in description, so if people wanna try this afterwards, you can learn how to hack in five minutes as well. (disturbing music) (ethereal music) - Hey, everyone, David Bombal back with Wesley, more commonly known as Cross-Site Scripting Rat. Wesley, welcome. - Thank you very much. Thanks for having me, David. Really appreciate it. - It's great to have you back. Our previous video where we spoke about cross-site scripting, which I'll link below, at this time, at the time of this recording, has got about 200,000 views. A lot of great feedback where Wesley teaches us cross-site scripting basics and, you know, shows us demonstrations, and Wesley, that's what I really appreciate about, you know, the videos that I do with you, and just correct me if I'm wrong, but I believe what we're gonna do is do some demonstrations of how a rat like you, Cross-Site Scripting Rat, can break into companies within five minutes, and you're gonna do demos, but you've also got systems that people can access. Is that right? - Exactly. I'll give you a link to put in the description, so if people wanna try this afterwards, you can learn how to hack in five minutes as well. - Just before we start, I wanna say this. Wesley and I discussed this, the labs that we're gonna demonstrate here. Wesley's using examples from the real world, but obviously, we can't use those examples in a YouTube video because YouTube will ban the video immediately and my channel, so what he's done, Wesley's built examples of the stuff that he's found in the real world, and you'll be able to, you know, see us doing it, but you'll also be able to test it yourself, so he's rebuilt his website so that we can actually see this in real time demonstrated, and then you can try it for yourself. I don't wanna... Let's go straight into a demo. I don't wanna keep you. Just for the audience, you know, put your comments below, the kind of stuff that you'd wanna see. Trying to get Wesley back quite often to do these kind of demonstrations. He does these fantastic demonstrations, and he builds these products that you can access afterwards, so Wesley, take it away. - Thank you very much, David. Yeah, exactly. I do a lot of types of testing, basically. Right now, I'm gonna demonstrate some web testing, and the whole gist of this is that I basically go to companies. I ask them, \"Can I test for an hour for free?\" And then I find, like, a very critical vulnerability, so they basically have no choice but to hire me. (chuckles) - Let me see if I get this right. You offer them, like, an hour's free consultancy. In five minutes or so, you find a hack, or 50 minutes, whatever, and then they're like, \"Okay, we need to pay you now.\" - Exactly, yeah, and sometimes it's a vulnerability scanner, but definitely not always. Right now, I'm gonna tell you guys a little bit of things that I focus on, so first of all, you guys might be seeing some CAPTCHA stuff on here. If you see that, and you can submit it, you can log in without entering that CAPTCHA. That's already a vulnerability in and of itself. That's a big one because those CAPTCHAs are used for things like credential stuffing where a attacker will use a known list of usernames and passwords they've gained from a different breach, and they'll try it on different websites. Now, that CAPTCHA is made to prevent people from spamming requests, but that is not a, that's not gonna stop anybody spamming requests if the CAPTCHA doesn't work. - So they use a script, basically, to try and do these automated logins. Is that right? And the CAPTCHA's supposed to stop them. - Exactly because, of course, these automated bots can't really solve these CAPTCHAs. Now, of course, there are services. We all know about these services where you can pay to solve CAPTCHAs. Sometimes it's automatic bots. Sometimes it's literally human farms that do nothing but solve CAPTCHAs all day, and you can buy them in bulk, so it's not a fool-proof solution, but it definitely helps to have it. - So you just found your first vulnerability in, like, 10 seconds or- - Yeah, this is definitely a big one. Always check if that even is checked because what developers will sometimes do is they'll implement that CAPTCHA, but they'll forget to implement the routine to check if your value is correct, or they'll implement it incorrectly, so you have a few things you can try there. You can leave the CAPTCHA empty, like I did, but whenever I send a request like this, then there's also a parameter for that CAPTCHA where the value which I type in is being sent, so I can leave it at empty, or I can completely leave the parameter off. Sometimes the servers won't check CAPTCHAs if there is no parameter CAPTCHA, so that's also a check that you can try there, so right now, I have a user account which has different settings, and as you can see, I have an e-mail address. Now, what I do, as a hacker, is I'm always gonna check the source code. Now, let me enlarge that a little bit for you guys. You can see here a CSRF token, cross-site request forgery. That's what that stands for. Let's say that I have this form right here where I can change my e-mail address. If I didn't have this token here, any attacker could copy the source code of this form, this complete form, this right here, he could copy it and send that over to my web server from his. Now, what does that all mean? I can be an attacker, and I can fool you. I can say, \"Click here to win a million dollars,\" and if you click it, that moment, a request is being sent from their web server to mine, and if you're logged into my web server, your e-mail address is gonna get changed. You might be wondering, \"Okay, so what is changing an e-mail address? \"What's the big pull? What's the big point here?\" Well, those e-mail addresses, they are tied to your account, of course. Password resets happen on that e-mail address, so the attacker can just trigger a password reset and do a full account takeover. That is why developers include this token. - Okay, so if the token's not there, I could be logging into Dropbox or somewhere. Then you, then I go to another page, and then I put some kind of information into that page, and then it cross-references that into Dropbox, and you get access to Dropbox, something like that, right? - Exactly, and the way they do that is because this, they're normally this token should be here. What this token is, is it's bound to my session. That means that whenever I log off, whenever I leave the website and come back for a while later, I get a new token, so I get a token right here. This is a randomly generated token that the attacker shouldn't be able to know. Normally, an attacker cannot access your tokens like this because they're session-bound. An attacker cannot attack your session. Now, they can grab it. They can try to grab from there through other means, but we'll talk about that later. The first vulnerabilities come into play when this token is being displayed in a form but not being checked properly by the server. There are different exploits here. I can leave my value empty. I can enter gibberish right here for the value, or I can try to fool it by leaving this complete parameter out, so just remove it completely, and that's a big vulnerability, of course. That's a huge one because now, if this goes through, that means that that token is not checked properly by the server, meaning that even if the attacker doesn't know that token, it's no big deal. He can still copy that code, make the request to Dropbox from his own website, so you go to winthelottery.com. You click on it, and a request gets sent to Dropbox to change your e-mail address. They reset your password, and there's literally nothing you can do because even the e-mail address doesn't work anymore, so you can't reset your own passwords. - So what you did there is you went and looked at the source code, and then you're checking if it accepts it if you make changes to the code, right? And that's the vulnerability 'cause you were able to do that. - That is a, exactly. That is how I know the vulnerability is there, but now I'm gonna go even further than this, and I'm just gonna completely clear my network tab, so as you can see, these developer tools are extremely useful for people like me. They're made for developers, but hackers are just people who use things differently than what they're intended for to be used for, so I can use this as well to make this request that I see right here, and I can see it immediately pop up. It is a POST request. The POST request means that all of my parameters will be in the body of my request, so you, in a request, you basically have all the headers, and you have the body. POST means that nothing is gonna be in the URL. If this is a GET request, my parameters will be in my URL right here. Now we can see it at the very bottom. We can see it in the payload right here. This is my parameters. This is what I pass onwards. - So Wesley, sorry, just I like to ask all the beginner questions. How did you get to this? So in Chrome, did you go into your menu or something to show this, right? - So all of this, I can just right-click and inspect, or I can view source code. Inspection is where I get to here, where I get to my developer tools, and I have bunch of useful tools in here, like, as you can see, I have a console right here where I can try things like call upon JavaScript functions. For example, if there would be a changeEmail function, I can try to test it for if I do cross-site scripting. Right now, I need my networking tab because if I make that request right here, I need that payload, and I need my data. Right now, I'm gonna go to a website called a CSRF log. Let's see, so there we go. Security.love, that's the website, and here I can basically try to play with that data I have a little bit, so I can know what my URL is because I have it right here. Literally says it. I can copy that over, and that is gonna go in here. Now, the data that I need is gonna be in the payload. That's gonna be in the body of my request, so I can copy this over, and I can paste it in here. Now, if I just erase this again for a second, you can see that it expects a very particular way of writing your parameters: value equals parameter and then an ampersand sign, so I'm gonna do that as well. I'm gonna put all of these parameters together. There we go, CSRF, and now that CSRF thingy, that is the token, so when I'm making this proof of concept, I want to put in the same exploit that I did on the website itself. For me, I completely removed that token, so I'm gonna do it in here as well. Now I have that e-mail address, so I'm gonna change that to attacker@gmail.com, and now I'm going to replace every single every single semicolon with an equal sign. There we go, and now I can generate my proof of concept, so this is an HTML page that I can basically put on my own website as an attacker. I have a server, winthelottery.com, and instead of all of this, I'm gonna mask this. I'm gonna removed all of this, so I'm gonna make it hidden, and then I'm going to make this button say, \"Click here to win a million dollars,\" and if I do that, there we go, now my e-mail address has been changed, so if this would have been Dropbox, I would've logged in or been logged in and clicked on the attacker's attack, then I would've had my e-mail address changed, and my account would be at great risk right now. - This is great, so I mean, let me just if I understand it. I'm on Dropbox. I'm logged into Dropbox. In your example, you logged into the Rat Pack Shop. You get them to go to another page, like win the lottery or something. They click on a button, and in the background it goes and rewrites that information using your active session on Dropbox, or, in this case, the Rat Pack Shop, and changes your e-mail address so that you, as the attacker, can get access to my Dropbox, right? - Exactly. These are things that I have actually experienced in real life. Of course, I can't show you these in a real target one because they're fixed to because of confidentiality, of course, but I've rebuilt them, basically. I just reconstruct them here, and people often say that CSRF tokens are dead, but I beg to differ. The exploits are still pretty impactful on this section. People think that these vulnerabilities don't exist anymore, but they definitely do exist quite a lot. They occur quite often, still, and mostly because technology is slow to adapt, meaning that even though new technologies prevent this, technology will still take a little bit before everybody takes it in, but also, security is one of the last things on a developer's mind, usually. There's a lot of things that go into budgeting, and security's often one of the things that comes into last place, so security testing, even that is often not done properly, meaning that these exploits do still occur quite often, just that a lot of my audience hasn't seen these yet because bug bounties don't have these anymore. A lot of hunters have come before us, a lot of pen testers, so these vulnerabilities usually don't exist within bug bounty platforms anymore, at least not as simple as this. - But I mean, what you've doing is different. You're going to organizations because let's be honest. The bug bounty programs only have a very, very small percentage of companies, but there's millions of companies out there, so you go to, like, smaller outfits or, like, localized places in Belgium or different countries, and then you can, you approach those companies, and you do this, and then you find stuff, right? - Exactly, yeah, and sometimes I have a bit of luck, and one of my followers introduces me to a bigger company, but I usually, when it comes to these kind of things, I look at what kind of value we can offer for the company, not just in these kinds of terms, but in every single sense of the word, so we all know that software is being developed a lot faster than it used to be. There's agile methodologies in software development that basically dictate a very short release cycle. Two months to two weeks is basically the release cycle of new software. That means that pen testing's gonna be much more important than it used to be, and especially, automation in that factor. - So you're like preempting the problem, saying, \"Look, I can do all this stuff, \"but now let me help you fix it,\" so you get a new client basically, right? - Exactly, and we go all the way. We help them literally implement the solution, if need be. We help them retest everything, everything that's needed, basically, because we think security should be implemented in the complete software development life cycle. Basically, this should have been caught. The vulnerabilities that I'm about to show you should have all been caught in code review phases, production phases where they were caught because it costs a lot more to fix a production software than it costs to fix something that's not in production yet. It doesn't have to go through all of these cycles of testing again, acceptance testing, deployment to production. If we can catch it earlier, it's always better. - So I'll say this just for everyone who's watching. If you're interested, I know Wesley provides a consulting services. I'll put a link below. Wesley provides training. I'll put a link below, so if you're interested in, like, getting his help, if you're a company, or if you are a pen tester and you wanna, or you're a aspiring pen tester and you wanna learn some stuff, I'll put his links below. Wesley, sorry, we went off on a tangent. Do you wanna continue with the demos? - Of course. My bad. Sorry about that. - No, no, no, no. It's great. I think it's important to highlight that it's a very clever way to get business because you're showing companies there's a problem 'cause otherwise, they don't believe you. It's much easier to show them, \"Look, I've broke into your system, \"and now let's help you sort it out.\" - Exactly, and always, always approach them as a cybersecurity professional, not as an ethical hacker or an attacker. That sounds scary. A professional sounds a lot better, of course. What attackers will often do is they'll find these vulnerabilities, harvest them, like, if you will, and then they'll abuse them when the time is ripe, when they can do the most damage, so that is, well, it's super-damaging. You'll often won't know about this. That's why I wanna warn everybody as well. Logging, monitoring, and alerting are one of the most important steps in cybersecurity, in my opinion. Detection, early detection is very important. Now, another thing that I can do, and this is gonna be a important one as well, everybody has probably come across something like this where they wanna register a message. It's being displayed back to them. As you can see, my message comes from the URL as well. Everybody knows about cross-site scripting by now. If you haven't, go watch our previous video. It's up on David's channel. It's brilliant, if you ask me. (chuckles) - (chuckles) No, just very good. Very good. - So this is protection against cross-site scripting. Basically, this is not protection against cross-site scripting. Now, we saw that I had a popup going on. I can do a lot of other things as well, very, very damaging things except besides just throwing a popup in here. For example, in the website itself, the website that I have, there is a function that we can call which changes the e-mail address, a JavaScript function which makes an XHR request, so I'll show you a little bit more about that as well because I think that is very interesting, so an XHR request looks like this. I'll talk a little bit more about that later because I think it's important to go a little bit more into the technical details, but that's how we're going to make requests, smuggle out data, and I basically wanted to show here that I can make a request to change my e-mail address as well. Instead of just a stupid popup, I can make a request that changes the e-mail address, having another account takeover. That's already two account takeovers, and how long have we been going? About 10 minutes? - Let me see if I understand this right. You're doing something in that box, that text box. That means if I come later, and I enter my details, it goes to you rather than to the company, something like that. Is that right? - Exactly, so what's happening right here is that you can see a popup appearing right now. Again, I'm entering some text in the box, which makes this here, my URL, get an extra parameter search term. That search term is reflected, Searching for, because it tells you what it's searching for. That's something you will often see on websites. A search bar is very common, especially on web shops, and they'll often display your own search term back to you, so a lot of companies are getting wiser to this, implementing protections that we'll see later, but a lot of companies are also not, and they still have cross-site scriptings like this possible. Now, if I enter that changed e-mail value in here, instead of onerror confirm, I can do changeEmail because changeEmail is a JavaScript function that I have, so I can, again, do changeEmail 'attacker@gmail.com', and right now, if I submit this, it's not gonna show me anything. You are no wiser. Nothing happened, according to you, but I'm gonna send you this link, and then, in your user settings, you're gonna find, again, attacker@gmail.com. I can just send you a link, change your e-mail address, and then, bam, I have your account again. Then we go to the next one. This is also a pretty very damaging one, in my opinion, so here we have protections against that. PHP developers, if you're watching, HTML entities is on. HTML entities will basically take these greater than signs, less than signs, transform them so they're no longer damaging, and they no longer actually reflect into the code of the page, but there's always a but. As you can see, I can still get a popup. This is what we call client-side template injection. Now, how would I look for this? \"How would I find this as a hacker,\" you might think. If I enter this attack string into every single field that I see, and I usually even put a dollar sign in front of it, make it like this. Sometimes I do it like this. Sometimes I have this attack query in here because there's different templating engines, and as you can see now, my seven times seven gets transformed into 49. That's because AngularJS is being used on the website, and AngularJS is a templating engine, basically meaning that we can put, for example, squirrelly bracket, squirrelly bracket, user, squirrelly bracket, squirrelly bracket, and this would say, \"Hello, Wesley,\" for example, instead of, \"Hello, squirrelly bracket, squirrelly bracket, user.\" This is something developers can use to make your websites more dynamic. They just write one template. They can deploy that template and fill in the values as they need to. That is what AngularJS can do. Now, the attack here comes, again, when I do that same thing, where I construct a attack factor. This attack factor, very technical. It's basically an AngularJS sandbox escape in here as well, so what this will do is it will trigger a normal alert even though every HTML entity thingy is being filtered out of here, and instead of that alert thing, I can again change my e-mail to attacker@gmail.com because of that JavaScript function, so changeEmail, and now that I have that JavaScript function typed out, if I do Register, nobody's gonna be any wiser from this. Oh, yeah, right, I made a little bit of a mistake here. I see I forgot my single quote, but it's the same thing. I can just put, copy it over, or just go back over it again, changeEmail address instead of my alert, and in this particular example, I'm gonna let you guys look for yourselves a little bit as well, and I'm gonna give you all of the details. This is still not gonna work. The astute of you will have already seen why. It's because I'm entering a special character here that I shouldn't be entering that's already in my attack string, but this is, again, a very, very damaging attack. I can just send this over to you, David, change your e-mail address to attacker@gmail.com, and bam, I have your account again, so that's three ways to take over your account very, very quickly. - Yeah, I'll just say this for people who are not quite sure what Wesley's doing here. In the previous video, we explained a lot of, like, what's happening and the reason why we do popups because it's just a proof of concept, but have a look at the previous video if you like, if you're struggling with the cross-site scripting basic stuff. This assumes some of that knowledge. Yeah, Wesley, it's crazy, man, that you can just do this so easily, so quickly. - This is also, what I'm doing here is cross-site scripting, basically, but I'm now triggering it through client-side template interaction, so there's a lot of crazy attacks going on out here. Now, I wanna show one more thing. These were all account takeovers, but I wonder how many of you guys have been paying attention when I was making that CSRF proof of concept because I had a special parameter in here, and I don't know how many of you guys saw that: isAdmin. I can change this value to 1. I wonder what happens if I do that, so let's submit that real quickly, so nothing's happening right now. Nothing's happening here. If I log in, nothing's happening, but that doesn't mean that it's not possible to make yourself administrator on this account. This is a what we call mass assignment, so I basically have this is administrator thingy in here, this parameter. I shouldn't be able to change it. I cannot change it like this. There are ways. I'm gonna let you guys fiddle around with it a little bit yourself as well. This is an attack that's super-common, not like this. You won't see the parameter printed, but if you have, like, you all know, probably, that a, when I make a call to my website, I make a request, and I get a response, and in the response, sometimes I can see which fields are available, so if I click Change My Settings, the response will say, \"Your e-mail address is this now. \"Your username is this now, blah-blah-blah.\" Sometimes it might also say, \"This administrator is 0,\" or, \"Account type equals normal,\" or something along those lines, and you should always try to copy that over from your response into your request. Now, I don't have that in here like this, so if I look at my response, you can see it's just a normal website, and here, I don't have anything about is administrator or anything. It's just saying your password is blah-blah-blah-blah-blah (indistinct). Right now, it's not with me in my response, but if it is, copy it over to your request. Change it over, and see if it does change like I just tried to demonstrate, but, of course, on my website, it's not that easy. I found vulnerabilities like this where I was able to change the account type from a cheap account type to a very expensive one, so you could just buy in as a cheap one and upgrade yourself. - How do small companies, like, or medium comp, small medium companies do this? I mean, how do they keep up? It's difficult. - Definitely, having developed a website myself for learning and things like that, I know that it's super-hard to keep everything secure, and these are just the more technical vulnerabilities. I'm not even bringing business logic into play yet. That's why I always offer, like, a free hour, and I tell them, \"Look, this is just your, \"all of the technical stuff I'm testing right here.\" Business logic is so important in that one. We have, in our website, a concept where you can buy my courses, where you can buy TryHackMe vouchers, Hack The Box vouchers. You can buy Merge from me, all with karma. You can earn karma through quizzes, through battling monsters, but there were a few vulnerabilities in there where somebody was able to exploit it and get, like, massive amounts of karma, and I'm a hacker myself. It was just a logic bug. - I think it's easier sometimes to attack than it is to create. I feel really bad for the developers. It's really hard 'cause they're creating something from nothing, and then they've got these crazy life cycles that they have to get stuff out so quickly, like you were saying, two weeks or whatever. It's really hard to make sure that it's all right. - Yeah, and often it's not even budgeted. That's one of the biggest problems. Security is one of the things that comes last because it's only important when it's too late, like you say, which is why I try to show them, \"Look how easy it can be before it's too late,\" so there's a lot more things right here which are very damaging. I don't know if I talked about this in an interview with you yet, but this is something which scammers use often, and it's called an open redirect. This is an awesome vulnerability because let's pretend for a second that I am not hacker or expert that come here, but I'm Facebook, or I'm google.com, and let's say that I have a website, attacker.com. Now, right now, I have a URL that redirects me to attacker.com. It's not really doing anything properly. It's not working like it should be, but if I go, like, HTTPS, and I add that in front of it, and I go attacker.com, I'm gonna get redirected to the attacker.com domain. Now, you might be wondering why is this so damaging? I'm gonna inspect this again, and as you can see right here, this is a form GET form, which means that GET form parameter and request from memory from before, so that means that the parameter can be in the request. Now, that means URL. This is the parameter. I can see that from just looking at the identifier. This is gonna get passed on as URL, and then I can add my URL in here, attacker.com. Now, I'm gonna send this off to you, David, so I'm just gonna send this over in a link, like this, and as you can see, I am sending you a link, and let's, again, pretend that I am google.com and not expert, so this looks like you're clicking on a link from google.com, right? - Yeah. Yep. - At first sight, it doesn't seem like anything bad's gonna happen right here, but if I own attacker.com, I am redirecting you to my website, which is gonna be a big problem because then looks legit. Everything looks okay. I can spoof an e-mail from Google. I can pretend to be an employee from Google, and I can say, \"Hey, David, can you please click this for me? \"There's a problem with your account.\" You click it, and then you'll redirect it to my Google, my version of google.com. I made a complete copy of that, and you log into my website, and suddenly I have your login data without you even realizing it because it looks like you clicked on a Google link. - That requires that the Google website does the redirect. Is that right? - Exactly. - But companies do that, so you're saying that companies actually have that on pages, and then you can manipulate that. - Yeah, it's not gonna be as obvious as it is right now. I literally say URL equals. What often will happen is that companies will redirect internally, so they'll redirect to their internal stuff, and then you can manipulate that a little bit, add an HTTPS to that. Yeah, this is redirection, and so it often happens that a website will redirect internally, and then you can manipulate it to go to the attacker.com website. - And again, this is stuff that you're finding out there in the wild, right? - Definitely, yeah. This is something that you, that a lot of people will miss because we check everything. Like, for example, we even check import of files. Sometimes there's URLs in importing of files. That can be a big problem as well, especially because secondary systems are often forgotten about by developers, and one thing I'm gonna add as well that is, might be a important addition to all of this right now. We've been trying to steal that CSRF token, change that e-mail address, stuff like that. One thing I forgot to add to that was that we can also steal a session token, so we have the PHP session ID right here. We had that CSRF token, which was bound to the session token, so that's gonna be a big one, but the session token itself is also gonna be very, very important. What I'm gonna do is I'm gonna log out right here, and I'm gonna open this same website in a incognito browser, and in my incognito browser, that way we can practice that a little bit more, I'm gonna open my developer console, and I'm gonna log in as myself. Gonna keep that networking tab open, and then I'm gonna log in, and now I can see that if I make a request to the page opener, for example, there we go, GoToPage, and I'm gonna add my headers right now, here we have a header, the Request Headers. I need cookie PHP session ID, so what I can do with my cross-site scripting is I can steal that session ID. I'll demonstrate it quickly as well. If I go back to my contacts, and I go and search for anything, and I'm gonna search for document.cookie, so this is gonna prompt up all of those cookies that we have in our browser. As you can see, we are going to see all of those cookies right now. If I steal that specific session ID, so I'm gonna do that right now, going to go back to the header so I can get that session ID, and I'm gonna paste that, so let's say that I'm a hacker. I've stolen this. I'm gonna go back to my normal browser, and in here, I'm gonna paste my session ID and my cookies. There we go. If I refresh my page now, suddenly I'm logged in as you, so just for stealing that specific cookie. Now, of course, any smart developer will know that that cookie, specifically, basically, any secret cookies or any cookies that are very sensitive, should have the HTTP-only flag enabled. That means that I can't grab it from my code. There's no possibility, basically. I really need to change the e-mail address there or steal, like, a CSRF token or something, so that's why it used to be the session ID that was very wanted. Right now, it's more of the JWT token, and we can see that as well. That's another vulnerability that we have, so we have a checker right here. This JWT token checker, may be wondering JWT, what the hell is that? - [David] Yeah, exactly. - JSON web tokens, basically, a method for authorization. Authorization means that I'm not logging in. That's authentication. Authorization means that, yes, you are Wesley. Yes, you are the person you're telling me that you are, so in this particular JWT token, these tokens will always consist of headers, a body, and a... So the body is the payload, and then the footer or the encryption. I can copy this. I can go to jwt.io, and there I can learn a little bit more about that structure. As you can see, the header is turned red right now. My payload is purple, and then I have a blue encryption as well. One change that I can make is I can change anything of this. For example, you can see isAdmin is True right now. I set that from False to True. The only problem is my key is not correct. This is not gonna be accepted by the website. If I go and check the JWT token, it's gonna say wrong key or token is expired, so that's an important one those keys. Sometimes they are leaked in the source code. Sometimes they are leaked on, like, a GitHub page. Sometimes they're leaked... They can be leaked in an infinite amount of places. If you ever see an encryption key for a JWT token, that is a big one because my encryption key is leaked right here. This is my key for my JWT token. It's in my cookies, and if I do copy that over now that I've changed it, I go back to my Rat site. Ooh, the token seems to have expired in this case. Sometimes these tokens do expire as well, so you need to take that into account. Going to go back to the headers, taking new token so it's definitely good. I'm gonna change that to True. Expiration is, by the way, this right here, which you can see, so this is valid until December 20th. This should work. Oh, apparently my website doesn't like that at this moment, so this lab- - But it can work, yeah, right? You've tested this, and it works, right? - Yeah, I'll have to look into the labs why it's not taking it right now, but it should accept the fact that I'm an administrator right now. - But that's crazy that you can just do that. It's mad. - Yeah, it's definitely something that people have to look out for. JWT tokens, if you ever are a developer, never leak that key. One tip I can give you there is if you're a developer, don't put anything sensitive into your repositories. Put it into your environment variables and grab it from the code there. That way, you can use things like key stores to store your keys safely, so yeah, there's a lot of specific vulnerabilities that can happen, especially if you look at cross-site scripting. That's a big one that we often find. If it's not cross-site scripting, CSTI because they're using outdated versions of, for example, Angular or Vue.js, any front-end templating engine. A server-side templating engine, we don't see that as often, server-side template injection, but it's also a thing. We are using client-side templates right now, which means that everything's rendered at my end right here on my browser, but it could also be rendered at the server end, which means that a lot more damaging vulnerabilities are possible, like remote code execution to fully take over a server. - Tell me if you're a small medium business, what would you recommend? WordPress or something else? What would you say? I mean, I would, it sounds like I wouldn't, we wouldn't advise a small medium business to try and write their own code for their own website unless they got someone, they pay a developer who knows what they're doing. - Yeah, and the problem with WordPress, as well, is that if you use the base installation of WordPress and keep it updated all of the time, that's gonna be a lot less risky than what a lot of people do, which is a ton of plug-ins, and usually, it's those plug-ins and Teams that are gonna be vulnerable and not the WordPress core itself. - So you, I mean, just like taking it back, you built a new website recently, and then I saw you tweet about it. You asked people to go after it, and they found vulnerabilities in your code even though you know all this stuff, and that's the thing, you know? It's so easy to miss something. - Yeah, definitely, like, all of these best practices are super-important. I missed a very stupid one. I have a test server, which is vulnerable. I knew that there were things stolen, like source code was leaked from there, and I just copied over the source code from my test server to my production server without realizing it. I didn't even change the JWT key, so it was still the same, and all of the Buzzard reset tokens were also still the same. I didn't even change them in my database, so all the old accounts could still be hacked with the previous SQL injection. - It just shows you, though, because you know what you're doing, and the thing is you get busy, and, like you said, there are a lot of deadlines and stuff, and you wanna get the product out the door, and that's when people make mistakes. It's easy to make mistakes. - Yeah, and, like, don't be too shy to use vulnerability scanners. Even if they, even if you don't really understand what they're saying, you can always use a vulnerability scanner. Have one of your tech guys do it, and see what they can make of it. If you don't understand it, call a pen tester if you think it's something important. You can always have them just glance over the report for a few hours, and that'll give you a lot more insight than if you don't do anything at all. - Have you got one that you'd recommend for someone who, like, just wants to test their website? - So Zap is a free one, OWASP Zap. If you use WordPress, WordPress scan, use that regularly, WPScan. The Burp Suite scanner is also a very good one. These are not expensive ones. The most expensive is Burp Suite at $400 a year. I'd rather pay $400 than get hacked, to be honest. - Exactly. Exactly. That's great. Wesley, any more examples? - There are a few more that I would like to show. - [David] That'd be great. - This is all for account takeovers, this website. That is the biggest function right here, but I also have another copy of the Rat site, and in this copy, I can turn on and off vulnerabilities as I please. It's just to test the people that want to work for me as well, so it might be that some vulnerabilities are active, some are not, so in this case, most of them will be active. Now, here, this is a very, very damaging one that a lot of people seem to forget. You might be wondering, \"What password did I just type in? \"Because it's asking me to check my saved passwords.\" Adminadmin. If you use any login page, adminadmin, testtest, admintest. Make it a habit. Just make it, like, a few seconds. It doesn't take long. Just test that. That is something that we find often. Also, default credentials. A lot of manufacturers will deliver software or hardware, like Plexdesk, I think it was, that has a hard-coded secret in it, but that secret has been leaked a long time ago, and I'm not sure it was Plexdesk, so don't quote me on that, but they also have their issues with those kind of things. It's really important that whenever you receive new hardware, receive new software, that you change any default passwords. Also, like, IP cameras. There's websites, entire websites dedicated to putting public IP cameras online. It's crazy, really crazy. Like, you can just go there, click on an IP camera, look inside people's homes. - That's mad. I mean, it's, again, I think, another big problems. Everyone's lives is run by technology these days. We're so reliant on technology, should I say, and yet a lot of people are not technical. They just get something, and they plug it in, and they think it's okay as long as it works. - Exactly, yeah, and it's normal, of course. We can't expect people to be responsible for their security to the fullest because that would require understanding all of these technologies to the fullest, which is impossible. I'm gonna be honest. I'm good at web API, mobile, but half of these technologies, I don't understand either. IoT, what's up with that? Insane. Crazy. I would love to get into that, but I just don't have the time for it. Like you say, everything's getting more and more connected, including our cars, which is gonna be a big factor in pen testing into the future as well, all of these cars. Every single one is turning into a computer. - You find that a lot of, well, I wouldn't say a lot, but do you find that people have default credentials, like adminadmin, and you can just log straight in, right? - Exactly, yeah, and especially even right now I'm just testing all of these credentials. Even if you cannot find any credentials, a lot of hackers will know what I'm talking about. Content discovery. Do that, so that means trying to directory brute force the website trying to find boot-up pages on the website, trying to find specific parameters. Why would you do that? Because I had a client one time. They wrote a custom login page. I brute-forced it. I found a search page. The search page was not protected by anything, so I could just search their entire system, and I found, like, records of 1,500 nurses, all of it: Social Security numbers, names, birth dates, phone numbers, yeah, and I didn't even look further after that. I am usually, when I find something, we stop. That's very important in our survey, I think, unless the client really wants to. Then we can move further, but it's always talking to the client first about that kind of stuff. - [David] That's great. Got another one on here? - Definitely. Much more. There's, like, 40 here, so I think you can have fun. I'm not gonna show all of them, of course. - Yeah, I think, I mean, people can access this afterwards, right? And they can try it out. We'll put the links below. - Definitely, here, right now, this one is not active, so this one could be an active one where you get cross-site scripting. Why is that not active? Because I have an admin page where I can activate them. Again there is, like, 40 different ones, so sometimes one might be active, sometimes not. That's what I mean, and what I want to simulate with this website. Every two week the vulnerabilities change because I want you to know that you can come back to this website and retest it. Even if you're saying methodology, you can find new things on here. - But Wesley, you need to tell me. Let's talk about this new website that you created. Is it, it's like a CTF-type of thing, is it? - Yeah, and indeed, that is true, so Hackerats is a, it's a combination of things that I think we're missing from our community, so there's basically a lot of features on here. I won't bore you guys to death with it, so I'll quickly glance over it, but if you log in, you're gonna see a lot less. What I wanna do is gamify you learning to hack. Right now, a lot of focus is being put on our campfire. This has a ton of monsters that you can fight. You can fight all of these monsters, and you can gain experience and karma, and again, karma, you can buy stuff with on our website, so it's not like you're fighting for nothing. You can go to the karma store, and you can buy one of our products here with karma. Literally go to the website. I'm not gonna buy it right now, but if you do, you'll find it in the notifications. I'm not gonna buy it because it immediately redirects me. Coupon will be visible, but you'll get a coupon code on Udemy, which you can literally go and spend and have a new course. - That's brilliant, so I mean, like, show us an example, like, the fighting thing. Is that, like, a simulation game type thing where I try and break into something, right? - Definitely, even more fun, I think, so this is the cheese monster. I have a current HP based on my experience level, and they have an HP level. They have a damage and defense as well, and they also have a different type, so every single type will have a different weakness to different vulnerabilities, like the web dev cheese is really, really vulnerable to questions like cross-site scripting, broken access control, OWASP Top 10. That's what web dev cheeses are vulnerable to, meaning you'll do double damage, 1.4 times damage. It'll depend. Now, if you answer wrongly, you can see that the monster fights you. You can lose a lot of damage, as much HP as you have. This one isn't gonna kill me, but I'll show you guys later. You can keep fighting them until you die, basically. Now, you can also answer correctly, of course. I would hope so. This one won't be correct, so this one, no. XSS can happen in many different contexts. Again, go check out our previous video if you're interested in that, but if I answer correctly, you can see that I've won. This cross-site scripting won't happen in the live version. Just so you guys know, we launch August 31st. If you register now, you get a special item that gives you 1.5 time experience and 1.5 times karma. Now, this cross-site scripting, again, won't be in here later with just that popup that you saw, but you can see that I've won, so now that I've won, by answering my questions, I can have an item in my inventory. I gain karma, I gain experience, and then I can go right back to my inventory as well, and I can see which items I've gained. There's a whole strategy that goes behind this because you have positive modifiers and negative modifiers. They'll give you either more or less karma, and that means that, of course, you can stack them as well, so what I would recommend is that some items will give you a big negative bonus, and some will give you a big positive bonus, to just stack them up as high as possible and then, like, get because all of these modifiers are only valid for 24 hours, so get as much karma in these 24 hours as possible, do it in a big burst, and then, buy the courses that you want do that. You can easily do that with these stacking features, so, for example, I have 20% experience modifier now. Can you use an item that gives me 10% more, so now I had 30% nextdoor experience when I'm fighting. - This website's free. Is that right? - Exactly. Not all of it, not fully free. All of this things I'm showing you guys right now are fully free, so you can make use of that. Every single monster's fightable. We just have a few things that are paid, but I'll go back to those later. - Yeah, I'll put a link below for anyone who's interested, so basically, this is a way for anyone who's watching to basically test their hacking skills and, like, play a game, if you like, so you've gamified it where you can either win points, which you can use to buy products, or if you make mistakes, or you don't answer it right, you actually lose, and you can lose all your money if you like kind of thing. - Yeah, you don't lose a lot of things right now. We're still balancing it out, but to a point, there will be P later on, which you'll fight each other at, and there you can lose all of your money if you're not careful. - That's nice, so you're making, like, a game, hacker against hacker, right? - Yep, right now, we will have monster fighting, but we can also, you can also solve quizzes, so if you're not into the monster fighting thing, you can literally solve quizzes, show a few hints if you would like, so you're not completely out of it alone, and then you can get points as well, so you don't have to do the fighting, or if you have, like, a lot of negative experience because you used items that give you negative experience boosters, you can get them back with quests before you start fighting again. All of your experience and karma that you gain is multiplied by the difficulty level, so you, if you get normally 50 karma, you'll get, like, 100 if you fight one that is too difficulty level, and you'll get, like, 1,000 if the difficulty level is 20. - That's brilliant, Wesley. I think we will put the links below, and I'll let the, tell the audience they can, you know, whoever's watching go and have a look. I know Wesley's developing this. He's been working at it for a long time. It looks great. - Thank you. It's been months, and this is just the start because we're planning a lot of things. We also, you can subscribe on this website. You will get access to a mentor Discord, or you can ask questions to 10 of our different mentors. We're going to build systems where you'll have to get specific gear to challenge the guild beast, like, if the guild beast is a database guild beast, you'll have to get SQL injection gear, meaning you'll have to grind SQL injection questions later on to be able to even fight that, to be able to even have a chance, so you'll have to learn things that you might not want to learn. You don't wanna let your guild down, of course, right? - What I really appreciate you doing, Wesley, and I'll just say this for the audience as well is you create a lot of these, you know, these free products, like, your website's got a lot of free tools that people can use, and it's interactive. Rather than reading about it in a book or in a webpage, you can actually go and try it out, which is brilliant. - Definitely. If you guys want, there's 150 labs available on hackxpert.com/labs. I'll send that link over to David as well, but this is over 150 labs that you can have fun in all day and night if you want. - Wesley, again, I just wanna say thanks so much, you know, for making so much freely available to help people learn, and really appreciate you sharing your time today, you know, teaching us for free, so thanks so much. - Thank you so much as well, and again, I hope to be back in the future. I really appreciate you hosting me. I always have good fun talking to you so. - Yeah, it's great, so for the audience, let's actually talk about that. For the audience, Wesley, we were thinking about, like, is it a phone, like, Android phone hacking? What kind of ideas are you thinking we should talk about? I think the big one was Web3 crypto-type hacking as well, right? - Yeah, so we have API hacking coming up still that is something that I think is very interesting because it has its own special set of vulnerabilities and tools. Then you have phone hacking that's also a very important one coming up. Web 3.0 hacking that is coming up very fast, so there's more than enough ideas in future. - Yeah, so for everyone watching, just give us your ideas. Put it below if there's anything you want Wesley to talk about. A lot of you have asked for crypto slash Web3 type stuff, so I've, Wesley and I have been discussing doing that, so that'll come up in a future video, but if you've got any other ideas, let us know. Wesley, thanks so much, man. - Thank you so much. Really appreciate it, David. (disturbing music)",
    "transcript_keywords": [
        "Wesley",
        "lot",
        "website",
        "email address",
        "CrossSite Scripting",
        "token",
        "things",
        "Yeah",
        "basically",
        "request",
        "change",
        "make",
        "email",
        "people",
        "JWT token",
        "thing",
        "address",
        "Scripting",
        "CrossSite",
        "put"
    ],
    "transcript_entity_values": [
        "YouTube",
        "a ton",
        "- Wesley",
        "these days",
        "three",
        "the Rat Pack Shop",
        "50 minutes",
        "CSRF",
        "Burp Suite",
        "XHR",
        "two",
        "second",
        "YouTube",
        "Google",
        "WordPress",
        "google.com",
        "15 minutes",
        "1.5",
        "About 10 minutes",
        "the Rat site",
        "hours",
        "Udemy",
        "document.cookie",
        "Discord",
        "1,000",
        "David Bombal",
        "POST",
        "an hour",
        "adminadmin",
        "20",
        "Adminadmin",
        "months",
        "August 31st",
        "PHP",
        "a free hour",
        "Buzzard",
        "10%",
        "Two months to two weeks",
        "Android",
        "49",
        "150",
        "API",
        "millions",
        "Hackerats",
        "10 seconds",
        "about 200,000",
        "today",
        "30%",
        "HP",
        "Register",
        "CTF",
        "Plexdesk",
        "one",
        "40",
        "HTML",
        "100",
        "these 24 hours",
        "five minutes",
        "all day",
        "hour",
        "first",
        "Hack The Box",
        "IoT",
        "a few hours",
        "1,500",
        "40",
        "400",
        "24 hours",
        "Social Security",
        "Belgium",
        "David",
        "IP",
        "WPScan",
        "SQL",
        "Dropbox",
        "20%",
        "1",
        "10",
        "OWASP",
        "half",
        "Every two week",
        "1.4",
        "TryHackMe",
        "seven",
        "Wesley",
        "Chrome",
        "secondary",
        "One",
        "CSTI",
        "a few seconds",
        "JWT",
        "isAdmin",
        "Facebook",
        "JavaScript",
        "HTTPS",
        "December 20th",
        "GitHub",
        "CAPTCHA",
        "two weeks",
        "a million dollars",
        "Cross-Site Scripting Rat",
        "50"
    ],
    "transcript_entity_types": [
        "GPE",
        "QUANTITY",
        "PERSON",
        "DATE",
        "CARDINAL",
        "ORG",
        "TIME",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "TIME",
        "CARDINAL",
        "TIME",
        "ORG",
        "TIME",
        "ORG",
        "ORG",
        "PERSON",
        "CARDINAL",
        "PERSON",
        "ORG",
        "TIME",
        "ORG",
        "CARDINAL",
        "PERSON",
        "DATE",
        "DATE",
        "ORG",
        "TIME",
        "ORG",
        "PERCENT",
        "DATE",
        "ORG",
        "DATE",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "EVENT",
        "TIME",
        "CARDINAL",
        "DATE",
        "PERCENT",
        "ORG",
        "PERSON",
        "PRODUCT",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "TIME",
        "TIME",
        "DATE",
        "TIME",
        "ORDINAL",
        "ORG",
        "ORG",
        "TIME",
        "CARDINAL",
        "DATE",
        "MONEY",
        "TIME",
        "ORG",
        "GPE",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PERCENT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "GPE",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "TIME",
        "ORG",
        "PERSON",
        "PERSON",
        "PRODUCT",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "DATE",
        "MONEY",
        "ORG",
        "CARDINAL"
    ]
}