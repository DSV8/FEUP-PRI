{
    "id": "OVwJ5EMTSK0",
    "title": "2023 Path to Master Programmer (for free)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2023-01-04T15:01:00Z",
    "video_url": "https://www.youtube.com/watch?v=OVwJ5EMTSK0",
    "category": "People & Blogs",
    "tags": [
        "python",
        "dr chuck",
        "dr chuck python",
        "dr chuck python course",
        "learn to code",
        "software development",
        "software developer",
        "computer science",
        "software engineer",
        "software engineering",
        "how to learn programming",
        "free python course",
        "free python course online",
        "free python class",
        "free python tutorial",
        "free python training",
        "how to learn to code",
        "learn to code python",
        "coding bootcamp",
        "Python",
        "Django",
        "SQL",
        "PostgreSQL",
        "PHP",
        "MySQL",
        "jQuery",
        "CSS",
        "php",
        "mysql",
        "jquery",
        "css",
        "django",
        "postgresql"
    ],
    "views": 588126,
    "likes": 23879,
    "comments_count": 607,
    "description": "This is your FREE path to becoming a master programmer! Use the links below to learn Python, C, Django, PostgreSQL and web programming for free! :)  // Menu // 00:00 - Intro 01:24 - Dr Chuck's Courses 02:24 - Path to Master Programmer 07:00 - Path to Master Programmer Languages 10:41 - How to Get the Courses 14:24 - How Python Changed the World 15:42 - Do You Need a Degree? 18:01 - Financial Aid 19:39 - Conclusion  // Previous video // Computer Science isn't programming:  Best programming language ever:    // C for Everybody Course // Free C Programming Course  Free course on YouTube:    // C book Audio by Dr Chuck //   // Python for Everybody // Python for Everybody:  Python for Everybody on Coursera:  YouTube:  Free Python Book:  Dr Chuck's Website:  Free Python Book options:    // Django for Everybody // Django for Everybody:  Django for Everybody for on Coursera:  YouTube:    // PostgreSQL for Everybody //  PostgreSQL for Everybody:  PostgreSQL for Everybody on Coursera:  YouTube:    // Web Applications for Everybody // YouTube:  Web Applications for Everybody:  Web Applications for Everybody on Coursera:  YouTube:    // Books // The C Programming Language by Brian Kernighan and Dennis Ritchie (the 1984 Second Ed and 1978 First Ed):   // MY STUFF //    // SOCIAL // Discord:  Twitter:  Instagram:  LinkedIn:  Facebook:  TikTok:  YouTube:    // Dr Chuck Social // Website:  Twitter:  YouTube:  Coursera:   c rust c vs rust c course free c course Python  #python #javascript #drchuck",
    "description_links": [
        "https://youtu.be/z3o6yEzcnLc",
        "https://youtu.be/aQ_XTBmCXS8",
        "https://www.cc4e.com/",
        "https://www.youtube.com/watch?v=XteaWkvontg",
        "https://www.cc4e.com/podcast",
        "https://www.py4e.com/",
        "https://www.coursera.org/specializations/python",
        "https://youtu.be/8DvywoWv6fI",
        "http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf",
        "https://www.dr-chuck.com/",
        "https://www.py4e.com/book",
        "https://www.dj4e.com/",
        "https://www.coursera.org/specializations/django",
        "https://youtu.be/o0XbHvKxw7Y",
        "https://www.pg4e.com/",
        "https://www.coursera.org/specializations/postgresql-for-everybody",
        "https://www.youtube.com/watch?v=flRUuodVPq0",
        "https://youtu.be/xr6uZDRTna0",
        "https://www.wa4e.com/",
        "https://www.coursera.org/specializations/web-applications",
        "https://www.youtube.com/watch?v=tuXySrvw8TE",
        "https://amzn.to/3G0HSkU",
        "https://www.amazon.com/shop/davidbombal",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://www.dr-chuck.com/",
        "https://twitter.com/drchuck/",
        "https://www.youtube.com/user/csev",
        "https://www.coursera.org/instructor/drchuck"
    ],
    "transcript": "- And I'm gonna make it all free. It has to be free. $100 is a high bar for 90% of the people in the world, and if I can't make this in a way that I can touch 100% of the people in the world, I'd consider myself a failure at that point. We as engineers, it's just in our DNA to make ourselves obsolete. If I do a good enough job, I won't be necessary, 'cause I will have created something that others can use and adopt. - It's 2023 now. If I wanted to get into programming, your recommendation would be master programmer courses and path that you've created, right? - Right. I would say that the quickest path from not being a programmer at all to being an employable programmer is this path to the master programmer. 'Cause you can get a job, go and get an undergrad in Computer Science, and that is four years of your life, 60 hours a week. What I'm saying is, with the path to the master programmer, I've eliminated as much of that as I possibly can and I'm making better use of your time, so you can have a job, you can support your family, and in a few hours a week, nights and weekends, you can in a couple of years, be employable as a really high grade professional programmer. (upbeat music) - Hey everyone, it's David Bombal, back with Dr. Chuck. Dr. Chuck, welcome. - It's good to be back. - It's great to have you here. It's 2023, what I want to try and give people, in the beginning of the year is sort of a path. If they wanna become a programmer or interested in becoming a programmer, you're the right person for all of us to listen to. What do you recommend is the path for me to become, and I love the term that you used in our previous interviews, Master Programmer? - Well, I own the domain www.masterprogrammer.com, so that should probably do it, right there. It just redirects to another domain right now. What I've done is, I have been doing MOOCs on Coursera and edX and free online copies of all those things since 2012. I've been teaching people and I just sort of, I finish one course and then I make another one. But, and so what I do is I tend to have a set of courses, and I've got four out there on Coursera right now and I'm working on my fifth and it's gonna take me two years to make my fifth, but this course is turning out to be lovely. First four courses are Python, Django, PHP, and PostgreSQL. Those are kind of like just learning to program a little bit and then C is my next course, and then hardware architecture and Java will be my, Java will be my capstone when it's all said and done. And Java will overlap with internships, right? So the first half of Java is like, what's the language? And the second half is like, let's go to work because I really have just getting stronger and stronger with the notion that the only way you really learn to program is to work. And this all comes from my teaching at the University of Michigan School of Information where I'm teaching programming concepts not pure programmers. And I got to the point where I got four MOOCs, all very successful, all doing very well, all well received by the students. People would ask me, when I would go talk to them, 'cause one of the things I do, is I go talk to my students and get feedback. They would ask me and they would say, so how do I get a job? And I'm like, well you gotta, I have a whole like spiel. I wrote a Quora article on how to get a job, but inside myself, I'm like asking myself, like, how come I don't hire you, right? If you've taken all my courses, why wouldn't I hire you? And so, so that bothered me. It bothered me that students were taking all my courses and they weren't ready for me to hire them, and I, then that led me to understand like, what's missing? What would I have to add to the current courses that I have, so that I'd be ready to hire somebody? And so the path master programmer is the, and I'm not talking about four years, I'm talking like what is the quickest way to go from \"I kind of get programming\" to \"Chuck wants to hire you.\" And so the path to the master programmer is really based on kind of a skilled trades. How you become a plumber or a heating and cooling person, and the extent to which you sort of learn some stuff, but just enough so you can start going to work and be mentored by masters, right? And that's why I called it the path to master programmer. And the problem with mentoring is that I don't mind mentoring people, but they've gotta have a certain level of base skills. There's a difference between mentoring and tutoring. I mean, if I could spend eight hours a day with a person who doesn't know anything and slowly but surely teach 'em what a variable was, that is not a good use of my time, but if I can mentor someone and I have an example of an employee right now, who like, for about a month and a half, I was mentoring this person and then for the last four months, this person was smarter, is smarter than me already, right? I mean, he is young, highly motivated and like, I just watch him go, right? And we check in, how you doing? - He's from India, right? - He's from India, right, and he came to me through Python for Everybody, And I, he's my employee now, and my first employee in India, and I've learned a lot about doing that, and I will probably have to go to India, to meet his family at some point. That's kind of a Indian thing, basically said my mom said you have to come, so you have to come. Like, no one disagrees with my mom, and that's kind of a Indian culture kind of thing, and he'll, he'll say that at some point and I'll be like, okay, I get it. Your mom said I have to come and visit her and so I'll have to come. I just have to fly to India because your mom said, 'cause that that just is how that culture works, and I love the Indian culture. I love the, I love the focus on family and the focus on simple, joyful thing. So, basically the path to the master programmer is my engineering of how I can create a queue of people that I wanna hire, right? How I can go out and I can say, oh I need four more people, here they are. And so, in that I'm being a proxy for what I think of as the whole employment market, right? If I'm not gonna hire somebody, right, then I don't think you're ready to go to work anywhere else, right? And so the, the key to the master programmer is getting to the point where you are worth paying money in a paid internship. So, it doesn't mean that you're making six or seven figures, it just means that someone is gonna hire you for an internship, mentor you, not consider themselves wasting time talking to you, meaning that they're gonna get more back from talking to you than they're gonna put in, and that they're gonna pay you, and you're going to be seen as a value to them, which is gonna motivate them to do more internships, right? So, if every company can get pre-qualified interns that are useful and inexpensive and all they gotta do is talk to 'em for a few hours every week, that scales. I think that scales wonderfully, and so the path to the master programmer is how to create a credential in a way that says ready for internship, right? Ready to be hired, again, skilled trades. Like you can be an apprentice plumber and you still can do a lot of plumbing, right? You're, you know, you might not be a master plumber, and so that's the apprentice, right? You got like apprentice, journeyman, master. That's the skilled trades progression and so the masters are the mentors and the journeymen are the people who are sort of emerging and becoming the next generation of masters, and the apprentices are the people who are reading books, and studying and doing little simple things like, you know, here's two pieces of pipe, sit by yourself at a table and just solder 'em together and then throw that away, and then solder another thing together and throw that away, and then pretty soon you know how to solder pipe. and then we're gonna take you to a house and we're gonna actually start fixing some plumbing, but you're gonna be watched over by the master plumber who says, okay, wait, wait, no, no, no, you gotta do that. You gotta wipe it afterwards, da da da da. And then pretty soon that person is the master and it's a self-sustaining process to grow. Grow the overall people who are in the employment marketplace as programmers. That's, that's the goal. Just the same way we need plumbers, we need programmers. - Last time you, you spoke about the courses and you've mentioned them again, but just remind me, the path, if I want to become a master programmer, is Python number one, right? - Python number one, Django number two. Now, the interesting thing is, it's not because I'm trying to teach people full-stack web development. The reason I teach Django is that by the time you finish my Django class you have done enough Python, so Python is second nature. It's more of a using a programming language, but the other thing that's interesting is in the Django class, I also teach JavaScript, and I teach object-oriented Python in the Django class, and I teach object-oriented JavaScript, and I do compare and contrast. And so that Django class is really a study in object-oriented programming, which, you can tell I'm kind of obsessed with object-oriented programming, is how the professionals build code is through object-oriented programming. So Python, Django, PHP, and you might say why PHP? Well, I love PHP. It's crude, it's effective, it's used by a lot of simple things, WordPress, all over the place, and it performs great because it doesn't have the garbage collection problem, right? It doesn't have garbage collection problems in the same way. But the other thing about PHP, is it's leading us towards C, because PHP is really a C based language, syntax-wise. JavaScript is a C based language, syntax-wise. And so I'm trying to, by teaching you PHP, I'm both teaching you the kind of raw nature of the HTTP request-response cycle, and how you can code straight to that stuff without having a bunch of frameworks in the way. Django has a bunch of frameworks, which is fine, but then let's do it without a framework. Let's just talk to the browser. I'm gonna write a bit of code, it's gonna talk to a browser. Browser gonna talk to me, I'm gonna talk to it. PHP is like the simplest, most pure, just let's talk about the HHTP protocol, which is more about networking than it is about programming, right? So, you're teaching about what networking is and how web services work and you have to debug it at such a low and crazy, nasty level, and so that's where PHP is. And then SQL data modeling is really, really important. And so just understanding data and how data works and I talked about that. Speedy joins and really good relational databases is, other than the internet itself, is probably, and Linux, is probably the greatest computer science problem that's been solved in all of computer science history, is how to make relational databases work. And so I just like, at some point, let's take little time, and let's just talk about SQL without talking about it in the context of any kind of programming language or web, et cetera. And that's the first four, and those are the ones that I looked at and I said that's not enough, right? And that's where the rest of the path to the master programmer starting with C, hardware, assembly language, and Java kind of came out and maybe Rust and maybe Amazon right after that, so. - I was gonna, I was gonna say, what about Rust? Okay, so it's Python, Django, PHP, SQL, C, hardware assembly, Java and then, maybe, hopefully Rust and AWS. - Yeah. So the other thing about the PHP class is it's also an SQL class, because we're not using an ORM, although interestingly when we come back to Java, we're gonna be using ORM, so it's like, what is an ORM? But not just like, here's to use an ORM, like it's a Ruby on Rails bootcamp. No, you're gonna use an ORM in one class, and you're not gonna use an ORM in another class and then you're gonna take an SQL class and then you're using an ORM in another class, which means that you're not afraid of what the ORM does. And you're gonna know the object relational mapping technology like in JPA, Java persistence architecture. So again, it, it just it's the word object is the through narrative of it all, 'cause at the end I want you to just be the master of object oriented programming, which if you'd asked me years ago how important that was I would've, I taught classes from other people's syllabuses and on week seven, we talk about object orientation and then week eight, we talk about other stuff and never mention it again, and now here I am, building an entire curriculum whose sole learning objective is for you to be the master of the concept of object oriented programming. - So, in previous videos, which I've linked below, you've explained the master programmer concept in a lot of detail, but can you just give us an overview of the path, like how do I get these courses? Are they available for free? Where do I get them? And sort of what are the, what's the steps to get there? - My primary outlet for course material is Coursera and edX, right? I love Coursera and edX because they're like channels, right? They promote my stuff and they gather money and they share that money with me and the University of Michigan. But just because I'm a free, open source, creative commons kind of person, even though those cost money, I also put all my material up on a wide open website, py4e.com, dj4e.com, wa4e.com, pg4r.com, cc4e.com and all of that is my complete course with auto graders. There's nothing held back and all of that is 100% free, and deployed in a way that can plug into any learning management system on the planet. So, if you're a school, I'm a publisher. So, what I do is I first build a class as if I were a publisher with not just the book but all the ancillary materials and videos, auto graders, PowerPoints, and I give you all, I give the teachers a kit to teach this all this material for every course I produce, all of it under Creative Commons and with software that integrates it automatically into Canvas, Moodle, Blackboard, Desire2Learn, Sakai, and so what I'm also trying to do is create an adoptable curriculum. Like I am going to be the Pearson of programming, all by myself, and I'm gonna make it all free, and it has to be free. It has to be free because we can't just reach people who can afford even $100 for a course. That is an out outrageously high bar for let's just say 90% of the people in the world. $100 is a high bar for 90% of the people in the world, and if I can't make this in a way that I can touch 100% of the people in the world, and not just me be the teacher, but empower other teachers to be teachers, I'd consider myself a failure at that point. If, I mean, we as engineers, we wanna make ourselves obsolete. It's just in our DNA to make ourselves obsolete. To make it so, you know, if I do a good enough job, I won't be necessary, 'cause I will have created something that others can use and adopt. And that's how you scale to millions of programmers. I can't teach each one. I gotta, I gotta give my stuff away and teach teachers and then hope those teachers like, take where I go and just go run with it. - That's fantastic. So, you've sold me how do I, how do I join? So, what, what do I do? So, I'm interested, where do I go? - Yeah. For, I mean for me, I say start in Coursera, or at pythonforeverybody.com, py4e.com and I'm not done with it, right? I've got three more classes to do before I'm ready to hire you. I've got four classes done, and so I would say for people to start now at the beginning and so basically I, I don't have the path done yet but I think for a number of people, especially if they're going part-time, it's gonna take them long enough to get the first half of the path and then maybe in a year or so I'll have the next step. And so the idea is, I think, if people start now and start walking their way through the apprenticeship part of the path, which is the first four course specializations that I have on Coursera, then maybe I'll have the fifth, sixth and seventh things in a reasonable shape in a year or so. And so that, that's, that's my idea. I wish I could make it happen faster, but for me the way I craft a course, I think obsessively about how to fit it all together. I don't just like knock these things out. I create the course, I teach them, I listen to my students, I iterate the course and it just is not a fast process. And so I hope that when it's all said and done, that that level of craftsmanship in creating a curriculum that is smooth and fits all together will hold students' attention and get them from the beginning all the way to the end without losing them. - I love it. I mean it's amazing how Python has changed the world really, and it's great to hear that that's the first course. I'm sorry you wanted to say something? - No, no. I mean you're totally right. At times I'm critical of, of computer science degrees and the curriculum that has been evolved over the last 50 years to be computer science degrees, but at the same time that curriculum in those degrees, 20 years ago, were the only path and that was pre-Python, and what's happened is things like Python and Django have made it it so that you don't actually have to take the hard path to get to the end. It's kind of like climbing up a mountain and then they put like a road up and then you just like take a train up. You could climb up the mountain or you go like to Switzerland, there's a cog railway. So, you can either go to the top of the mountain, climbing, rappelling and like carabiners and stuff, or you can pay five bucks and sit and drink some coffee in a railway and you're at the top of the same mountain. The key thing is Python is the cog railway. Python is the thing that makes it so that you can still see the beauty of the top of the mountain without spilling your coffee. and so what I'm trying to say is it's time to build a cog railway to get from nothing to programmer. Even though I acknowledge that 20 years ago the only way to get to programmer was to climb the hard way. You know, just climb, you know, one little rock at a time and fall down right? And, and get bruised and stuff. It's not like that's wrong, it's just now that's not the only path. - I love that, I mean just for everyone who's watching, I've put a link below to our previous interview, where we had a long discussion about the master programmer and the, a discussion about degrees. But Dr. Chuck, perhaps you can just give us like a quick overview. Do I need to get a degree to become a programmer? - I do not think you need a degree to become a programmer. And frankly, if I was truly in charge of the entire universe and I could just fix all these things right away and just tell people what to do and they would do it, which is not gonna happen, what I would basically say is that I would actually rebuild computer science. I would change computer science and what I would basically, I would restructure how to learn to program which I'm going to do. And then what I would do after that, is I would change computer science to start with a basic entry condition that you're a darn good programmer, you're a very good programmer. You've been working for three years as a programmer. and because I taught it to you in high school, which is my dream is to teach it in high school. You've been working for three years as a professional program and you're 22 years old right now, or maybe 21 years old. You've been working for three years as a professional programmer making 60,000 bucks a year and now you wanna learn computer science. Think of how I could teach computer science, all the advanced theory of why databases are fast or why network, of a theory that underlies networking that makes networking fast. I can teach all that stuff, but I know you're a programmer. I don't have to teach you programming. I can just use your programming skill to teach you the underpinnings of the nature of computing and you actually know something about computing but you don't know the theory that underpins it all, and so I think of like the right computer science degree is frankly a master's degree in the, in something that assumes that you're a great programmer before you start. And if I could change the world, that's what I would do, is I would make computer science not kind of like a undergraduate degree, I would make it a graduate degree, but then I would make it so that you're a great programmer and now you really, really, really want to know what's going on and let's do computer science that way. - Dr. Chuck, before we wrap this up, I wanna say thank you so much for, you know, giving a path and making a road, if you like, for people who, you know, don't have a trust fund and people from around the world. So, I really appreciate you doing that and making it freely available. So, for everyone who's watching, you can use the links below. I've put links below where you can go and sign up for the courses for free. Just a note about Coursera, if you go to Coursera you can do an audit of a course where you don't have to pay. We had some comments about that on previous, our previous videos so you can get all the content for free. Dr. Chuck, I wanna give you the floor. Anything you wanna say before we wrap this up? - Yeah, the one thing that Coursera does ask you to pay is that if you to do the assessments, and I unfortunately think that assessments are essential because I'm a big believer in formative assessments, not summative assessments. And formative assessments are not high stakes, and so formative assessments are where you're actually doing an assessment and learning. And so Coursera hides that behind a paywall, whereas my free courses show all the assessments, and give that for free. And then Coursera. - On your website, right? Sorry. - Yeah, and Coursera of course gives very, they're very good about financial aid and they have been very generous and I've not heard any data that suggests that Coursera is not generous with financial aid. The only thing I would caution is that if you take Coursera's financial aid, you should be ready to apply yourself because Coursera doesn't like you to take financial aid then drop out, then take financial aid and then drop out and then take financial aid and drop out. They're like, oh wait a second, we gave you financial aid. Right? So, so for those of you thinking financial aid is the panacea and it is and 'cause Coursera is, I believe, committed to those, to supporting and helping those get certificates for those that have economic challenges, but understand, like any financial aid, you are expected to work, right? Financial aid is just not free. The quid pro quo in a financial aid situation, and that's true in higher education, et cetera, in United States, and that is if you just take financial aid and drop out you lose your financial aid, right? And so you just, if you're taking financial aid, you should be ready to commit, but if you really just want to take your time, my websites give you everything. I don't hide anything and they're all for free. - That's fantastic. Again, I really wanna thank you for sharing, you know and changing the industry. I really appreciate you doing it, thanks. - Thank you. (upbeat music)",
    "transcript_keywords": [
        "master programmer",
        "programmer",
        "master",
        "Coursera",
        "people",
        "path",
        "Computer Science",
        "financial aid",
        "Python",
        "PHP",
        "Django",
        "make",
        "path master programmer",
        "teach",
        "free",
        "thing",
        "years",
        "programming",
        "aid",
        "financial"
    ],
    "transcript_entity_values": [
        "Linux",
        "three",
        "Creative Commons",
        "Java",
        "Blackboard",
        "ORM",
        "four",
        "two",
        "second",
        "100",
        "WordPress",
        "seventh",
        "Python",
        "HTTP",
        "edX",
        "United States",
        "Sakai",
        "week seven",
        "David Bombal",
        "the last 50 years",
        "a couple of years",
        "PowerPoints",
        "the University of Michigan School of Information",
        "Computer Science",
        "PHP",
        "a second",
        "edX",
        "quid",
        "Django",
        "millions",
        "Quora",
        "India",
        "Coursera",
        "60 hours",
        "a year or",
        "one",
        "a Ruby on Rails",
        "three years",
        "a year or so",
        "two years",
        "first",
        "a few hours",
        "the beginning of the year",
        "Chuck",
        "eight hours",
        "90%",
        "AWS",
        "Pearson",
        "Canvas",
        "21 years old",
        "SQL",
        "the last four months",
        "Switzerland",
        "pre-Python",
        "about a month and a half",
        "22 years old",
        "da da da da",
        "fifth",
        "First",
        "Python for Everybody",
        "Moodle",
        "2012",
        "2023",
        "six",
        "JPA",
        "five bucks",
        "HHTP",
        "half",
        "sixth",
        "seven",
        "20 years ago",
        "four years",
        "the University of Michigan",
        "the second half",
        "100%",
        "60,000 bucks",
        "years ago",
        "Indian",
        "JavaScript",
        "Amazon",
        "the first half",
        "Coursera"
    ],
    "transcript_entity_types": [
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "GPE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "MONEY",
        "ORG",
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "GPE",
        "ORG",
        "DATE",
        "PERSON",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "TIME",
        "GPE",
        "CARDINAL",
        "PERSON",
        "CARDINAL",
        "ORG",
        "GPE",
        "ORG",
        "TIME",
        "DATE",
        "CARDINAL",
        "WORK_OF_ART",
        "DATE",
        "DATE",
        "DATE",
        "ORDINAL",
        "TIME",
        "DATE",
        "PERSON",
        "TIME",
        "PERCENT",
        "ORG",
        "PRODUCT",
        "WORK_OF_ART",
        "DATE",
        "ORG",
        "DATE",
        "GPE",
        "PRODUCT",
        "DATE",
        "DATE",
        "PERSON",
        "ORDINAL",
        "ORDINAL",
        "WORK_OF_ART",
        "GPE",
        "DATE",
        "DATE",
        "CARDINAL",
        "ORG",
        "MONEY",
        "EVENT",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "DATE",
        "ORG",
        "DATE",
        "PERCENT",
        "MONEY",
        "DATE",
        "NORP",
        "PRODUCT",
        "PERSON",
        "DATE",
        "PERSON"
    ]
}