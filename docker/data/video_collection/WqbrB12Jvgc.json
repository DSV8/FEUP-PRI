{
    "id": "WqbrB12Jvgc",
    "title": "Free Web Hacking Course",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-10-23T14:00:16Z",
    "video_url": "https://www.youtube.com/watch?v=WqbrB12Jvgc",
    "category": "People & Blogs",
    "tags": [
        "web hacking",
        "free web hacking",
        "free web hacking course",
        "web",
        "web hacking course",
        "web hacking tutorial",
        "owasp",
        "owasp top 10",
        "broken access control",
        "http",
        "https",
        "website",
        "web hacking full course",
        "web hacking pro tips",
        "web hacking book",
        "ssl",
        "ca",
        "password",
        "cookie",
        "session hijack",
        "session hijacking",
        "xss",
        "cross site scripting",
        "kali linux",
        "portswigger",
        "jscript",
        "javascript",
        "xss attack",
        "bug bounty",
        "jquery",
        "node js",
        "node js hacking",
        "ajax",
        "xss bug bounty",
        "xss video tutorial",
        "sql injection"
    ],
    "views": 236944,
    "likes": 8979,
    "comments_count": 381,
    "description": "Get Proton VPN for free:  or get Proton Mail here:   Free Web Hacking Course:   50% OFF Web Security Academy Course Code:DavidBombal500FF Academy:   8 hour SQL Injection playlist:   In this video Rana explains and demonstrates Broken Access Control which is number 1 on the OWASP top 10:   // MENU // 00:00 - Intro 00:25 - Ads 01:38 - Opening 02:36 - Broken Access Control 05:04 - Authentication 06:11 - Session Management 10:31 - Access Control 12:16 - Types of Access Control 18:19 - Broken Access Control Vulnerabilities 23:00 - Rana's Channel 25:03 - Types of Broken Access Control 30:12 - Lab Exercise 1 39:52 - Vertical Privilege Escalation 43:19 - Lab Exercise 2 48:47 - Access Control Vulnerabilities in Multi-Step Processes 51:12 - Lab Exercise 3 59:21 - Prevention 01:04:46 - Rana's Platforms 01:07:43 - Outro  // Labs used in the video // Lab #1: Lab #2: Lab #3:  // Rana's SOCIAL //  Twitter:  Academy:  Youtube Channel:  Medium Blog:  Rana Intigriti Interview:   // David's SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  YouTube Shorts Channel:  Apple Podcast:  Spotify Podcast:   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  web web hacking web hacking course web hacking tutorial xss owasp owasp top 10 broken access control http https website web hacking full course web hacking pro tips web hacking book xss cross site scripting portswigger ajax jscript javascript xss attack xss video tutorial xss attack tutorial xss explained xss attack example xss bug bounty xss tutorial xss vulnerability xss vs csrf attack xss example xsser xsssa facebook xsssa kali linux penetration testing ethical hacking bug bounty cross site scripting cross-site scripting red teaming cyber security kali linux install kali linux 2022 ethical hacker course ethical hacker javascript ajax jquery node js node js hacking portswigger  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   Disclaimer: This video is for educational purposes only.   #hack #webhacking #course",
    "description_links": [
        "https://go.getproton.me/SHWN",
        "https://go.getproton.me/SHWO",
        "https://www.youtube.com/c/RanaKhalil101",
        "https://academy.ranakhalil.com/",
        "https://www.youtube.com/watch?v=1nJgupaUPEQ",
        "https://owasp.org/www-project-top-ten/",
        "https://portswigger.net/web-security/access-control/lab-user-id-controlled-by-request-parameter",
        "https://portswigger.net/web-security/access-control/lab-user-role-controlled-by-request-parameter",
        "https://portswigger.net/web-security/access-control/lab-multi-step-process-with-no-access-control-on-one-step",
        "https://twitter.com/rana__khalil",
        "https://academy.ranakhalil.com/",
        "https://www.youtube.com/c/RanaKhalil101",
        "https://ranakhalil101.medium.com/",
        "https://www.youtube.com/watch?v=stXkOBZsNYo",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://www.youtube.com/channel/UCEyCubIF0e8MYi1jkgVepKg",
        "https://davidbombal.wiki/applepodcast",
        "https://open.spotify.com/show/3f6k6gERfuriI96efWWLQQ",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "- Yeah, so I shouldn't be able to take money out of your bank account. It should only be outta my bank account type thing, right? - And it prompts you with confirmation page asking you if you really wanna delete that user. So you need to confirm that you wanna delete that user. You click on yes and you confirm. And so it allows you to successfully delete that user. (upbeat music) - It's really interesting when I read books such as this, \"How to Hack like a Ghost\" written by a hacker or a book like this, \"Extreme Privacy\", written by privacy advocate. When I interview hackers or privacy advocates or OSINT Open Source Intelligence experts, their answers in these books, their answers in interviews is often ProtonVPN and ProtonMail. I've really shied away from creating an advert, recommending a VPN provider because of all the dodgy information and dubious claims that I've seen online. A VPN isn't a catchall solution for privacy, isn't a catchall solution for security. It can help increase your privacy by stopping your ISP or others from sniffing your traffic. If you are security minded or privacy minded, you probably don't just want to use a open WiFi network without a VPN or some kind of extra level of protection. Governments are mandating that ISPs and a lot of countries snoop on your traffic. Okay, so I really wanna thank ProtonVPN for sponsoring this video. Based on the interviews that I've had with a whole range of experts, based on fantastic books like these, I've come to the conclusion that I can recommend Proton VPN and ProtonMail if you are privacy or security focused. Hey everyone, it's David Bombal back with a very special guest, Rana, welcome. - Hi everyone. Thanks for having me, David. - It's great to have you here. So, just for everyone who hasn't seen Rana's YouTube channel, it's a fantastic channel. I'll link it below. Rana also has a course, and I really wanna say thank you, Rana. You're giving us a 50% discount for anyone who signs up using the link below, just for everyone. I am not getting an affiliate fee or anything, this is just a special. Rana, thanks so much for doing that, giving you as the audience a 50% discount. If you wanna sign up for course. If you don't want the course, that's fine. Go and have a look at videos, fantastic videos, a whole course on YouTube. Rana, really appreciate you sharing your knowledge on YouTube and with the community and coming and sharing it with us today. - Thank you. And again, thank you for having me here. I appreciate being able to speak about this topic in front of your audience. - So let's get technical, so for everyone watching, this is gonna be a fantastic video because we've got a presentation and we've got demos. Rana, what are we gonna be covering? - Okay, so we're gonna be covering a topic called broken access control. And it's actually the number one most critical security risk facing web applications today. So what I did before this interview is I asked on Twitter and on LinkedIn and on YouTube, pretty much all my social media platforms, and I asked the audience to pick a specific topic that they'd like me to cover on your channel. And there was a tie between a few topics and one of them was broken access control. And I was really, really glad to see that that's the topic that was in the list. Because again, it's the number one most critical security risk facing web applications today. And so we're gonna cover that. We're gonna go through some terminology to have some fundamental knowledge about the topic first, and then we'll look at hands on experience by covering a few labs. And then we'll look at how to remediate access control vulnerabilities. - I love that. So for those of you who are watching who understand the basics, I've put a menu below. So if you just wanna jump straight to the labs, then just use the link below to go to the specific part of the video. But Rana, you're gonna take us on this journey, right? From like very little knowledge to the actual attacks and then how to fix them, right? - Absolutely. - Brilliant. So take it away. - All right, let's start talking about broken access control. Now, before we cover that topic, I usually like to go through some terminology. So like David mentioned, I have an academy, I have a YouTube channel, I do trainings and so on. And so I get to interact with a lot of software developers and a lot of people that want to learn how to exploit vulnerabilities like this one. And I found out that usually people tend to have a misunderstanding on certain concepts, or at least they use them interchangeably when they're very different. And so the first thing that we're gonna do is cover the fundamentals. And then after we're done with that, we're ready to actually go into understanding the technical details behind broken access control vulnerabilities and then how to exploit them. And the terminology that I really wanted to cover are essentially three concepts. The first one is authentication, the second one is session management, and the third one is access control. Again, people tend to use those terms or mechanisms interchangeably, but they couldn't be any different. And understanding the difference between them will help you understand how to exploit broken access control vulnerabilities. So we'll start off with authentication and then we'll move on to the rest. So authentication is the mechanism that is used to identify the user and confirm that they say who they say they are. So let's take an example. We've got Alice right over here and she needs to log into an application. Now Alice needs a way to confirm that she is who she says she is to this application right over here. And the way that's done and it's different per application, but this is the classic way that you see in most applications, and that's through form based authentication where it asks for the username and the password. So all Alice has to do is put in her username and password. - Terrible example that admin- - Exactly. - Sorry, sorry. - Yeah, no, no, no. Alice is not very security conscious. And so her password is the same thing as her username. Essentially, that's all that authentication is. It's just a mechanism that is used in order to prove to the application that you are who you are. And it can be done in many ways, but the classic way of doing it is using form-based authentication. Now, once you've authenticated to the application, let's say you wanna visit the my profile page or the my accounts page or any other authenticated page in the application, if it wasn't for a mechanism called session management, what you would have to do is you would need to put in your username and password every time you visit a page in the application. So let's say you go to that, my profile page, you would have to put in admin, admin as your username and password before you access that page. And then maybe you wanna go to that my accounts page, again, you would have to put in your username and password in order to access that page. And that becomes like really cumbersome and annoying for the user to do. And that's why applications have something called session management and it's essentially just a mechanism that identifies the HTTP requests that are being made by each user. So it's a way to manage your session in the application. And the way that works- - Sorry, I was just gonna say, is that a cookie? I dunno if I'm jumping the gun. - Yes, so it is a cookie. The way that works is essentially the application generates a unique token that is tied to your user ID. And that unique token can be passed in multiple forms. But again, the most classic way of doing it is through a cookie that gets saved in your cookie jar in your browser. So you could see over here the cookie is called session and it's a unique random number that is tied to your user ID and it gets saved in the cookie jar in your browser. And the way that works is that that session cookie gets passed with every request that you make to the application. So it essentially works as a short lived password. And that's why it's extremely important that you keep this cookie a secret just like you keep your password a secret and there's certain configuration that you could do on that cookie in order to ensure that it doesn't get stolen. Just like you don't want your password to get stolen. But that's a whole other topic on its own. So that's how session management works, and that really leads us to the topic of the day, which is access control. - So every time I go to a new page on that application, the cookie is sent from the client to the server, right? - Yes, that's correct. - And that's how this server authenticates me because there's no like session state between the client and the server, but the cookie is how the server knows it's me. Like you said, like a password rather than putting the password in every time, correct? - Exactly. - [David] Right. - So it's stateless and that's why you need a session token that authenticates you every time you visit an authenticated page. And again, you don't wanna put in your username and password every time. And that's why session management was essentially invented in order to make sure that once you've authenticated the first time around, now you have a cookie, hopefully it's short-lived if it's configured correctly, but you have a cookie that is stored in your browser until you log out or until it expires, that when you visit that specific domain in the application that this cookie is valid for, it will get passed with every, in each request. And when the application gets that, it'll check the cookie, it'll check if it's a valid cookie, it'll check who it's assigned to, and then it'll know that, hey, Alice is accessing so and so page. - It seems to be a major problem recently with like YouTube channels getting hacked and people breaking to websites by stealing cookies or session tokens and stuff. So thanks for covering this. - Absolutely. Most people don't understand how things work under the hood and especially when it comes to client side vulnerabilities like cross site scripting vulnerabilities, people don't understand why that could be a big deal that you could inject client side code because essentially you're only stealing what is available on the client side. But if this cookie is configured incorrectly and client side code could access that cookie, then essentially I've become you on the application. All I have to do is set my cookie in the browser, which is something that is extremely easy to do and you'll see us doing it in the labs, but something again, very extremely easy to do and all of a sudden I have access to your account. So that's again, how session management works. Now, when it comes to access control, access control mechanisms are mechanisms that are used to determine whether the user is allowed to carry out the action that they're attempting to perform or attempting to carry out. So essentially let's say I want to perform a banking transaction. So what I'm going to do is I'm going to go to my profile page, which the application will let me do, because again, I have a valid session token right over here, and then I'm going to try and send money to my friend. Now when I hit the send button to send money to my friend, but what happen in the back end is that the session token gets sent with my request in the backend it'll check which user ID the session token is valid for. Once it identifies that it's for the Alice user ID, it'll check in its database if the Alice user ID is assigned any roles or any access control rules in the database. And if it is, it'll determine whether I have a permission to send money to my friend or not. So if I do have permission, so I have a certain role that allows me to send money or trans or perform transactions, it'll let me do it. And if I do not have that specific role in order to perform transactions, then it'll give me an access denied message. And that's essentially how access control at a high level overview works. - I've seen these terms horizontal, vertical like privilege escalation type stuff. But basically like if I'm just a normal user, I shouldn't be able to access an administrator page and access control should enforce that, right? - Exactly, yes. So that's what we're gonna cover next, which are the different types of access control. And this is exactly the example that you just mentioned. So the first type of access control is vertical access control. And this type of access control is used to restrict access to functions that are not available to other users in the application. So think of an admin user and the regular user, a regular user should not be able to perform actions that an admin user is able to perform. So let's say an admin user is able to delete all the users in the application. Me as a regular user who self signed up into an application, so use the self sign up of an application should not be able to access the endpoint that allows me to delete any user in the application. Because that should be limited to an administrator user. And that's what vertical access control rules do, is they prevent or they restrict access to these endpoints to ensure that a regular user is not allowed to perform privileged functionality. - So a vertical is like, I'm getting higher levels of privilege kind of thing, right? - Exactly. So think of it, you're moving up the ladder when it comes to your privileges. The next type of access control is horizontal access control. And this type of access control restricts different users of the same privilege from accessing similar resources. So again, let's take an example. Think you've got two regular users. Let's say this guy's name is Bob and this guy's name is James. Now Bob should be able to access his own data. So his own my profile page, his own account, he should be able to send transactions on behalf of his account. However, Bob should not be able to perform that action on behalf of the other user, which is James in this scenario over here. And vice versa, so James should not be able to perform actions on behalf of another user of the system. And that's why with the first one, when you were comparing a regular user and an administrator, it was called vertical access control 'cause like you said, it's kind of like you're moving up the ladder in terms of privileges, whereas with horizontal access control, you're not moving up the ladder, you already have that privilege to perform this specific functionality. You just only have that privilege for your own data or your own account. You don't have it for another user's account, but when you're able to do it for another user's account, that's when you've found issues, so security issues with the horizontal access control rules that are implemented in the application. - Yeah, so I shouldn't be able to take money out of your bank account, should only be outta my bank account type thing, right? - Exactly, yes. So the action of taking money is something that any regular user could do. However, the horizontal access controls, what they prevent is any user from being able to access any other user's account and take out money. And then the third and last type of access control is called context dependent access control. And this type of access control is used to restrict access to functionality and resources based on the state of the application or the user's interaction with it. So let's take an example. Imagine you have a multi-step process for deleting users. The first step is you gotta click on this delete button right over here. So if you wanna delete the Carlos user, and what that does is it generates a request, so the slash confirm request, and it prompts you with confirmation page asking you if you really wanna delete that user. So you need to confirm that you wanna delete that user or click on no if you don't wanna delete that user. So that's step number one in the application. In step number two, what you do is you click on yes and you confirm that you wanna delete the user. And so it allows you to successfully delete that user. So in this case, the application has several contexts or several states, and that's why this is called context dependent access control. Essentially, you shouldn't be able to go all the way from step number one right over here all the way to deleting a user without confirming that the user should be deleted. And so this is what this type of access control does, is it ensures that you have to follow the exact business logic rules that are implemented in the application in order to perform a certain set of actions. Now if there are, again, issues with certain steps, so if a developer assumes that you can only get to step number two from step number one and only implements access control rules on step number one, but not step number two, then that's where we have vulnerabilities getting introduced because the developer thought that you shouldn't be able to get to step number two without first going through step number one. - Yeah, so the context of what we are doing determines the control or the access we get, right? - Exactly. That's correct. And another example of that that might even more make more sense is a retail website. Let's say you put items in your shopping bag and then you gotta confirm your shopping bag and then you confirm the payment so you actually pay for the items in your shopping bag. Again, there's context dependent access control in that flow to ensure that you actually follow all these steps because if there wasn't, what an attack or even a regular user can do is they could put an item that is only worth $1 in their bag and then they would confirm the payment, pay for it and so on, and then they would go back to their shopping bag that has already been confirmed and then put $100,000 worth of items in there. And since it's already confirmed, it's gonna get shipped to you because the application says you've paid for it and you're done. So if there's no access control between these different states, you're gonna run into a lot of issues. - Wow, yeah, it's a good, I like that example. - And that leads us to the topic of this presentation, which is broken access control vulnerabilities. So broken access control vulnerabilities arise when users can act outside of their intended permissions. So again, for example, a regular user being able to perform admin functionality or a regular user being able to perform actions on behalf of other regular users. Now the impact of broken access control vulnerabilities really depends on the type of access control vulnerability that you find in the application. So some of them could lead to things like sensitive information disclosure, whereas others could lead to unauthorized access, again, with the example of a regular user being able to access admin functionality. And then there's also modification or destruction of data. So if you're familiar with that CIA triad which stands for confidentiality, integrity and availability when it comes to access control, it could affect any one of them or even all of them at a high level. So the impact could be very severe depending on the type of access control vulnerability that you find. - I mean, your example of like being able to get a shopping cart with $1 and then you buy $100,000, I mean, that's crazy if someone managed to do that. - Yeah, absolutely. And I know a friend his wife did that with coupons. - Oh, wow! - So she was able to confirm a coupon, yes, and after she's confirmed it to go back and add another coupon and was able to get her order for free. Of course they fixed it when they noticed it, that means they have correct logging in place. But they did notice that she did that. And my friend is a hacker and so he was like, you can't do this because they're gonna think I'm doing an attack on the system. If it was a regular user, it's fine, but you're married to a hacker. - That's funny. Yeah, I mean it's amazing. It's so nice to talk to people like yourself who you can explain this because I know there's some people watching this who are developers and I think it's really important that you highlight this for the developer people as well, not just for the people who are into ethical hacking, because I think sometimes developers forget about this or they don't realize the consequences of what they're doing. So yeah, I really appreciate you highlighting this kind of stuff. - Thank you. And yes, so one of my main roles at work is developer education. So I run secure coding trainings and this is like the number one thing that gets covered in my secure coding training. Of course, we go through code in that type of training, which is not what we're gonna do today. - Anyone who's watching, please put in the comments below. Do you want Rana to come back and do code, like get into the dev side more than just like the hacking side, please put it below, let us know what what you want. Yeah, definitely Rana, it'd be nice to get you back, for me personally, to see some of the coding examples as well. - I would love to come back. - Oh, right. - So yeah, absolutely. So personally for me, I always like to relate it back to applications that have tested and I've tested a ton of applications in the past four or five years or so. That's how long I've been in the field. And I always find access control vulnerabilities in literally every application that I've tested. And usually when I find those vulnerabilities, they usually are rated a high or a critical severity rating. And that shouldn't come as a surprise because Broken Access Control has actually been determined to be the number one most critical security risk facing web applications today. So for those of you that might not be familiar with the OWASP top 10, it's essentially a list of the most critical security risks facing web applications. It's updated every couple of years. So this one over here is the most latest one, which is the 2021 list. But Access Control was actually on the 2017 list as well. And it moved up in severity in the 2021 list. And the way this type of list is collected is a ton of interviews happen. And a ton of data gets taken into consideration from applications that have been tested in the past year. And then depending on that data and the interviews with professionals in this field, they determine which vulnerabilities have been more likely to be found in applications and which vulnerabilities have a bigger impact. So a bigger higher criticality when it comes to the impact if it were to be exploited. And it was determined that broken access control is number one, and that's why I was really happy that the audience selected this amongst other topics and that I got a chance to cover it. - You've got a lot of the other topics covered on your YouTube channel, haven't you? - A portion of them. So we've got service side requests forgery covered, we've got several different types of injection covered. I believe we might have some authentication ones covered. But that's it. We're working on covering everything on my channel, but we'll get there. - No, that's great. So just for the audience, I mean, if you enjoying this thing, go and have a look at Rana's channel because there's a lot of stuff there, a lot of training just like this. So, if you're interested in like some of the others gonna have a look there. - So with this, we kind of have let's say an hour or so on. So you can't cover everything. But one of the things that I made it a point in my channel that I don't wanna ever sacrifice in the future is that we cover a topic in as much detail as possible. And so you'll see the SQL injection module, which falls under A3, so injection under the top 10 is actually eight hours long. So yeah, so it starts off with teaching you, if you've never seen SQL injection attacks, it starts off with teaching you how SQL injection works. And then we do a bunch of labs and with each lab, the difficulty level increases and you get to experience multiple how to exploit SQL injection on multiple databases. So not just one, my goal is to get you like from zero to hero in a specific topic. And that's not something that I feel like I would ever sacrifice on my channel. And hopefully with a broken access control module, which is coming out soon it'll be the same. - So, I mean, you giving us a taste of it, but like you go into crazy depth on your channel. Yeah, that's great. - Absolutely, this is gonna be like a six hour kind of. - Wow! Wow! - Yeah. - I mean for the audience, I mean this is what I love about interviewing people like Rana is I want to let you know about free content or low cost content that you can access elsewhere. And Rana's got fantastic content on the channel. I mean, eight hours of SQL injection is fantastic. I mean that's a whole course in itself. So yeah, brilliant. - So just like there's three different types of access control, there's also three different types of broken access control and the first one is horizontal privilege escalation. So horizontal privilege escalation occurs when an attacker gains access to resources belonging to another user of the same privilege. So let's take an example. You've got a web application, again, it's a banking site that anyone can sign up to when you open up a banking account and Alice is one of their users, she authenticated to the application using her credentials, and then once she authenticated, she wants to visit, let's say my accounts page right over here, which is displayed on the screen, when she clicks on the my accounts page. This is the request that gets generated. And you could see over here in the request it has the ID that is assigned to Alice. Now David, I'm gonna ask you a question. What do you think is the issue with the way this is implemented? - Well, I'm assuming that like my account ID could be changed to like four, five, six or something. And then that could be someone else's account that Alice would be able to access. - And if the application has its access control rules dependent on this client side input, then I'm able to access Alice's account. I'm also able to access pretty much anyone else's account on the system. And this is something that is by the way, really easy to do. There are tools out there that do this, but essentially you just brute force between one and a million and then whatever comes up with a 200 okay response, that is probably a valid my accounts page, anything that comes up with a 404 or like an internal error response or an unauthorized response or anything like that, that means you couldn't access that page. So this way with my brute force attack, which is truly takes like minutes, I'm able to brute force the accounts of all the users on the system. - I mean, in the real world. Are you finding that this is still happening a lot? I mean, I'm assuming this kind of stuff still happens. - Oh, 100%. It's not as easy as a parameter in the URL. I don't see that quite often. However the way I see it is the form based access control or hidden parameters in the source code. So essentially you would click on a send button or whatever and then something that identifies the user gets passed in the request. You don't see it in the browser, but it gets passed if you intercept the request. And then from there, if you're able to change it or you're able to brute force or guess what that value is, then you're able to bypass access controls. - Do you find that developers make the mistake of thinking, security by obscurity, so you're not gonna find it 'cause I'm hiding it and that's a mistake they often make? - Absolutely. And this is actually a funny case, I've seen developers encode it because apparently I can't decode stuff. So they would encode the idea and this way it looks random to a normal person, right? But you could really easily determine that it's encoded and then you could really easily decode it. So I've seen that. And more extreme cases I've seen developers roll out their own version of crypto, which is really just encoding done multiple times, and we were able to reverse it. It took two days, but we were able to reverse it. And then we were able to gain access to a bunch of information because of that. - I think they make the mistake that the attack isn't a normal user. They might assume it's a normal user, but if it's someone like you or someone else who knows what they're doing, that's not gonna stand up. It's not gonna save the application. So again, it's always nice to hear the real world stuff versus the slides. So I mean, like one, two, three is like too obvious, but it's nice to hear what you've done in the real world. - Yeah, absolutely. And I'll try my best to come up with examples as well for the other portions. Because again, I see this in like literally every application that I've tested. Sometimes it's not, again, parameters that are in the source code or parameters in the URL. Sometimes it's certain access control rules that are not implemented on certain methods. So for example, the access control rule is implemented on the gap method, but they've forgotten it on the pop method or on the post method and so on. So when it comes to testing this stuff, you really wanna automate this type of testing. And that's not actually something that we're covering today 'cause I wanna go through the manual process first to make sure that everyone understands how to do that before we talk about automation. But it can get really tedious depending on how many roles are in an application or how the application manages access control. So if it's feature based, it can even get more tedious making sure that you test exactly every parameter and you test exactly every role and so on in an application. All right, so let's go through a lab exercise to kind of gain some hands on experience with this type of vulnerability and realize how easy it is to exploit this type of vulnerability. So the exercises are available on the Web Security Academy. Essentially that's a free platform that is provided by Portswigger, the same organization that created Burp Suite. Also the same guy who wrote the \"Web Application Hackers Handbook\". So if you go to my YouTube channel, you'll see that the whole inspiration of starting these videos is because I love the \"Web Application Hackers handbook\". It's the book, that I first started learning from when it comes to the web security field. However, I found out that their labs have been expired and they're no longer supporting them. So I couldn't gain some hands on experience and like exploiting the vulnerabilities that the book was teaching me. And so I went online and lo and behold, I saw that they actually started an academy, which they constantly update. And honestly, it's one of the most amazing resources, free or paid. It's the most one of the amazing resources that I've found and that's why I specifically picked it when it comes to my YouTube channel. Like a lot of thought went into which platform I wanna cover, this is the platform that I chose. The fact that it's free was one of the main factors as well. Other than the fact labs are just amazing. I could have a Burp shirt, which I should buy one, I would buy one. That's how much I like that organization. So if you do not have an account on the Web Security Academy, you can get one by visiting the URL portswigger.net/websecurity and clicking on the signup button, I already have an account and I am logged in. So what I'm gonna do is, I'm gonna take the URL for the lab, which will put in the description of the video, and I'm gonna paste it right over here. And here we go. All right, so let's look at the description of the lab. This lab has a horizontal privilege escalation vulnerability on the user account page. To solve the lab, obtain the API key for the user carlos, and submit it as a solution, you can log into your own account using the following credentials. So another thing that I like about this platform is that it teaches you to kind of pen test the same way that real world pen testing is. And when it comes to real world with application pen testing it's usually gray box. And what that means is that you're given certain information about the application before you test it. And that type of information is usually in the form of accounts to the application. So you're usually given two accounts of each privileged level and then you could use those accounts in order to determine if there are any access control vulnerabilities in the application. And that's how this lab is structured. So it gives you a regular account and then it tells you try to access other accounts in the application using that regular account. So to access the lab, I'm gonna right click and open it in a new tab. Okay, and it loaded. So you'll notice over here, I'm using the built in Chrome browser in Burp. And what that means is that essentially all the requests I perform in this browser will get sent to my proxy, and then from there they'll get sent to my application. And then any responses from the application will first go through my proxy and then they'll get sent to my browser. So essentially Burp is just in the middle proxy that intercepts the requests and responses that are going between my browser and my application. And the reason that's really important is because it allows me to see things that you wouldn't see in the UI of the browser. It also allows me to alter certain parameters that I wouldn't otherwise at least not easily be able to alter in the browser. And it also allows me to bypass certain client side validation. So we're gonna be using that in order to exploit certain vulnerabilities in the labs. So if you go to http history, you could see these are all the requests that are being performed in my browser. So I'm gonna click on my account and you can see over here that's on my account page. And then you've got the login page and we're gonna log in with the credentials that you were given. So the password was Peter, log in and we've logged into the regular user account. Now this is not an access control vulnerability, but this is a, definitely a vulnerability, the fact that the API key is stored in the source code in the UI. So the reason that's a vulnerability is because, again, we talked about client side vulnerabilities, like cross site scripting vulnerabilities, which I know is a video that is covered on David's channel by the XSS Rat. Those types of vulnerabilities allow you to extract information from the client side. Most of the time you wanna extract cookies because it allows you to become the user. However, when you have something as interesting that is definitely something that as an attacker I wanna extract so that I could use that key in order to access further functionality. So it should definitely not be stored in the UI in any form, whether it's encrypted or hashed or in plain text, but we've diverted a little bit. Now when it comes to the broken access control vulnerability I'm gonna click on my account and analyze the request that is being performed. So I'm gonna right click and click on send to Repeater and look at the request right over here. So notice over here the my account page takes in an ID parameter and the ID is just the user ID of the account that you're currently at. So if you click send right over here and you search on your username, we'll see over here we're accessing the my account page for this user over here. Now if the application trust this input, so client side input and determines access control rules based on this input, then we should be able to access Carlos's user account by simply putting the user ID for Carlos. I'm gonna click on send right over here and search the page over here. And here we go. - [David] Wow! - We access my accounts page of the Carlos user. So to complete the lab, I'm gonna copy the API key, click on submit solution, put it in here and hit okay. It says, Congratulations, you solved the lab. So the main issue right over here is, and I'm gonna say this probably a million times during this presentation, I wish I could get like a dollar every time I say this, I'd be really rich. But the main reason that this is an issue is because the client is using client supplied input. So input that is coming from the client in order to determine access control decisions. So in order to perform access control decisions. Now this is the root cause of probably 90% of the vulnerabilities in web applications. So most of the OS top 10 vulnerabilities are there because at one point in time the application decided to trust what's coming from the client side and have it integrated in the server side. And so anything that is coming from the client should be considered untrusted, potentially harmful and completely dangerous, and it should definitely not be used in order to determine access control rules or decisions. - I'm glad you said that because the number one complaint I get on YouTube videos is this will never happen. It's too easy or it's too dumb. But you say, this happens so often, that means it still happens, right? - Yeah, it happens so often to the point that I think it was number four in 2017, or number three, I can't remember. And it got bumped up to number one. And again, it might seem like a simple case, yes, probably applications right now don't use the user ID in order to determine access control. This is a simple case just to get you kind of started and get some experience before covering like harder cases. However, these types of access control issues exist in almost every application. Sometimes they're at the API level, whereas other times again it's a method. So over here, the gap method might have access control rules implemented on it, but because the developer doesn't have a functionality in the UI for the post method, they wouldn't think that an a user would try to perform a post on this specific endpoint because it's not readily available to you in the UI. And so access control rules get missed on that one. Similarly, it could be like a parameter in the request. Again, I find it in pretty much every application, it's just a matter of understanding. So spending quite some time, and this is the number one advice I give to web app pen tester, is that don't automatically like run a scanner or don't automatically try to break the application. What you need to do is first map the application. So understand exactly how the application functions, all the business logic in the application, all the parameters that could potentially be talking to the backend. Once you've done that, you could really determine exactly where those vulnerabilities could potentially exist if access control rules have been implemented incorrectly. And that goes for really testing for any type of vulnerability that that portion of mapping the application, although it takes time initially, it'll save you time on the long run when it comes to testing your application. All right, so that's lab number one. Let's go back to the presentation to cover the next type of access control. The second type of broken access control is called vertical privilege escalation. So vertical privilege escalation occurs when an attacker gains access to privileged functionality that they're not permitted to access. So again, instead of you being able to perform functionality that you can perform on your own data or on your account, in this case, what you're doing is your performing functionality that only a privileged user can perform or someone more privileged than you in terms of access can perform like an administrator user. So let's take an example. Again, you've got an administrator and an attacker and a web application. So in this web application, the attacker who used, let's say the self signup functionality can log in and the attacker is able to see his own account and so on. However, the application also allows admin users to log in and access an admin panel. Now, once the administrator logs in again, really silly example, but we've seen examples of that in the real world where it's not a URL parameter, but it's a hidden parameter in a field that determines whether you should be an administrator or not. And so over here what happens is when you log in, it sees that your user ID in the backend is assigned administrator access. And so the way it tries to control that across your other requests is using this parameter right over here and it sets it to true because your user ID is assigned administrator role in the backend. Now, again, David, do you wanna tell me why you think that might be an issue? - Yeah, I mean, an attacker could just say, admin equal to true, either in the URL, which is a simple example, but I'm glad you highlighted the the real world that it could be somewhere else. - Exactly. So all the attacker has to do is log into the application, change the admin parameter, which would be set to false because the attacker is not assigned admin privileges. But if the application relies on client side input in order to perform access control decisions then the attacker, all he has to do is set it to true. And all of a sudden the application assumes that the attacker is actually an administrator user. And so the attacker is able to access the admin panel. And this is why you put such an emphasis, should I say on the website, should never trust anything from the user, right? - Exactly. 100% anything coming from the client side. Again, this is why I should be rich, anything coming from the client side should never be trusted. And again, this is not just for broken access control vulnerabilities, even like injection vulnerabilities. So the SQL injection module that is covered on my YouTube channel, the whole problem with that is that, so you trust the user to not put in a dash or to not put in a single quote or try not to extract certain information from the database that they shouldn't extract and so on. So you should never trust any user supplied input. There should always be certain code in the backend that determines the access control rules or that mitigates the risk of taking content from the client's side just like we do with SQL injection. So with SQL injection, it's okay if you put in a single quote or if you put in anything because in the backend it will literally view that as a string versus viewing that as part of the code if it's coded correctly. All right, so let's move on to the next lab exercise, which is the user role is controlled by a request parameter. Okay, so again, we're gonna be using the Web Security Academy platform in order to perform this exercise. I'm gonna close this one right over here and I'm gonna paste the link. The link will be added in the description of the video. So if we go back to proxy right over here. All right, and we look at the description of the lab. So it says, this lab has an admin panel at slash admin, which identifies administrators using a forageable cookie, solve the lab by accessing the admin panel and using it to delete the user Carlos, you can log into your own account using the following credentials. And again, I've already highlighted this, but the reason I like this platform is because it models a real web app pen test. So in a real web app pen test what you would do is you would have access to certain accounts and then from there, you learn the functionality that this account has and then the functionality that this account has. And then you try to perform the functionality for account number one with account number two or account number two with account number one to see if there's any access control vulnerabilities. And that's what we're gonna do right now. So we're given a regular account and we're gonna try to become an administrator user. So we're going to try to escalate our privileges and access the admin functionality. So right click on access the lab. And let's select my account and log in with the credentials that we were given. So over here, if we try to access the slash admin page, we should get an access denied message. So we'll do that right now. So slash admin, okay, enter, and here we go. It says, admin interface only available if logged in as an administrator. So right now, this is the first time I access this application and I don't know how access control is being implemented. So the first thing that I'm gonna do is really map the application to properly understand how the application is functioning. And I'll start off with the log in page. So you could see over here I logged in with my credentials. So there's a CSRF token, there's a username and there's a password. And then once I logged in, it went to the my accounts page. Now notice over here, it set cookies for me. So we've got, and let's send this to Repeater so that it's a little bit bigger. So we've got over here two cookies. The first one is the session cookie. So remember at the beginning of this presentation when we learned about session management that's essentially the form up session management. It's a cookie called session, and it's used to identify the user and subsequent requests. So that looks good. However, notice over here we've got another cookie that is called admin. And it's set to false. Now our cookie's coming from the client side. - And then I authenticated with that cookie, right? Yep. - Correct. But can I change the cookie on the client side? Okay. - I suppose you could. Yes, you could. You could just change or do something else, couldn't you? And send it to the server. - Exactly. So just like, for example, if you were to steal a session cookie, you could change the session cookie and put another cookie, so the user that you stole it from, and then you become the user. I could also change the admin cookie from false to true. And again, that highlights the statement that I will mention a million times in this presentation, which is, you can't make access control decisions based on client-supplied input. And cookies are client-supplied input as well. So all you have to do is set it to right over here, hit send, and you should have access to admin functionality. Now in Repeater, this doesn't reflect in the browser. So what we're gonna do is we're just gonna right click right over here and click on inspect. And let's make this a little bit bigger. And we go to application. And notice over here, that's the cookie jar that has all the cookies for this specific domain. So if I click on it right over here, you can see my session cookie and my admin cookie. So it's as simple as just changing it to true. Hit enter. And now let's just go to the my accounts page and see if I have access to the admin panel. Here we go. So now when I click on admin panel, I'm able to see what an admin user can see, which is the ability to delete users. So if we click on delete right over here, and here we go, it says, congratulations, you solved the lab, because you are able to escalate your privileges to an administrator user and perform functionality that only an administrator user can perform. - You find this kind of stuff in the wild. It's not perhaps as obvious, but it's still there. It still happens. - Exactly. So this is an example of it's getting passed silently by the browser. What the regular user would do is literally just go to slash admin and you get an unauthorized message. However it's a cookie that is getting passed silently by your browser that is determining whether you should have access to admin functionality or not. And that's in the same sense that's how hidden parameters work. So when you're submitting a specific form, what I've seen in previous applications is there is a field in that form that determines whether you should have access to that functionality or not. And that field is coming from the client source code, so from the client side. And so you're able to bypass access control rules. Now let's move on to the third type of broken access control. All right. So the third type of broken access control is access control vulnerabilities in multi-step processes. So remember at the beginning of this video we talked about three different types of access control, and the third one was context dependent access control. So access control, that depends on the state or the context that the current application is running with. So if that type of access control is not implemented correctly, this is where it leads to access control vulnerabilities that are usually in multi-step processes. So this is where access control might be implemented on certain steps, but not on other steps because again, the developers run with the assumption that you have to actually follow that flow before you could actually reach step number two or step number three and so on. You can't just go directly from step number one to step number five. And so with the same example that we used earlier, which is the ability to delete users, there was two steps involved. The first one is you click on the delete button you get redirected to a confirmation page, after you confirm the user you click on yes, it allows you to successfully delete the user. Now, the developer might put access control rules over here ensuring that an administrator user is the only user that can perform this request which is correct access control. However, the developer might assume that you can only get to this tab from this tab over here. And so really you don't need to put any access control rules on this tab because it's already implemented over here. And the only way to get to this is through this. It's kind of like a door, right? Think of it, a door in a house, you really can't get to my safe without actually breaking down my door. And so it's safe, but really there's also a window in your house that might be open or whatever. And so it's stupid example, but similar to that too. - No, I like that analogy. It's a great analogy. Yeah. - Awesome. And so yeah, that's access control vulnerabilities and multi-step processes. So being able to bypass the business logic and the flow of access control that is implemented in order to performs steps out of order. And we'll see a lab that covers that right now. Again this is an exercise in the Web Security Academy. So I'm just gonna copy the link and we'll add the link to this lab in the description of the video. All right, let's look at the description of the lab. So this lab has an admin panel with a flawed multi-stop process for changing a user's role. You can familiarize yourself with the admin panel by logging in using the credentials, administrator admin. Again, this model is a real world pen test where you're actually given credentials for all the accounts just so that you could learn what functionality you can perform using those privileged accounts and then try to perform them using a less privileged account or like a regular user account. And that's what we're gonna do. So it says to solve the lab, log in using the credentials, and you're given the credentials to a regular user and exploit the flawed access control to promote yourself to become an administrator. So essentially what we're gonna do is we're going to map the application to determine the different functionality that an administrator user can perform, and then we're gonna log in as a regular user and try to perform those actions as a regular user. And here we go. So the first thing that we're gonna do is, again, learn how the application functions from the point of view of an administrator user. So we're gonna log in as the administrator. Now notice over here you've got an admin panel. And the admin panel allows you to upgrade users and downgrade users to upgrade the privilege of users or downgrade the privilege of certain users. And the user that we wanna upgrade in order to get the congratulations, you solved the lab message is the user that we have, which is this one right over here. So to practice on this, what I'm gonna do is I'm gonna leave my own user alone because I wanna do that from a regular user privilege. And I'm gonna try and upgrade the Carlos user, which I should be able to because I'm logged in as an administrator. So I'm gonna click on upgrade user. And notice over here it performs a post request to the endpoint slash admin roles. And if we look over here, it takes in the username of the user and then the action that should be performed. So what I'm gonna do is I'm gonna send this request to Repeater. So that's the first step in the process of upgrading a user. And then I'm gonna click on yes to see what the second step is. So the second step is this request over here. So another post request to slash admin roles endpoint. And again, it takes in three parameters. So the action, the confirmed parameter and the username parameter. So I'm gonna send this one to Repeater again. And you can see over here Carlos became an admin user because we upgraded it correctly as an administrator, which we have access to. So let's make this a little bit bigger and let's label our tabs. So this was step one and this was step number two. So now what I'm gonna try to do, and again, this is where automating it becomes so much easier. And there are extensions like Autorize in Burp that you could use where you visit the application as an administrator, but you set the cookies in Autorize with the session tokens or the cookies of the regular user. And so any request that you're performing in the browser as an administrator user gets performed as a regular user. And it tells you if there's a difference in like the response length or the response code or whatnot. And based on that, it determines whether there's a broken access control vulnerability or not. 'Cause there's like, in normal applications, there's a million endpoints that you need to test and it becomes tedious to do it manually the way that we're doing it right now. But if you're a beginner, you absolutely need to understand how to do this manually before you run any automated tools. And that's what we're gonna do. So let's log out of the administrator account and log in using our regular account. So click on my account and we're logging in with the regular account. So the password is Peter, hit log in and I'm gonna right click over here and click on inspect. And again, I'm gonna go to application to see the cookies that I have for this user. And here we go. So this is my session cookie. So again, remember when we learned about session management, we said instead of you putting in your username and password every time the application assigns you a session ID, which essentially works as a short-lived password. So this is what identifies you to the application. So I'm gonna copy that and I'm gonna change the session ID over here from the administrator session ID to the regular user session ID and try to perform this request using a regular user session ID. So I'm gonna click on send, and here we go. It says it's unauthorized. So the developer performed proper access control rules over here that say you're not allowed to perform this specific action if you're not an administrator user. - And he thinks he's safe now the developer. - Exactly, because you can't go to step number two before going to step number one. And you can't do step number one unless you're an administrator, 'cause you get an unauthorized message. But that's not how web applications work. These are essentially all endpoints and you could call whatever endpoints you want. And so what I'm gonna do is I'm gonna copy that session token again for my regular user and I'm gonna put it in right over here and I'm gonna click on send to see if I could upgrade my account. Now, one thing that I'm noticing right now is I'm upgrading the Carlos user, which is already upgraded, so we need to change that as well. We're trying to upgrade our account. It was this username over here. So again, you hit on send, it's unauthorized, but then you try to do it for step number two. Hit send, and you get a 302. So you automatically get a redirect, which means it's trying to redirect you to another page, which tells me this probably worked. If you follow the redirection, you'll see that it actually worked. So you get the congratulations, you solved the lab exercise. But just to confirm that you're actually an admin user, you click on my account and here we go. You could see the admin panel and you're able to upgrade or downgrade users. - I mean, I know you said it was a silly example, but I really like that example about the developer thinks you can't get to the safe because you can't get through the door, but you just went through the window. - Exactly. - I like what you said, like every page is a different endpoint. It's not like a sequential sequence. You can jump from one place to another immediately. - Exactly. So to a regular user, it might seem like, yes, you do have to go through these certain steps, but when it comes to web applications, they're all endpoints. And you can call whatever endpoint you want in whatever order that you want. And if there's no proper context dependent access control rules implemented, there's nothing's stopping you from calling those endpoints. And so when it comes to software developers, you can't depend that an attacker is going to be a nice guy or a nice woman and follow that- - Follow the sequence. - path. Exactly. - Yeah, I think it's such a different mindset to traditional development. I come from a very traditional development environment many years ago, and web being stateless, it's great that web is stateless, but it's also an issue, like this highlights the issue of stateless. - Exactly. Yeah. Yeah, I agree. And this is actually, like this example that we saw, this is like, I don't need to say, \"Oh, there's a more complex example.\" No, this is the type of literal examples that we see in the wild. You just need to understand the business logic of the application and how it functions. And once you do, developers will miss putting access control rules when it comes to multi-step processes. So definitely something that you should test for. - So Rana, this is fantastic to see the problems, but did you say that you were gonna show us how to solve this kind of stuff? - Exactly, Yes, I will definitely do that. So it's, to me, although I'm more into offensive security and I'm a pen tester, I feel like it's useless finding all these vulnerabilities if you don't know how to fix them or you don't know how to recommend how to fix them. And so that's something that I always cover in all my videos and that's what we're gonna cover next. Okay. So we talked about what broken access control is. We gain some hands-on experience exploiting broken access control vulnerabilities, and now we're gonna discuss how to remediate broken access control vulnerabilities or how to prevent broken access control vulnerabilities from getting introduced in your application in the first place. And the number one way of doing that, and this one is really important, is that you use a security centric design where access is verified first and you ensure all requests go through an access control check. So instead of you having to put in manual validations with every page and with every function that you create that it should go through an access control check, what you need to do is ensure that they all go through that access control check by default. And that really essentially what leads us to the next prevention, or we call them by the way, positive patterns in software development. Which is except for public resources deny access by default. So by default, your access control should be that you don't have any access to this page. And so when you create a new page or when you implement a new function or whatnot, by default no one should have access to that page. If someone should have access to that page, you should implement rules that allow that access. And what that does is it prevents, let's say a developer from introducing certain functionality and forgetting to put access control rules if it was denied by default. This way, even if it gets pushed to production, no one has access to it until you put those access control rules to allow the people to access it. - I often feel sorry for developers because the under tight deadlines, they have to push code all the time, it's so easy to make a mistake. - Exactly. And that's why you need to have kind of these structures in place so that when someone does make a mistake, it's not as bad of an impact as it could have been. And the next one is to apply the principle of least privilege throughout the entire application. So this one is pretty self-explanatory. So only give users access to the functionality and the resources that they need access to in order to function properly. Similarly, this applies to things like configuring the application. And this is again, something that I've seen quite often. So when we find a remote code execution vulnerability in an application, what we end up blending with is root or system privilege, which is like insane because that means the application was configured to run with high privileges. So it was configured to run with root privileges for like, let's say Linux systems or system privileges with windows systems. And that means you didn't apply the principle of least privilege. So the application about 99% of the time does not require root or system privileges to function. It should be run with let's say a web daemon user that only has access to very limited functionality. But now usually when we find this, it's like a gold mine because it doesn't stop at the RCE, right? And like accessing the data of the application. Now I'm able to dump the memory in Windows. Get password hashes for any users that have logged into the box. And then from there I could use those hashes in order to pivot within the network. So not only have I compromised the box or the server that if a Burp application was installed on, but now I've also compromised your entire network or a bunch of other servers on your network because you decided not to configure the application properly. Next one, again, this one's pretty self-explanatory. Log all access control events. So if an attack is happening, I wanna know that it's happening. If an attack already happened and you notice that you have an attacker in your network, you wanna be able to go back and trace all the steps that an attacker did. And if you don't have logging in place, and this is a big problem by the way, when it comes to applications. So web applications specifically. When it comes to network security, there's the MITRE ATT&CK framework and so on. And a lot of people have developed interest in that and there's a lot of rules put in place when it comes to network logging for security use cases. But when it comes to application security, I almost never see people logging on security use cases. And that's terrible because our applications are public, right? - [David] Exactly. - They're external and they're the way into our network. And if we have no place to determine that an attacker actually came through our web application, we're in big trouble when it comes to doing the forensics after the attack happened. - That's a great point. Yeah. - And last but not least, the statement that is gonna hopefully get me rich at one point in my life, is access control checks should always be performed on the server side. You should never depend on client side input in order to perform access control checks. It's always something that should be done on the server side 'cause the attacker doesn't have access to the server side, but the attacker does have access to the client side. So you should never depend on the client side when it comes to implementing access control rules. And that's pretty much it for prevention. - That's brilliant. Rana, I really hope you get rich with that statement, helping people. This is brilliant. - I hope so too. - I mean, this is brilliant. I really appreciate you sharing your knowledge with us and being so kind to share so much here, but also on your channel. So just for the audience, once again, I'll put the links below. But Rana, don't you wanna just give us your socials once again? - Yes, absolutely. So I have a different name for each social media platform that I have. That's something that I need to fix. And so what we'll do is we'll add them in the description. I'm usually most active on Twitter, so that's where you wanna add me or follow me, sorry. And then YouTube as well. And then there's my academy. LinkedIn, I usually actually only accept requests from people that I know or people that have reached out to me. And so not the best platform to reach me on. Twitter would be the best platform. - So that's great. I'll put the links below. Go and follow Rana on Twitter. Please go and have a look at her YouTube channel, subscribe to her YouTube channel. Lots of fantastic content there. I mean, eight hours on SQL injection. I mean, what a gold mine of information. Highly recommend it. Go and sign up to the academy if you wanna get more content and pre-release content. How's the academy different to YouTube? Because you've got the content in both places, right? - So it's not very different. If you look at the academy, especially for the Web Security Academy course, you'll see there's a section that says something about education should be a right versus a privilege. And in that it explains why the course is both on YouTube and on the academy. So essentially what happens is that the content, so when a video is recorded, it'll go first on the academy and then it'll get released weeks later on my YouTube channel. The reason we have the academy is to essentially just cover costs of the YouTube channel. So it's not for profit, it's essentially just to cover costs like editing and so on. But if you do wanna join the academy, the perks that you do get is you get early access to the content. You also get access to Discord channel where you could ask questions. So we've got a ton of people in the Discord channel right now. Everyone's super helpful. So sometimes I answer, sometimes someone else speaks me to it whenever people have questions. So just a way to collaborate with other people and talk to people who are interested in the same subject matter as you. - So just to remind everyone, you can get a 50%, I mean, that's an amazing deal, discount. Coupon code will be below the video. I once again, don't get an affiliate fee or anything. This is just Rana and I helping you. So if you're interested in supporting Rana and supporting the costs of her editor and all the work that she's doing, then please sign up for the course. Otherwise, go and get the videos for free on YouTube. I love that, that you're providing people who are beginning, who can't afford stuff, get this stuff for free, the education for free. And those of us who have been in the industry for a long time, we can support one another. So if you can support Rana, please go and buy the course. Otherwise, go watch it on YouTube for free. Rana, once again, I really wanna thank you for sharing with the community. Thanks so much for sharing your knowledge and giving away so much for free. Thanks so much. - Thank you for having me. This was great. (upbeat music)",
    "transcript_keywords": [
        "access control",
        "access",
        "access control rules",
        "broken access control",
        "access control vulnerabilities",
        "user",
        "control",
        "application",
        "broken access",
        "admin",
        "perform access control",
        "control rules",
        "administrator user",
        "regular user",
        "cookie",
        "control vulnerabilities",
        "access control decisions",
        "determine access control",
        "administrator",
        "put access control"
    ],
    "transcript_entity_values": [
        "number three",
        "a ton",
        "Linux",
        "three",
        "the XSS Rat",
        "CSRF",
        "Burp Suite",
        "two",
        "four",
        "Repeater",
        "second",
        "YouTube",
        "the past year",
        "Carlos",
        "like minutes",
        "HTTP",
        "ID",
        "every couple of years",
        "302",
        "million",
        "David Bombal",
        "RCE",
        "100,000",
        "A3",
        "Extreme Privacy",
        "API",
        "the \"Web Application Hackers Handbook",
        "2017",
        "today",
        "six hour",
        "1",
        "James",
        "weeks later",
        "one",
        "two days",
        "OSINT Open Source Intelligence",
        "Rana",
        "404",
        "Proton VPN",
        "the Web Security Academy",
        "YouTube",
        "UI",
        "about three",
        "hour",
        "first",
        "the \"Web Application Hackers",
        "the day",
        "Autorize",
        "VPN",
        "Portswigger",
        "eight hours",
        "about 99%",
        "90%",
        "Discord",
        "David",
        "2021",
        "SQL",
        "Bob",
        "LinkedIn",
        "Alice",
        "number two",
        "10",
        "ISP",
        "six",
        "the past four or five years or so",
        "many years ago",
        "OWASP",
        "50%",
        "CIA",
        "200",
        "ProtonMail",
        "third",
        "Chrome",
        "five",
        "carlos",
        "Access Control",
        "zero",
        "100%",
        "number one",
        "Broken Access Control",
        "signup",
        "a million",
        "Peter",
        "VPN",
        "Twitter"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "ORG",
        "DATE",
        "PERSON",
        "TIME",
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "ORG",
        "MONEY",
        "ORG",
        "WORK_OF_ART",
        "ORG",
        "WORK_OF_ART",
        "DATE",
        "DATE",
        "TIME",
        "MONEY",
        "PERSON",
        "DATE",
        "CARDINAL",
        "DATE",
        "ORG",
        "PERSON",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "PERSON",
        "ORG",
        "CARDINAL",
        "TIME",
        "ORDINAL",
        "WORK_OF_ART",
        "DATE",
        "PERSON",
        "PRODUCT",
        "PRODUCT",
        "TIME",
        "PERCENT",
        "PERCENT",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "PERSON",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "GPE",
        "CARDINAL",
        "DATE",
        "DATE",
        "ORG",
        "PERCENT",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "PERCENT",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG"
    ]
}