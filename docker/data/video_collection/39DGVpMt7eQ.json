{
    "id": "39DGVpMt7eQ",
    "title": "Destroying the Internet (BGP routers) EP 1 // BGP Python scapy DoS script",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-09-20T13:30:19Z",
    "video_url": "https://www.youtube.com/watch?v=39DGVpMt7eQ",
    "category": "Science & Technology",
    "tags": [
        "bgp",
        "bgp hack",
        "bgp hijacking",
        "bgp protocol",
        "ccna",
        "cyber security",
        "cyber weapon",
        "cyber weapons",
        "ethical hacking",
        "hack cisco",
        "hack cisco router",
        "hacker",
        "hacking",
        "hacking cisco",
        "how to hack",
        "infosec",
        "kali linux",
        "kali linux 2021",
        "kali linux python",
        "null byte",
        "nullbyte",
        "python",
        "python hacking",
        "python scapy",
        "scapy",
        "scapy in python",
        "scapy kali linux",
        "scapy packet crafting",
        "scapy python",
        "scapy python 3",
        "scapy python tutorial",
        "scapy python3",
        "scapy sniffing",
        "scapy tutorial",
        "security"
    ],
    "views": 69695,
    "likes": 2763,
    "comments_count": 200,
    "description": "Simple script to DoS a network by reseting BGP neighbor relationships which results in the network going down (BGP neighbor reset / BGP routes lost / routing table routes lost).  In other videos in this series, I'll show you how to remove routes and add fake BGP routes to Cisco routers.  You need to learn to code! Learn Python. Learn Networking. You are going to be very powerful and very scary if you combine knowledge of networking with Python scripting! But, do good.  Learn to code. Learn Linux. Learn Networking.  Menu: 0:00  You down with BGP? 0:20  The Internet relies on BGP 0:47  BGP scripts that we will create 1:24  Warning about BGP 2:04  Live BGP Internet router 2:33  Real world cases of BGP hacks 3:03  Protecting BGP 3:30  How do I learn this stuff? 3:47  BGP network topology 4:55  Wiretaps 5:58  Issue with wiretaps 6:35  Hubs vs Port Mirroring 7:10  Cisco switch port monitoring 8:30  Kali Network Setup 8:58  Three scripts 9:15  BGP reset script explained 10:00  BGP port numbers 10:39  New Ethernet Frame 11:03  Script TCP Port Numbers: 11:47  BGP Reset crafted packet 13:55  Python scapy sendp 14:38  Python loop 14:50  Create script on Kali Linux 15:22  Cisco router BGP output 17:08  Run Python script 18:20  Test again resetting BGP neighbor relationship 19:53  Simple Python script resets BGP relationship  ========= BGP Music: ========= You down with BGP:   ====== Scripts: ====== DoS BGP network:   Next BGP Video:   Playlist:   ============== Scapy Resources: ============== Website:  Documentation:    Scapy installation:  =============== sudo apt update sudo apt install python3-pip sudo pip3 install scapy  ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    python bgp scapy ccna bgp scapy scapy bgp routing cisco routers fake cisco routers fake router fake routers in network fake routes route injection python scapy ccna 200-301 python scripts kali linux linux kali kali linux 2021.3 kali linux 2021 oscp ceh security+ pentest+  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #hacking #python #bgp",
    "description_links": [
        "https://www.youtube.com/watch?v=RT-1DU33xIk",
        "https://davidbombal.wiki/bgpresetneighbor",
        "https://youtu.be/IFYBIjjXLbQ",
        "https://davidbombal.wiki/scapy",
        "https://scapy.net/",
        "https://scapy.readthedocs.io/en/latest/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal"
    ],
    "transcript": "- This is one of multiple videos where I'm gonna show you how to hack BGP or border gateway protocol. BGP is the writing protocol that runs the internet. (upbeat ambient music) You down with BGP? Yeah, you know me You down with BGP? Yeah, you know me You down with BGP? Yeah, you know me Who's down with BGP? Every ISP - If you send traffic across the internet, so for example, you go to facebook.com or you go to another website, the decisions about where to route your traffic are made by a writing protocol called BGP. So the internet relies on BGP. (upbeat ambient music) How many people got a phone Without a data plan? How many people live their life like all the Amish can? Well, if you do, then you don't need the internet at all. But otherwise, here's your protocol. You down with BGP? Yeah, you know me. - So I'm gonna show you in this series of videos, how to reset a BGP neighbor relationship using Python on Scapy. In this example, I've got Kali running on a Windows computer within a virtual machine, and we're gonna send packets into the network to reset the neighbor relationship. Secondly, I'm gonna show you how to remove a route from the routing table of a BGP router. So first script, reset neighbor relationship. Second script, find a route in the routing table and remove that. And the third script is where we inject a fake route into the routing table of a BGP router. (upbeat ambient music) Now before we continue, I need to warn you, this is more of an advanced topic. BGP isn't covered in much detail at all at CCNA level, you have to get to CCNP level if you wanna learn about BGP. So you typically learn about IGPs or interior gateway protocols, such as OSPF or EIRGP, or IS-IS which run within an organization or within an autonomous system, and then later on you learn about BGP, which is run between autonomous systems. So your ISPs or internet service providers are running BGP because they are advertising routes from customers across them or between ISPs. So ISPs around the world will be receiving routes from other ISPs to basically enable connectivity across the global internet. What we are trying to do here is inject fake routes or remove routes from a BGP routing table. Now, in this example, I'm running BGP locally in my home network, I'm not going to try and attack the real internet because I don't particularly wanna go to jail. And I don't think you should do the same either. Be aware that there have been cases of ISPs around the world injecting route into the global internet routing table that takes networks offline. As an example, there have been some famous cases where YouTube has been taken offline and various other well-known websites because various ISPs have injected more specific routes into the BGP routing table. And that's affected where packets go. And ISP wants to block certain routes. They will not accept RFC 1918 addresses as an example, or private IP address as well, they shouldn't. They should be limiting the routes that they receive, they should be running a (indistinct), they should be doing various things to protect themselves from a text such as what I'm gonna demonstrate here. Now, the scripts that I've written here are fairly simple, but they've taken me a while to create because I've had to rewrite the code for Python 3, you might find some examples on the internet for Python 2.7, but they don't work anymore. The code that I've written here is specifically for Python 3. How do I learn the stuff? I understand protocols. I used Wireshark to capture updates, and then I basically forge packets similar to what I captured off the network. One of the best ways to learn Scapy is to basically capture packets and try and replicate what you've seen. I'll cover basic Scapy introduction in a separate video. I've once again, got Kali running within a virtual machine on this Windows laptop. It's connected to this 3560CX switch on G0/3. I've also got two Cisco routers, one over here with IP address of 192.168.1.246, and this router 192.168.1.249 is actually my router to get to the internet. I'm running BGP between these two routers. So there's a BGP relationship between those two routers. Now there's additional infrastructure here, which I'm not showing in this typology, that doesn't really matter from a BGP point of view because BGP uses TCP port 179. So there's essentially a BGP relationship across a bunch of devices between these two routers. The layer two infrastructure doesn't really matter in this example, I simply need a TCP session between those two routers, which I've got. And what I'm gonna do is I'm gonna sniff packets from those routers, manipulate those packets and send them back into the network. Now, this session is TCP. It's a unicast session. So switch by default would not forward the traffic to the Kali virtual machine, it would send the traffic directly between those two routers. So this device would never see the traffic. Now to solve that, we could do various things, we could use wiretaps such as these. Here, I've got a gigabit wire tap, here I've got a 10, 100 meg wiretap. The problem with both these wire taps is that on the monitoring port, so on this one on the monitoring port over here, it only sends traffic out of the interface, it doesn't allow for traffic to be sent back into the network. So I could plug two cables in here and then sniff the traffic and monitor the traffic out of that port, I could do something very similar with this one. Again, the problem with these wiretaps is that they allow me to monitor traffic, but they don't allow me to send traffic back into the network. What we wanna do is we wanna monitor the traffic from these BGP routers, receive the traffic and then manipulate the packets and send them back into the network to get the routers to do things. So, as an example, I wanna remove routes from the routing table of this router. That means I need to send packets into the network, pretending to be this router. So I'm going to pretend to be 246 and send packets to 249 and get 249 to remove routes from its routing table. Or I'm gonna add fake routes to the routing table, or I'm gonna reset the neighbor relationship. That means that I need to either use a hub here. So you could use a hub rather than a wiretap, problem with hubs is they often only support 10 megabits per second, or what I've done here is set up port mirroring, and I'm gonna mirror traffic from G0/1 one to the Kali device, and then configure this port to not only just mirror traffic, but also receive traffic. So I'll connect to the 3560 switch. So on my 3560 switch show run pipe include monitor. On Cisco devices, we use these commands to determine which interfaces to monitor and where to mirror the traffic. So monitor session one, this is just a number. Source interface is G0/1. That's this interface which connects the switch to this router on my desk, running BGP. That's once again, the source interface, the destination of the mirrored traffic will be G0/3. That's this interface connecting the switch to the Kali virtual machine. So we are affording traffic from this interface out of this interface as untagged traffic in vlan 1, but we also gonna allow ingress traffic. That's really important, we wanna allow the traffic from the Kali machine back into the network. So you either need to have a switch where you can configure it such as the following so that you can basically tap the network. So tap of the connection between the two routers or you need a hub, or you need some type of wiretap to see the traffic between those two routers. So that's the first thing that you need to do. You need to have visibility of the traffic between the two routers. And this gives me that visibility. Okay, now that we've done that, what we can do is bridge Kali to the ethernet adapter on the Windows computer, and that's what I've done here. I'm bridging the virtual machine to this adapter, which connects the laptop to port three on the Cisco switch. And now that you've done that, you can actually inject traffic into the network. So I've got three scripts once again, first script is to reset the neighbor relationships, second script is to remove a route out of the routing table, and the third script is to inject a fake route into the BGP routing table. Let's start with the resetting of neighbor relationships. Okay, so in my first script, I'm going to import Scapy. I'm going to import BGP. I've created a loop where I'm snuffing a packet off the wire. So basically I'm looking for a TCP packet with a destination of 192.168.1.249. So I'm basically sniffing packets from this router that are going to my internet router I'm gonna capture one of those packets, and then I'm going to create a forged packet. I need to capture a packet off the wire from the actual BGP session, because I don't know what the sequence numbers are that the routers are using. So in all my scripts, I'm capturing a packet off the wire so that I can see the TCP sequence numbers and act numbers that the routers are using. But basically, we also need to know the source and destination ports. BGP uses port 179, but it depends on which router initiates the session. If router one talks to router two, it might initiate the session to port 179. But if router two initiates the session to router one, the destination is 179 on this side. So random port number, initiated session to well-known port number 179. But if this site initiates the session, it will be a random port number going to 179 on this router. So the direction of who set up the initial session, determines which side is using port number 179. So I'm gonna create a new ethernet frame. I'm gonna set the destination Mac address to the Mac address that was captured in the BGP frame. I'm gonna set the source Mac address to the Mac address captured in the BGP frame. Basically, I'm creating a frame at layer two that mimics the actual session between the two routers. I'm also changing the ethernet type, and now I'm gonna change PCP source and destination ports to the port numbers that the routers are using. I'm then gonna specify the sequence number, but I'm gonna increment the sequence number based on this loop. So I know what the sequence number is when I capture the packet, but then what I'm doing now is I'm just incrementing that and sending packets to the router, hopefully getting a sequence number that's valid. I'm also specifying the acknowledgement number. And then I'm gonna specify the source IP address and destination IP address. Now if you know BGP, if you know how to hack, you could probably improve these scripts, but this is what I got working and I'm happy with it for demonstration purposes. What I then did is craft a packet. So I'm specifying that BGP reset is gonna be an IP packet. The source IP address is gonna be this IP source, which I got from the original packet. The destination IP address is gonna be the IP address that I once again captured from the packet, TTL, or time to live I'm gonna set to one, this is a line continuation. So actually this is one long line of text, but to make it easier, I've done a backslash there. This is a layer three. This in Scapy means next layer. So next layer is TCP. Destination port number is going to be the port number that are read from the packet. Source port number is gonna be my source port. Now you could point directly to the original frame. I've created variables that just makes it easier to explain what's going on here. So source and destination port numbers in the TCP header will be set as follows. I'm setting the flags to PA, sequence number is the sequence number that we worked out. But remember, this is incrementing, acknowledgement number is the acknowledgement number that we grabbed from the packet over there. Next layer is gonna be the BGP header. Now the market here is generally written in F's, I've written it as follows the decimal equivalent. Notice, that's what it looks like in a Wireshark capture. So once again, if you wanna know what to put into a Scapy packet, capture packets in Wireshark and then you can fill in the details. So I've specified for instance, source and destination port number, sequence number acknowledgement, and length. You can see that information over here, slightly different length here, because this is a reset message rather than an update message, type is set to three, because that's a reset. Update message has a type of two, but I'm sending a reset message rather than an update message or a keep alive. Notice, keep alive is for update message here, is to I'm going to send a reset. So that is basically gonna be sent. Sendp is a Scapy way of sending a layer to frame. So I'm sending the frame, which is frame one, which I created up here based on the original frame. And then I'm putting bgp_reset on that. So basically it's layer two, layer three, which is the IP layer here, layer four, and then BGP on top of that. So I'm stacking those layers and then I'm sending it into the network. But just to show you what it looks like, I've got some show commands here that shows the frame, so shows layer two and then shows the BGP reset message sleep for one second and then a loop round. Now, the reason I've got to loops here is if the BGP relationship resets, I wanna grab another frame when the BGP router tries to reestablish the relationship. Take that, and then send more recent messages to get it to reset again. Okay, so there's our script. In Linux, I will open up a terminal. Let's use nano just because it's easy and I'll create a Python script called bgphack1.py. Now Kali comes with Scapy pre-installed, so you don't have to install itself. Save that. And what I can do now is basically run my Python script. Now, before I run that script, let's have a look at the router. So on my router, 1941, this is the router that actually connects me to the internet. Show ip bgp. You can see that I've learnt some BGP routes. Router ID is 192.168.3.249. I've got a default route to get me to the internet. I've learnt various routes from neighbor 192.168.1.246, which is this router on my desk. If I connect to that router and log in. This is an ISR4321 show ip bgp. You can see that it's a learnt a route here from 192.168.1.249. That's its default route to get to the internet. As an example, this router can ping google.com. So back on the first router, show ip bgp summary. This shows me that the router has a neighbor relationship to 192.168.1246. It's been up for about two hours, received five prefixes. Back on 246, show ip bgp summary. Got our neighbor relationship to 192.168.1.249. Also been up for about two hours. That's basically just showing us the relationship between the two routers to monitor stuff that's happening. Debug ip bgp. That'll allow us to see what's happening with bgp. Hopefully we'll see the neighbor relationship be reset through debug messages. And also see that the timer is reset. So that's what it is at the moment. That's the messages sent and received. So let's run our hacking script. Now what it needs to do is it needs to capture some packets off the wire. So it needs to see traffic sent between the two routers. In BGP, that can take a while. BGP doesn't send a lot of messages from one router to another. Okay, so there you go, something's happened, and we're sending packets into the network. And notice here, something's going on. It's complaining about a sync error. We went from established to closing, notification message was sent. Close often notification. We removed stuff from the routing table and notice using the command again, we can see that the relationship is idle. Relationship is being formed again. So they are negotiating to set up a relationship. And once again, we can see it's been up for 13 seconds, now up for 32 seconds. So I managed to get the neighbor relationship between those two routers to reset why sending notification messages. Now let's run that again. So run it again. It's at 52 seconds. Now it's being reset again. Notice five seconds, it's idle at the moment. Show ip bgp. Routes have been lost. We don't see 192.168. 1.249 is a neighbor. Now we do, so you can see a bunch of messages are displayed. Now we see the routes from 192.168.1.246. So I got this neighbor relationship to reset. Notice 24 seconds at this point, I'll run that again. You could leave the scriptures running and I'm breaking it just to try and make this happen quickly, but you could leave it running and you could set the loop to a value so that it just constantly looks for messages and then sends reset messages. At the moment, 53 seconds. Relationship is up, but notice now it's breaking again. Went to four seconds. Show ip bgp. Routes are being learnt. I was a bit too slow there, you can see route refreshes. You can see the capabilities were exchanged. So I managed to reset the neighbor relationship. Okay, so this video is getting too long, this is a really long video. I'm gonna show you the other scripts in separate videos, because this is very long. Basically my simple script over here has sent a BGP reset message into the network to reset the neighbor relationship. In the next video, I'll show you how to remove a route from the routing table. Now, if you're seeing too many of those messages, it'll actually reset the neighbor relationship. (upbeat ambient music)",
    "transcript_keywords": [
        "BGP",
        "router",
        "BGP router",
        "traffic",
        "BGP routing table",
        "routers",
        "reset",
        "BGP reset message",
        "BGP reset",
        "BGP relationship",
        "running BGP",
        "relationship",
        "number",
        "port",
        "BGP routing",
        "neighbor relationship",
        "routing table",
        "routes",
        "packets",
        "port number"
    ],
    "transcript_entity_values": [
        "first",
        "ISP",
        "Sendp",
        "3560CX",
        "three",
        "CCNP",
        "ISR4321",
        "52 seconds",
        "192.168.1.249",
        "192.168.1246",
        "246",
        "third",
        "Cisco",
        "Amish",
        "five",
        "One",
        "two",
        "four",
        "10",
        "249",
        "PCP",
        "one second",
        "Scapy",
        "Wireshark",
        "TCP",
        "Second",
        "BGP",
        "10 megabits",
        "1918",
        "YouTube",
        "100 meg",
        "second",
        "32 seconds",
        "Router ID",
        "IP",
        "13 seconds",
        "Python",
        "Kali",
        "Mac",
        "one",
        "24 seconds",
        "OSPF",
        "Linux",
        "about two hours",
        "Went to four seconds",
        "192.168.3.249",
        "192.168.1.249",
        "Python 3",
        "Secondly",
        "1.249",
        "53 seconds",
        "CCNA",
        "3560",
        "TCP",
        "179",
        "Windows",
        "PA",
        "192.168.1.246",
        "vlan 1",
        "F's",
        "Wireshark",
        "BGP",
        "1941",
        "192.168",
        "2.7",
        "five seconds",
        "TTL"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "NORP",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "NORP",
        "TIME",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "NORP",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "TIME",
        "PERSON",
        "PRODUCT",
        "NORP",
        "ORDINAL",
        "ORG",
        "QUANTITY",
        "DATE",
        "ORG",
        "QUANTITY",
        "ORDINAL",
        "TIME",
        "ORG",
        "ORG",
        "TIME",
        "ORG",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "TIME",
        "ORG",
        "GPE",
        "TIME",
        "TIME",
        "CARDINAL",
        "DATE",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "TIME",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "GPE",
        "CARDINAL",
        "EVENT",
        "PRODUCT",
        "ORG",
        "PRODUCT",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "ORG"
    ]
}