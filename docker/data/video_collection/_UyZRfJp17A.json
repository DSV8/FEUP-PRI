{
    "id": "_UyZRfJp17A",
    "title": "Building a camera: the plan was simple until it wasnâ€™t",
    "channel": "The Verge",
    "channel_id": "UCddiUEpeqJcYeBxX1IVBKvQ",
    "subscriber_count": 3390000,
    "upload_date": "2020-07-01T13:00:31Z",
    "video_url": "https://www.youtube.com/watch?v=_UyZRfJp17A",
    "category": "Science & Technology",
    "tags": [
        "raspberry pi 4",
        "raspberry pi",
        "python",
        "pi camera",
        "raspberry pi camera",
        "camera",
        "ninoka",
        "mirrorless",
        "mirrorless camera",
        "coding",
        "coding knowledge",
        "raspberry pi code",
        "raspberry pi coding",
        "vintage camera",
        "cameras",
        "custom camera",
        "how to build a camera",
        "how to",
        "python script",
        "selfie stick",
        "diy camera",
        "high quality",
        "how to build",
        "becca farsace",
        "camera mount",
        "film camera",
        "camera parts",
        "camera software",
        "full frame",
        "dslr cameras",
        "camera lenses",
        "technology",
        "gadgets",
        "tech",
        "verge",
        "the verge"
    ],
    "views": 246533,
    "likes": 11160,
    "comments_count": 618,
    "description": "We built a DIY camera with the Raspberry Pi High Quality Camera using C-mount and CS--mount lenses. The Raspberry Pi is a super tiny computer that is highly programmable. People have used these to program everything from smart mirrors, to portable arcades, to COVID-19 case counters, and even greenhouses. They are tiny boxes that  if you know how to code  can do pretty much anything. Heres our video showing the challenges for someone without that coding experience.  Read more:   If you buy something from a Verge link, Vox Media may earn a commission. Seeour ethics policy:   Here is what Becca used for the build: Jumper wires:  Mini push button switch:  3.5 inch touchscreen:  USB-C portable 10,000mAh charger:  Raspberry Pi 4 Model   HQ Camera Mod:  Subscribe:  Subscribe to Verge Science:   Community guidelines:  Wallpapers from The Verge:",
    "description_links": [
        "https://bit.ly/3dTJvzj",
        "http://bit.ly/2TQsqjB",
        "https://amzn.to/3gkEEZT",
        "https://amzn.to/2Zq5UPH",
        "https://amzn.to/3ggSjkG",
        "https://amzn.to/2BrEzol",
        "https://amzn.to/2YLFxEO",
        "https://www.raspberrypi.org/products/raspberry-pi-high-quality-camera/",
        "http://goo.gl/G5RXGs",
        "http://bit.ly/2FqJZMl",
        "http://bit.ly/2D0hlAv",
        "https://bit.ly/2xQXYJr"
    ],
    "transcript": "- Dudes, I own so many old cameras (lighthearted funky music) and most of them don't even work, but I just love the look, and the feel, and the history that every single one of them holds. And it's always been a dream of mine to repurpose them and get them working! So in the height of quarantine, when Raspberry Pi released what's in this box, whoo, I knew exactly what I wanted to do with it. I don't know if y'all are ready for this. To be frank, I don't know if I'm ready. Who's Frank? That's such a bad joke. Ah, every time I just makin' bad jokes, open the box, Becca! (lighthearted funky music) You see friends, the word code, command, Python, are all terms I really had no interest in knowing more about until I saw that Raspberry Pi put out this new camera mod. It supports interchangeable lenses, and natively, it supports C and CS mount lenses that my 16 millimeter Bolex uses. Hold on, I got one more. They're literally the cutest little lenses. Aren't these so adorable? Dudes, thousands of camera systems exist. So I'm gonna take some old parts and some new parts, and I'm gonna finally learn how to code, and I'm gonna build a camera that's completely my own. We're building the Becca cam, buckle up. (drums thumping) This is a Raspberry Pi 4, it's a super tiny computer that is highly programmable. And folks have used these to program everything from smart mirrors, the portable arcades, to COVID case counters, and even the hella smart, super techie greenhouses. I mean, these are tiny boxes that if you know how to code, can do pretty much anything, and this is Raspberry Pi's HQ Camera mod that connects right to the Raspberry Pi. So, so far, so good, until (sighs) hello from the floor on day one. This is what it's come to. Dot get, not found. At its most basic level, to take a photo with the Raspberry Pi cam, you have to type code into a terminal. What? See, the Raspberry Pi cam uses a coding language called Python. And honestly, wait, it's not even about the coding language. It's about the fact that I don't know any coding languages. Oh my God. (screams) The (camera clicks) does too many arguments mean? That means nothing to me, that literally means nothing. Stay calm, Becca. I mean, there's no camera interface here. There's no easy way to just click a button and bring up the camera preview. Literally on every single step, there is a problem. So I was able to take a couple photos today, which is hella exciting, but tomorrow's gonna be all about finding a program that I can run so that I don't have to type a code into the terminal every time I wanna take a photo. Basically, I don't wanna have to carry a keyboard around when I'm using this camera. And I have this 3.5 inch touch screen that I'd really like to be using instead. So day two, baby day two. Oh God, I need help. So we're reaching out to the IG buds because shout out to all my IG buds, you know I frigging love you guys. Hopefully someone comes through. (energetic drumming) (sighs) Okay, while we wait for the buds to get back to us on what code I should be writing into my Pi, I wanna get the button set up that's gonna become our shutter button. So a little bit of hardware, thank God, let's do it. (lighthearted funky music) You gotta love a good button. Mm, just like I knew you would, the IG buds came through for your girl. Basically, you were like, Becca, you should've read the manual, like three more chapters. This is the official Raspberry Pi camera guide. I love her. I love her so much. Y'all were like, there's a code in there for programming a selfie stick, and I'm not making a selfie stick, but I am making a camera that uses a button to take photos, which is what a selfie stick does. The only problem with this code is that every time I was pushing the button, it was freezing the preview. So I called a friend, who called a friend, who wrote me a line in the code that basically cuts the program after it takes a photo. And then I created a desktop shortcut that opens the program and runs it every time I wanna take a photo. It's not quite as perfect as I would have liked, but I will take what I can get at this point, and it gets my camera working, which means I can move on to hardware. I woke up this morning and I thought, finally, it's hardware day. Ah, let's go! (energetic drumming and snapping) (joyful jazzy music) Okay, buds, today we say goodbye to the nk-700 and hello to Becca cam. (joyful jazzy music) (torch hisses) Buds, it's the moment of truth. And I'm really nervous, and I'm really freaking excited. We're gonna plug this camera in, and we're gonna see if it powers up. We're gonna see if it takes a photo. We're gonna pop one of those old vintage lenses on from my Bolex. (sighs) I'm just like taking a moment to soak in the happiness, just in case everything comes crumbling down. (gentle electronic music) All right, dudes, here we go. (Becca sighs) It worked, it worked, it worked! I just built a freaking camera. Tomorrow, we shoot. (camera shutter clicking) (relaxing music) To take a photo on the Becca cam, you need to open Thonny, which runs Python scripts. There, I've already preloaded the script for the selfie stick. You run that program, it opens up a preview of what the camera's seeing, where you can focus and frame up before hitting the shutter button to take a photo. It then quits the program and saves the photo. (camera shutter clicking) And then, every time you want to take another photo, you have to run that script again. (camera shutter clicking) (camera shutter clicking) (sighs) Okay, buds, so there's a little bit of movie magic in that last sequence, because when I first came back from shooting with the Becca cam for the first time, the photos actually looked like this. I truly don't know what I'm doing wrong at this point. But what I do know is that when I just use the terminal and type a simple command into the camera, it takes higher-res photos. So I got my keyboard and just a totally normal day out shooting with my computer. I'm gonna link all of the parts that I used to make this below, and if you get those parts or if you already have all of this and you had some code, put it down below, or shoot me a message on Instagram, I'd love to see what you guys are coming up with. And hopefully you're having better luck than I am. So the Becca cam, would I send those to anybody to review? No. Is it as first gen as they come? Yeah, absolutely, it is. Do I know what I'm doing? No, I still have absolutely no clue what I'm doing, but this was actually a really fun challenge, now that I'm done with it. In the heat of it, not so much. But now we're good. But outside of the software hellscape I have been truly living in for the last week, the sensor's actually really cool and super capable for the $50 it'll run yet. And I mean, that's not even the point. The point is I jumped into this project with a large amount of knowledge of camera hardware, and zero knowledge of camera software. And I did come out of it with a semi-working camera, but I now appreciate all other already built cameras so much more. And I can not wait to use a camera that doesn't require a keyboard. Oh yeah, and buds, welcome to Full-Frame. This is a place for us to talk anything and everything cameras, from the tech that surrounds them to the new lenses that are coming out, to, I don't know, maybe building something again soon. What fascinates you about the camera world? What do you want to know more about? What do you want me to build next? I really appreciate you being here, and I hope that you and everyone that surrounds you is well. And (sighs) we'll be seeing you again real soon. Be well buds.",
    "transcript_keywords": [
        "camera",
        "Raspberry",
        "Becca cam",
        "Becca",
        "code",
        "photo",
        "buds",
        "button",
        "cam",
        "time",
        "love",
        "program",
        "photos",
        "cameras",
        "lenses",
        "day",
        "Python",
        "God",
        "run",
        "camera mod"
    ],
    "transcript_entity_values": [
        "zero",
        "the Raspberry Pi",
        "one",
        "16 millimeter",
        "Bolex",
        "Python",
        "Tomorrow",
        "three",
        "IG",
        "Raspberry Pi's",
        "today",
        "the last week",
        "Bolex",
        "this morning",
        "Becca",
        "50",
        "Raspberry Pi",
        "day one",
        "Buds",
        "thousands",
        "two",
        "Mm",
        "Becca cam.",
        "Thonny",
        "Raspberry Pi",
        "3.5 inch",
        "the Becca cam",
        "the Becca cam",
        "CS",
        "first",
        "Frank",
        "Instagram",
        "tomorrow",
        "Full-Frame"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "FAC",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "DATE",
        "PRODUCT",
        "TIME",
        "PERSON",
        "MONEY",
        "ORG",
        "DATE",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "WORK_OF_ART",
        "QUANTITY",
        "FAC",
        "LOC",
        "GPE",
        "ORDINAL",
        "PERSON",
        "ORG",
        "DATE",
        "ORG"
    ]
}