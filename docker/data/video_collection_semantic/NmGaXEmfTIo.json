{
    "id": "NmGaXEmfTIo",
    "title": "The Computer-free Automation of a Jukebox (Electromechanics)",
    "channel": "Technology Connections",
    "channel_id": "UCy0tKL1T7wFoYcxCe0xjN6Q",
    "subscriber_count": 2460000,
    "upload_date": "2020-03-08T15:28:39Z",
    "video_url": "https://www.youtube.com/watch?v=NmGaXEmfTIo",
    "category": "Science & Technology",
    "tags": [],
    "views": 1186186,
    "likes": 41082,
    "comments_count": 2965,
    "description": "Ever wonder how we made all these crazy machines do all their crazy machine things before computers came along? Wonder no more as we explore the inner workings of a Wurlitzer 3400 series jukebox from 1970!  There are some links here for your enjoyment. Please enjoy these enjoyable links!  Technology Connextras (the second channel that stuff goes on sometimes):  Technology Connections on Twitter:  The TC Subreddit   You can support this channel on Patreon! Thanks to contributions from viewers like you, Technology Connections can continue being as weird and unpredictable as it is. If youd like to join the cool people who bring these totally rad videos to you (Im hip and with it!), you can find out how at the link below. Thank you for your consideration!   And thank you to the following patrons! Oliver Lee, Lennart Sorensen, Mitch Radoll, Will Wren, Viorel, Reaghan Kekeis, lohphat, Vivian Pypher, Brandon Whiting, Scott Herron, Marlo Delfin Gonzales, Zachary Hazlett, Peter Stewart, Robin Johnsen, Nomad, Eric, Phia Westfall, Tom Rolfe, Jeremey Hastings, Mark Wayt, Matthew Reynolds, Arthur Robillard, Sonic the Anonymous Hedgehog, Lee Tustain, Ramon Gamez, Vaughn B., Breunie Ploeg, Benjamin Cirker, Braden McDorman, Julien Oster, Jake Hickman, Trae Palmer, Gary Hampson, Lennart Rosam, Chris Wallace, Matt Shea, Jason Baker, Galimaufry, Aaron Helton, Michael Holmes, Kevin Hollywood, Trey Harris, Peter Pfundstein, Wilhelm Screamer, Alan Boyd, Mat Stu, RYAN INGOGLIA, Charlycobra, Thomas Kolanus, William Kisley, Daniel Johnson, Potch, Reemt Rhmkorf, Robin Rattay, Bruce Justyn, Rae McIntosh, Justin D, Adam Zawisza, LordJakson, Triancia, Matthew Holder, Joshua Moncrieff, Max Barnash, Microfrost, Sinirlan, Mitch Schenk, Juan Olivares, Mike Bird, Emmett Ray, Michael Shaffer, Sputnik, Jason Spriggs, Danny S., Gregory Kumpula, Tom Burns, Daniel Pf, Yung Kim, John W Campbell, Matthew Jones, Slappy826, Steven Ingles, Robert Howcroft, Some Random, Jeremy Heiden, Garrick Kwan, Vince Batchelor, Peter Sarossy, Tracy Cogsdill, Matt Allaire, Guy, Will Hayworth, Benjamin Gott, Zach Le, Sean Fyles-Duggan, Fredrik strem, Anil Dash, Simon Safar, Michael Wileczka, William Matthews, Fred Leckie, Kenneth Morenz, Andy, Adam Merolli, Bendegz Gelln, Greg Stearns, Robert L LaBelle, Chris Satterfield (Compgeke), Jerrod Putman, Cameron Benton, Samuli Suomi, Keith McCready, Jeffrey Glover, Marcus Langendorff, Hsin-Kuei Chen, HenryD, David Anez, Josiah Keller, Conall  Maiti, Struan Clark, Keeb, Alexander Karlsson, Tarrien, Jason Viterna, DrMoebyus, Biking With Panda, Chris Larsen, JH, Michael Romero, Aram Hvrneanu, Jonathon Mah, Jonathan Polirer, Derek Nickel, Marc Versailles, Mark Stone, Arthur Zalevsky, John Fruetel, Cupcake, Andrew Diamond, Cole Campbell, Christopher Beattie, Paul Bryan, Samuel Kirzner, Gus Polly, Daniel Pritchard, Brandon Tomlinson, Eric Loewenthal, Jeremy Samuels, Malcolm Miles, Matthew Lloyd, David L Jones, Matthew Burket, Mike Burns, Noah Corwin, Andrew Roland, Luke Whiting, John Cockerill, Smith8154, David Groover, Michael Wehner, Kenneth Siewers Mller, jacob kamphaus, Slysdexia, Alex Hurley, D.z, Tommy McCarthy, Andrew Bobulsky, On Ice Perspectives, Brian Wright, TheGreatCO, Petteri Hjort, Daniel DeLage, Nathan Obuchowski, Sam Tran, Shaun Puzon, Bret Holmes, Vlycop, Alexandra Stanovska, Lucas Beckmann, Casey Blackburn, Devon Hodgson, Paul Macejewski, Zimpan, Loc Esch, Filmmaker IQ, Jan Houben, Bren Ehnebuske, T.J. Zientek, Vernon, Ton Brands, Scott Wright, Kory Howard, rezonant, Thanasis Dimas, Marc Grondin, Hex, Daniel Barrera, Erkin Alp Gney, Mark Stradling, Peter Sodke, joseph, Kristian Scheibe, McLargehuge 510, Andrew Liendo, Nick, The Masterpiece, Seanvdv, Chris Cody, Jason Portwood",
    "description_links": [
        "https://www.youtube.com/channel/UClRwC5Vc8HrB6vGx6Ti-lhA",
        "https://twitter.com/TechConnectify",
        "https://www.reddit.com/r/technologyconnections",
        "https://www.patreon.com/technologyconnections"
    ],
    "transcript": "In the modern world, when we want to make something happen automatically, we use these newfangled computer things. Whether that means a huge industrial automation system controlling robots in a factory, or an Arduino you learned how to program to do whatever the kids do with Arduinos these days... our modern world is based on bits of silicon executing instructions. Its a pretty great place to be - for now - but to me its not all that interesting. What is much more interesting to me is the wild world of electromechanical wonders that is... pretty much all general-purpose automation from 1975-ish and before. Electromechanics is my favorite kind of automation. Why? Because using nothing but switches, some motors, some relays, maybe a solenoid or two, and a heckuva lot of ingenuity, you can make surprisingly complex things happen, all without a single bit of code. For example, a jukebox! This here is the Statesman, by Wurlitzer. This beautifully brown beast hails from the year 1970. I mean of course it does. This may be the ugliest jukebox ever produced. Its even as an outspoken fan of the color brown, this is not very attractive. But! At least with the lights on we get some purple! Also known as the 3400 series, this jukebox introduced the new Wurlamatic record changer mechanism. Which, sadly, was a radical departure from Wurlitzers previous designs which put the mechanism on full-display. Here its hidden, but luckily I have the key to open it up. Now what this mechanism does is fairly obvious upon a short glance. I mean, its got a carousel of records, an arm to grab hold of one of them and place it on this little turntable, and so obviously the carousel will rotate to a specific record, stop, the arm will grab it, put it on the turntable with the selected side facing up, let go of it, then the tone arm will move into position to play it, and once its done the tone arm will return to its resting position, the record-grabby arm will grab it again, put it back, and were done. So, lets see how that works in action. Ill be selecting M3 which will play the A side of the green record. Pay attention to the sounds it makes. [two clicks as buttons are pressed] [a whirring mechanical sound] [a clunk and a loud buzzing as the carousel moves] [another clunk, whirring] [two clicks] [another click] [whirring stops] Alright, and now that the record is over, watch what happens. [a click, followed by the whirring again] [various mechanical sounds as the record is put back] [carousel buzzes as it moves] You might think that the carousel will stop once it gets back to its starting position [faint double-click] but it actually continues for one more rotation. Then, it comes to a halt. [clunk, and buzzing stops] Now you might ask, how does it know what record to play? What was the point of that sound before the carousel started to move? [button being pressed; whirring] [buzzing of carousel] And more generally, what are the brains of this operation? If there isnt a microcontroller controlling things all micro-like, how can it be controlled? The answer is a whole bunch of weird, purpose-built mechanisms, rats nests of wires, and a staggering number of switches. Thats it. Electromechanics are really quite simple as a concept, but the applications can be a little complex at least on the surface. Before we get too far into the electro-side of things, lets look at the mechanics more closely. The heart of the Wurlamatic mechanism is right here. This controls everything the jukebox does aside from record selection. And all of its functions are performed by a simple electric motor and a gear reduction drive. Here, Ive re-wired the motor to a constant power source. Youll notice that it simply repeats the same actions over and over again. Grab the record. Put it down. Move the tone-arm. Then the same thing in reverse. Its just a constant back and forth. But notice how much its actually doing. It may look like its just moving the arm back and forth but its a lot more than that. Most of everything thats happening is happening because of this one very complex mechanism. The mechanism is powered by the main cam motor underneath it, and as the mechanism rotates, so do a series of cams. A cam is a sort of oddly-shaped wheel that rotates around a shaft, and thanks to its odd shape, it translates rotational movement into linear movement with the help of a cam follower which gets pushed as the cam rubs against it. In fact built into the drive gear is a vaguely-heart-shaped groove which serves as the cam that operates the record arm. Its a little hard to see, but theres a little peg riding in this groove, and it causes the record arm to pivot backwards, away from the record carousel with the help of this little ratchet and gear thing. At its pivot point, these three gears serve as the means by which each side of the record is selected. Pins on the two side gears will stop either one of them from turning when they hit these catches. This then causes the arm to rotate sideways as it continues to pivot backwards. Depending on which pin is stopped, it will rotate in either one direction or the other, and this solenoid moves the catch points back and forth, therefore its position determines which side is played. In its resting state, it will rotate to play side B by default, and when the solenoid is energized, it catches the other pin to play side A. Obviously the most noticeable thing this mechanism does is move the record take-out arm, which is its official name, by the way. But thanks to a series of other cams adjacent to the main drive gear, and the various linkages they attach to, it does much more, too. The single cam in front of the main drive gear releases the record from the arm by way of this linkage, which also pulls the turntable slightly to the left so the record can spin freely of the arm. Two of the cams behind the drive gear move the tone arm to play the record, with one responsible for lifting it up and the other for moving it left and right, and theres even a cam just for activating this little button which switches the amplifier from its auxiliary input to the phonograph input when a record is being played. Take a look at this exploded diagram. This is everything going on inside the Wurlamatic mechanism. There are 7 cams in total, though thats not perfectly true as youll see later. But anyway, these seven cams are the programming of the physical actions that take place. Their shape and position dictate at what points in the mechanisms 360 degree rotation each action will occur. This may not look like a program, but it very much is. Note that the cams could be made to cause one action to happen multiple times per cycle, if required. However, this clever mechanical program doesn't make for a useful jukebox all by itself. If it just runs all the time, well then that wouldnt do anything but make a bizarre record flinging dance. We need a way to control when the program starts. Of course we also need to pause the program in the middle when the arm has reached the turntable so the record can actually play. And then we'll need to restart the program to put the record back. Of course, finally there needs to be a way to shut down that program altogether once that task is complete. So we need some sort of additional control. Of course, before I re-wired the motor, it didnt start moving until the correct record was in place, and it was automatically stopping in both the record playback and its resting positions. How did it do that? Well, what makes it automatic is the plethora of micro-switches you see all over the place that function as interlocks, interrupts, start-stop points, and triggers for other ancillary actions. OK, so heres something thats super common in electromechanics and is gonna come up a few times here. Self-latching circuits with interrupts. Using a relay, we can design a circuit that will latch itself in a closed state until another action occurs. What is a relay? Well, a relay is an electrically operated switch. A small electromagnet within the relay opens or closes any number of switch contacts. One of the most common things we do with relays is control high power devices with low voltage, low current control circuitry. But we can also be almost endlessly clever with them. So, lets say we want to turn on this light bulb with a momentary pushbutton switch. We could wire the bulb right to the pushbutton, but of course that means its only lit so long as the button is held in. And it also means the button has to handle all of that current. What I want is for the button to turn the light bulb on, and for it to stay on after the button is released. Heres a simple circuit which will accomplish that by latching itself closed. 12 volts DC power is used here on the control side of the relay, but the load side of the relay can be whatever we want it to be. This relay is now the switch which turns the light bulb on, and it will do so whenever the relay receives 12 volts DC power. So, weve got a 12 volt supply and a ground for the relay, with the bulb wired on a completely separate 120V circuit through one of the normally open contacts of the relay. If I wire the 12 volt supply through the pushbuton, now the relay will energize whenever the button is depressed, which closes the switch contacts inside the relay, and turns on the light. This also has the benefit of making the buttons electrical connections safe to touch, since theyre now just handling 12 volts. But, the light still goes out as soon as you release the button because the relay loses its 12v power source. However, if I branch off the 12 volt supply to another of the normally open switch contacts of the relay, then feed the other side of that back into the control side input, what now happens is that as soon as I push the button, the 12 volt control side becomes self-powered. The button is now completely out of the picture, as it becomes bypassed by the relay itself. The relay is now stuck in the closed position, or latched forever. At least, until the power supply is cut. Taking a closer look, we now have a second power source coming from before the switch. This has 12 volts on it at all times. Again, its going to the second set of switch contacts of the relay, and its output is being fed back to the control side. If theres no power from the button, well nothing happens. But as soon as the button supplies power, that second wire snaps into action, bypassing the button, and keeping the relay energized. But, if I cut that second wire feeding the relay and put a second button across it, this one with normally closed contacts, that means I can interrupt the 12v supply thats keeping the relay energized in order to deactivate it. Now, I press the on button, which energizes the relay. This of course turns on the light bulb, but also creates that new 12-volt supply for the relay to stay on indefinitely, but that new supply now travels through this second button. When I press it, it momentarily breaks the 12-volt supply to the relay, which de-energizes it, and the light goes out. However, as soon as the green button supplies 12 volts again, even for just a tiny fraction of a second, the relay provides a bypass for itself once more, and the light stays on. Pretty clever, huh? There are all sorts of applications for a circuit like this. For example, a garage door opener! Push one button, the motor starts, and it doesnt stop until a limit switch at the end of the doors travel opens the circuit. Of course, youll also want to design in some safety interlocks, and other stuff, but hey. It would work. It might also kill someone. But it would work! So then, how does this apply to the jukebox? Well, the Wurlamatic has a microswitch that serves as an interrupt to a latched relay. Its the red button in our previous example. It rides along the edge of the main gear. Thats why I said there are more than seven cams, because this is also its own kind of cam. Once the program is started, it will continue to run on its own because a relay, specifically the Main Cam Relay, is latched in. But its latched through this, the transfer switch. Now, youll notice that the switch doesnt actually get actuated... abruptly slow jazzy blues kinda music Ooh, twangy! Now, youll notice that the switch doesnt actually get actuated until the main cam has moved a little bit. Why is that? Well, because at first, either the Side 1 or Side 2 relay serves as the power source for the main cam relay. Electromechanics can get a little complicated. The same device can receive power from multiple places, but so long as you sequence things correctly, you can manage it. When the carousel has reached the correct selection, either the side one or side two relay will be activated. That starts the main cam program, just like pushing the green button. However, the signal from the first relay will disappear shortly after the record arm has moved from its resting position. Well get into the specifics of why that happens when we get to the delightfully named Selection Accumulator. To put it more simply, a signal caused this motor to start turning, just like the green button turned on the relay. But to keep it turning we need to generate a new signal because were gonna lose the first one, just like releasing the green button. And thats what this switch does. The transfer switch keeps the main cam relay energized, and thus the main cam motor running, all the way through its rotation, until the record is put back at which point it is released. But wait. Thats a problem. Doesnt it need to stop midway through to actually play the record? Indeed, it does! So, there is another switch at play here, appropriately called the Play Switch. This is actually a sort-of second red button in this scenario, but its not going to totally kill the circuit. Instead, it will just sort of pause it. Ironic for a switch named Play. Whenever the transfer switch is engaged, the main cam relay is, too. So it wants to move the mechanism. But, once the play switch is activated by this cam, it interrupts the flow of power from the transfer switch and de-energizes the main cam relay. This then causes the entire Wurlamatic mechanism to stop. And now the record can play. Incidentally, this switch does double-duty and the same switch which mutes the amplifiers auxiliary input to give priority to whatever record is playing. The key difference here is that the transfer switch is still trying to sending power to the main cam relay, but its being interrupted by the play switch. So what happens when the record is over? If this circuit was designed like our red and green button thingy, well if the red button's being held in, we would need another green button to provide power and start it back up. Do we have one? Well, yes! Thats the trip switch, located right here. Its activated by the tone arm once its near to the run-out groove of the record. This then bypasses the play switch, allowing current to go around it, and thus re-energize the Main Cam relay to restart the program. Now heres a bit of nuance which is very neat and I want to highlight it. The trip switch works as a bypass for the play switch, right? Which, again, the play switch stops everything so the *record* can play. The play switch isnt letting power through to the main cam relay, but the trip switch provides a workaround. But that means that the programming of all these cams needs to be done such that the play switch gets released before the tone arm is pulled back to its resting position. Otherwise, the play switch would just cause things to come to a halt once more as soon as the tone arm moved away from the trip switch. You can see that things were programmed just perfectly so that the play switch gets released, then the tone arm moves This is why electromechanics are so fascinating to me. Its a delicate ballet of logical circuit design and physical interactions. You need to make this action to stop? Well, just make it hit a switch that kills it. Oh, you need it to start up again? Well, just add another switch that un-does the first one. And make sure you get the timing right or it wont work at all! Basically, there are a ton of if/then statements in here, but manifested as wires and switches. Its a form of logic, but very rudimentary. When you combine that with crazy mechanisms like the Wurlamatic, you find yourself with a machine that can do surprisingly complex things all through whatsists and doodads. None of that there computery business. And you'll also find some important safety interlocks, too. For example, notice how when the record grabby thing grabs the record from the carousel, it ends up between the two records surrounding the one its grabbing. Well, what if the record carousel were to move with it in that position? A bunch of records would be broken by the little hook. To keep that from happening, the motor which turns the carousel is wired through this microswitch, which is only depressed when the Wurlamatic mechanism has opened the jaw of the right, the take out arm. Thats what its called. This prevents what we in the business call \"a bad day\". And of course youll find some other switches here that do other groovy things, like the Side 2 Release Switch. This is what actually releases the side 2 relay. Theres another one, of course, for the side 1 relay, and these function just like the red buttons in our little demo rig. Both the side 1 and 2 relays are self-latching to get the main cam relay, and thus the entire mechanism going, and these two switches are responsible for releasing them. Youll notice that its the same pins which are used to turn the take-out arm that actually actuate these two switches. But of course, we havent answered perhaps the most important question about this machine. What gets this all started? How does it know to start turning the carousel, and how does the carousel know what record to stop at? Or what side to play? Well, Im gonna save that for the next video. Yeah I know, I know, Im sorry, but this is already, what, [NINETEEN] minutes long? Or thereabouts? But before I go, lets look at one more thing. I bet you didnt think you could just remove the record carousel, but you can. Its actually just sitting in here. Just select a record to be played, then shut if off. [sound of music stopping[ Now, the carousel can simply be lifted up and out. Look at whats underneath. Its connected to this black arm which can be spun around. This is clearly going to some sort of mechanism below it. That mechanism is the Read-out Arm and it, along with the Selection Accumulator, are perhaps the most amazing parts of this entire machine. The Selection Accumulator is what made the sound you heard before everything got started. This one. [rapid clicking, followed by whirring] [click] [carousel spinny-buzz begins] Notice when I select a record that the buttons stay depressed until that sound stops. Then they pop back out. That's actually the reason there's a reset button in the middle, so that way if you press the wrong button you can pop it out. Now, listen closely as I select a series of records. A1 [whirring] [clunk as it stops] C1 [whirring] [click] [whirring] [clunk as it stops] E1 [whirring] [click] [whirring] [clunk as it stops] G1 [whirring] [click] [whirring] [clunk as it stops] and J1. [whirring] [click] [clunk as it stops] Did you notice something changing with each selection? [whirr... [whirr... click] [whirr... click] [whirr... click] [whirr... click] What's going on? Well, stay tuned because in the next video well find out. Thanks for watching. I really hope you enjoyed this video and that my explanations were easy enough to follow. Electromechanics are really quite simple, but they can be a little confusing. When you use switches and relays to make sequences and interlocks, it can seem to get out of hand. In fact, these here are the schematics for this machine. Theyre super easy to read! You might have thought this was a pretty simple device with what youve seen up till now, but trust me. When we explain where these buttons go, its gonna get a lot more complicated. I think Ill play some music now. How about T1? [ buttons being pressed ] [ selection accumulator whirring ] [ buzzing as carousel moves ] this is gonna take a while... shoulda picked something in the C's or D's... [ clunk, followed by various mechanical sounds ] [a low hum] scratchy low-fidelity smooth jazz audibly improved smooth jazz I liked that delivery so much and then it fell apart! And a staggering number of switches, rel ooh. Ha, thats the, thats the end of the sentence! [laughs] oops. Did I say of course weirdly? Its a little late now, cause Im already moving it back, but I think I did. However, this clever mechanical program wouldnt make for a useful jukebox its later than you think it is, Im kinda tired. When I press it, it morment... [weird stress sounds] Those are fun words! They arent words, theyre just sounds So what happens when the record is over? Oh. Its not phrased as a question that I know the answer to. I should have added a paragraph here. I need to I need to say something thats not in the script. Thatll go well. Stay tuned for next time when we ACCUMULATE SOME SELECTIONS I'm very excited for the next video. I think you're gonna like it. doo doo doo doo",
    "transcript_keywords": [
        "Main Cam Relay",
        "relay",
        "switch",
        "record",
        "Cam Relay",
        "Play Switch",
        "main cam",
        "button",
        "play",
        "cam",
        "side",
        "arm",
        "main",
        "power",
        "mechanism",
        "record arm",
        "cams",
        "back",
        "green button",
        "Wurlamatic mechanism"
    ],
    "transcript_entity_values": [
        "Side 2",
        "NINETEEN",
        "3400",
        "Wurlamatic",
        "The Selection Accumulator",
        "the Side 2 Release Switch",
        "a bad day",
        "1",
        "Main Cam Relay",
        "the year 1970",
        "Selection Accumulator",
        "7",
        "two",
        "120V",
        "1975-ish",
        "Wurlitzers",
        "the Play Switch",
        "M3",
        "12v",
        "12-volt",
        "2",
        "12 volt",
        "G1",
        "Arduinos",
        "12",
        "Wurlamatic",
        "Arduino",
        "12 volts",
        "seven",
        "first",
        "one",
        "these days",
        "the Selection Accumulator",
        "Wurlamatic",
        "One",
        "fed",
        "DC",
        "Two",
        "a ton",
        "Main Cam",
        "un",
        "second",
        "more than seven",
        "J1",
        "Wurlitzer",
        "three"
    ],
    "transcript_entity_types": [
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "PRODUCT",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "QUANTITY",
        "PRODUCT",
        "PERSON",
        "CARDINAL",
        "NORP",
        "ORG",
        "QUANTITY",
        "CARDINAL",
        "ORDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "GPE",
        "CARDINAL",
        "ORG",
        "GPE",
        "CARDINAL",
        "QUANTITY",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL"
    ],
    "vector": [
        -0.09595973789691925,
        0.05266614258289337,
        0.020514270290732384,
        -0.07718625664710999,
        -0.021288687363266945,
        -0.061106037348508835,
        -0.009214570745825768,
        0.01652817241847515,
        -0.02661493606865406,
        -0.03374972939491272,
        -0.022629931569099426,
        -0.041521403938531876,
        0.09851975739002228,
        -0.10666780173778534,
        -0.08159825205802917,
        -0.005780687555670738,
        0.03371741622686386,
        -0.07041611522436142,
        -0.03514588996767998,
        -0.07335411757230759,
        0.017887793481349945,
        -0.07877741008996964,
        -0.034995127469301224,
        -0.08053503930568695,
        0.024349823594093323,
        0.04318070784211159,
        -0.005726675037294626,
        9.39464007387869e-05,
        -0.03471767529845238,
        -0.09567778557538986,
        -0.08693795651197433,
        0.00017833181482274085,
        -0.06631278991699219,
        0.05812444910407066,
        0.009294678457081318,
        -0.04809824749827385,
        0.04656895995140076,
        -0.0074379779398441315,
        -0.0355643667280674,
        -0.006275747437030077,
        -0.00566983362659812,
        -0.047559820115566254,
        0.02907971478998661,
        0.022092461585998535,
        0.004910496529191732,
        0.07583703845739365,
        0.030170289799571037,
        -0.1445949375629425,
        -0.04749785363674164,
        -0.007723119109869003,
        -0.1316131055355072,
        -0.04014665260910988,
        0.11700533330440521,
        0.0694461241364479,
        -0.007335109170526266,
        -0.03781203180551529,
        0.09075187891721725,
        0.06603336334228516,
        0.030994851142168045,
        -0.025890525430440903,
        0.002880231710150838,
        -0.05286100134253502,
        -0.043998561799526215,
        0.027108849957585335,
        0.027373846620321274,
        -0.0490640290081501,
        -0.03355109319090843,
        0.04437738656997681,
        0.054647888988256454,
        -0.07508590817451477,
        -0.08554407954216003,
        -0.011859117075800896,
        -0.00434170151129365,
        0.05106586590409279,
        0.03864248842000961,
        -0.0247659869492054,
        0.007703739684075117,
        -0.028798997402191162,
        0.05882275477051735,
        0.0017688586376607418,
        0.01671803928911686,
        -0.03392134979367256,
        -0.027944650501012802,
        -0.024027865380048752,
        0.01301201619207859,
        0.0582510307431221,
        -0.028135929256677628,
        0.014482560567557812,
        -0.00897443387657404,
        -0.06548302620649338,
        -0.007995953783392906,
        -0.01106417365372181,
        0.025044629350304604,
        -0.0027584582567214966,
        0.022590752691030502,
        -0.007831486873328686,
        -0.005373077932745218,
        -0.020031725987792015,
        -0.005302714183926582,
        0.06315746158361435,
        0.010070087388157845,
        0.03222878277301788,
        0.080885149538517,
        -0.036021992564201355,
        -0.0307961106300354,
        -0.04832705482840538,
        0.023236971348524094,
        0.07623566687107086,
        0.07071001827716827,
        -0.07677273452281952,
        -0.04285324737429619,
        -0.008725244551897049,
        -0.010120024904608727,
        -0.0358101986348629,
        -0.005480164662003517,
        -0.0261131189763546,
        -0.09282483160495758,
        0.09477394074201584,
        0.02930484339594841,
        -0.02856304682791233,
        0.08746590465307236,
        -0.07667235285043716,
        -0.06325875222682953,
        -0.011380377225577831,
        0.0693870261311531,
        0.03402320668101311,
        -0.034225065261125565,
        8.70620119639736e-33,
        0.04153729975223541,
        0.005583371035754681,
        -0.013042476028203964,
        0.08970219641923904,
        0.08098146319389343,
        0.00841800682246685,
        -0.055164605379104614,
        0.04506349936127663,
        -0.029751034453511238,
        0.027074284851551056,
        -0.010647137649357319,
        0.044076599180698395,
        -0.05992893874645233,
        0.024178020656108856,
        -0.006284712348133326,
        -0.14462397992610931,
        -0.0584685392677784,
        -0.06497086584568024,
        -0.019608432427048683,
        -0.039735157042741776,
        0.03285086899995804,
        -0.045595683157444,
        0.019015468657016754,
        0.059320610016584396,
        0.013988510705530643,
        0.024792920798063278,
        0.009901121258735657,
        -0.052285339683294296,
        0.09918802976608276,
        0.06115075200796127,
        -0.06719396263360977,
        0.06964866071939468,
        -0.07893490791320801,
        -0.046742506325244904,
        -0.04751426726579666,
        0.02332446351647377,
        -0.04491547495126724,
        -0.09540737420320511,
        0.0525648295879364,
        0.028114348649978638,
        0.02129022777080536,
        -0.019282100722193718,
        -0.03477928042411804,
        -0.066067174077034,
        -0.041456639766693115,
        -0.02999642677605152,
        0.027837680652737617,
        0.045615434646606445,
        0.08773411810398102,
        0.017688143998384476,
        -0.028578979894518852,
        -0.007170077413320541,
        0.008264162577688694,
        -0.019223466515541077,
        0.0795464962720871,
        0.016579413786530495,
        0.006618562154471874,
        0.03335652872920036,
        0.006104751490056515,
        0.1342286318540573,
        -0.00996505469083786,
        0.0762733519077301,
        -0.015846772119402885,
        0.041854485869407654,
        -0.003383793169632554,
        0.058243174105882645,
        -0.01348633598536253,
        -0.0010067548137158155,
        -0.008953126147389412,
        0.05290735512971878,
        -0.04823416471481323,
        -0.018324987962841988,
        -0.029710063710808754,
        -0.09536062180995941,
        0.03713829442858696,
        0.004457978997379541,
        -0.04628273472189903,
        -0.010286439210176468,
        -0.0570019967854023,
        -0.06774768978357315,
        -0.011869332753121853,
        -0.00948323030024767,
        -0.05289720371365547,
        -0.029933465644717216,
        0.019915642216801643,
        -0.07007769495248795,
        -0.03850921243429184,
        -0.010757467709481716,
        -0.008829141966998577,
        -0.022139813750982285,
        0.005722065921872854,
        -0.019240789115428925,
        0.04715358838438988,
        0.07704567909240723,
        -0.1001318097114563,
        -8.25531242014864e-33,
        -0.004543107934296131,
        0.027250247076153755,
        -0.016657959669828415,
        0.06163710355758667,
        0.07026084512472153,
        0.021725468337535858,
        0.04972342401742935,
        -0.010723436251282692,
        -0.005635538604110479,
        -0.009406141005456448,
        0.02283153496682644,
        -0.03473105654120445,
        -0.015825267881155014,
        0.015206911601126194,
        -0.01432555541396141,
        -0.0032375906594097614,
        -0.030417727306485176,
        -0.03885098919272423,
        -0.0052179298363626,
        -0.010778207331895828,
        0.06739077717065811,
        0.05995609983801842,
        -0.04651907831430435,
        0.015055285766720772,
        -0.010807598941028118,
        0.020533699542284012,
        -0.019270729273557663,
        0.05080999433994293,
        0.0031979396007955074,
        0.06456619501113892,
        -0.03919015824794769,
        0.002095850184559822,
        0.03915480896830559,
        0.08233589679002762,
        -0.030190445482730865,
        0.027978211641311646,
        0.13409602642059326,
        0.031807851046323776,
        0.006049268413335085,
        -0.10282237082719803,
        0.05430860072374344,
        0.018516026437282562,
        -0.09879717975854874,
        -0.020311741158366203,
        -0.01788586936891079,
        0.044106870889663696,
        -0.12594494223594666,
        -0.0029627284966409206,
        -0.05969773605465889,
        0.010623019188642502,
        -0.015751665458083153,
        -0.025445541366934776,
        0.05503309145569801,
        -0.05713329091668129,
        -0.06982506066560745,
        0.061087992042303085,
        -0.005934298038482666,
        0.061166923493146896,
        0.05638696998357773,
        0.0247085839509964,
        -0.02958587557077408,
        -0.02396436035633087,
        0.00941332895308733,
        -0.010854366235435009,
        0.0220015961676836,
        -0.019011115655303,
        0.09041617065668106,
        0.06681361794471741,
        -0.053993478417396545,
        -0.0672103688120842,
        0.08581764996051788,
        0.0889815092086792,
        0.015431671403348446,
        -0.051249824464321136,
        0.0340806245803833,
        -0.050231438130140305,
        -0.01972758211195469,
        -0.06347763538360596,
        -0.06137464940547943,
        -0.03667188808321953,
        -0.02189052291214466,
        0.07505650818347931,
        0.062425535172224045,
        -0.010127929970622063,
        -0.02129422128200531,
        0.08558584749698639,
        -0.0016049245605245233,
        0.01202019676566124,
        -0.029936937615275383,
        0.02939651347696781,
        -0.05429711937904358,
        0.02438542991876602,
        0.07776770740747452,
        0.13947273790836334,
        0.04205003008246422,
        -6.742019564853763e-08,
        0.01924610696732998,
        0.03412673622369766,
        -0.01871533878147602,
        -0.0032358653843402863,
        0.031171705573797226,
        -0.015468589030206203,
        0.06570342928171158,
        0.033473771065473557,
        -0.01950147934257984,
        -0.04345395043492317,
        -0.02217072807252407,
        -0.03152735158801079,
        0.012051524594426155,
        0.10635789483785629,
        0.13663117587566376,
        0.08779622614383698,
        0.0013456582091748714,
        0.0010615057544782758,
        -0.03712408244609833,
        0.05394930765032768,
        0.09431610256433487,
        -0.028799505904316902,
        0.12740693986415863,
        0.09520342200994492,
        -0.02171940729022026,
        0.0636257529258728,
        -0.037753716111183167,
        0.015342853032052517,
        -0.016610583290457726,
        -0.009403420612215996,
        -0.10243182629346848,
        -0.007254577707499266,
        0.02421583980321884,
        -0.01946171186864376,
        -0.06862673908472061,
        0.0033489044290035963,
        -0.121429942548275,
        -0.0057062809355556965,
        0.02452102303504944,
        0.03704366087913513,
        -0.02022002823650837,
        -0.055007848888635635,
        -0.0482623353600502,
        0.0284795630723238,
        0.010224713012576103,
        -0.04486757889389992,
        -0.09416007995605469,
        -0.11687767505645752,
        -0.016993790864944458,
        0.046231575310230255,
        0.0137172294780612,
        0.009415443055331707,
        0.06079793721437454,
        0.031185735017061234,
        0.05121661350131035,
        0.039021313190460205,
        -0.01727443002164364,
        0.05863862484693527,
        0.018391240388154984,
        0.07581783086061478,
        0.06370753049850464,
        0.03745090588927269,
        0.01729275844991207,
        -0.05045054480433464
    ]
}