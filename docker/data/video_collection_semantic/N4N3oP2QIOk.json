{
    "id": "N4N3oP2QIOk",
    "title": "You ever seen these devices? Networking for Hackers and Cybersecurity professionals.",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2024-04-12T13:30:13Z",
    "video_url": "https://www.youtube.com/watch?v=N4N3oP2QIOk",
    "category": "Science & Technology",
    "tags": [
        "kali linux",
        "kali",
        "hack",
        "hacking",
        "hacker",
        "cyber",
        "cybersecurity",
        "information security",
        "network",
        "networking",
        "hub",
        "tap",
        "network tap",
        "wireshark",
        "ethereal",
        "bus",
        "star",
        "bus topology",
        "star topology",
        "bridge",
        "switch",
        "router",
        "linux",
        "nmap",
        "ssl",
        "http",
        "https",
        "ssh",
        "telnet",
        "port",
        "port numbers",
        "infosec",
        "tcp",
        "filters",
        "ip",
        "wireshark filters",
        "wireshark tutorial",
        "network troubleshooting",
        "packet analysis",
        "free wireshark tutorial",
        "wireshark training",
        "wireshark analysis",
        "packet capture",
        "tcp fundamentals",
        "introduction to wireshark"
    ],
    "views": 77452,
    "likes": 3147,
    "comments_count": 279,
    "description": "How long did it take you to see something new or learn something new in this video? If you want to be an Ethical Hacker or Cybersecurity Professional, you need to understand networking.   In this video I show you how to capture traffic using Wireshark and Ethereal using different scenarios: 1) Bus topology 2) Hub topology 3) Bridge topology 4) Switched topology 5) Port mirror / port span 6) Network Tap 7) VLANs and more :)  // David's SOCIAL //  Discord:   X:   Instagram:   LinkedIn:   Facebook:   TikTok:   YouTube:    // MY STUFF //     // SPONSORS //  Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  / MENU // 0:00 - Understand how networks work 0:50 - How to capture traffic on a bus network topology // Bus network explained 5:24 - Physical bus network demo // Remotely controlling two PCs 8:07 - Capturing traffic on a bus network demo // Ethereal demo 12:40 - Ethernet hub explained 13:15 - How to capture traffic on a star network topology // Star network topology explained 15:43 - Capturing traffic on a star network demo // Wireshark demo 17:16 - Collision domains explained 19:06 - Replacing ethernet hub with ethernet bridge // Physical ethernet bridge topology explained 20:06 - Capturing traffic on a bridge topology demo // Wireshark demo 21:19 - Ethernet bridge explained 24:01 - Replacing ethernet bridge with ethernet switch -// Physical ethernet switch topology explained 25:30 - Capturing traffic on a switch topology demo // Wireshark demo 27:23 - Ethernet switch explained 29:41 - Capturing traffic on a switch topology demo continued 32:14 - Port mirroring / spanning explanation demo 33:06 - Capturing traffic with an ethernet tap demo 35:00 - Routers explained  kali linux linux http apache tap network tap vlan bridge switch router nmap ssl http https ssh telnet chargen port port numbers wireshark bus  star  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   Disclaimer: This video is for educational purposes only.  #kalilinux #wireshark #hacker",
    "description_links": [
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/@davidbombal",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "that I'm gonna show you in this video. It doesn't matter if you wanna be an ethical hacker or cyber security expert, you need to understand how networks work. If you wanna capture traffic on a network, you need to understand how devices in the network handle the traffic or data sent across the network. Now, before we continue, hopefully you'll see something in this video that you've never seen before. You'll see devices that you've never seen, or you'll learn something that you didn't know about capturing traffic, capturing passwords, et cetera, on a network. Please put your comment below the timestamp where you learned something new. So at what point in the video, did you see something that you'd never seen before, or learned something that you didn't know? Please put in the comments below so that I can see if what I'm creating is of use to you. Okay, let's continue. Now let's start off with this device. Have you ever seen one of these devices before? This is an ethernet bridge. It's not a switch. Here we've got an ethernet switch. This is an ethernet bridge. This is basically the father to an ethernet switch. Now in a lot of videos that I've seen out there or in books, they show you pictures of various networks, but they don't actually show you how those networks work, and don't show you how to capture traffic on those networks. But that's what I'm hoping to show you in this video. I'm gonna show you a whole range of networks and show you how to capture traffic on those networks. We'll start with older networks. As you can hopefully see at the back there, I'm running some older computers. We're gonna start off with a bus network and show you how that works. And then I'll change the network topologies and show you how to capture traffic depending on which devices that you use. As an example, here we've got an ethernet hub. How does it send traffic versus a bridge versus a switch versus a router? Here's an ethernet tap. How does it capture traffic on the network? Have you ever seen one of these before? This is a ethernet transceiver. That's how we're gonna build the bus topology. Now in a lot of courses or YouTube videos or other places, such as books, they'll show you topology like this. As an example, PC1, PC2, PC3, connected via some kind of weird cable to a network that has a single cable like this. But what does that actually look like? This is a bus network. This is how ethernet started. Examples would be 10Base5 or 10Base2. Here's an example of a 10Base5 cable. This is the original ethernet. Notice these black marks in the ethernet cable. That's how you would connect yourself to the network using a vampire tap. So you'd use a drop cable. That's what this is over here, a drop cable from your computer to the transceiver with the vampire tap. Here's an example of 10Base5 with a transceiver. You would use a drop cable, which is basically a cable like this, which you would connect to the transceiver. And on the other side, you would connect this to your computer. As an example, here's a network interface card. And what I would do is connect the computer via the drop cable to the transceiver, to the 10Base5 network. Notice this was one long network, and you would connect multiple cards to the cable by tapping into the cable. Now that was an absolute nightmare. Fortunately, today we don't do that, but it's important that you understand what a segment is as an example in ethernet. A segment is essentially a piece of cable like this where I would connect myself to the network. So 10, it's 10 megabits per second base or baseband means that only one signal can be sent across the wire at any time. Five means 500 meters, two here means 185 meters. That's the length of the segment or the ethernet segment. Here's an example with 10Base2. I'm gonna show you a working example of this in a moment, but notice we would connect ourselves to the network using a T-connector like this. So connect yourself to the network like that. It's one cable that's connected to another one like this, T-connector with an ethernet card, which in turn is connected by another cable to another T-connector, giving us the ability to add multiple devices to the network. This is what it looks like logically. We've got PC1, PC2 and PC3 connected to the cable using a T-connector over here, T-connector, T-connector. At the end of the cable, we have what are called terminators to stop the signal bouncing back. So here's an example of an ethernet terminator. Otherwise the signal would bounce back through the cable. So why is this important from a cybersecurity point of view? You need to understand the basics of networking essentially. When traffic is sent from PC1 as an example, that traffic will go across the cable and be received by everyone in the network. Both these PCs will receive the traffic. And again, it's very nice to talk about this, but let me actually show you a working example where I'm going to run ethereal on a computer. Ethereal is the father of Wireshark and capture traffic sent from one device to another. In this example, I'll be using a Cisco router and two PCs and we'll telnet from PC1 to the router. The traffic will go to the router, but it'll also be received by PC2 and I'll be able to see the telnet traffic. Now again, don't lose sight of the fact that this is the basics of ethernet. We're gonna talk about bridging, hubs, switches and other devices through these videos. Hopefully you'll learn a lot about how ethernet actually works. Now rather than me just showing you this again through a picture on a computer or cables like this, let me show you a working example and show you how to capture the traffic. So what I've got here once again is a Cisco router with transceivers connected to it. You can see there's a 10BASE2 transceiver, here's 10BASET or ethernet as we know it today. That's gonna allow me to connect to this network from my computer over there. So what I'm gonna do is take my ethernet network, 10BASE2, connect it to the router. So router is now connected to 10BASE2. What I'll do is take the middle T connector and I'll connect it to this computer. And then what I'll do is take the end with a terminator and connect it to the second computer. So what I've got here once again is a Cisco router with a transceiver to 10BASE2 terminator at the end, T connector connects us through the network. We are going to this computer over here, but that T connector is connected via a cable to this computer terminator at the end. So this is what the physical network looks like. Router, two computers with T connectors. These computers are running Windows 98. So at the back there we have the physical topology or physical network. This is the logical topology or logical network, Cisco router, PC1, PC2. Now rather than trying to stand there and record this video, what I've done is I have connected this router to a Cisco switch, the switch right over here. 10BASE2 is this side and 10BASET or UTP, unshielded twisted pair cabling is on this side. Cisco switch over here. And that in turn connects me to my PC over here. So this switch, one cable goes to this computer, one cable goes to the Cisco router over there. That's gonna give me the ability to VNC or remotely control these two computers. Okay, so on this computer, I'll connect to PC1. And there you go. I'll connect to PC2. And there you go. But just to make the point, notice the green screen over there, green screen over here. But when I click notepad, we can see Windows 98 10BASE2 networking on the Windows 11 computer connected to that computer using VNC and notice it's displayed over there. So I'm controlling that computer from my Windows 11 computer. So what I'm gonna do on PC1 is Telnet to the router. Router has IP address 10.1.1.254, PC has IP address 10.1.1.1 and 10.1.1.2. I'm gonna Telnet to the router. And if what I've said is true about 10BASE2, PC2 should be able to capture the traffic and read the traffic sent from PC1 to the router, even though the traffic we'd perhaps expect should go directly to the router and not go across PC2. But again, on a bus topology, traffic goes everywhere and then is terminated at the ends using a terminator to stop the signal bouncing back. Okay, so here's PC1, IP address 10.1.1.1. I'm going to go to start, run, and we have the Telnet command to Telnet to the router. But before I do that, I'm gonna run ethereal onto the second computer. Ethereal is once again, the father to Wireshark. So some of us who are old enough remember working with ethereal before Wireshark. And what I'm gonna do here is simply start capturing traffic on my 3Com interface card. And you could filter for traffic, but in this case, I'll simply click OK to start capturing all traffic. And I'll now Telnet to the router. So I can put in my password, which in this case, I'm not gonna tell you, but hopefully you'll be able to see that once we run the capture. And I could do a command like enable, put in my password, type show run to see the running configuration of the router. Now if you're capturing this as a hacker, you'll be able to capture all my traffic. So there's the running configuration of the router. On the second computer, I'll click stop to stop the Wireshark capture or in this case, ethereal capture. Now a lot of traffic is captured here. A lot of TCP traffic as an example, but that's because I'm using VNC to control those computers. So all that traffic has been captured. So I'll click on protocol. You can see here CDP or Cisco discovery protocol. Here's EIGRP, which is a routing protocol. We can see hello messages there. I'll click on this again. I can see Telnet from 10.1.1.1, which is Windows 98.1. So this computer's IP address, Telnetting to the router. And what I can simply do is right click on here and click follow TCP stream. Ethereal is now putting that together so that we can see it clearly. And there you go. Hopefully you can see the password, which in this case is Cisco. You'll notice here that we see E twice and N twice because we're sending characters and then receiving characters. Telnet sends a character and receives a character. Telnet works like that where I type a character and then it's echoed back to me as an example so that I can see it on my screen. Notice the password again, Cisco, and there is the configuration of the Cisco router. Now it's really slow here because in a 10 base two network or 10 base five network, this is a shared medium. So in other words, 10 base two, 10 megabits per second is shared between everyone on this network. Only one person can speak at a time. We have something called Carrier Sense multiple access collision detection. Before a device sends traffic, it sends as if anyone else is speaking, so Carrier Sense. Multiple access means that anyone can access the network at any time, but they should make sure that no one else is talking when they want to send traffic on the network. And if a collision is detected, they should back off for a random period of time and then try again. So what's actually happening on this network is there are a lot of collisions. We only used to get about 30% utilization on networks like this. Fortunately, 10 base two and 10 base five networks have been replaced. We no longer have to deal with this kind of stuff. Windows 98 is not what we use these days. We're not using ethereal. We're using Wireshark today. Things are perhaps a lot better today than they were in those days, especially from a networking point of view. But what I want you to understand is that this is what's called a bus topology. Any device on the network could capture traffic from any other device because traffic was sent across the entire segment or across the entire physical cable. Now, fortunately, we stopped using 10 base five or 10 base two and we moved to UTP or unshielded twisted pair cabling. So cabling like this is so much better and so much easier to work with than the stuff that we had in the past. Network topologies also changed. So to make it less noisy, let's shut down Windows 98 and say goodbye to these old computers. And what I'll also do is turn off the Cisco router. So that's a lot quieter and a lot better now. We now using UTP cabling that I think a lot of us are more familiar with using a device such as this. This is not a switch, however, this is a ethernet hub. Notice at the back, we've got the AUI connector. This is where we would put the transceiver as an example. If you wanted to use 10 base two or 10 base five, typically, however, though, we would use this interface for 10 base two. So we have our BNC connector for 10 base two, AUI for 10 base five. And in front, we've got ports where we would connect an RJ45 cable. Now, in a topology like this, physically, we have a hub and we have these cables coming out of it. So it would look something like this. This is referred to as a star topology. We have the hub with a bunch of nodes or devices coming out of it like a star. So physically, it's a star, but the sad thing about a hub is that logically it's a bus topology. Still has all the same problems that we have in 10 base two. So even though we went from 10 base two to 10 base T with a hub, traffic sent by one device is received by all other devices in the topology. So in this example, I've got my Mac in front of me. I've got PC one and PC two, these two devices. In this case, I'm gonna be running Kali Linux on one of the Windows computers and running a web server. What happens when traffic is sent from the Mac to the PC? What we should see is that PC two is able to see that traffic because when traffic is sent to a hub, traffic is forwarded out of all other ports except the port in which it's received. This is still a shared medium. We don't get 10 megabits per second or 100 megabits per second in this case. That bandwidth is shared between all the devices in the same way that it was with 10 base two. From a security point of view, it's also a disaster because any device in the network, such as PC two, can see the traffic sent from the Mac to PC one or any other device. So if this Mac was sending traffic to the internet, as an example, this PC would be able to capture all that traffic. Hubs weren't great. So this is what the topology looks like in a network diagram. This is what it physically looks like. I've got a little Netgear hub here. I've got my three PCs connected. I've got my Mac connected here. I've got my two Windows computers connected to the hub and an internet connection over here. We don't really need the internet connection so I could remove that from the hub. I've just got my three computers connected to the hub. Kali's running within a virtual machine once again on this Windows laptop. Its IP address is 192.168.0.247. So if what I've said is true, when my Mac sends traffic to PC one, this computer, which is running Kali Linux in a virtual machine within it, this PC should receive the traffic because when traffic is sent to a hub, it's sent out of all other ports except the port in which it's received. So PC two should be able to capture the traffic. What you can see is traffic is shown here. We can see some broadcasts. It's expected that a broadcast be sent out of all ports except the port in which it's received, but what about unicast traffic? So I'm gonna browse on my Mac to 192.168.0.247. On this machine, I'm filtering for HTTP. Press Enter and notice we can see HTTP traffic on the Windows computer here when this computer goes to that server. Notice as an example, 192.168.0.247 is sending traffic to 192.168.0.167. Ifconfig on the Mac and I'll grep for 192. You can see this is the IP address on the Mac. So the Kali Linux virtual machine is sending traffic to the Mac. At the top, once again, it says it works and if we look at the Wireshark capture, looking at this message, looking at HTTP, we can see Apache to Debian default page, it works. I've been able to prove to you that traffic sent from one computer to another through a hub can be easily received by another device. We could do a simple test as an example by pinging the Kali virtual machine. So ping 192.168.0.247. So I'm pinging the server from my Mac. That's not shown here because I need to change my filter. If I filter for ICMP at the top here, you can see the echo request and echo reply messages sent between the two devices. Can see the IP addresses. We can see other information such as the Mac addresses, et cetera. So question time, how many collision domains are there in this topology? This works very similar to 10Base2. In 10Base2, a collision taking place anywhere in the network would cause the entire network to break. So carrier sense, multiple access collision detection. Any collision anywhere in this network would cause all devices to back off and slow down. So not very good. Exactly the same thing happens on a hub. This is a single collision domain. A collision anywhere in this network will affect the entire network. It's also a single broadcast domain exactly the same way as 10Base2 or 10Base5. Broadcasts are received by everyone. So as an example on my Mac, if I pinged 192.168.0.255, that broadcast, if I just restart this Wireshark Capture, is received by everyone. So this device over here receives the broadcast as well. So single collision domain, single broadcast domain, not great. So hubs were replaced by bridges. This is essentially a dumb device. Works at layer one in the OSI model and TCP IP model called a multi-port repeater. Traffic received on one interface is simply repeated out of all other interfaces. So as an example, if I had my Mac connected to port one on this hub, traffic received on this interface going to let's say the Kali Linux virtual machine on port two, what would actually happen is the traffic would be transmitted out of all other ports except the port in which it was received. Single collision domain, single broadcast domain, not great from a security point of view because everyone can see everyone else's traffic. Fortunately, hubs were replaced by bridges. So this is an example of an ethernet bridge once again. Okay, so I've changed the topology to look like this. I've got my Mac and my PC, in other words, the Mac in front of me and this computer with Kali connected to this hub, so hub one. The hub in turn is connected to the bridge, in this case on port two. The bridge is connected on port one to this hub over here and this PC is connected to that hub. So notice I've got two ethernet hubs and a bridge. These two devices are connected to the first hub on one port on the bridge, this computer, as well as my internet connection are connected to hub two. I'll unplug the internet connection because we don't really require that once again. Now let's see how the network changes. So question for you, if I send traffic from this Mac to the Kali computer, so connect to the web server once again, will PC two over here be able to see that traffic? And what happens if I send a broadcast? In other words, how many collision domains and how many broadcast domains are there when I have a bridge in the topology? Okay, so on PC two, what I'll do is restart Wireshark and start capturing traffic. We can see some information here such as IEEE 802.3 ethernet. You can see logical link control, so we can see DSAP and ESAP. I wouldn't worry about that for the moment, but basically that tells me that I'm seeing traffic from this bridge. The bridge is sending traffic into the network and I'm able to see that. I can see DNS traffic as an example here. Someone's trying to get to Dell, so this Dell computer is doing a lookup for Dell. But for the moment, what we wanna search for is HTTP. And what I'll do on my Mac now is try and go to the web server on Kali. There you go. Notice we're not seeing any traffic on this computer because the bridge learns where devices are in the topology and then only forwards traffic out of the relevant ports. A switch works in the same way. So basically, when traffic is sent from the Mac to the PC, the hub will send it to the bridge, but the bridge is not gonna forward that because it knows that PC one, or in this case, the Kali machine is on this side. It learns where Mac addresses are and builds a Mac address table. Now, why am I showing you a bridge? Because very few people have actually seen a bridge. In reality, you just read about it in books and I wanted to show you one that's actually working. And also today, we talk about ethernet bridges. So we talk about transparent bridging. So even though we're talking about a switch, we talk about a transparent bridge. We talk about spanning tree protocol and you'll see something called a bridge ID. So switches are basically the successors to bridges. This is the father to a switch, if you like. So modern day switches work in a very similar way to a bridge. They just have what are called ASICs or application specific integrated circuits that allow it to do things at much higher speeds, basically move traffic through the switch without slowing the network down. Bridges were a lot slower, had far fewer ports. This bridge only has two ports. This little switch over here has many more ports and you've probably seen switches with many more ports than a bridge like this. So traffic is not sent to the side of the network because the switch has learned where the Mac addresses are. I'll show you a Mac address table in a moment when I show you a switch. So if a collision did take place here, it wouldn't affect the side of the network. We have two collision domains here and we have one broadcast domain, a bridge or a switch, layer two switch, does not block broadcasts. We have to configure VLANs if we wanna block broadcasts. But let's demonstrate that because once again, it's all very good and well talking about the theory, but it's better to see this practically. What I'll do is start a ping on my Mac to the Kali machine. So Mac once again is sending traffic to PC one. If I filter for ICMP traffic here, I see nothing because once again, the traffic is contained on one side of the bridge. But if I send a broadcast, so change that to 255, notice the broadcast is received by this device. Bridges and switches do not stop broadcasts. We can still have broadcast storms in a bridged environment or a switched environment, especially if you don't enable a protocol such as spanning tree. Spanning tree blocks loops in a topology. If you don't do that, transparent bridges or transparent switches, but commonly referred to as transparent bridges will send traffic everywhere and loops will incur and there will be a broadcast storm if broadcasts are sent into a network that's not running spanning tree. Okay, so in summary, hub, hub, single broadcast domain, single collision domain. Here we have one times collision domain, one times collision domain because a bridge stops collisions that occur on one interface affecting another interface, but we have one times broadcast domain because broadcasts are sent through the entire network. So now let's replace the bridge with a switch. So I've replaced the bridge with the switch. Mac is connected to the switch. So is the Kali virtual machine via PC one. I've also got PC two connected. And once again, I'll disconnect the internet because it's not required for this lab. What you may have noticed is on the switch, we see that the interface went down. I'm connected to the console of the switch through this USB connector. So my Mac is connected to the console and I can use a command such as show mac address table to see the Mac address table of the switch. The reason why we have two Mac addresses on gigabit 1/0/2 is because I've got Kali running within a virtual machine on this computer. So both of them show as being connected to this port. That's how bridge or switch work. They learn where devices are by learning dynamically or statically on which ports the devices are connected. So as an example, it's learned dynamically that this device with this Mac address is connected to this port. Kali virtual machine has a Mac address that ends in FD7A. So this is the Kali virtual machine. This is the layer two switch. No configuration has been done on the switch with regards to the interfaces. Notice all the interfaces have default configuration. Very little configuration has been done on the switch. Show Mac address table once again. We could specify that we only wanna look at dynamic entries and there are four dynamic entries in the Mac address table. Okay, so let's do the test again. I'll run Wireshark on this computer. Just one change from the topology. Notice I'm not using the hubs. They're not currently connected. I've simply connected the devices directly to the switch. The difference you would see with a hub is you would see, for instance, three Mac addresses connected to gigabit 1/0/1 rather than having only two connected to two and one connected to one, assuming that I connected the hub to port one here. But apart from that, not really much difference for this topology. Let's start Wireshark on this Windows computer here. So we can see some traffic such as spanning tree. That's traffic sent from the switch. So spanning tree protocol used to stop loops. We can see some broadcasts here. The Windows computers are trying to find the default gateway but can't find it because I've disconnected this ethernet cable. But let's do a search for HTTP. So server's 247 once again. So on the Mac, I'll browse to that IP address. Notice website displays, but no traffic is received by this computer because once again, the switch is only gonna forward traffic out of the relevant ports. So traffic received on port one going to this Mac address, the Mac address of the Kali machine is only gonna be sent out of gigabit 1/0/2. This device will not see the traffic. Let's do the test again with ping. So I'll ping the Kali machine. And here I'll filter for ICMP. No ICMP traffic is seen because of the way that the Mac address table works. But if I send a broadcast, so rather 255 at the end there, notice broadcasts are received by this computer because a switch floods broadcasts. So again, in a topology with the switch, doesn't matter if we've got hubs or not in this topology, we have one times broadcast domain. But unlike this topology, because this device is connected directly to the switch and this device is connected directly to the switch, we have four collision domains. Every port on the switch is a separate collision domain. So one, two, three, four collision domains. The moment here we've only got three because we've only got three cables connected. Every port on the switch is a separate collision domain. But entire switch is a single broadcast domain because we don't have VLANs configured. So again, if I send broadcasts and run Wireshark again, notice the broadcasts are received. If I wanted to stop that, I could create VLANs. So I'll create VLAN 2 as an example. And then I'll put that device in VLAN 2. That's port nine. You can see that interface over there. So interface gigabit 1/0/9, switch port access to VLAN 2. So show run interface gigabit 1/0/1 as an example. This interface is in the default VLAN, VLAN 1. I could also show that information by typing show interface gigabit 1/0/1 switch port. And notice you can see here that it's in VLAN 1. But if we looked at port nine, that's in VLAN 2. Again, show run interface gigabit 1/0/9 would show us that that port is in VLAN 2. So now if I send broadcasts on the Mac, what you'll notice here, and I'll just start this again, is no broadcasts are received by this device because it's in a separate VLAN. But if I change that port, so interface gigabit 1/0/9, and said switch port mode access VLAN 1, notice what happens when I press enter. Traffic should be received by this device. So show run. Notice after a while, broadcasts are received by that device. Switch with no VLANs is a single broadcast domain. But what would you do if you wanted this device to be able to see the traffic sent from the Mac to the Kali machine? What you can enable is something called port mirroring or port spanning or port monitoring, where we monitor or forward traffic from this port to that port, so that this device can receive the traffic as an example. So on the switch, we have these dynamic entries. We've got Kali, we've got a Windows computer, we've got this computer, and we've got the Mac. What we're gonna do is use the command monitor. We can create different sessions. I'll use session one. The source interface that we're gonna monitor is port two. So interface gigabit 1/0/2, and we're going to monitor traffic in both directions. We are gonna forward the traffic of that session to a destination interface, which in this case is 1/0/9. So all traffic sent or received on this port is gonna be received by this port, and I'm gonna press enter. What you'll notice is suddenly traffic is seen there, and that's because I've got a ping going from the Mac to the Kali virtual machine. So let's do that again. I'll start the capture once again, and notice when I ping, traffic is received by this device. As soon as I enabled the spanning, that's what happened. Let's go to the web server running over there. We can see our Debian page. Let's do a search for HTTP. Nothing is displayed. It's probably because it's cached. So try again. Notice we can see some traffic here. Now it says 404 error. We told that the requested URL is not found on the server. That's because the service timed out. So what I'll do is start the service once again on the Kali machine. This is using a cached version. That's why we see it on the computer. But now when I refresh the page, notice we can see Debian default page. It works as we can see over here. So because we span the port or monitor the port, this device was able to see the traffic sent between these two devices. That's not normal behavior on a switch. What you can also do on a switch is flood the Mac address table to turn the switch into a hub. So if you flood the Mac address table of the switch with lots and lots of entries, the switch essentially becomes a hub and traffic is flooded out of all other ports. And then you'll be able to see the traffic. You can also capture traffic using a tap such as this. So you could tap the network. So that traffic sent on one port is received by another port. So to demonstrate that, I'll remove the monitoring interfaces. So I'll remove the destination monitoring. I'll remove the source monitoring. So show run, pipe, include, monitor. We don't see any monitoring taking place now. So if I start the Wireshark capture again and ping the Kali machine from my Mac, notice no traffic is received there because we're no longer spanning or mirroring or monitoring the port. But what I could do as an example is plug this into the laptop and power this on. So what I would do now is take this port and connect it to the monitor port over here. And for instance, all traffic received on this interface is now gonna be sent to the monitor port. But I need another cable here to basically allow the traffic to go back into the network. So I've essentially put a inline tap into the network now to be able to capture the traffic. Okay, so on the switch, if I look at the Mac address table, we can see entries such as the following. I've actually got the internet cable connected. So that'll time out once I remove that cable and there you go. So the only entries are on gigabit 1/0/2, 1/0/1 and 1/0/2. This device is hidden. So the network doesn't realize that this is tapping the traffic. On the Mac, if I ping the Kali machine, notice we can see the pings there. So pings are received as I ping that server. What I'll do here is filter for HTTP and let's see what happens when we open up a browser. So I'll go to the server and notice there you go. I can see that we told that the server is not found. That's because the service turned off. So I'll start the service again and let's go to the server again. Once again, caching makes it confusing, but there you go. You can see Apache 2 Debian default page. It works as we can see over here. So this device allows me to tap the network similar to a hub. You could use a hub, I suppose, to do the tapping if you want a cheap solution. Problem with these hubs is they only, for instance, go at 10 megabits per second, maybe 100 megabits per second, but this can go 10, 100 gig, and you get foster taps in this that can go at 10 gig as an example. Okay, so the video is getting really long at this point, so I'm gonna stop it here, but here's an example with a router. The difference between a router and a switch is a router stops broadcasts. So if you wanna stop broadcasts, routers today are a little bit different in that they have switching and routing capabilities. So as an example here, we might have some ethernet ports for switching, but then we would route from these interfaces to this interface, routers block broadcasts, and each interface is a collision domain, whereas a layer two switch is a single broadcast domain. You can create VLANs and then create multiple broadcast domains and then use what are called layer three switches to route between different VLANs. Okay, that's quite a long video. Tell me what you think. Hopefully you enjoyed this. Hopefully you learned something. Hopefully I've shown you something that you haven't seen before. Please put in the comments. If you've learned something you... Hopefully you've seen something that you've never seen before. I'm David Bombal, I want to wish you all the very best. glandify gum",
    "transcript_keywords": [
        "Mac",
        "traffic",
        "Mac address",
        "network",
        "switch",
        "Kali",
        "Mac address table",
        "port",
        "computer",
        "connected",
        "hub",
        "device",
        "cable",
        "show",
        "bridge",
        "router",
        "Notice",
        "Kali machine",
        "received",
        "capture traffic"
    ],
    "transcript_entity_values": [
        "these days",
        "three",
        "PC1, PC2",
        "Cisco",
        "two",
        "four",
        "VLAN 2",
        "100 megabits",
        "only one",
        "10.1.1.1",
        "second",
        "YouTube",
        "N",
        "1/0/1",
        "500 meters",
        "PC1",
        "185 meters",
        "FD7A.",
        "HTTP",
        "modern day",
        "UTP",
        "10.1.1.254",
        "Carrier Sense",
        "OSI",
        "David Bombal",
        "255",
        "CDP",
        "VNC",
        "USB",
        "10BASET",
        "3Com",
        "only two",
        "247",
        "Dell",
        "Bridges",
        "today",
        "10Base5",
        "PC3",
        "PC2",
        "VLAN",
        "Apache 2 Debian",
        "one",
        "PC1, PC2",
        "VLAN 1",
        "this Wireshark Capture",
        "DSAP",
        "404",
        "Windows 98.1",
        "100",
        "Kali Linux",
        "DNS",
        "Windows",
        "192.168.0.247",
        "Windows 98 10BASE2",
        "IEEE",
        "first",
        "Mac",
        "RJ45",
        "1/0/9",
        "Router",
        "nine",
        "10 megabits",
        "Netgear",
        "IP",
        "Carrier Sense",
        "10 megabits per second",
        "Debian",
        "AUI",
        "BNC",
        "10",
        "five",
        "those days",
        "Windows 98",
        "Wireshark",
        "about 30%",
        "Apache",
        "ASICs",
        "10BASE2",
        "192",
        "Kali",
        "Mac",
        "ESAP",
        "Windows 11",
        "Cisco",
        "Wireshark",
        "Five",
        "Only one",
        "about 10BASE2"
    ],
    "transcript_entity_types": [
        "DATE",
        "CARDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "QUANTITY",
        "CARDINAL",
        "PRODUCT",
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "QUANTITY",
        "ORG",
        "QUANTITY",
        "PERSON",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PERSON",
        "DATE",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "LAW",
        "PERSON",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "ORG",
        "PRODUCT",
        "DATE",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "QUANTITY",
        "ORG",
        "ORG",
        "PERSON",
        "QUANTITY",
        "NORP",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "PRODUCT",
        "PRODUCT",
        "PERCENT",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "PRODUCT",
        "GPE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL"
    ],
    "vector": [
        -0.025126978754997253,
        0.02251720242202282,
        -0.003508261637762189,
        -0.07980319857597351,
        0.07115110009908676,
        0.0032581265550106764,
        0.08344186842441559,
        0.035526104271411896,
        0.01952732354402542,
        0.029338432475924492,
        0.01623491384088993,
        -0.03524453565478325,
        0.09002841264009476,
        -0.054124828428030014,
        0.016614273190498352,
        -0.01648689992725849,
        0.03026791289448738,
        -0.06335818767547607,
        -0.03815232589840889,
        0.0026201752480119467,
        0.039435725659132004,
        -0.06387954205274582,
        0.013044014573097229,
        -0.09292373806238174,
        -0.07805317640304565,
        0.01686238870024681,
        0.08151376992464066,
        -0.003208685899153352,
        -0.07007908076047897,
        -0.04900828003883362,
        0.009217100217938423,
        0.039651885628700256,
        -0.045537225902080536,
        0.012693963013589382,
        -0.07628756016492844,
        -0.10747034102678299,
        0.033551182597875595,
        -0.015211879275739193,
        0.016804736107587814,
        -0.019702857360243797,
        0.016088156029582024,
        -0.13314934074878693,
        -0.023900963366031647,
        -0.016451865434646606,
        -0.02242041938006878,
        0.0178763959556818,
        0.030785443261265755,
        -0.047303084284067154,
        0.04620153084397316,
        -0.07716072350740433,
        -0.05890921875834465,
        -0.024047281593084335,
        0.062396228313446045,
        0.07731957733631134,
        -0.026186350733041763,
        -0.08298737555742264,
        -0.042243462055921555,
        0.020395901054143906,
        0.03553812578320503,
        -0.012829155661165714,
        0.04988696053624153,
        0.00966331921517849,
        0.005800274666398764,
        0.04908806458115578,
        -0.04392843320965767,
        0.06156785786151886,
        -0.028624454513192177,
        0.11001897603273392,
        0.0634496659040451,
        -0.04051489010453224,
        -0.07735186070203781,
        -0.06184910982847214,
        -0.047398582100868225,
        0.024294814094901085,
        0.07753312587738037,
        -0.04254453629255295,
        0.021816330030560493,
        -0.004199162125587463,
        -0.09907685220241547,
        -0.096790611743927,
        0.03929765149950981,
        -0.0209827721118927,
        -0.05693858861923218,
        0.06038173288106918,
        -0.02880583517253399,
        0.06597056984901428,
        -0.045770809054374695,
        0.0024907272309064865,
        -0.02681714855134487,
        0.03889365494251251,
        -0.03384624794125557,
        0.12349914014339447,
        -0.0018428625771775842,
        -0.03690267354249954,
        0.05412628501653671,
        -0.0070232306607067585,
        -0.055333662778139114,
        -0.05804992839694023,
        0.015447910875082016,
        0.0865388736128807,
        -0.048374418169260025,
        0.03352239355444908,
        0.011356138624250889,
        -0.0695197805762291,
        -0.008369723334908485,
        0.0019348994828760624,
        -0.007633858360350132,
        -0.04092779755592346,
        0.07178658992052078,
        0.007327961269766092,
        0.00204852526076138,
        0.0009485323098488152,
        -0.05213399976491928,
        -0.0072594890370965,
        0.05876978114247322,
        0.06923834979534149,
        -0.05532588064670563,
        0.0754544585943222,
        0.07724037766456604,
        -0.01720166951417923,
        0.0076026637107133865,
        0.030084801837801933,
        -0.006336832884699106,
        0.003709743032231927,
        0.04398900642991066,
        0.028955945745110512,
        -0.0007435984443873167,
        5.756745178204127e-33,
        -0.06845658272504807,
        0.09350620210170746,
        -0.07176898419857025,
        0.030711445957422256,
        0.043220069259405136,
        0.006229135673493147,
        0.030247265473008156,
        0.06050929054617882,
        0.023733656853437424,
        0.016635168343782425,
        -0.07521849870681763,
        -0.01001125480979681,
        0.06219599395990372,
        -0.004920291248708963,
        -0.009602190926671028,
        -0.023126566782593727,
        -0.0220024473965168,
        -0.04082576930522919,
        -0.03828071057796478,
        0.03957856446504593,
        0.04357045143842697,
        -0.04191847890615463,
        0.02120731957256794,
        0.013337301090359688,
        0.04360780119895935,
        -0.014727998524904251,
        0.010204846039414406,
        -0.025510713458061218,
        0.1371341496706009,
        0.01270588580518961,
        -0.11780939996242523,
        0.06065182760357857,
        0.0364571250975132,
        0.017996277660131454,
        0.013815149664878845,
        0.059205684810876846,
        -0.003921194933354855,
        -0.09849577397108078,
        -0.041277024894952774,
        -0.06644102931022644,
        -0.054259054362773895,
        0.0027001856360584497,
        -0.041879475116729736,
        -0.07580915093421936,
        -0.07734662294387817,
        0.032019950449466705,
        -0.03214991092681885,
        0.01193708274513483,
        -0.011411582119762897,
        0.024310950189828873,
        0.00031629635486751795,
        -0.022379260510206223,
        0.006331493146717548,
        -0.038316067308187485,
        -0.0054218219593167305,
        -0.002842365764081478,
        -0.024890748783946037,
        0.012078693136572838,
        0.015282201580703259,
        0.05821455270051956,
        0.03595355525612831,
        0.028586285188794136,
        0.02045399695634842,
        0.024138402193784714,
        -0.04529815912246704,
        0.034282609820365906,
        0.0561809241771698,
        0.06497630476951599,
        0.0562082938849926,
        -0.0335552804172039,
        -0.08321429044008255,
        0.06573937833309174,
        -0.021179720759391785,
        -0.026886701583862305,
        0.029928309842944145,
        0.07842112332582474,
        -0.13149237632751465,
        -0.015515835024416447,
        -0.0234896969050169,
        0.09957946091890335,
        -0.05185988172888756,
        0.015725338831543922,
        0.050111737102270126,
        -0.010806475766003132,
        0.03276536241173744,
        -0.04981433227658272,
        0.00944463349878788,
        -0.06756912171840668,
        0.0010834046406671405,
        0.07771299034357071,
        -0.05437511205673218,
        0.004170931410044432,
        -0.004187323153018951,
        0.05818673595786095,
        -0.044981345534324646,
        -7.255439864075079e-33,
        0.0019584891851991415,
        0.0557582713663578,
        -0.04197167605161667,
        0.022323446348309517,
        0.06091808155179024,
        -0.05160752683877945,
        0.05856679379940033,
        -0.0061058118008077145,
        0.058944400399923325,
        0.06939775496721268,
        0.021692847833037376,
        -0.012549623847007751,
        0.012983697466552258,
        -0.12498953193426132,
        0.044242776930332184,
        -0.09263500571250916,
        0.04326716437935829,
        -0.07641385495662689,
        -0.0706411600112915,
        -0.033772360533475876,
        -0.032769110053777695,
        0.06002272665500641,
        -0.012425599619746208,
        -0.06213720142841339,
        -0.017861073836684227,
        0.04202153906226158,
        0.07347062975168228,
        0.10039535164833069,
        0.02170451730489731,
        0.0241911131888628,
        0.003975310828536749,
        -0.019575556740164757,
        0.07889366894960403,
        0.04741772636771202,
        0.009077726863324642,
        0.11907894164323807,
        0.08142983913421631,
        0.011684867553412914,
        0.028569383546710014,
        -0.1609620898962021,
        0.059223536401987076,
        -0.02085295133292675,
        -0.08157837390899658,
        -0.03838160261511803,
        -0.04493921622633934,
        -0.048108212649822235,
        -0.094552181661129,
        0.00860174186527729,
        -0.09523329883813858,
        -0.057705316692590714,
        0.06427313387393951,
        0.04592306166887283,
        -0.029887977987527847,
        -0.013951200991868973,
        -0.020662130787968636,
        0.10000849515199661,
        0.1110542044043541,
        0.03237362578511238,
        0.08089403808116913,
        0.020063864067196846,
        0.010827663354575634,
        -0.03177502751350403,
        -0.04649471491575241,
        0.11146370321512222,
        -0.03759201988577843,
        -0.02262471802532673,
        0.031844671815633774,
        0.03014143370091915,
        -0.10062254220247269,
        -0.02156076580286026,
        -0.016686612740159035,
        0.03809545561671257,
        -0.015611415728926659,
        -0.06019262596964836,
        -0.014914967119693756,
        -0.03221024572849274,
        -0.0367904007434845,
        -0.0029607845935970545,
        -0.03904495760798454,
        -0.04143059626221657,
        -0.0297683235257864,
        -0.06596258282661438,
        -0.034343767911195755,
        0.04876173660159111,
        0.021803034469485283,
        0.0590062253177166,
        0.015523547306656837,
        0.007834595628082752,
        0.04252544045448303,
        -0.026377730071544647,
        -0.058267828077077866,
        -0.06565295904874802,
        -0.07493526488542557,
        0.10159226506948471,
        0.0996360257267952,
        -6.323107015759888e-08,
        -0.05405604466795921,
        0.026651348918676376,
        -0.007595675066113472,
        0.033809300512075424,
        -0.00954869668930769,
        0.03808941692113876,
        -0.053647108376026154,
        0.0011095405789092183,
        -0.026375487446784973,
        0.000729872495867312,
        0.005992018152028322,
        -0.04048651084303856,
        -0.06964215636253357,
        0.012533897534012794,
        0.02594124898314476,
        0.003128283191472292,
        -0.021988971158862114,
        -0.03304755687713623,
        -0.04758409038186073,
        -0.025674887001514435,
        0.0563543364405632,
        -0.05868702754378319,
        -0.05728030577301979,
        -0.0024753387551754713,
        0.026464499533176422,
        0.014770989306271076,
        -0.01839950494468212,
        0.01112574152648449,
        -0.009267132729291916,
        -0.09605000913143158,
        -0.0868237093091011,
        -0.03155301883816719,
        -0.007406645454466343,
        0.03572697192430496,
        -0.01320614106953144,
        0.0497874915599823,
        -0.06462422758340836,
        -0.049046311527490616,
        0.06278182566165924,
        0.09365672618150711,
        -0.09274371713399887,
        -0.08346055448055267,
        -0.017896655946969986,
        -0.015601251274347305,
        -0.03387647122144699,
        -0.004634925164282322,
        -0.07449939846992493,
        0.0032754940912127495,
        -0.009537696838378906,
        0.009288213215768337,
        0.013786013238132,
        -0.06176689267158508,
        0.05818454548716545,
        0.045008957386016846,
        0.01828509196639061,
        0.023203523829579353,
        0.03539632260799408,
        -0.06896462291479111,
        0.006926989182829857,
        0.08238295465707779,
        0.06544956564903259,
        0.08938957005739212,
        -0.0299227312207222,
        0.03472837060689926
    ]
}