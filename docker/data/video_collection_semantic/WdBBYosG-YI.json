{
    "id": "WdBBYosG-YI",
    "title": "Wireshark Display Filters | Free Wireshark and Ethical Hacking Course: Video #4",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-08-26T14:00:07Z",
    "video_url": "https://www.youtube.com/watch?v=WdBBYosG-YI",
    "category": "Science & Technology",
    "tags": [
        "ethical hacking",
        "hacking",
        "cyber security",
        "wireshark",
        "wireshark tutorial 2020",
        "ethical hacker",
        "wireshark tutorial for beginners",
        "wireshark download",
        "wireshark 2020",
        "networking",
        "how to hack",
        "wireshark filters",
        "wireshark tutorial",
        "how to use wireshark",
        "gns3 wireshark",
        "http",
        "packets",
        "sniffing",
        "how to",
        "packet analyzer",
        "kali linux",
        "hacker",
        "ethical hacking course",
        "hackers",
        "udemy wireshark",
        "packet sniffing",
        "learn hacking",
        "tutorial",
        "kali linux tutorial",
        "hacking course",
        "wireshark hacking"
    ],
    "views": 17314,
    "likes": 670,
    "comments_count": 63,
    "description": "When using Wireshark, you're going to want to use Display Filters to filter what you see. In this video I show you how to use them. Get the full Wireshark course for $9:  Join my Discord here:  support the mission, join thisisIT:  CCNA for $10:   Entire series:   Do you know how to use Wireshark Display Filters? Make sure you know where to capture packets or frames in a network. Do you know how devices such as hubs, switches and routers treat traffic? Do you know what port span is?  In this course I'm going to show you how to capture packets from a network, how to capture passwords, replay voice conversations, view routing protocol updates and many more options.  Do you know network protocols? Do you know how to hack? Want to learn wireshark and have some fun with Ethical hacking? This is the course for you:   Learn Wireshark practically. Wireshark pcapng files provided so you can practice while you learn! There is so much to learn in this course:  - Capture Telnet, FTP, TFTP, HTTP passwords. - Replay VoIP conversations. - Capture routing protocol (OSPF) authentication passwords. - Troubleshoot network issues. - Free software. - Free downloadable pcapng files. - Answer quiz questions.  The course is very practical. You can practice while you learn!  Learn how to analyze and interpret network protocols and leverage Wireshark for what it was originally intended: Deep Packet Inspection and network analysis.  Protocols we capture and discuss in this course include: - Telnet - FTP - TFTP - HTTP - VoIP - OSPF - EIGRP - DNS - ICMP  Menu: Overview: 0:00 Wireshark Display Filters Overview: 0:39 Demonstration: 2:12 ip.src filter: 3:52 ip.src or filter: 4:25 icmp filter: 5:37 Verify via devices: 7:27 ARP filter: 10:24 ip.dst filter: 12:02 ip.src and ip.dst filter: 13:07 Thank you to my supporters: 14:11 Thank you to my supporters: 6:25  pcap file used in the video:  Wireshark playlist:   ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  ITPro.TV:  30% discount off all plans Code: DAVIDBOMBAL   Boson software: 15% discount Link:  Code: DBAF15P  GNS3 Academy: CCNA ($10):  Wireshark ($10):   DavidBombal.com CCNA ($10):  Wireshark ($9):   Who this course is for: Network Engineers Network Architects Ethical hackers Networking Students  Wireshark wireshark download  wireshark tutorial 2020  wireshark tutorial for beginners  wireshark 2020  packet sniffing ethical hacking hacking  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #Wireshark #Hacking #CCNA",
    "description_links": [
        "https://bit.ly/wireshark9",
        "http://discord.davidbombal.com",
        "https://bit.ly/thisisitwireshark",
        "https://bit.ly/ccnafor10",
        "https://bit.ly/wiresharkhacking",
        "http://bit.ly/sharkpcap4",
        "https://bit.ly/wiresharkhacking",
        "https://itpro.tv/davidbombal",
        "https://bit.ly/boson15",
        "https://bit.ly/gns3ccna10",
        "https://bit.ly/gns3wireshark",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/wireshark9"
    ],
    "transcript": "- This video is part of my Wireshark packet analysis and ethical hacking course. You need to know Wireshark if you wanna be a good network engineer, or you wanna be an ethical hacker. In this video, I'm gonna show you some tips and tricks with regards to Wireshark. Make sure that you know how to use Wireshark filters. In this video, we're going to discuss Wireshark filters. I'm gonna show you some options with regards to filtering traffic using Wireshark. Have a look at this playlist if you wanna see other videos that are part of this series. Okay, let's get started. (upbeat music) Now, when capturing traffic off the wire, you'll be capturing all kinds of traffic. Wireshark display filters allow us to filter what we seeing. So, in other words, rather than seeing all the traffic in Wireshark, we simply filter for specific traffic types. As an example, you may only wanna see traffic from a specific source IP address, or a destination IP address. So, you can filter the traffic based on some kinda criteria. You may, as an example, only wanna filter HTTP traffic or FTP traffic from a specific IP address. The Wireshark documentation gives us some examples here so we could filter for SMTP, it's a simple mail transport protocol, which is TCP port 25. We could also filter for ICMP traffic. So, in this example, we are looking for TCP port equal to 25, so, SMTP or ICMP. So, in our filter, we'll see both of those types of traffic. We could also filter for a specific subnet. So, traffic in this source subnet going to this destination subnet. So, show only traffic in this LAN between workstations and servers, no internet. This is called an RFC 1918 address. This is a private IP address, it's non-routable on the internet. So, this will only show us traffic on the local LAN. There are many other options that you can use to filter traffic in Wireshark, but to get started, here's a genus tree topology, and let me ask you some questions. So, let's say the PC on the left pings the PC on the right. I'm gonna start a Wireshark capture here. So, there it is. As you can see, we're seeing a lot of traffic types. We've got EIGRP, we've got DNS, STP, all kinds of traffic types. I'll start a Wireshark capture here. And once again, we're seeing all kinds of traffic types. So, we've got to Wireshark captures. This is switch one to the router, and this is the router to switch two in this genus tree topology. So, let's see if you can answer some questions. Now, to help you do this, you can download these Wireshark captures. So, depending on which platform you watching this video on, just have a look at the attachments or the optional downloads, and download these Wireshark captures, and see if you can answer the questions yourself. Okay, so, here's PC one on the left, here's PC two on the right. Okay, so, PC one pings PC two. Ping succeeds. Let's go into Wireshark. So, this is the connection from switch one to router one. Connection over here. Now, in the display filter, I can type IP dot source, and I can specify a source IP address of let's say ten, one, two, one. Notice, I see traffic with this source IP address and this destination IP address. And let me actually make that ten, one, one, one. So, PC on the left. We can see a bunch of DNS requests, and then further down, we can see ICMP. Notice, I can see my echo request messages. I don't see echo response. I only see echo request. So, what I could do here say, Oh, IP source equals ten, one, two, one. So, what that will give me is the ICMP messages from ten, one, one, one, to ten, one, two, one, and notice, I get the reply. So, source IP address here, ten, one, one, one, so echo request. Here, source IP address is ten, one, two, one, it's a echo reply. That's this capture here. So, if we look at the echo request message, notice, the source Mac address is this. Source Mac address is this, destination Mac address is that. Now, be careful. In the reply, we see this as the source Mac address, and this as the destination Mac address. So, here's the important question. Is this the Mac address of PC one? Is this the Mac address of PC two? Notice, in the echo reply, we see source Mac address is this, but is it the Mac address of PC two? Well, let's have a look at the capture on the other side of the router. And here, what I'll do is I'll filter for ICMP. We can see the ICMP message from 10.1.1.1, to 10.1.2.1, and then from 10.1.2.1, to 10.1.1.1. And what you'll notice here for 10.1.1.1, going to 10.1.2.1, the destination is a VMware, source Mac addresses is this. That's different to what we saw on this side. Notice t10.1.1.1, going to 10.1.2.1, and 10.1.1.1, going to 10.1.2.1, notice, source Mac address is a VMware address, destination Mac addresses is this, whereas on this side, source Mac address is this, destination address is a VMware address. And the reason for that, if you're not sure is routers rewrite Mac addresses. They rewrite the Mac address in the frame. They will recreate the frame when they route from one interface to the other. So, this is the Mac address of PC one. This is the Mac address of PC two, but this and this is the Mac address of the router. And what I'll do actually at this point is stop the Wireshark captures, because we're getting a lot of traffic on the network. I wanna keep those captures small. I'll save this as PC one, ICMP packet flow, and I'll do the same thing for PC two, but call this PC two, ICMP packet flow. So, you can once again download these pick up files and have a look yourself. Okay, so, let's verify if what I'm saying is true. I'll open up a console to the router. So, here's the Cisco router. Show IP interface brief. We can see the IP addresses of the router, but let's have a look at the Mac address on gigabit zero, zero. So, on this interface, Mac address of the router is this Mac address. And going back to our Wireshark capture, notice, destination Mac address is this, which is the router's Mac address on gigabit zero, zero. The PC on the left is sending the traffic to the router because it needs to route from one interface to the other. These two PCs are on different subnets. We can see that once again by using the command IP config. Notice, IP address is this, subnet mask is this, default gateway is the router. On this side, IP config, IP address is this. Subnet mask is this. Default gateway is the router. So, different subnets. They send the traffic to the router to do the routing from one interface to the other. So, the destination Mac address the PC one is sending traffic to, is the router. And at this point, let's verify the Mac address of PC one. We can see that by using the command IP config slash all. Notice, Mac address of the PC is this, which is what we're seeing over here. 0c:29:8f:dc:d7. So, that's definitely the Mac address of PC one. What is the Mac address of PC two? We'll be able to see that in the capture on this side. PC two's IP address is this. Source Mac address is this. That's the Mac address of PC two. We can see that once again if we look at PC two. So, here's PC two, IP config slash all. The Mac address of the PC is this. 00:0c:29:cd:1a:b6. This once again is the router's Mac address on this side. We are looking at the capture from the router to the switch. This is an ICMP echo reply from PC two to PC one. It's gonna send the traffic to the router. Once again, to verify that, to show interface gigabit zero one, this is the Mac address of the router. On this interface, that's the Mac address that we see over here. So, by using filters in Wireshark, I could filter, for instance, on source IP address, or on protocol. Rather than looking at all traffic, I can filter the traffic. I could, as an example, filter for ARP. Notice, when the PC wants to send traffic to PC two, the first thing it's gonna do is ARP for the routers Mac address. Here's the ARP from the PC to the router. Notice, source IP address is this. Destination IP address is the router. The PC needs to know the Mac address of the router so it can send traffic to the router, so that the router can route from one interface to the other. So, this a ARP request message. You can see in the output here it says, who has this IP address? Tell 10.1.1.1. So, PC one is asking, who has IP address 10.1.1.254? And it's doing that because the default gateway of the PC is set to that IP address. Clear the screen, IP config will show us that. Notice, default gateway is this. The PC is asking the router for its Mac address. The router replies, notice ARP reply saying, sender IP address, sender Mac address. So, the PC, when ARPing for the routers MAC address, gets a reply from the router, and can then send traffic to the router to be routed from one subnet to another. Okay, so, I'm hoping you enjoyed that. This is the beginning of filters in Wireshark. Really important to know. Notice, I filtered for ARP here. I could, as an example, filter for IP destination address equals 10.1.1.254, and I'll be able to see traffic going to the router. In this example, it's DNS traffic. So, the PC on the left is sending a DNS request to the router. It's querying for this domain time.windows.com. The reason the PC is doing that is because the PC is configured to use the router as the DNS server. Notice, default gateway is this, DHCP server is this, but the DNS server is also set to the router. I'm not connected to the internet here, I'm using the router as the DNS server. So, again, you'll be able to see traffic to a specific IP address. I could, as an example, specify source IP address equals 10.1.1.1, and you can do, and that way, or this way, IP destination address equals 10.1.1.254. And I need to put a another equal sign there. That great thing in Wireshark is it shows you when you've done it right. Notice, that gives me something similar to what I saw previously. I'm getting DNS requests. So DNS query, in this example, from the PC to the router. If I just wanted to filter for DNS, I could do that. And notice, then I'll get responses if the Router replied back to the DNS query. It doesn't do that here because the router isn't configured with these domain names. I guess that was a basic introduction to some filters available in Wireshark. There are many, many options. We'll look at some more as we go through the course, but try and do it yourself. Try and download the Wireshark captures and see if you can discover stuff in the network. (upbeat music)",
    "transcript_keywords": [
        "Mac address",
        "source Mac address",
        "Mac",
        "address",
        "destination Mac address",
        "router Mac address",
        "Wireshark",
        "source Mac",
        "router",
        "traffic",
        "destination Mac",
        "Wireshark captures",
        "router Mac",
        "source",
        "DNS",
        "filter",
        "Notice",
        "ICMP",
        "Mac addresses",
        "Wireshark filters"
    ],
    "transcript_entity_values": [
        "first",
        "ten",
        "Notice t10.1.1.1",
        "STP",
        "ARPing",
        "Mac",
        "EIGRP",
        "25",
        "LAN",
        "10.1.2.1",
        "Cisco",
        "ARP",
        "Router",
        "two",
        "0c:29:8f",
        "Wireshark",
        "Wireshark",
        "TCP",
        "10.1.1.1",
        "zero",
        "Notice",
        "IP",
        "Mac",
        "one",
        "VMware",
        "MAC",
        "Ping",
        "switch one",
        "DNS",
        "Wireshark",
        "DHCP",
        "d7",
        "SMTP"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "PRODUCT",
        "NORP",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG"
    ],
    "vector": [
        -0.08047037571668625,
        0.025616155937314034,
        -0.024890553206205368,
        -0.06253938376903534,
        0.056534312665462494,
        -0.028551334515213966,
        0.045640554279088974,
        -0.036068689078092575,
        -0.0587078258395195,
        0.012414446100592613,
        -0.013096552342176437,
        -0.04685092344880104,
        0.004939365200698376,
        -0.015118183568120003,
        -0.04454006999731064,
        -0.0202797781676054,
        0.006968766450881958,
        0.0037253627087920904,
        0.03319653123617172,
        -0.0381193645298481,
        0.011573215946555138,
        -0.08823967725038528,
        0.04076671600341797,
        -0.09198485314846039,
        -0.027453746646642685,
        0.04243414103984833,
        0.04513005167245865,
        0.013663312420248985,
        -0.042119044810533524,
        -0.024590296670794487,
        -0.046448964625597,
        0.041252318769693375,
        -0.0029011997394263744,
        0.04369252175092697,
        -0.05071472004055977,
        -0.056612078100442886,
        0.0723113864660263,
        0.05290497839450836,
        -0.0026445260737091303,
        -0.026729699224233627,
        -0.050078991800546646,
        -0.018990417942404747,
        -0.015837959945201874,
        0.005486919544637203,
        -0.08201787620782852,
        -0.0284431055188179,
        -0.006263310089707375,
        -0.043638139963150024,
        0.02782590687274933,
        -0.07056740671396255,
        -0.04212430864572525,
        0.03997651860117912,
        -0.025580624118447304,
        0.09383111447095871,
        0.02313484437763691,
        -0.09036502242088318,
        -0.053070176392793655,
        0.01137841772288084,
        0.017918581143021584,
        -0.025594986975193024,
        -0.06433584541082382,
        -0.020232966169714928,
        -0.060150016099214554,
        0.04093536362051964,
        -0.027971448376774788,
        0.054050981998443604,
        -0.01126012485474348,
        0.13302285969257355,
        0.07098755240440369,
        -0.04650217667222023,
        -0.18748021125793457,
        0.022649498656392097,
        -0.0759924128651619,
        0.016370398923754692,
        -0.0001656783715588972,
        0.036347709596157074,
        0.0122759398072958,
        -0.007597198244184256,
        -0.048693519085645676,
        -0.04695245251059532,
        0.058833520859479904,
        -0.02453012950718403,
        -0.04708530008792877,
        0.06556379050016403,
        0.004416084382683039,
        0.04430918022990227,
        -0.08381357043981552,
        -0.012310346588492393,
        -0.0051103378646075726,
        0.0018151240656152368,
        -0.012921649031341076,
        0.06816048920154572,
        -0.014452542178332806,
        -0.004745843354612589,
        0.003230395494028926,
        0.006184959318488836,
        -0.008801057003438473,
        0.0025264513678848743,
        -0.00810028612613678,
        0.05970845744013786,
        -0.01067639235407114,
        -0.03807782754302025,
        -0.0156849455088377,
        -0.12722386419773102,
        -0.0061912862583994865,
        0.02702101320028305,
        0.015499819070100784,
        -0.02848699502646923,
        0.06500261276960373,
        0.008227899670600891,
        -0.05973615124821663,
        0.08504688739776611,
        -0.11374764144420624,
        -0.0870150551199913,
        0.0979820117354393,
        0.14946752786636353,
        -0.011410491541028023,
        0.045110203325748444,
        0.06259958446025848,
        -0.002017814898863435,
        -0.020517390221357346,
        0.051999423652887344,
        -0.01789310947060585,
        0.04444587975740433,
        0.08971412479877472,
        -0.019460732117295265,
        0.03700372576713562,
        2.7048584189901626e-33,
        0.03450532257556915,
        0.07999919354915619,
        -0.07441101968288422,
        0.033733706921339035,
        0.017423806712031364,
        0.04287251830101013,
        0.09337209910154343,
        0.06764409691095352,
        -0.009447473101317883,
        0.0867035835981369,
        0.0048053078353405,
        -0.00045316226896829903,
        -0.031933970749378204,
        -0.015283805318176746,
        0.04798896610736847,
        -0.008161835372447968,
        -0.07650358229875565,
        -0.053735051304101944,
        -0.03823815658688545,
        0.035062793642282486,
        -0.0022453858982771635,
        -0.08259201049804688,
        0.07388526201248169,
        0.005484891124069691,
        0.05213027074933052,
        0.008200233802199364,
        -0.03664238750934601,
        -0.01142801158130169,
        0.0896897166967392,
        0.024016637355089188,
        -0.072873055934906,
        0.04098918288946152,
        -0.03333105146884918,
        0.03208333998918533,
        0.05190007761120796,
        0.013912035152316093,
        -0.019123734906315804,
        -0.049713123589754105,
        0.002704947954043746,
        -0.026542138308286667,
        -0.11775372922420502,
        -0.03845631703734398,
        -0.01642095111310482,
        -0.09416434913873672,
        -0.03541946783661842,
        -0.05934510380029678,
        0.009057844057679176,
        -0.0043108719401061535,
        0.006424059625715017,
        0.04268890991806984,
        0.005456919316202402,
        -0.034150537103414536,
        -0.015454066917300224,
        -0.07197403162717819,
        -0.017365556210279465,
        -0.01989101618528366,
        0.060780223459005356,
        -0.0308977123349905,
        0.023714691400527954,
        0.06500007957220078,
        0.024918721988797188,
        0.05711859092116356,
        -0.02583940327167511,
        0.02222284860908985,
        -0.04532233625650406,
        0.03144156560301781,
        -0.003648055251687765,
        0.058760128915309906,
        0.039745163172483444,
        -0.021279696375131607,
        -0.06897570937871933,
        0.04058699309825897,
        -0.04512215033173561,
        0.0024755189660936594,
        0.038271818310022354,
        0.11683683097362518,
        -0.02715337835252285,
        0.03196154534816742,
        0.02439422346651554,
        0.0809248760342598,
        0.008437042124569416,
        -0.021670524030923843,
        0.06856571137905121,
        -0.00610016006976366,
        -0.025520995259284973,
        -0.040114875882864,
        0.02329474315047264,
        -0.0976252555847168,
        0.054244667291641235,
        0.04900924488902092,
        -0.0296007227152586,
        -0.011470451951026917,
        -0.015353969298303127,
        -0.0010052642319351435,
        0.009996412321925163,
        -4.8337591362239596e-33,
        0.02931530959904194,
        0.07796669006347656,
        -0.05057471618056297,
        0.014575165696442127,
        0.015694355592131615,
        -0.03179716318845749,
        0.037762392312288284,
        0.006614190526306629,
        0.04404858127236366,
        -0.0034308291506022215,
        -0.03580424189567566,
        0.009563199244439602,
        -0.024294916540384293,
        -0.05291161686182022,
        0.07089392095804214,
        -0.04852154105901718,
        -0.05184593051671982,
        -0.0016314085805788636,
        -0.06644656509160995,
        -0.10168059170246124,
        -0.0799923688173294,
        0.0971449688076973,
        -0.022664442658424377,
        -0.06658882647752762,
        -0.00121699005831033,
        0.0027432774659246206,
        0.03454207256436348,
        0.022255076095461845,
        0.1275460124015808,
        0.05121293291449547,
        0.03150244429707527,
        0.030272340402007103,
        0.06143839657306671,
        0.06386663764715195,
        0.017116036266088486,
        0.04125057905912399,
        0.13225685060024261,
        0.08138473331928253,
        0.06150035932660103,
        -0.03588427975773811,
        0.096438467502594,
        0.030720436945557594,
        -0.04716820642352104,
        0.00536287622526288,
        -0.04152115434408188,
        -0.08653926849365234,
        -0.09291302412748337,
        0.027292458340525627,
        -0.08975957334041595,
        -0.006310585420578718,
        0.07548657804727554,
        0.022022096440196037,
        -0.019642246887087822,
        -0.06083201244473457,
        -0.0008305267547257245,
        0.09049457311630249,
        0.05712815374135971,
        0.03830498084425926,
        0.11526217311620712,
        0.012405810877680779,
        -0.016302021220326424,
        -0.03718087077140808,
        -0.12497583031654358,
        0.0014552830252796412,
        0.020350269973278046,
        0.008164073340594769,
        -0.003906394354999065,
        0.026485871523618698,
        -0.033177368342876434,
        0.0067552863620221615,
        -0.018898088485002518,
        -0.06293771415948868,
        -0.006099346559494734,
        -0.08926896750926971,
        0.019912326708436012,
        -0.0066486746072769165,
        -0.010990669019520283,
        0.04855336248874664,
        -0.04694236442446709,
        0.06055465340614319,
        0.05438052862882614,
        -0.02676521986722946,
        -0.01675126701593399,
        0.059504035860300064,
        0.03861409053206444,
        0.0442669615149498,
        0.009443924762308598,
        0.02365441992878914,
        -0.001455271034501493,
        -0.10941924154758453,
        -0.060779500752687454,
        -0.021322792395949364,
        -0.027594106271862984,
        0.08836812525987625,
        0.11077698320150375,
        -4.942375753103079e-08,
        -0.06251043826341629,
        0.0021129846572875977,
        -0.036629173904657364,
        0.032070305198431015,
        -0.008318105712532997,
        0.10245823860168457,
        -0.024356836453080177,
        0.008718145079910755,
        -0.050158340483903885,
        -0.008184530772268772,
        0.04417294263839722,
        -0.02639102004468441,
        -0.0448797345161438,
        -0.02088008262217045,
        0.009170581586658955,
        0.012631678953766823,
        -0.032522134482860565,
        -0.019981075078248978,
        -0.023753749206662178,
        0.042452625930309296,
        0.034142035990953445,
        -0.050019729882478714,
        -0.0610135942697525,
        0.026971839368343353,
        -0.07451990246772766,
        -0.01873217709362507,
        0.0017087560845538974,
        0.07665026187896729,
        0.020955201238393784,
        -0.05512036755681038,
        -0.04237339273095131,
        0.016537370160222054,
        0.0010415813885629177,
        -0.05082992836833,
        -0.007890650071203709,
        0.03500226512551308,
        -0.12383245676755905,
        -0.1107502430677414,
        0.04114627465605736,
        0.08015699684619904,
        -0.10630807280540466,
        -0.07563535869121552,
        -0.016443699598312378,
        -0.008736170828342438,
        -0.04334447532892227,
        -0.014201020821928978,
        -0.02124354988336563,
        -0.06610088050365448,
        -0.021592386066913605,
        0.06660749763250351,
        -0.01356063038110733,
        -0.031569577753543854,
        0.04400556907057762,
        -0.00891025923192501,
        0.06312686949968338,
        0.06508839875459671,
        0.01920286938548088,
        -0.0745672956109047,
        -0.014208914712071419,
        0.02742212451994419,
        0.040695883333683014,
        0.07816639542579651,
        -0.04895768687129021,
        0.044108033180236816
    ]
}