{
    "id": "NvqD0wdQlYA",
    "title": "Free CCNP 350-401 ENCOR Complete Course: 6.2 JSON, Ubuntu and Python",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-05-04T16:00:16Z",
    "video_url": "https://www.youtube.com/watch?v=NvqD0wdQlYA",
    "category": "Science & Technology",
    "tags": [
        "ccnp",
        "encor",
        "350-401",
        "python",
        "json",
        "ccna",
        "ccnp encor",
        "ccnp enterprise",
        "ccnp training",
        "new ccnp",
        "ccnp study",
        "network",
        "nexus",
        "cisco certifications",
        "cisco training",
        "cisco",
        "cisco certified network professional",
        "ccnp certification",
        "encor 350-401",
        "ccnp automation",
        "ccie",
        "ccie encor",
        "cisco ccnp exam",
        "ccie enterprise",
        "cisco certification 2020",
        "cisco ccnp",
        "ccnp routing",
        "cisco encor training",
        "cisco encor exam",
        "2020 ccnp",
        "ccnp review",
        "cisco ccna",
        "ccna study",
        "ccna training",
        "cisco encor test"
    ],
    "views": 36628,
    "likes": 934,
    "comments_count": 108,
    "description": "This is a FREE complete CCNP 350-401 ENCOR Course. In this video we use a Python script running on an Ubuntu VM running on my Mac to SSH to a Nexus device and extract JSON data. I'm going to continue to teach you some basic Python.    I will be covering all the topics in the Cisco CCNP ENCOR exam. I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  Slides:    CCNP ENCOR playlist:   Previous Video:    Menu: Overview: 0:00 First Python Script : 0:47 Second Python Script: 6:13 Third Python Script: 7:55 Fourth Python Script: 11:56  ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  GNS3 Academy: CCNA ($10): bit.ly/gns3ccna10 Wireshark ($10): bit.ly/gns3wireshark  DavidBombal.com CCNA ($10):  Wireshark ($9): bit.ly/wireshark9  Python JSON CCNP CCIE CCNP ENCOR CCNP 350-401 CCNP Enterprise ccnp training CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccnp #encor #python",
    "description_links": [
        "https://bit.ly/encorjson3",
        "https://bit.ly/freeccnp",
        "https://youtu.be/8_R0gmpM8eI",
        "http://bit.ly/yt999ccna"
    ],
    "transcript": "- In the previous video in this course which I've linked here and below, I showed you how to run Python On-Box. So, run Python on a Nexus device and use CLI commands running within Python on the Nexus device. In this video, we're going to create a Python script and run it locally on my laptop. And SSH to the Nexus device and extracted data from the Nexus device. I wanna show you why it's powerful, using formatted data. So, using data in JSON format, rather than just in a string. It makes extracting information so much easier. Okay, so let's get started, and I'm gonna show you how to run Python locally, SSH to a Nexus device, and extract information from that Nexus device. Let's go. (upbeat techno music) - Okay so, I'm tired of using Python on the box now, what I'm gonna do is start an Ubuntu VM on my local Mac. I'm using Linux. I strongly suggest, just like Python, that you learn Linux. Linux is one of those core skills, you're gonna use it everywhere. So make sure that you learn Linux. So, here I'm going to open up a terminal. This is on my local computer, it's not in DevNet. This is local. And what I'm gonna do is install python3-pip and netmiko. Basically, what we're doing is we're installing python3 on the Ubuntu PC. And we're installing netmiko, which is a great way to connect to network devices. Rather than you writing all of the low-level code to SSH to a network device and then send commands to a network device, and then interpret the output, netmiko is your first step in automation. Because the developer of netmiko has done a lot of the hard work already, and you can just leverage that code in your Python scripts. One of the advantages of Python is there are a whole bunch of libraries available, including netmiko, including pyATS, including Nornir, that make our lives as network engineers a lot simpler. Don't reinvent the wheel, use the code and the hard work that others have done. And import those libraries into your code, and just leverage them. Don't reinvent the wheel. Now I've already installed these commands on my Ubuntu PC. But I'll paste them here just to show you the process. So, sudo apt install python3-pip And then I'm gonna install netmiko. Once again, I have previously installed the software. So, it should all be good. Just in case you want to know what release I'm using, I'm using Ubuntu 18.04.3 LTS. So this command, lsb release -a shows me the version of Ubuntu that I'm using. I'm just using one of the later releases of Ubuntu. So, I'll clear the screen. And now let's create a script. So, here's my script, I'm gonna copy it into that Ubuntu computer, and then I'll show you how to use it. I'm gonna create a script called python1.py. Not a good name, but it's okay for this demonstration. And I'm gonna paste that code in. This is importing the library netmiko. So, I'm gonna basically leverage the power of netmiko to connect to my Nexus device. Here's the username, here's the password, here's the port. Now, I know a lot of people are gonna complain, so I'll just say it right now. You don't have to store the credentials in your script. You could prompt for them if you wanted to, I'm just gonna store it here to keep it simple. It's a lab anyway, so it doesn't matter. I just want to show you how simple it is to extract information from a remote router. This router is running probably in the States somewhere, I don't know. It's hosted by DevNet. And I'm gonna pull back The show IP interface brief output, and display it on my computer. So, this is an example of a dictionary in Python. Notice the formatting. Does that look familiar? Hopefully that looks familiar. But it's a little bit different here to JSON, because in JSON formatting, we don't use single inverted commas. Basically, this is a dictionary storing the information that we need to connect to the router. This command allows me to connect to the router, and then this allows me to send a command to the router. In this case, 'show IP interface brief'. We store that in a variable, and then we print the results out. So, I'll save that script. I'm gonna use python3 to run that script. Okay, I'm getting an error, and this is one of the things you need to be careful with using Power Point. Notice the difference between that and this. Don't use Power Point, use a text editor. I typically use Sublime Text or Visual Studio Code. Notice that's gone green now. So, that looks better. I'll save that script. python3 python1.py. Script seems to be working now. So, this is SSHing to that device. And then running the command, and then hopefully we'll display the output, and there you go. We can see the output on that remote Nexus device on my Ubuntu computer. On the SSH session to the Nexus, show IP interface brief. There's the output of my direct SSH session. And here's the output using my Python script. Okay, so once again, I can simply type python3 python1.py. Python3 means I'm using Python 3. Python1 is the name of my script, and I can see the output. It's as simple as that to retrieve that data from that Nexus device. But let's try and do something more intelligent with the data. Okay, so this is just for us as humans; 'show IP interface brief' doesn't really help us. What I'm gonna do now however, is use the command 'JSON-pretty'. So, this line in yellow is actually the only change in the script. But I've put the full script in this Power Point Presentation so that you can download it. So let's use nano-nano once again, Nano is a simple text editor, Similar to Notepad on Windows if you like. So, I'm going to say nano python2. And what I'll do is paste my script in here. Here, pasted it correctly. So, I'll save that script. Only difference, once again is this. So, python3, run the second script. This should give us our JSON information. So, we should be able to get the JSON information back from the Nexus device. And, there you go. So, scrolling up, by using that single command, I've now been able to SSH to the device, retrieve the data, it's in JSON format. Notice double-inverted commas, we've got a colon, we've got a comma at the end. Make sure you recognize this formatting. I've said it, once again, many times. If you don't have a colon there, that would be an incorrect answer. If this is a semicolon, that would be an incorrect answer. It has to look like this. No comma at the end here. Okay, but once again, that's just given us some data. Perhaps not that useful. But, let's do something useful with the data now, and let's get the prefix from the data and the interface. So, basically I'm using a script now to pull back the first interface, and the first IP address. Don't worry, in the next script, I'm going to show you how to do that for multiple interfaces. So, now, L-S, we've got two python scripts, let's create a third python script. So, nano python3.py. I'll paste the script in. Stuff that we've added is this. So we pulling back specific interface information. Now I have made, done something bad here. I'm using double-inverted commas and single-inverted commas in Python. You should standardize on one. I'll fix that in the script that I give you. But that's fine. Python will accept that even though it's not great practice. But hopefully what will happen now, is this will connect to that Nexus device. Once again, SSHing across the internet, and it's gonna pull back first interface, first IP address, and then display that. And there we go. Okay, so just to prove it, here's my Nexus device once again. First interface, first IP address. There's that information. Now, you might so okay, but I want the state information. So, something like this. Remember we can simply edit that using our script. So, let's edit the script. So, rather than just seeing this data, what we said is we wanna get protocol state information. So, I'll copy that line, paste it here, and what we want is proto-state- is the name that they use. And I'll save the script. So, run it again. So, we should get the protocol status, we should get the interface name, we should get the IP address. This however will only be for one interface. Next script, I'll change that and make it better. Now, the formatting here's not great. I mean, that's just saying that you could print out information. This is the whole idea with iteration. So, rather than just saying that, you can say 'print interface.' And while I'm here, let's fix this, so I'd have to fix that for all the data to be consistent. I could do a find and replace, I suppose. That would actually make a lot more sense than doing it manually. But, the idea in Python is something called PEP8. PEP8 is talking about base practices. The moral of the story is be consistent. So, we can say print IP address. Print Protocol status. These are just examples, you could do what you wanted here. And this is the power of programming. You just change it the way you want it to changed. Okay, so it's got a problem, and this is my python2 history getting to me. In python3, we need to use a function for print. Print is a function. So, this need to be in brackets. Save that, run it again. Hopefully, this once again will connect to that Nexus device, and will tell us IP address, interface, and protocol status, and also show it in a little bit nicer format. So, here we go. There's the output of that script. Now, you might say but okay I want the information for all interfaces. So, I've got this script across two Power Point slides here. What I'm doing here, is creating a loop. So, we are using a four-loop here. What we're doing is getting the length of the rows. So, how many rows are there? So, if we jump back onto the device, so, this is SSHing directly to the device. Show IP interface brief JSON-pretty. ROW interface tells us how many interfaces there are. One, two, three, four, etc. 'Show IP interface brief' will just show us that, so here are all the interfaces. This length command allows me to work out how many interfaces there are, and then it just loops those commands for the number of interfaces that we've got. Okay, so first thing is. Netmiko configuration. So, L-S, we're now working on python script four. So, python4.py. I'll paste that in. That basically, once again just allows me to connect to the device. Didn't have enough space in Power Point. I've copied this into the VM now. So, the big difference now is, it's using the command, and then finding out how many interfaces there are, and then using a loop to basically run these commands multiple times for the number of interfaces that we have. So, clear the screen, python3 python4.py. This should hopefully now give us IP address and interface name for all the interfaces on that device. And to prove it, I'll create some extra interfaces and run the script again, and we should see that. So, there you go. All the interfaces on the device, and the IP addresses. So, if I show that side by side, they're all interfaces on the device and the IP addresses. But let's create another loop back. So, let's create a loop back to IP address 2.2.2.2 / 32 mask. Interface loop three. IP address, / 32 mask. Show IP interface brief. I've just created two additional loop-back interfaces. So, run that script again. This is, once again, connecting to that device in DevNet, and pulling back the information, and there you go. Additional loop-back interfaces are shown. Just to prove it once more, last interface loop-back four, IP address, quadruple four. Show IP interface brief. A new interface is created. Run the script again. We didn't previously have loop-back four in the output here, but hopefully we will now. And there we go. So, why are we using JSON? Much easier to work with this kind of data when you've got a python script. It's very difficult to find information if it's a string. If it's just data that's in an unformatted format. So, if it's just some kind of data that's like this capture, not easy for a machine to read that, we want to put it in a format that's easy for a machine to query and interpret. Your python scripts are gonna be so much easier if the data's in JSON. Trust me. Try and do that kind of stuff with just strings, and parsing the string, trying to find where the data is, and extracting a piece of data. It's very hard to do that with traditional mechanisms. So much easier if the data is correctly formatted using JSON or even XML or YML. Big idea for doing this, is to make it easy for machines to read. (upbeat techno music)",
    "transcript_keywords": [
        "Nexus device",
        "script",
        "Python",
        "Nexus",
        "interface",
        "device",
        "Python script",
        "show",
        "interfaces",
        "data",
        "JSON",
        "Power Point",
        "Ubuntu",
        "information",
        "run",
        "run Python",
        "power",
        "SSH",
        "address",
        "netmiko"
    ],
    "transcript_entity_values": [
        "first",
        "Netmiko",
        "Linux",
        "three",
        "python1.py",
        "JSON",
        "SSH",
        "32",
        "third",
        "Python On-Box",
        "One",
        "two",
        "four",
        "L-S",
        "States",
        "DevNet",
        "second",
        "PEP8",
        "Nornir",
        "Nano",
        "IP",
        "Python",
        "Linux",
        "Mac",
        "SSHing",
        "netmiko",
        "one",
        "Power Point",
        "Ubuntu 18.04.3 LTS",
        "python3.py",
        "JSON",
        "Python",
        "Sublime Text or Visual Studio Code",
        "Nexus",
        "First",
        "Python 3",
        "VM",
        "CLI",
        "python3"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "GPE",
        "ORG",
        "ORDINAL",
        "PRODUCT",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "PRODUCT",
        "GPE",
        "WORK_OF_ART",
        "WORK_OF_ART",
        "ORG",
        "ORDINAL",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "FAC"
    ],
    "vector": [
        -0.07212089002132416,
        0.030363375321030617,
        -0.05370628461241722,
        -0.05090516433119774,
        0.01889191009104252,
        -0.009173670783638954,
        -0.027660105377435684,
        0.03469593822956085,
        -0.07803815603256226,
        0.015905655920505524,
        0.09871022403240204,
        -0.012522656470537186,
        -0.048944469541311264,
        0.004391188733279705,
        0.0398125983774662,
        -0.026424357667565346,
        -0.016538383439183235,
        0.003974401857703924,
        0.017124556005001068,
        -0.06290405988693237,
        0.004289642442017794,
        -0.018937095999717712,
        0.04905683547258377,
        0.025045957416296005,
        -0.04914716258645058,
        0.06923447549343109,
        0.05454738065600395,
        0.021567324176430702,
        -0.017520131543278694,
        -0.025285104289650917,
        -0.03462422639131546,
        0.036890994757413864,
        0.04431602358818054,
        0.04238361865282059,
        0.05294009670615196,
        -0.006867723539471626,
        -0.018241649493575096,
        -0.03534885123372078,
        -0.08418206870555878,
        -0.025339175015687943,
        -0.015973927453160286,
        0.000359700876288116,
        -0.00852102879434824,
        -0.00798572227358818,
        0.0740545392036438,
        -0.08125711977481842,
        -0.08461875468492508,
        -0.08860700577497482,
        0.08988706022500992,
        0.016063986346125603,
        -0.0832546204328537,
        0.02917649783194065,
        0.010874795727431774,
        -0.04955262318253517,
        -0.03142319992184639,
        0.021876737475395203,
        0.014879683032631874,
        -0.05149959400296211,
        0.01671135239303112,
        -0.05811888724565506,
        -0.04283847287297249,
        -0.07094383239746094,
        -0.03692197799682617,
        0.029249250888824463,
        0.025165682658553123,
        -0.010145744308829308,
        -0.02452193573117256,
        0.09044946730136871,
        0.037787869572639465,
        -0.0211127121001482,
        -0.07125601917505264,
        0.007969425059854984,
        0.010759321972727776,
        0.05229903385043144,
        -0.01487472653388977,
        -0.006397044751793146,
        0.019307607784867287,
        -0.10172954201698303,
        -0.043170541524887085,
        -0.03148264065384865,
        0.048598650842905045,
        -0.04694370925426483,
        -0.0959295779466629,
        -0.008866606280207634,
        0.07889508455991745,
        0.016945429146289825,
        0.028395606204867363,
        0.08945277333259583,
        -0.03744940087199211,
        0.006776814348995686,
        0.0022931951098144054,
        -0.013590105809271336,
        -0.03563633933663368,
        -0.0027302810922265053,
        -0.009729806333780289,
        0.03409425541758537,
        0.045570094138383865,
        -0.06523444503545761,
        -0.03292402997612953,
        0.05805900692939758,
        0.04866137355566025,
        -0.012672893702983856,
        -0.02069554477930069,
        -0.04553055390715599,
        -0.05292985588312149,
        -0.0046881879679858685,
        0.09617485851049423,
        0.031379442662000656,
        0.07802723348140717,
        -0.0017058196244761348,
        -0.06367012858390808,
        0.046553801745176315,
        -0.04634842649102211,
        -0.07447219640016556,
        0.05269777029752731,
        0.09764868021011353,
        0.02715170383453369,
        0.09839382022619247,
        0.0811237096786499,
        0.03531761094927788,
        0.06301455944776535,
        0.020934561267495155,
        -0.050949811935424805,
        -0.00019971918663941324,
        -0.0161004438996315,
        -0.09647812694311142,
        0.06718259304761887,
        5.915418548465904e-33,
        -0.018647456541657448,
        -0.015992455184459686,
        -0.010893129743635654,
        0.009626648388803005,
        0.05495491996407509,
        -0.007198211271315813,
        0.0652928501367569,
        0.07068398594856262,
        -0.14612232148647308,
        0.01806076057255268,
        -0.0008550460916012526,
        0.06704861670732498,
        -0.018126312643289566,
        0.045511048287153244,
        -0.09149909019470215,
        -0.11967875063419342,
        -0.09604860842227936,
        0.02037321962416172,
        0.05258830264210701,
        0.05330713465809822,
        0.005319810938090086,
        -0.019235797226428986,
        0.045974649488925934,
        -0.010289408266544342,
        0.0083162821829319,
        -0.000362356222467497,
        -0.029241789132356644,
        0.007853674702346325,
        0.06163526698946953,
        0.028703175485134125,
        -0.059449728578329086,
        -0.0005814927280880511,
        -0.10894228518009186,
        -0.06201369687914848,
        0.041606537997722626,
        -0.0027211031410843134,
        -0.009151949547231197,
        -0.0622747428715229,
        -0.01665527932345867,
        -0.05921773239970207,
        -0.08851884305477142,
        0.02088601142168045,
        -0.028912914916872978,
        -0.04914892464876175,
        -0.11933708190917969,
        -0.027171343564987183,
        0.016661861911416054,
        0.022984426468610764,
        0.06554652005434036,
        0.03967811539769173,
        -0.04165423661470413,
        0.009740144945681095,
        -0.06457928568124771,
        -0.1473691463470459,
        -0.0035144006833434105,
        -0.06932879239320755,
        0.06652399152517319,
        0.006510643754154444,
        0.026791473850607872,
        -0.04805508255958557,
        0.040690261870622635,
        0.03747032955288887,
        -0.04446282237768173,
        -0.058420535176992416,
        -0.0374956876039505,
        0.004472796339541674,
        -0.1140819564461708,
        -0.060372404754161835,
        0.05806390568614006,
        0.00791123602539301,
        -0.048646774142980576,
        0.024234674870967865,
        0.01549710426479578,
        -0.05563806742429733,
        0.07511289417743683,
        0.03435225784778595,
        -0.043504830449819565,
        0.020476805046200752,
        0.004312032833695412,
        0.002060017781332135,
        0.000830194097943604,
        -0.017975082620978355,
        0.01154002919793129,
        -0.006380593869835138,
        -0.018827999010682106,
        0.053539711982011795,
        0.03132962808012962,
        -0.06557460874319077,
        -0.06644710898399353,
        -0.03654995188117027,
        -0.034234482795000076,
        -0.00295300898142159,
        0.05625098943710327,
        -0.0016574084293097258,
        0.02188795432448387,
        -7.994902217875102e-33,
        0.04890909045934677,
        0.049796927720308304,
        -0.03796372190117836,
        0.005644029472023249,
        0.02923736348748207,
        -0.02499617449939251,
        0.03329939767718315,
        0.048999711871147156,
        0.05561124533414841,
        -0.004240049980580807,
        0.00789577979594469,
        -0.03367352485656738,
        -0.014794315211474895,
        -0.041474733501672745,
        0.06426925212144852,
        -0.03168034180998802,
        -0.08130962401628494,
        0.030610084533691406,
        0.034923773258924484,
        -0.04137757420539856,
        -0.018278397619724274,
        0.14097917079925537,
        -0.034335654228925705,
        -0.011909592896699905,
        -0.03611823171377182,
        0.03142506629228592,
        0.0036412831395864487,
        0.0075454795733094215,
        0.018232988193631172,
        -0.0378330834209919,
        -0.053291529417037964,
        0.008888653479516506,
        -0.09168379753828049,
        0.0738738551735878,
        -0.007294883020222187,
        0.06798241287469864,
        0.08334293216466904,
        0.041201040148735046,
        -0.0653078705072403,
        0.04115796834230423,
        0.05565816909074783,
        0.045733492821455,
        -0.07883097976446152,
        -0.01696663722395897,
        0.02929917722940445,
        0.0037154739256948233,
        0.03307732194662094,
        0.11019917577505112,
        -0.013854991644620895,
        0.034705180674791336,
        0.012353704310953617,
        0.04279761388897896,
        -0.0897807627916336,
        -0.0656714141368866,
        0.027430009096860886,
        0.03119536302983761,
        -0.03023458831012249,
        -0.08964385837316513,
        0.005489929113537073,
        -0.0334937609732151,
        -0.023218993097543716,
        -0.03178703039884567,
        -0.02131870575249195,
        -0.023343324661254883,
        0.013257315382361412,
        -0.058176860213279724,
        -0.03678516298532486,
        0.01303121168166399,
        -0.0029360982589423656,
        -0.03762248158454895,
        -0.02483184076845646,
        0.00784542690962553,
        0.0908351019024849,
        -0.05054574832320213,
        0.019822264090180397,
        -0.0014222447061911225,
        -0.030513128265738487,
        -0.03205563500523567,
        -0.04109247773885727,
        -0.004242655821144581,
        0.002617831341922283,
        0.004254502709954977,
        0.016847439110279083,
        0.14540322124958038,
        -0.03710869699716568,
        0.06706361472606659,
        0.07746987789869308,
        -0.0074470918625593185,
        -0.03774002566933632,
        0.07929585129022598,
        -0.05095939710736275,
        0.06640259921550751,
        0.10653776675462723,
        0.12577323615550995,
        0.013094810768961906,
        -5.278431203237233e-08,
        -0.0434059202671051,
        0.01712496392428875,
        -0.06700947135686874,
        0.04258047789335251,
        -0.08169535547494888,
        0.009065627120435238,
        -0.002928681205958128,
        -0.0745290145277977,
        0.03307672217488289,
        -0.02014155499637127,
        0.07074779272079468,
        -0.004146695137023926,
        -0.02973412722349167,
        0.0751185193657875,
        -0.049405984580516815,
        0.1335115283727646,
        -0.022325310856103897,
        0.062226127833127975,
        0.002426671329885721,
        -0.0142236752435565,
        0.07366057485342026,
        -0.0072388374246656895,
        0.015186053700745106,
        0.03680228441953659,
        -0.11434141546487808,
        0.09604057669639587,
        -0.006464883219450712,
        0.08374734222888947,
        -0.013012253679335117,
        -0.07390778511762619,
        -0.039166420698165894,
        -0.0880519449710846,
        0.014709456823766232,
        -0.018796345219016075,
        0.08665195852518082,
        -0.013361148536205292,
        -0.03918512910604477,
        -0.055320266634225845,
        0.03577101230621338,
        0.04795701801776886,
        -0.0974913090467453,
        -0.062264714390039444,
        -0.07766219228506088,
        0.034482527524232864,
        0.03820749744772911,
        -0.03490212932229042,
        -0.07720271497964859,
        -0.02093326672911644,
        -0.010443824343383312,
        0.023090215399861336,
        -0.03399142250418663,
        -0.032060910016298294,
        -0.06894635409116745,
        -0.033188432455062866,
        0.10085467249155045,
        0.061740197241306305,
        0.030151506885886192,
        -0.02253790944814682,
        -0.08192717283964157,
        0.003707476193085313,
        0.03965418040752411,
        0.06908153742551804,
        -0.007495863828808069,
        0.012456151656806469
    ]
}