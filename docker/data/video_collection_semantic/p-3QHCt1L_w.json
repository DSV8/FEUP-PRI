{
    "id": "p-3QHCt1L_w",
    "title": "Free CCNP 350-401 ENCOR Complete Course: 6.4: REST APIs Part 2",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-05-08T14:42:36Z",
    "video_url": "https://www.youtube.com/watch?v=p-3QHCt1L_w",
    "category": "Science & Technology",
    "tags": [
        "ccnp",
        "encor",
        "dna center",
        "cisco dna",
        "cisco sdn",
        "cisco dna center",
        "rest",
        "rest api",
        "restful api",
        "350-401",
        "python",
        "json",
        "ccna",
        "ccnp encor",
        "ccnp enterprise",
        "ccnp training",
        "new ccnp",
        "ccnp study",
        "cisco certifications",
        "cisco training",
        "cisco",
        "ccnp certification",
        "encor 350-401",
        "ccnp automation",
        "ccie encor",
        "cisco ccnp exam",
        "ccie enterprise",
        "cisco certification 2020",
        "cisco ccnp",
        "cisco encor training",
        "cisco encor exam",
        "ccnp review",
        "cisco ccna",
        "ccna study",
        "ccna training",
        "cisco encor test"
    ],
    "views": 33846,
    "likes": 778,
    "comments_count": 99,
    "description": "This is a FREE complete CCNP 350-401 ENCOR Course. In this second REST API video I demonstrate the use of REST APIs using Cisco DNA Center. We post PostMan to POST and GET information from the server. You need to know (REST) Application Programming interfaces (APIs) for the CCNP ENCOR exam. In the next video we interact with a REST API on a Cisco router.  It's important that you learn both REST APIs and Python for the ENCOR exam as well as the real world.  I will be covering all the topics in the Cisco CCNP ENCOR exam in this course. I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  Slides:    Previous video:   CCNP ENCOR playlist:   Menu: Overview: 0:00 Cisco DNA Center Demo: 1:37 Postman download and installation: 3:35 REST API token: 5:10 REST GET 8:29 REST API Filtering: 11:50 REST API Codes: 14:15 Full DNA Lab: 18:35  ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  GNS3 Academy: CCNA ($10): bit.ly/gns3ccna10 Wireshark ($10): bit.ly/gns3wireshark  DavidBombal.com CCNA ($10):  Wireshark ($9): bit.ly/wireshark9   Python REST API JSON CCNP CCIE CCNP ENCOR CCNP 350-401 CCNP Enterprise ccnp training CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccnp #encor #restapi",
    "description_links": [
        "https://bit.ly/encorapi2",
        "https://youtu.be/5iA_ZBcFwEU",
        "https://bit.ly/freeccnp",
        "http://bit.ly/yt999ccna"
    ],
    "transcript": "- This is the second video in my CCNP course discussing REST APIs. You can look at the first video by clicking on this link or the link below this video. In the first video, we discussed the basics of REST APIs. We looked at some of the theory of REST APIs. We also looked at the development term CRUD. Create, Read, Update, Delete. Now the theory is fine, but it's much better to learn the stuff practically. So, in this video, I'm going to show you how you can connect to an always on CISCO DevNet Sandbox that's running a CISCO DNA Center server. I'm going to show you how you can connect to the DNA Center server and retrieve information from the DNA Center server. There is no better way of learning the stuff than just doing it. So, I strongly suggest that you follow along and try to do this yourself. Use the PowerPoint slides that I've added below this video to help you connect to the DNA Center server, run the REST commands, and you'll see it's not that difficult. We're just using a different interface to CLI. You may be used to CLI. Here we're using a programming interface, application programming interface to retrieve data from the DNA Center server. Okay, enough said. Let's get started and I'm going to show you, practically, how to connect to a CISCO DNA Center server and retrieve information from that server. (techno music) For the first demonstration, all you need is your web browser. In this PowerPoint presentation, I've got a link to the DevNet Sandbox DNA Center. So, if I click on that, I'm asked to log in. So, the username that I need to use is devnetuser password is Cisco123! I'll log in. And this is what DNA Center looks like. DNA Center, like a lot of controllers, has a Northbound API and a Southbound API. So it can manage network devices, as an example, using SNMP, one of the protocols, REST API. We can see the REST API by clicking on the cog and going to API Documentation. Here's the documentation for DNA Center. So, as an example, we can go to Devices and we can see the devices in the network by using a GET statement. So here you see some of the REST API verbs. GET, POST, PUT, DELETE, as an example. I've also put a link to the documentation in this PowerPoint presentation, if you just want to click on that and go directly to the documentation. Here's an example of a REST Uniform Resource Identifier, or URI. Notice the protocol used is https. The server or host URL is sandbox.cisco.com. Then, we've got a resource. Here's our resource DNA intent API v1 network device and then we've got parameters of that resource. In http, this is known as a path, but for REST, this identifies the resource as defined by the API. Now that's all very good and well, but let's interact directly with the DNA Center server API. I'm going to use Postman to do that. You could download Postman for free. So, as an example, on a Windows computer, go to postman.com and click Download App. It's picked up that I need a Windows version. I'm going to click on the 64 bit version of Postman and click Save to save it to my local hard drive. It's about 77 megs in size. It's like most Windows applications, very simple to install. So I'm going to click on the installation file. Click Install Anyway. Postman is now installing and it's starting up. Now you can create an account to back up your data. I'm not going to do that. I'm going to skip signing up. There you go. I've now got Postman running on a Windows laptop. It's not a difficult application to use. You'll need to play around with it a little bit to get used to it. But, as an example, you can create a request here. You can click on collections to save a collection of requests that you've made. I'm not going to use this Windows application. I'm going to go back to my Mac. Now, the process to install this on a Mac is very similar. You simply download the software and install it like any other software. So, you download and install the DMG file. In this example, I've got some queries saved. Now I've told you I'm going to show you this manually. The only reason to save the queries is I don't have to manually type them and perhaps make mistakes. So to save on the recording and save your time, I've prebuilt this, but here are all the steps. The first thing we need when communicating with the DNA Center server is a token. There are different ways to implement authentication with a REST API. In this example, they're using a token, which is a very popular way of doing it. The idea with a token is: I will authenticate to the server using a username and password. A token will be given to me and that token is valid for a period of time and every time I make an API call, I send the token to the server to be authenticated, in other words, to allow me to run the command against the REST API. So, first thing: username and password needs to be sent, get back a token, subsequent API calls use the token, rather than sending the username and password in the API call. Okay, so this is the URL to get the token. I need to use the username of devnetuser. Password is Cisco123! It's a POST and then we need to copy back the token. So, as an example. If I try to use a GET to get information from the DNA Center server, and I click Send. I'm getting 'token has expired'. Before I can get information from the server, I need to get a token. It's not a GET it's a POST. POST, once again, allows me to create data structures and variables. So, URL is this. I've put that in the PowerPoint slide once again. Authorization. Username is devnetuser. Password is Cisco123! That's under the Authorization tab. So if you were creating a new API call. You'd click on plus at the top here, specify what you're using. Once again, it's a POST. Specify the URL, which I've got in the PowerPoint presentation. I'm going to paste that in. Notice we want to get a token from the server. Authorization is basic authentication. Different types of authorization are available here, including error token, digest authentication, DWS signature, and many others, but basic authentication, username is devnetuser. Password is Cisco123! Cisco123! Once you've done that, you can click Send and we get a token back. So, once you've got your token, you need to copy this token. So copy that token because we're now going to use that for subsequent API calls. So, as an example. If we want to get information from the server, we need to use that token. So let's get a list of devices from DNA Center. Now, once again, looking at the API Documentation, this API call: get DNA intent API V1 network device gives us a list of devices. So, we told that it returns a list of network devices based on filtered criteria, such as IP address or something else. So we can filter this down or simply get a list of devices that have registered with DNA Center. Now, remember, DNA Center is talking down to network devices using different protocols on the Southbound API. We are now querying the Northbound API. So, we're using the Northbound API to query DNA Center. So here I've got a pre-built API call, but again, let's create that manually so that you can see the whole process. What I need is the URL. So, this is a GET and a URL. Just click on the little plus here if you want to create a new API call. So, it's a GET. Here's the URL or the URI. We need to go to Headers. So, Headers here and we need to specify a key, the key that we are going to create is content type. So, you need to specify content type and the key here is application JSON and then we need to specify X auth token. This kind of stuff is basically be sent to the server when we make the API call. So we're using REST API, think of it kind of like https, we're making, we're sending https information to the server saying GET. Once again, it's kind of as an analogy with a webpage where I send a GET and then I get back a webpage, but here I'm using an API and I'm getting back other information from the server. We're doing this manually, but once again, I'll show you later how to use a Python script to pull this kind of information out of a router, as an example. So, here we need our token. So, we need to copy that token from the previous POST statement and I need to put my token in here. Just make sure that you don't copy the inverted commas. So, copy only the API. Okay, so, we've set it to GET. We've got our URL. We've set the content type to application JSON. We've set the X auth token to the token we received. Click Send. And there you go. We've now made an API call to a CISCO DNA Center server using the Northbound API, so Northbound to the controller, it's talking to network devices using the Southbound API. Here are some network devices that have registered with DNA Center. So, as an example, we've got this CISCO ASR router. Scrolling down, we've got this Catalyst Switch. Scrolling down, another Catalyst Switch. And once again, another Switch. Now, what you can do is edit that API. Remember, what we've done here is we've connected to this part of the URL, but what we can do is specify some parameters. So we could specify, as an example, the type. How do I know that? Because here we've got type and a name. So, I could type here, if I wanted to, ?type = CISCO ASR 1001 X Router, that name basically. If I click Send, all I get is the information for that router, not all the other routers. I could specify software type. So, rather than doing it like that, type: software type = IOS XE. Now, it's remembered what I've typed previously, so that's why is auto-filling this in here. In your case, you'd have to manually type that. If I click Send now, I get the ASR router, but I also see the catalyst switch and other devices. So, it's basically pulled back all the devices that are using IOS XE. Now, you could specify something like MAC address. So, I don't think I've used that previously. So, let's say: MAC address equals and copy this. Notice we're using structured data here. Send. We only get that ASR. We don't get the other devices. Notice it's ended here at line 46, but if I remove that and simply looked at all devices. I get all the devices. We've got 169 lines of output that's being returned. You could do something like this. Take platform, so simply put a question mark at the end there. Remove this information that's not required, equals what we're looking for, click Send and there we go. We only get back that switch. So, there you go. That's an example of using a REST API. We did a POST to get back our token. So, we retrieved a token. Then we used GETs to retrieve information from the server. Again, how do you know what you should be using? That's available in the REST API Documentation. So, as an example, authentication. It's a POST to get to the authentication. The developers would have written this API. They build the API. We're told the code when we're successful or when it's invalid credentials. So, as an example, if I went back here and try to do a POST and put the wrong password in. I would get authentication has failed. Please provide valid credentials. Notice the code is four one unauthorized. Put the right password in, click send. We get the token back and it'll be different token every time you make this API call. A token is valid for a period of time that they decide. So, it really depends on what the developer has decided to do. Again, this GET statement allows me to get devices. If I made a mistake, I would get errors. So, 200 is success. Let's go back. Click Send. Notice 200. Everything is good. So we've made no mistakes. But if I change this to, let's say, network device. So I broke the API URL. Here I'm getting 404 error, not found. Now, to help you with your errors, I've put some errors in this PowerPoint presentation. So, 200, life is good. Just demonstrated that. Four one is unauthorized, token is not used. So, again, if I deleted this token. So let's delete that token. So, I'll cut it and click Send. We've got a 401 error, unauthorized, bad token. Put that in, Send. We're getting technically named metric device is not found 404 because this is wrong. It has to be network hyphen or dash device. Now we get 200, everything is good. So you can see very easily what error messages have been returned if you've made a mistake. Okay, here's a 400 error once again. If I say network device 123, so once again, if I do that, so I've made it 123 here. Click Send. 400 bad request and we're told 123 is not a valid ID of a device. If I did this, notice I removed the question mark by mistake We're told invalid characters. So, this needs to have a question mark there. Click Send. Now we get the correct data back. 404 is probably one of the most famous ones that you've seen. Here's a screenshot of me going to CISCO's website and just typing some random stuff. So let's do that. Go to CISCO.com and type just some random nonsense. Notice 404 error that page doesn't exist. So you might've seen this many times on the internet. We could do something similar with a REST API. So, once again, I'll specify network device like that 404 error not found. Very common error when you've made a mistake with your URL. Now, you may be thinking, but David, I could just use a CLI to do this. Just remember where we're going. This is just the initial baby steps. I want to show you how you can query an API, how you can get information back using a visual application, this is a great application for tasting the API, getting used to the API, making sure that everything works properly and then you can put it into code. I'm going to show you this Python script once again. Where I run a script on my local computer and query a API on a CISCO router, XE router in this case, and get information back. So, just remember where we're going. Baby steps. Learn, when you're right in the beginning, you learn Enable, you learn CompTIA, but as you get more and more confident, you learn more and more complex things. Same thing here. We're using this tool to learn about the API and learning how to interact with the API, but that's not where we want to end. Okay, so I've given you the URL for DNA Center. This lab has restriction, but you can book a lab on developer.cisco.com. So, on the DevNet website. So have a look at their sandboxes and you can book a full lab and interact with DNA Center. Okay, so login with one of these options: your CISCO account or GetHub account or something else and then you can book one of these labs, once again. So if I do a search for DNA Center. We're interacting currently with the always on DNA Center, but you can reserve a DNA Center lab and interact a lot more with CISCO DNA Center and then go through their DNA Center hollow walled lab. So, they've got a whole lab here that you can use. You'll notice it's very similar to what I've shown you, but they've got a whole lab that you can go through, if you want to. Again, don't forget that on DNA Center you've got the API information, so you can have a look at the API and then you'll see all the codes. 200 is successful. We've also got 204, so the request was successful, but no content was returned and I've shown you some of the error messages like the client made a request for a resource that doesn't exist. We've also got 500 errors here, such as the server could not fulfill the request or 503 server is currently not available. So, hopefully me showing it to you this way is a lot more practical than just looking at a PowerPoint slide, but now let me show you how to do stuff using a router because not everyone has access to a controller like this or uses a controller like this in the real world, but we can interact with a router. (upbeat music)",
    "transcript_keywords": [
        "DNA Center",
        "DNA Center server",
        "CISCO DNA Center",
        "API",
        "REST API",
        "DNA",
        "Center",
        "Center server",
        "REST APIs",
        "API call",
        "Center server API",
        "DNA intent API",
        "token",
        "Sandbox DNA Center",
        "CISCO DNA",
        "REST API Documentation",
        "discussing REST APIs",
        "click Send",
        "Northbound API",
        "REST"
    ],
    "transcript_entity_values": [
        "first",
        "the Northbound API",
        "401",
        "169",
        "Four one",
        "500",
        "123",
        "CCNP",
        "ASR",
        "this Catalyst Switch",
        "Mac",
        "Download App",
        "IOS",
        "200",
        "API",
        "CISCO ASR 1001 X Router",
        "about 77 megs",
        "the Southbound API",
        "GetHub",
        "64",
        "four",
        "CISCO",
        "Catalyst Switch",
        "503",
        "DevNet",
        "204",
        "a Southbound API",
        "DNA Center",
        "Northbound",
        "second",
        "the REST API",
        "CISCO DNA Center",
        "David",
        "Switch",
        "IP",
        "Python",
        "Mac",
        "Notice 200",
        "CISCO DevNet Sandbox",
        "400",
        "XE",
        "the DevNet Sandbox DNA Center",
        "46",
        "one",
        "PowerPoint",
        "Postman",
        "MAC",
        "404",
        "IOS XE",
        "the REST API Documentation",
        "SNMP",
        "Windows",
        "CLI",
        "POST",
        "the API Documentation",
        "DNA Center"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "QUANTITY",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "FAC",
        "PERSON",
        "ORDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "LAW",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "PERSON",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "LAW",
        "ORG"
    ],
    "vector": [
        -0.10473369061946869,
        0.022987544536590576,
        -0.03714168816804886,
        -0.03302944079041481,
        -0.014476011507213116,
        -0.06477802991867065,
        -0.07532414048910141,
        0.06686495244503021,
        -0.14487841725349426,
        0.022185416892170906,
        0.021035540848970413,
        -0.0348200723528862,
        -0.06292744725942612,
        0.015040284022688866,
        0.03926191106438637,
        -0.006504733581095934,
        0.045960597693920135,
        0.00345946685411036,
        0.07718801498413086,
        -0.0457463413476944,
        -0.0113445483148098,
        -0.011315900832414627,
        0.04850627854466438,
        0.007751275319606066,
        -0.08956727385520935,
        0.03842964768409729,
        -0.005332894157618284,
        0.03501005098223686,
        -0.01270485483109951,
        -0.0462590791285038,
        -0.04182526469230652,
        0.01976439729332924,
        0.010877913795411587,
        0.03548590838909149,
        0.010778127238154411,
        -0.02965032495558262,
        0.05779605731368065,
        -0.04329769313335419,
        0.016524629667401314,
        0.0051872385665774345,
        -0.014437103644013405,
        0.006815516389906406,
        -0.045990850776433945,
        0.05259100720286369,
        0.06712465733289719,
        -0.04028664529323578,
        -0.031208455562591553,
        -0.03731270879507065,
        0.02128467708826065,
        -0.03679411858320236,
        -0.01891639642417431,
        -0.04308653995394707,
        -0.010612191632390022,
        -0.0562964491546154,
        -0.054870106279850006,
        -0.017741359770298004,
        -0.017308471724390984,
        -0.05270102247595787,
        0.0070134736597537994,
        -0.018163617700338364,
        0.02872251719236374,
        -0.05677003413438797,
        0.004352274350821972,
        0.02303994819521904,
        0.06935366988182068,
        -0.0345122255384922,
        0.009988637641072273,
        0.053492311388254166,
        0.07818620651960373,
        -0.10328168421983719,
        -0.06787464767694473,
        -0.0014246022328734398,
        -0.028806261718273163,
        0.06407185643911362,
        -0.01737845130264759,
        0.02287372760474682,
        0.048213016241788864,
        -0.06563565880060196,
        -0.011630389839410782,
        -0.01786433719098568,
        0.0688190683722496,
        0.05216110497713089,
        -0.052078213542699814,
        0.030143510550260544,
        0.05649019032716751,
        0.05257474258542061,
        -9.431310900254175e-05,
        0.09572039544582367,
        -0.08654288947582245,
        -0.008046599105000496,
        0.06051044166088104,
        -0.056015193462371826,
        -0.07823575288057327,
        -0.00343166571110487,
        0.025203678756952286,
        0.02797768823802471,
        0.025674015283584595,
        -0.07624320685863495,
        -0.07489514350891113,
        0.03570988029241562,
        0.06175513193011284,
        -0.045549534261226654,
        -0.020331762731075287,
        -0.0438760407269001,
        -0.054598309099674225,
        0.0016144906403496861,
        0.08848243951797485,
        0.02391042187809944,
        0.10711479932069778,
        0.02783963270485401,
        -0.08414410054683685,
        0.029118726029992104,
        -0.04434437304735184,
        -0.040404897183179855,
        0.03707052022218704,
        0.10651037096977234,
        0.015623969957232475,
        0.08945201337337494,
        0.09425356984138489,
        0.021930057555437088,
        -0.012242133729159832,
        0.005361869465559721,
        -0.0213320329785347,
        -0.048797063529491425,
        0.02291359379887581,
        -0.10238555818796158,
        0.07657864689826965,
        6.683123256070386e-33,
        -0.0006946115172468126,
        0.03916216641664505,
        -0.01166597567498684,
        0.05548859387636185,
        0.03072156384587288,
        0.006703445687890053,
        0.09690796583890915,
        0.07507216930389404,
        -0.11317285895347595,
        -0.03224296122789383,
        -0.015036964789032936,
        0.08678920567035675,
        0.0027244931552559137,
        0.043367378413677216,
        -0.06155899539589882,
        -0.043090954422950745,
        -0.0841948539018631,
        0.025080153718590736,
        0.026160402223467827,
        0.042229972779750824,
        0.017425987869501114,
        -0.03532946854829788,
        0.022872861474752426,
        0.05090400204062462,
        0.0675150454044342,
        -0.0074821654707193375,
        -0.024092206731438637,
        -0.03586028516292572,
        0.0710931196808815,
        0.015603212639689445,
        -0.04126635193824768,
        0.03420865908265114,
        -0.08024540543556213,
        0.010865025222301483,
        0.10288382321596146,
        0.016075419262051582,
        0.018253160640597343,
        -0.02455330267548561,
        -0.06583796441555023,
        -0.01882900297641754,
        -0.05958613380789757,
        0.06758250296115875,
        -0.04945192486047745,
        -0.04404550418257713,
        -0.08507544547319412,
        -0.029508177191019058,
        0.007451682351529598,
        -0.006272326223552227,
        0.062027059495449066,
        -0.04016495123505592,
        -0.023511208593845367,
        0.022082265466451645,
        -0.05091963708400726,
        -0.085162453353405,
        0.035258274525403976,
        -0.05931961536407471,
        0.046359725296497345,
        -0.022685350850224495,
        -0.04888599365949631,
        -0.03204970806837082,
        0.031895712018013,
        -0.009864933788776398,
        -0.045665767043828964,
        -0.04050698131322861,
        -0.043681781738996506,
        0.005042969714850187,
        -0.1684800386428833,
        -0.03919907286763191,
        0.12301426380872726,
        0.014322096481919289,
        -0.0420609712600708,
        0.008643152192234993,
        -0.0219431072473526,
        -0.028477273881435394,
        0.057960402220487595,
        0.07223418354988098,
        -0.06201206520199776,
        0.0200026985257864,
        -0.00860765390098095,
        0.01766224205493927,
        0.0034569883719086647,
        -0.01543277408927679,
        -0.015810851007699966,
        -0.009178543463349342,
        -0.0007489315466955304,
        -0.0022550311405211687,
        0.03703438863158226,
        -0.024834150448441505,
        -0.068455271422863,
        -0.005714679602533579,
        0.048142705112695694,
        -0.016675639897584915,
        0.08240850269794464,
        0.022127743810415268,
        0.06184805557131767,
        -7.604746091945584e-33,
        0.0021592502016574144,
        0.006280315108597279,
        -0.05751713737845421,
        -0.02110491506755352,
        -0.005077553912997246,
        -0.04320404678583145,
        0.0668807327747345,
        0.04317715764045715,
        0.05029124394059181,
        0.04389259219169617,
        0.02555672451853752,
        -0.04094696789979935,
        0.028959931805729866,
        0.03335912153124809,
        0.015160554088652134,
        -0.06810615211725235,
        -0.1538688987493515,
        0.022491279989480972,
        0.02226562425494194,
        0.030027218163013458,
        -0.026425255462527275,
        0.14959286153316498,
        -0.06914328038692474,
        -0.04326275736093521,
        -0.01908702217042446,
        0.0626533031463623,
        -0.02679768018424511,
        -0.04548119753599167,
        0.07220853120088577,
        -0.05628015100955963,
        -0.058560360223054886,
        0.004452180583029985,
        -0.013148254714906216,
        0.06430414319038391,
        -0.033321313560009,
        0.05970757454633713,
        0.0884479358792305,
        0.0743839293718338,
        -0.01892630197107792,
        -0.026313181966543198,
        0.05098361521959305,
        0.024609308689832687,
        -0.06950018554925919,
        -0.05879312381148338,
        0.04090612754225731,
        0.0006069146329537034,
        0.0013658293755725026,
        0.06531475484371185,
        -0.06747736036777496,
        0.08106932789087296,
        0.028482617810368538,
        0.016172977164387703,
        -0.10078205913305283,
        -0.07482399791479111,
        0.03852671757340431,
        -0.0033414585050195456,
        0.00520310876891017,
        -0.051758475601673126,
        -0.018923183903098106,
        0.020384084433317184,
        -0.014342917129397392,
        0.009162026457488537,
        -0.0343838594853878,
        0.07776688039302826,
        0.012331620790064335,
        -0.06228996813297272,
        -0.036209989339113235,
        -0.00887349620461464,
        -0.017426524311304092,
        -0.046326640993356705,
        -0.05556167662143707,
        0.012409090064466,
        0.08367107063531876,
        -0.036597345024347305,
        0.07262200117111206,
        -0.029073549434542656,
        -0.017310481518507004,
        -0.03280750662088394,
        -0.03825246915221214,
        -0.049412209540605545,
        -0.07166475057601929,
        -0.05799232795834541,
        0.009462404064834118,
        0.16747605800628662,
        0.023663049563765526,
        0.04738086834549904,
        0.07952174544334412,
        -0.024616273120045662,
        -0.054847147315740585,
        0.048468682914972305,
        -0.030001532286405563,
        0.02092733234167099,
        0.04953232407569885,
        0.08792638778686523,
        0.017734088003635406,
        -4.880036641452534e-08,
        0.016963159665465355,
        -0.0026239780709147453,
        -0.058131828904151917,
        0.05183148756623268,
        -0.08964816480875015,
        0.05337991565465927,
        0.012615599669516087,
        -0.02572658285498619,
        0.03626582771539688,
        0.02702668495476246,
        0.0019368003122508526,
        0.04655821621417999,
        -0.03115287981927395,
        0.056666627526283264,
        0.005432948470115662,
        0.048766713589429855,
        -0.007240389473736286,
        -0.0021207700483500957,
        0.00459839915856719,
        -0.0941794216632843,
        -0.014168784953653812,
        -0.05685828998684883,
        -0.03403637185692787,
        0.04617011547088623,
        -0.04133369028568268,
        0.05950923264026642,
        0.00987345352768898,
        0.10213851183652878,
        -0.0072255926206707954,
        -0.07663580030202866,
        -0.019938847050070763,
        -0.07880142331123352,
        0.05644501373171806,
        -0.01874915324151516,
        0.06425963342189789,
        -0.010577721521258354,
        -0.06527974456548691,
        -0.026563959196209908,
        0.03207269683480263,
        0.061835214495658875,
        -0.04024341329932213,
        -0.04578278586268425,
        -0.01953388750553131,
        0.013700107112526894,
        0.10563399642705917,
        -0.03989526629447937,
        -0.04399426281452179,
        -0.0032999624963849783,
        -0.012394314631819725,
        0.012040633708238602,
        -0.03495063632726669,
        -0.07409493625164032,
        -0.022641712799668312,
        -0.026203859597444534,
        0.07851841300725937,
        0.13905216753482819,
        0.008776131086051464,
        -0.038822807371616364,
        -0.06967443227767944,
        0.038665443658828735,
        0.06322376430034637,
        0.07550559192895889,
        -0.0013768173521384597,
        0.006913649383932352
    ]
}