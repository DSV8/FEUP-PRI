{
    "id": "DFTwB2nAexs",
    "title": "Python WiFi scanner",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-03-12T15:15:01Z",
    "video_url": "https://www.youtube.com/watch?v=DFTwB2nAexs",
    "category": "Science & Technology",
    "tags": [
        "wifi",
        "python",
        "scanner",
        "wifi scanner",
        "python scan",
        "hacking",
        "hackers",
        "nsa",
        "ethical hacker",
        "ethical hacking",
        "hacker",
        "hacking course",
        "hacking tutorial",
        "black hat hacking",
        "learn hacking",
        "ethical hacking course",
        "ethical hacking tutorial",
        "ceh",
        "kali linux",
        "oscp certification",
        "elearnsecurity",
        "ine",
        "ctf",
        "how to hack",
        "learn ethical hacking",
        "cyber security course",
        "windows 10 python",
        "netsh wifi commands",
        "python wifi",
        "wifi password",
        "wifi tips",
        "python tutorial",
        "python 3",
        "learn python"
    ],
    "views": 115801,
    "likes": 4739,
    "comments_count": 379,
    "description": "Python WiFi network scanner. Very easy to discover devices in your network. Learn Python today. It will change your life.  Script link:  Direct GitHub script link:   ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    ================ Support me: ================ DavidBombal.com: CCNA ($10):   Udemy CCNA Course:  GNS3 CCNA Course: CCNA ($10):   ====================== Special Offers: ====================== Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  wifi python hacking python python wifi python network scan python scanner python scan oscp  elearnsecurity  oscp certification ethical hacking ceh oscp ine try hack me hack the box hacking ethical hacker ctf for beginners  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #wifi #python #hacking",
    "description_links": [
        "http://bit.ly/3vgHcR1",
        "https://github.com/davidbombal/red-python-scripts/blob/main/lanscan_arp.py",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/ccnafor10dollars",
        "https://bit.ly/gns3ccna10"
    ],
    "transcript": "- In this video, I'm gonna show you how to create a simple Python script that discovers all hosts in the local sub-net, sort of discoverable devices on the local wifi network or all devices connected to your physical ethernet network. (upbeat music) Now, to do this, I'm gonna leverage the power of Scapy, which supports packet crafting for Python2 and Python3. This is really powerful software. I'm gonna show you a simple use case using the software right now, in other words using ARP to discover devices in the local sub-net but I'll show you more powerful examples using Scapy in later videos. The script that we're gonna use simply imports Scapy, imports regular expressions and then asks the user to enter the range of devices to scan and using this simple command arp_result, Scapy arping, IP address range entered. I can get my Python script to send ARP messages out into a network and discover all the devices on the network. So in Kali Linux, LS I've created this file called lanscan.py. Nano is a text editor. So nano lanscan.py. I've simply copied the script into this file. So this script is the script that I've just demonstrated. Now I've put a lot of comments in the script so it explains every line of the code. So I won't bore you with it, but essentially all we doing is importing Scapy and regular expressions. This can be removed if you don't want it. We are then making sure that the user enters a correct IP address range by using this regular expression. And then we scan for devices in the network, a very simple script. Most of this script is just comments you need pseudo privileges on Kali to run this. I'm gonna use Python3 in this example, Scapy does support Python2 but it's recommended today that you use Python3. So that's what we're gonna use here. And I'm gonna run my script. So we're prompted to enter the sub-net that we're gonna scan. I'll open up another terminal and I'll show you that the IP address for this Linux device is 192.168.1.113. That's the sub-net that we wanna scan. Now, I'm actually doing everything on this windows, laptop. It's connected to the wifi network, but in this example I'm running Kali within a virtual machine. So we don't see a wifi network we see ethernet network, but this is essentially the wifi network that connects my Kali virtual machine to the physical network around me. So I'll put in my sub-net that's the subnet that I wanna scan and notice we're prompted to enter the right format. And then Scapy sends out ARP messages into the network to discover devices. These are devices in my local network. So as an example, it's picked up some Apple computers. It's picked up Synology NAS's, it's picked up Cisco devices, it's picked up a Netgear RAIDar and various other devices in the network. It's as simple as that. So if I run that again, notice I can put in the network. Now you could change the script to automatically select a network, rather than asking the user to put it in. But in this example, I'm allowing the user to put in a specific network. And once again, it's discovered devices. Here is a printer as an example. At the moment we not storing this information in a text file or in a database I'll show you that in later videos. We're gonna be iterating and improving our scripts and making them more and more powerful. But just a very simple script showing you why it's a good idea to learn Python. Python is one of those scripting languages that can help you in many, many places. It can help you with ethical hacking. It can help you with network automation. It can help you with just automating stuff on your computer, help you with data science. There are many, many use cases. It's well worth your time learning how to use Python today. Now, you can use the software on Windows. You can use this on your Apple Mac but I prefer running everything within Linux. So that's what I've done here. I've demonstrated how to use this on Kali. Kali Linux contains a whole bunch of tools but in this example, we are hopefully gonna be learning Python and having some fun at the same time. With that being said, if you liked this video please consider subscribing to my YouTube channel. Please consider liking the video and clicking on the bell to get notifications. I'm David Bombal wanna wish you all the very best. (upbeat music)",
    "transcript_keywords": [
        "network",
        "script",
        "Scapy",
        "devices",
        "Kali",
        "Python",
        "ARP",
        "Kali Linux",
        "simple",
        "subnet",
        "Python script",
        "sort of discoverable",
        "wifi network",
        "Linux",
        "show",
        "local",
        "scan",
        "put",
        "simple Python script",
        "ARP messages"
    ],
    "transcript_entity_values": [
        "Apple",
        "Apple Mac",
        "ARP",
        "Scapy",
        "Netgear",
        "YouTube",
        "today",
        "Nano",
        "IP",
        "Python",
        "Kali",
        "Linux",
        "Linux",
        "Synology NAS's",
        "Python",
        "Cisco",
        "Kali Linux",
        "LS",
        "Windows",
        "Scapy",
        "David Bombal"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "GPE",
        "ORG",
        "WORK_OF_ART",
        "GPE",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "PERSON"
    ],
    "vector": [
        -0.08096180856227875,
        -0.0020432283636182547,
        -0.06979803740978241,
        -0.018747491762042046,
        0.023507134988904,
        -0.10766135156154633,
        0.047189731150865555,
        -0.057276032865047455,
        -0.08551515638828278,
        -0.01931280642747879,
        0.07188660651445389,
        -0.0036192568950355053,
        0.05984804779291153,
        -0.008955438621342182,
        -0.003960778471082449,
        0.01311064325273037,
        -0.037244394421577454,
        -0.04379761591553688,
        0.03818158805370331,
        -0.09557925909757614,
        -0.035978931933641434,
        0.0679149180650711,
        0.031283535063266754,
        -0.04871996119618416,
        -0.010187221691012383,
        -0.029275428503751755,
        0.08794944733381271,
        -0.0445549413561821,
        -0.07560372352600098,
        0.020314911380410194,
        0.01232773158699274,
        0.07010030746459961,
        0.004096950404345989,
        -0.0012991890544071794,
        0.08283357322216034,
        -0.09243743866682053,
        -0.03835906833410263,
        0.03497765213251114,
        -0.015947924926877022,
        -0.03687925636768341,
        -0.02053491212427616,
        -0.013468954712152481,
        -0.003774553770199418,
        0.013278611935675144,
        0.01141638308763504,
        -0.047767747193574905,
        -0.06913276016712189,
        0.0008024019771255553,
        0.08227944374084473,
        -0.07464051246643066,
        -0.015435729175806046,
        -0.04576210677623749,
        -0.03938737511634827,
        0.0257314071059227,
        0.03193112090229988,
        -0.06615624576807022,
        -0.06379680335521698,
        -0.00998047087341547,
        0.0310762207955122,
        -0.02998695895075798,
        0.010365871712565422,
        -0.026659337803721428,
        0.004187035374343395,
        -0.03645714744925499,
        -0.04436786100268364,
        0.03607049211859703,
        -0.007985962554812431,
        0.10960977524518967,
        0.048645492643117905,
        -0.019686510786414146,
        -0.07170344144105911,
        0.047587402164936066,
        -0.021573740988969803,
        0.06919601559638977,
        0.01941884681582451,
        -0.004394911229610443,
        0.08291053771972656,
        -0.011094254441559315,
        0.0061947968788445,
        -0.092945896089077,
        -0.03036428987979889,
        -0.06012007221579552,
        0.017516830936074257,
        0.04456731304526329,
        0.05751151591539383,
        0.0005528698093257844,
        -0.03320560231804848,
        0.002262670313939452,
        0.039474133402109146,
        -0.019562337547540665,
        -0.05202281102538109,
        0.04988977313041687,
        -0.06535248458385468,
        -0.05531894788146019,
        -0.008782953023910522,
        0.03321842476725578,
        0.03861306607723236,
        -0.04399826005101204,
        -0.055508360266685486,
        0.10012217611074448,
        -0.025264181196689606,
        -0.042775869369506836,
        -0.004032384604215622,
        -0.05250546708703041,
        -0.042044855654239655,
        0.01581738516688347,
        0.052829667925834656,
        0.025201071053743362,
        0.15786561369895935,
        0.01178636122494936,
        -0.04874756187200546,
        0.013633358292281628,
        -0.046553853899240494,
        -0.10302765667438507,
        0.037459131330251694,
        0.06069816276431084,
        0.038063857704401016,
        0.16435858607292175,
        0.09347133338451385,
        0.04186977446079254,
        -0.03771849349141121,
        -0.018684981390833855,
        -0.020080121234059334,
        -0.08343054354190826,
        -0.035081155598163605,
        0.02026156708598137,
        0.014462247490882874,
        1.210988917024145e-32,
        0.015942059457302094,
        0.044585973024368286,
        -0.05373748391866684,
        0.009150669910013676,
        0.038378097116947174,
        -0.049715276807546616,
        0.05237426236271858,
        0.011425565928220749,
        -0.09412706643342972,
        -0.008287036791443825,
        -0.07542072236537933,
        0.0019216705113649368,
        -0.09316863119602203,
        0.02139022760093212,
        -0.021194905042648315,
        -0.056169621646404266,
        -0.04849648103117943,
        0.022698519751429558,
        0.04139518365263939,
        0.050382714718580246,
        -0.041619766503572464,
        -0.08426278829574585,
        0.039920415729284286,
        0.008419537916779518,
        0.08581224083900452,
        -0.036999307572841644,
        0.01636618562042713,
        -0.017548760399222374,
        0.06326329708099365,
        -0.0010832627303898335,
        -0.0263340063393116,
        0.01616363786160946,
        -0.0596865639090538,
        -0.055596984922885895,
        0.00737728038802743,
        -0.02818804606795311,
        -0.08727992326021194,
        -0.07097258418798447,
        -0.041487473994493484,
        -0.06584703922271729,
        -0.029029857367277145,
        -0.05506569892168045,
        -0.05103784054517746,
        -0.05518978089094162,
        0.012647440657019615,
        -0.033840689808130264,
        -0.09225140511989594,
        0.07015329599380493,
        0.022761894389986992,
        0.06434490531682968,
        -0.056357044726610184,
        -0.000182714982656762,
        -0.033502522855997086,
        -0.06789537519216537,
        -0.03176901116967201,
        0.01943475939333439,
        0.04458561912178993,
        0.04310131445527077,
        0.057701144367456436,
        -0.023045361042022705,
        0.03311165049672127,
        0.006186877377331257,
        0.013763225637376308,
        -0.024305595085024834,
        0.03166233003139496,
        -0.03269997984170914,
        -0.006213642191141844,
        0.016882698982954025,
        -0.026451539248228073,
        0.053951364010572433,
        -0.06499716639518738,
        0.00588974729180336,
        0.0070649366825819016,
        -0.04564175382256508,
        0.058037616312503815,
        0.004899466410279274,
        -0.032511886209249496,
        -0.005269460845738649,
        -0.09242390096187592,
        -0.01830472983419895,
        0.026111746206879616,
        -0.03751737251877785,
        0.05176251381635666,
        -0.00438304478302598,
        -0.03905117139220238,
        0.00012313268962316215,
        0.04453962296247482,
        -0.10598329454660416,
        -0.08510048687458038,
        0.10064078122377396,
        -0.025900762528181076,
        0.07215791940689087,
        -0.0040231673046946526,
        0.02379501610994339,
        -0.02558019757270813,
        -1.4357391022659477e-32,
        0.018987160176038742,
        0.0256026741117239,
        0.07726830244064331,
        -0.047014109790325165,
        -0.023064805194735527,
        -0.14890696108341217,
        -0.00246490933932364,
        -0.027282968163490295,
        0.03836648911237717,
        0.015851609408855438,
        0.10248253494501114,
        -0.07216967642307281,
        -0.017025502398610115,
        -0.07933507859706879,
        0.06046124920248985,
        0.0151480408385396,
        -0.020905280485749245,
        -0.03592555597424507,
        0.0003042667522095144,
        0.016727913171052933,
        -0.026553254574537277,
        0.14045418798923492,
        -0.05786402150988579,
        -0.04538051411509514,
        -0.10181832313537598,
        -0.04129975661635399,
        0.018365265801548958,
        0.05534964054822922,
        -0.0006447794730775058,
        -0.022136062383651733,
        -0.06324858218431473,
        0.028124606236815453,
        -0.02461506985127926,
        0.10306118428707123,
        0.033994607627391815,
        0.07503513246774673,
        0.0936611220240593,
        0.047599129378795624,
        0.00849744863808155,
        -0.004562792833894491,
        0.0689840167760849,
        0.0652698427438736,
        -0.11872102320194244,
        0.046710994094610214,
        -0.005609489511698484,
        -0.09266583621501923,
        -0.007918565534055233,
        0.07955789566040039,
        -0.11481785029172897,
        -0.006530608981847763,
        0.10872640460729599,
        -0.04824915900826454,
        -0.01668296754360199,
        -0.031456220895051956,
        0.016932349652051926,
        0.07859684526920319,
        0.09050067514181137,
        -0.033698245882987976,
        0.0005140209104865789,
        -0.01839655078947544,
        -0.026774931699037552,
        -0.1468002200126648,
        -0.04894494637846947,
        0.12172988802194595,
        -0.044364020228385925,
        -0.018443146720528603,
        -0.020418012514710426,
        0.021212533116340637,
        -0.0632963553071022,
        -0.03339897841215134,
        -0.04032936319708824,
        -0.022297846153378487,
        0.04164230823516846,
        -0.031936436891555786,
        -0.016036972403526306,
        0.018767355009913445,
        0.0011446063872426748,
        0.07005379348993301,
        -0.07008066028356552,
        0.021008538082242012,
        0.003021628363057971,
        0.03633047267794609,
        -0.04958859831094742,
        0.013250965625047684,
        -0.03132966533303261,
        0.013474799692630768,
        0.026817064732313156,
        0.021975073963403702,
        0.033916596323251724,
        -0.0013704017037525773,
        -0.056044504046440125,
        0.038424521684646606,
        0.020635316148400307,
        0.018564419820904732,
        0.03155365213751793,
        -5.748227849267096e-08,
        -0.08621347695589066,
        0.03397778049111366,
        -0.0906715840101242,
        0.011596288532018661,
        0.058850400149822235,
        0.06809797137975693,
        0.04617597535252571,
        -0.026331020519137383,
        -0.028499992564320564,
        0.0002128959313267842,
        -0.008315393701195717,
        -0.033658433705568314,
        -0.04509289935231209,
        0.06350403279066086,
        -0.001834198017604649,
        0.03589840605854988,
        -0.06498025357723236,
        -0.032506365329027176,
        0.009637231007218361,
        0.050767768174409866,
        -0.004532904829829931,
        -0.016972903162240982,
        0.04274618253111839,
        0.04480312392115593,
        -0.05448315292596817,
        -0.008759970776736736,
        0.004148642998188734,
        0.02361997403204441,
        -0.019815027713775635,
        -0.02815757505595684,
        -0.047990020364522934,
        -0.052714623510837555,
        0.057833004742860794,
        -0.021299049258232117,
        0.03780254349112511,
        0.08588367700576782,
        -0.03608469292521477,
        -0.029169607907533646,
        -0.011819121427834034,
        0.104582279920578,
        -0.051742877811193466,
        -0.03481704741716385,
        -0.032218270003795624,
        -0.00825879443436861,
        -0.06563647836446762,
        -0.04822070896625519,
        -0.028599856421351433,
        0.031996097415685654,
        0.058008961379528046,
        -0.015260140411555767,
        0.03320923447608948,
        -0.06529363989830017,
        0.016918234527111053,
        -0.08199797570705414,
        -0.0026455882471054792,
        0.038876086473464966,
        -0.009849832393229008,
        -0.07235617935657501,
        -0.027976136654615402,
        0.11278991401195526,
        0.038667235523462296,
        0.02797035314142704,
        -0.01547001302242279,
        -0.0010440293699502945
    ]
}