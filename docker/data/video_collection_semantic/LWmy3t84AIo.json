{
    "id": "LWmy3t84AIo",
    "title": "How to make Millions $$$ hacking zero days?",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-12-11T15:00:20Z",
    "video_url": "https://www.youtube.com/watch?v=LWmy3t84AIo",
    "category": "People & Blogs",
    "tags": [
        "zero day",
        "0day",
        "0day millions",
        "zero day millions",
        "exploit development",
        "zero day movie",
        "stuxnet",
        "zero day vulnerability",
        "malware",
        "malware development",
        "reverse engineer",
        "ransomware",
        "python",
        "microsoft",
        "follina",
        "vulnerability",
        "Microsoft office",
        "hacking",
        "hacker",
        "remote code execution",
        "windows 11",
        "remote code execution vulnerability",
        "remote code execution explained",
        "remote code execution tutorial",
        "windows exploits",
        "android",
        "ios",
        "samsung",
        "rust",
        "kernel"
    ],
    "views": 142350,
    "likes": 4682,
    "comments_count": 180,
    "description": "It's possible to earn millions of dollars finding zero days and vulnerabilities in software. But, are you prepared to put in the work?  Browser Exploitation Introduction:  Introduction to Buffer Overflows:  Modern Windows Kernel Exploitation:  Linux Heap Exploitation:  Modern Binary/Patch Diffing:  Crypto and Blockchain Hacks:   My apologies for some of the technical issues in this interview. Zoom is a nightmare :(  // MENU //  00:00 - Coming up 00:53 - Stephen Sims introduction & Sans course 03:28 - Stephen's YouTube channel // Off By One Security 07:56 - Growing up with computers 08:57 - Getting involved with Sans courses // Impressed by instructors 09:52 - \"The Golden Age of Hacking\" // Bill Gates changed the game 15:44 - Making money from Zero-Days // Ethical and Unethical methods, zerodium.com & safety tips 32:56 - How to get started 46:53 - Opportunities in Crypto 50:26 - Windows vs. iOS vs. Linux  53:47 - Which programming language to start with 56:22 - Recommended Sans courses 01:02:04 - Recommended CTF programs & events 01:04:06 - Recommended books 01:08:23 - The Vergilius project 01:10:25 - Connect with Stephen Sims 01:12:24 - Conclusion  // Stephen's Social // Twitter:  YouTube Live:  YouTube videos:  E-mail:  Stephen(at)deadlisting.com  // Stephen's courses // SANS Course sans.org.  - Advanced exploit development for penetration testers course - Advanced penetration testing, exploit writing, and ethical hacking (GXPN) - ARM Exploit Development  // Books discussed // Grey Hat Hacking:  Hacking: The art of Exploitation:   The Shellcoders Handbook:  Linkers & Loaders:   // Websites discussed // Zerodium:  Corelan Cybersecurity Research:  Shellphish:  Vergilius Project:   // David's Social // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  YouTube Shorts Channel:  Apple Podcast:  Spotify Podcast:   apple ios android samsung exploit exploit development windows linux exploits zero days zero day 0day 1day  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #android #ios #linux",
    "description_links": [
        "https://youtu.be/bcnV1dbfKcE",
        "https://youtu.be/DHCuvMfGLSU",
        "https://youtu.be/nauAlHXrkIk",
        "https://youtu.be/dMDoC9DlVzA",
        "https://youtu.be/8jVOvPG4TjA",
        "https://youtu.be/y5JogTgpp-s",
        "https://twitter.com/Steph3nSims",
        "https://www.youtube.com/@OffByOneSecurity/streams",
        "https://www.youtube.com/@OffByOneSecurity/videos",
        "https://www.sans.org/cyber-security-courses/",
        "https://amzn.to/3B1FeIK",
        "https://amzn.to/3Us9Uts",
        "https://amzn.to/3VqUEhY",
        "https://amzn.to/3itqtbe",
        "https://zerodium.com/",
        "https://www.corelan.be/",
        "https://github.com/suljot/shellphish",
        "https://www.vergiliusproject.com/",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://www.youtube.com/channel/UCEyCubIF0e8MYi1jkgVepKg",
        "https://davidbombal.wiki/applepodcast",
        "https://open.spotify.com/show/3f6k6gERfuriI96efWWLQQ"
    ],
    "transcript": "- Cool. So this is Zerodium and you can see right down there at the bottom, it sticks out real fast, up to 2.5 million US dollars per submission. When you're selling exploits, there's different types of buyers out there and that's what could get into potentially interesting stories. My stories are more about what people have asked me to do versus what I've actually done. There, the ethical buyers out there, you can of course go to the affected vendor like Microsoft or Apple and they typically have bug bounties. And if they look at what you've discovered and they think it's worth something, they might pay you for it. You could sell it to the highest bidder, which could be someone who is a foreign adversary, a nation state that's an unfriendly or sanctioned nation that might use that exploit against your very own country. (upbeat music) - Hey everyone, it's David Bombal back with a very special guest. Stephen welcome. - Hey how's it going? Thanks for having me on. - Yes, it's great to have you here. Stephen, for those of you who don't know Stephen, he's the author, well one of the authors of this book, \"Gray Hat Hacking\" is also written one of the, and forgive me if I use the wrong words, Stephen, one of the most insane, craziest courses at SANS. So perhaps we can start there. What's this course that you've created at SANS? - Yeah, I've written quite a few courses at SANS, but I think the one you're referring to is the \"Advanced Exploit Development\" course. So I kind of designed that course as more of like a survey course on different advanced exploit techniques so that you could have one course that focuses like five days or even two weeks on a single topic like kernel exploitation on Windows. But I wanted this one to be a bit of let's spend the day here on kernel stuff. Let's spend the day there on Linux heap overflows and then you can continue down one of those paths. So that was kind of the thought process. - Just for everyone watching that's like really advanced stuff. Does SANS or do you have a recommended path, like how do I go from sort of someone like who's perhaps new to this but really interested in like zero days, interested in the stuff that you do and perhaps you could talk a around that. Like what exactly are you doing like most of the time, but like how do I get to that course? 'Cause I'm assuming I couldn't take that course tomorrow. - Yeah, yeah. Depending on where you, what your experience is and your background is, it's interesting now because I remember 20 years ago that was kind of around when I was really getting deep into the exploit development side of things. It was a lot easier then. Now back then these techniques that were being discovered were pretty novel. They were new, they were considered quite technical. But I always like to use the analogy of like Tony Hawk, Tony Hawk's a well-known skateboarder, everyone knows who he is. And back in the 80s I guess, or 90s when he was really at his prime, the tricks that he was doing were insane and no one could do them. But nowadays it's almost like you go to any park and all the kids are doing a lot of those techniques that he was pulling off back in that time. So you need to ramp up quickly to get up to speed and understand all of those foundational techniques and almost repeat those steps and work your way up to what we need to be doing today. And that's a good starting point. So I think like going back, you'll always hear references to this paper written by Aleph One called \"Smashing a Stack for Fun and Profit. And it was written in the earlier mid 90s and it's basically a classic buffer overflow on Linux. But it's that great starting point that pretty much everyone needs to get through in order to move forward. - So I mean, just for the audience, I've got some great news for you. Stephen's recently started a YouTube channel. So Stephen, perhaps you can share your screen and we can take a quick look at your YouTube channel because one of the criticisms of SANS is, okay, this stuff's fantastic, but it costs like crazy money for a lot of people. Unless you're working for a company, it's not likely that you're gonna go for, go to one of these courses. But I believe what you're doing and I'll let you take it away. What are you doing on your channel? - Yeah, so I just started it in September, 2022. So it's quite new, as you can see there's only a few videos. But the thought was like you said, training is expensive and there are lower cost providers out there, more like subscription-based services where you can kind of pick and choose a bunch of little modules. And then there are more advanced training or more expensive training as well. Offensive Security, SANS Institute, many other ones out there. And getting access to that content can be cost prohibitive for a lot of people unless you have a company that's paying for it. I mean I remember back when I was getting into IT, I went and I paid for a CCIE Cisco prep class and I paid out of pocket. - Oh wow. - It was over $3,000 and back at that time that was quite expensive for me. So I had to get a loan out and pay it off. But you know, I was investing in my future and it was great. But like with this channel, what I wanted to do is take pieces of, it's a couple of things. One, it's sometimes going to be content that's still really relevant but maybe that I've retired out of a course. So for example, if you see on a screen on the far right, the very first one that I did was on browser exploitation. This I would say probably 2014, right around there was like the prime of when exploits against Internet Explorer 8, which was the default on Windows 7, was at its peak and use after free was like defacto exploitation technique and vulnerability class that we were going after against that browser. Once you learned how to perform the techniques to gain code execution, I mean obviously you have to find the vulnerabilities in the first place, but that's more of the easy part. Getting crashes to occur when you're fuzzing, that's the easy part. The hard part is determining whether or not it's something that can be weaponized and then actually getting it there. That particular one that I started with, it's ended up being two hours because I really wanted to go through just like if I were teaching a class and take it from A to Z, A to Z, and that's a particular module or section that I retired out of the SANS Sec 760 course. Aside from that, I'll also be doing stuff that is still in the courses are still very relevant. If you look over to the left, the most recent one I did at this time was in October, 2022. And that was a session on modern binary and patch diffing, which we are still absolutely covering. It's a whole entire day or section of the course and it's something I feel is really relevant and almost not appreciated as much as it should be. And so I wanted to present that to the community, so folks can come in and get started and get up to speed and start going and bug hunting. - Stephen, this is fantastic news. I think because one of the biggest criticisms I think a lot of people YouTubers get, if you like, and I get this as well, it's like, David, you keep teaching the basic stuff. You keep, teaching beginner stuff and a lot of people, you know, may start with the beginner stuff, but obviously they outgrow that as they go through their career and there's obviously people with more experience. So if I understand correctly, your channel is not for beginners, right? - Yeah my original thought was to focus primarily on advanced techniques. 'Cause like you said, when I go and type buffer overflow and YouTube, there are thousands of hits I think. And so I didn't want to kind of repeat what's been done, but the funny part is people still reached out to me and they were like, hey, I just wanna hear you covering buffer overflows because maybe the perspective will be a bit different. But yeah, so I do plan on doing some talks that aren't gonna be more like career driven. Like I'm doing one on kind of how to get into red teaming, which won't be as technical, so I'll kind of weave in and out. - But I mean, that two hour session. When I started looking at some of your content, you don't mess around as in like, some of those sessions are really hardcore, for lack of a better word. - Yeah, I think, you know what, you're making me think of something, a good idea, which is maybe at the beginning of some of these videos, I'm gonna talk a little bit about the prerequisites. Like, if you're gonna watch this, here's the things you should probably know already or go and, you know, get up to speed. But yeah, I just wanna get straight to the content and not have a bunch of fluff I guess you could call it. - Yeah, I think it's brilliant. I mean you've been doing this before, did you say 20 years? - Yeah, around that. - Yeah, I mean you, I think you said, the person that got you sort of excited about it was your father, right? - Yeah, my dad was, I was lucky we had computers in the house in the 90s, all connected to the internet and worked with him on seeing how to connect the different, the board systems and watching the movie war games and of course you got a modem and you're looking some numbers and you're like, wait, this actually works and is really easy and I see I can get into trouble pretty quickly. It was great to have that in the house. And I remember one time like I wanted to play, he might not remember this, but I wanted to play video games and we had this VIC-20 computer, this old computer in the house. And he was like, I want you to work through all this BASIC code, in BASIC, and it was like over 1,000 lines. It was like logo this, go to that. And I didn't understand what it was, but so many typos and, you know, I still make those today, syntax errors. And and you get to the end of it after doing like two hours of it and it just makes a siren noise. And I'm like, well that is very not rewarding, (David laughs) but it was a great start. - Yeah, so I mean he got you involved and then you started, I think you said that on your bio on SANS you said you were really, you really enjoyed the course that the instructor gave. Is that right? And that that's why you got involved with SANS? - Yeah, it was back in probably 2003, 2004, I took the SANS Security Essentials course and I had never heard of SANS before that, my manager at the time sent me and I was just blown away by the instructor's knowledge. It felt like he knew everything. Like there was not, there was like 100 people in the class and there was not a single question that he didn't know the answer to. And like the one time he didn't know the answer, he said, great question, I think I know the answer. I don't wanna give you wrong information, let me go call some friends, validate it. And right after lunch he came back in and gave the answer. So yeah, I just was blown away by that. - So do you teach at SANS or do you just write the content or both? - Yes, I've been teaching for SANS for I think around 15 years now. - Now I don't wanna show our age, but I think you've done a little bit of that already. You mentioned, and I think it's in your first video on your channel, you talk about the golden age of hacking. Can you explain why, what that is and how things have changed? - Yeah, that's a long, I mean it could be an answer that last days if we wanted to, (David laughs) I would say back in the, like when I first got into this, there were no exploit mitigations. Windows XP was out, it had just come out, windows 98 and stuff was probably still around, but Linux was on very unsafe versions. There was no protections, like common protections like safe unlink. It's a heap protection that protects the allocators. It works with the metadata to protect like right what, where primitive based attacks and like all of this basic mitigation that we count on today was completely missing back then. So that means if you find a vulnerability and it's something that can be weaponized, there is nothing that can stop you. I mean this was back when firewalls, if you had them on a client system, again, a big if, was only doing outbound filter or inbound filtering I mean, not outbound at all. And I remember I moved to San Francisco from Baltimore, Maryland in the early 2,000s and I lived on a place called Treasure Island and I was lucky where there was a bunch of techy people. This was San Francisco right when the .com collapse had occurred and tons of techy people. And so it was a really neat community, I guess you could say it was a intersection of people that go to Burning Man and the artistic types with, I remember one of the guys that managed the site rotten.com was there on some of the Cult of the Dead Cow people and lots of hackers. And so we were just like, hacking at each other all the time. And I remember when Metasploit came out, I think it was 2003 and MS 03026, which was Blaster, the MSRPC DCOM, the infamous bug, that was one of the first vulnerability or exploits ported into Metasploit and you could literally find a Windows system like do a Nmap scan and just type the IP address in, load the module, say exploit, and you get a shell on your screen. - Yeah. - And it worked 95% of the time, you would just get shells anytime you want. Because there was no filtering and there were no patching. There was no patching happening. And so what I mean by the golden age is pretty much that it was, it was, there was limited if any, security filtering firewalls, intrusion detection, prevention, all of that was all pretty new there. Patch management was even worse than it is today, which is saying something, there were no exploit mitigations and it was just easy. You didn't have to know anything at all if you wanted to do hacking. - Yeah, I think you said that it's the operating system that a lot of people hate, but you said there was some good in Vista, is that right? - Vista, yeah, so Microsoft has this interesting situation, at least it seems that way, where every other operating system is (David laughs) successful and yeah, and you know what I'm saying, right? It's like XP was super successful, people loved it, Vista people didn't like it. Why? Because UAC and some other things. And then they try to like tone it down a bit with Service Pack 1. people are like, nope, I already made up my mind. So then Windows 7 comes out, which is very similar if not the same kernel as Vista and people love Windows 7 and then Windows 8 comes out, they removed the Start button, the tile menu appears and people get stuck and they say, oh, we're sorry they put it back in 8.1, 8 already got a bad reputation, windows 10 comes out, people love it. And now we've got Windows 11 and I don't see that one taking off at least not so far. Yeah, Vista was the first operating system from Microsoft that underwent their security development life cycle that came out, yeah, in the early 2,000s. And so aerospace layout, randomization came out and other big mitigations. - I think I've heard you say that Bill Gates changed the way that security was implemented around that time and that's why Vista, even though people hated it, did some great stuff from a security point of view. Is that correct? - Yeah, I think it was called the trustworthy computing memo or email. It was this infamous memo that came out from Bill Gates, I think it was 2002 or 2003. And that time was when Patch Tuesday started up and also the security development life cycle, which was all about mapping security processes into each phase of the development life cycle. So if you would have something like your design phase, which is a standard phase in the development life cycle, you would factor in things like attack surface reduction and threat modeling. And you would talk about secure cryptographic design and all these things that you would decide on before you move into the implementation phase where you actually start writing the code, which you map in security, like which exploit mitigations are you gonna use and which band functions are you not gonna use and what static code analysis are you gonna do when things cross trust boundaries. So Vista was the first OS to undergo that process from start to finish. So yeah, it was a much more robust operating system from a security perspective. - So in other words, even though people hated what happened at that time, Windows has got a lot more secure since that time. And that's what's made, as you said, the golden age kind of end. Is that fair to say? - Yeah, and it's not, yeah, absolutely. And it's not just Windows. I mean obviously Apple's done a much better job. I saw a talk recently by a researcher saying that the use after free bug class that they were able to depend on to be able to do the jailbreaks and such are pretty much coming to an end. And I guess you could say sadly from one perspective and gladly from another perspective, the Linux, same way it's the phones as well, that's why you see the bounties on things like an Android zero day or an iPhone zero day that allows you to do remote code execution, getting up into the seven figures, which is amazing. - Yeah, I mean let's, I wanna talk about zero days and like one days, so perhaps you can just give us the definition and then, people who are interested in doing this, it sounds like there's crazy money to be made if you find a zero day in like Android or other operating systems. - Yeah, so I'll share one quick story and people have heard me teach before, have heard me probably tell it where back in 2014, I had said that year already, and it was a notable year because Microsoft, without giving any warning, not that they should have to give a warning, came out with these two mitigations in June and July, 2014. It was isolated heaps and deferred free and MGC. These were mitigations targeting internet explorer trying to stop and doing a good job at stopping use after free exploitation from being possible. Because if you were watching Patch Tuesday around that time, like 2012, 13, 14, there were anywhere from 40 to 60 vulnerabilities being patched in Internet Explorer each and every month. So back in 2014, a good friend of mine, Corland Coder, also known as Peter Van Iko, is real name from Belgium. He has a psych and a group called Corland BE, he's made an amazing plugin that so many of us have used called Mona dot Pi, which is a plugin into immunity, debugger and also window bug. He and I both at that same time were making money weaponizing and selling use after free exploit triggers to ethical buyers. And when those updates came out, when those mitigations came out in June and July, 2014, it pretty much broke our attacks. Like we couldn't, the vulnerability was there but we couldn't weaponize it and get code execution because the mitigations were doing such a good job. And when that happens, the price tag on the exploits, if you're gonna sell them go up of course because they're harder. - A zero day and one day just for people who are new, what's the difference? And then I want to talk about like the kind of money that you can make with this kind of stuff. - Yeah, so it's subjective depending on who you ask with regard to the definition of what they are. But I think everyone pretty much agrees that a zero day is a vulnerability that has been discovered by an individual or individuals that is not known to anyone else theoretically. I mean there could be someone else out there who found the same bug as you and hasn't told anyone and kept it to themselves, but for the most part it's a vulnerability that the majority of the world, including the vendor of that application or operating system doesn't know about. And so if you have that, you've got different things you can do with it. You could of course use it to attack targets that are not gonna be patched because there is no patch. You could sell it to different types of buyers or lots of different types of buyers out there definitely have stories there. So that's a zero day like you may have heard somebody say there's unknown unknowns, there's known unknowns and then there's known knowns and it's a really strange, those are strange terms, but unknown unknowns would be zero days or vulnerabilities out there that no one is discovered yet. That's all the vulnerabilities that are sitting there waiting to be found. Then there's known unknowns which are vulnerabilities like zero days someone's discovered it, but there's no patch yet. And until people start using it in the wild and it gets detected or someone discloses it to an ethical buyer, then it remains unpatched. And then there's known knowns which are vulnerabilities that have a corresponding patch but sadly are still incredibly valuable, which gets us into one day or end day exploits. Those are exploits that are typically found through a technique called patch dipping or binary dipping, which I have recently done a webcast on the Off By One security channel. And basically that is some vendors out there like Microsoft don't obfuscate the patches. So when you download the patches on Patch Tuesday, you can do a differential using special tools between the new patch that came out against the unpatched version. And what you're able to detect there are the code changes at the assembly and the function level. So let's say a dynamic link library has 20,000 functions in it. If you're properly doing a diff, you may see that only five of those functions out of 20,000 have code changes and that allows a skilled person to be able to go in and locate the patched code related to the vulnerability. So you get to learn two things, one, where the vulnerability is and what was patched because one thing you can do is if you've got the skill to do so, you can try and weaponize it and if you can weaponize it, organizations often are very slow at patching and it may be months before they get patched. So the faster you weaponize that vulnerability, the more valuable it is and there are buyers for those as well. And then the other benefit to patch dipping is you get to learn how Microsoft, in this case with the example I'm using, how they go about patching certain types of bugs and you can use that knowledge to go and hunt for other bugs that are very similar. - So tell us some of your stories 'cause I've heard you say that or you've done presentations, I think it was at RSA where you said like Android, you mentioned like a figure here, but like $2 million or something you could get for like a zero day, right? Have you got any like cool stories that you can share? - Yeah, I mean it's a tough one 'cause what can you share and not share? (David laughs) I so growing up and getting into this stuff hardcore in the 90s and the 2000s, I had a really tight group of smart people who were like, you need to use a handle, you need to use a pseudonym. I mean now everybody uses it. We all played, Xbox or whatever and everybody's got a handle. But back then it was a way to kind of anonymize yourself because you didn't want to be associated with what you're doing. You could, end up like Kevin Mitnick or someone and go to jail. Anytime I would be doing things or talking on message groups, like back then it used to be Millworm, which is before ExploitDB and you would always use your handle. So a and always use VPN so that people hopefully couldn't find you or know or associate you with that tag. And so having grown up with the people who helped me understand how to do that successfully is what allows me to remain anonymous on that perspective. I'm not someone who has gone out and tried to get a bunch of CVEs under my name or be known on exploit database for having published exploits because honestly, like personally it's a personal decision. I just don't care. I don't want to be associated with those things because I have a professional career and I've always been very ethical. And so some people may view those types of research activities or sales that you're doing as unethical and I just again, don't want that negative association. When you're selling exploits, there's different types of buyers out there and that's what could get into potentially interesting stories. My stories are more about what people have asked me to do versus what I've actually done. I have a wife and a daughter and I don't want, I know people, I won't name them, but I, there's one guy he's like, I have a black van in front of my house 247 and he is in another country outside the US anyway. And I'm like, no you don't. 'Cause I mean that sounds like a story. He has taken multiple videos and photos and sent them to me and he is like, see it's there. It's always there because they're keeping an eye on, I'm like, who needs that in their life? But they're the ethical buyers out there, you can of course go to the affected vendor like Microsoft or Apple and they typically have bug bounties and if they look at what you've discovered and they think it's worth something, they might pay you for it. So that's one way and that's seen as ethical because you're only giving it to the effective vendor and they can get it patched. You have to sign an agreement, like a non-disclosure agreement and you can't violate that or they can come after you to get their money back. There's also, there are things like Can Sec West and the Pwn To Own challenge where people work on exploits and then they go and do it in a competition and the agreement is it doesn't get public, it goes to the affected vendor. So those are seen as more ethical routes or route you can go. It's still seen as ethical, but it's kind of the next level up, which is you could go to a company like Idefense or ZDI, Tipping Point, ZDI the zero day initiative. Both of those were started by Petra Amini long time ago. He's kind of like what I consider the forefather of the whole bug bounty realm. The way I don't quite understand their business model or where they get compensation for it, but they would buy from you the exploit trigger and once they validated it, they pay you, if let's say it's a browser-based exploit and we're talking 10 years ago, if it's against Chrome or Internet Explorer, it would've been worth by 10 to 20,000 US dollars. And that's for an a exploit against like Internet Explorer use after free remote code execution bug. So when that company like ZDI, I or Verisign would've or not Vern used to own, I defense, that's why I said Verisign, I think Accenture owns 'em now. They would then take the exploit and they would disclose it to the effective vendor and get it patched and no one would know about it publicly. So again, I don't quite understand what the benefit to them is. I don't know if they have an agreement with like anti-virus vendors or maybe with the effective vendor who pays them. I don't know. Then if you take a step back from that, it's when you start to cross into the, what people would consider the unethical actions. Every country almost has an intelligence agency. And those intelligence agencies absolutely have like computer network operators, whatever you want to call them who do offensive operations, who go out and will launch campaigns against their adversaries, which could be nation states or other targets. And so when you're selling to now, you don't go up to the NSA or whoever it is and knock on the front gate and say, \"Hey, I've got an exploit, you wanna buy it?\" There are, there are proxies out there are contract companies or other entities you can sell them to and then they will buy them from you and then they'll go and do what they do on the backend. I have no idea. There are then you go another step. So the reason I consider that a step back from kind of going to the affected vendor or I defense or ZDI is that those are making sure the thing gets patched. When you start selling it to a entity who might use it to launch nation state campaigns, now it's being used to attack real world targets. - [David] Yeah. - You don't know what's going on with that bug. And even worse, if you take another step back or layer go another layer of the onion, you could sell it to the highest bidder, which could be someone who is a foreign adversary, a nation state that's an unfriendly or sanctioned nation that might use that exploit against your very own country. They'll probably, and as you go to the more unethical route, the price tag gets higher. Like Zerodium is an example and we can look at the site real quick if you want and look at the bounties. - [David] Yeah (indistinct) - Let me, cool. So this is Zerodium and you can see right down there at the bottom, it sticks out real fast, up to $2.5 million submission. So as you scroll down, there's a couple different primary categories. There's the desktop and servers category and then there's the mobile category down here under mobile you can see up to 2.5 million US dollars for an Android full chain persistent zero click exploit. What that means is if I find a vulnerability in let's say an SMS app where I can send you a text and you don't even have to do it, you don't have to click on a phishing link or anything. I just send you something and it roots your phone and gives me remote access to it, that's what they're talking about here. - [David] That's (indistinct) - Yes, exactly. Like Pegasus, if you go down a notch here, speaking of Pegasus, that's iOS. So there's up to 2 million. I remember one time when I believe it was Zerodium, they used to be called Whoopin, I believe it's the same company, that they said we're no longer or we're temporarily not accepting Apple iOS zero days because they had enough of them. That's crazy. And then they opened it back up again because now it's even harder to weaponize and find those, it's not just one exploit anymore, it's like three, four or even more exploits chained together to get you that remote code execution. And then you see other big apps like WhatsApp is huge, right? iMessage, telegrams signals a big one. There's also bounties for things like Tor nodes and browsers like tour at the Tor browser or de anonymization of Tor nodes on the dark net. Here's the desktop and server one. So up to a million US dollars for a Windows remote code execution, zero click Chrome Apache. So up to a half a million dollars for a remote code execution with local privilege escalation against Chrome on Windows. Those are some significant payments. But that goes back to my point, which is who are you selling it to? Who are the customers of Zerodium in this case? So as you work your way out and the price tags get higher, you can imagine who the types of buyers are. Now with regard to just stories does, I guess more like, I'll say a couple examples where I've been hit up on Twitter DMs, people have gotten my Signal info somehow and sent me a message that of obviously I didn't give this number out to anyone in particular and they hit you up and say something like, one crazy example is we are looking for someone who is not someone who has government secret, clearance or anything who is willing and interested in going to another country. I won't name the country but I'll say it's one of the countries who are very loose on hacking laws, bypassing passport control. So bypassing customs that will get you in and you'll be there for about 48 hours and they'll get you back out. And it's kind of one of those things where when I've talked to people who work in intelligence divisions and such, or military and I asked them about that particular type of request, I'm like, what happens if you get caught? Like what if you're over there, you bypass customs and you, they're like, they probably don't, they don't know who you are. They don't, they're no one's gonna come rescue you in a helicopter. Another one where it was all about going onto container ships and back dooring firmware to kind of affect the supply chain of things because routers and switches and such, those are in aggregate points in ISPs and other organizations where you now have access to some significant amount of traffic or people who request that you meet them at a coffee shop. So that's one thing I'd recommend. If you're someone who has a vulnerability that you think is worth money and people aren't gonna pay for stuff like some random FTP client or server, it's gotta be the things that you saw on that Zerodium site, that's the kind of apps people would buy exploits for. Don't ever send them the exploit or the trigger unless you've been paid. Don't ever meet them somewhere out of like a coffee shop. The best way to do it, there are ways to do it if you're actually gonna go that path. And again, I'm not advocating that you should do this, but I know people will go and do it and you want to be smart, you wanna be safe, you wanna make sure you're going through VPN going through the Tor network and using some way of anonymous screen sharing where you're able to demonstrate to the interested party this actually works. Because they're gonna quickly say, especially if they think they can pull a fast one, they're gonna send it to us. Just send us to trigger code. Don't weaponize it, just send us like, you have to prove it to us. We'll pay you and you're not gonna get paid if you do it. It's best to go with ethical buyers and yeah, I'm more than happy. Like if you ever, my Twitter DMs are open and if you run into a situation where you have an exploit and you're just curious about who might be interested in buying that or if it's something someone might wanna buy, you totally hit me up now I'm not gonna give recommendations on who you should sell it to or especially if you're going the more unethical route. But I'm happy to like at least help you not make poor choices. - I think it's, I always wanna highlight, do the right thing, the ethical thing because that's that story of your friend or the guy that you mentioned. You know, I don't wanna live the rest of my life worrying that I could walk down and alley and not come back again. - Yeah, yeah, absolutely. And I, as we're growing up, like I look back at the 90s and I definitely did things that were questionable as far as like dialing up a modem, a phone number, or without permission launching an exploit against some random computer. But that's long in my past and I look back at that, I'm like, that was really dumb and I would never advise doing that. I've always been very ethical and it's the smart choice. 'Cause like you said, you want to keep you and your family safe. - Yeah, exactly. Especially if you've got kids, and you're married or you know, you've got someone that you care about you, when you're young and dumb, I like to say when you know, when you and I were young and dumb, and single or whatever, you might be like more inclined to do things that are more risky. But it, the problem with that kind of stuff is when you, once you overstep it can always come back and bite you. So yeah, I'm glad that you, you're highlighting some of the problems and do it ethically and thanks so much for sharing. So I'll put Stephen's links below so that you can follow him on Twitter. I suggest you do that. Go to go and subscribe to his YouTube channel, but also, send him a DM. Please don't send him a bunch of dumb questions. But you know, if you've got something that you think is serious then, talk to him about it. So Stephen, I really wanna thank you, for sharing that. But let's say like, okay, now you've got me interested. I mean we're talking millions of dollars. It's crazy amounts of money, especially for some people perhaps in different parts of the world. I mean they could submit one of these and then retire. How do we start? I mean in this gray hat hacking book as an example that the and I dunno which section you wrote. So you perhaps you can tell us about that, but like you talk about like programming languages like Python and C assembly is there like if I want to get into this world, it sounds really exciting. Have you got some, like a roadmap I kind of asked you earlier, but perhaps we, you can give us some like kind of guidance of what things I need to study or where I need to go to, try and become like you. - I mean, I guess first on the book I will say something kind of funny, but writing a book is hard. It's time consuming and it's not very rewarding from the financial side typically. It's not, yeah, it's very rewarding on the branding side and contributing to the community and getting your name out there and such one trick. I will tell you I was very happy when approached by the original authors of Gray Hat Hacking. I'm on the fourth, fifth and sixth edition that came out in 2022, the first, second and third I was not on. And what happened is some authors said, \"Hey, we can't be involved in it anymore, we need another author.\" And I was lucky or fortunate enough to be asked and trusted and it's a great opportunity when you can co-author a book with a few other people because it's not nearly as big of a time investment but you still get to benefit in the branding and such. So yeah just a thought, but certainly write a book by yourself if you have the time and the passion to do so. Just know what you're getting into. - I've been asked multiple times to write books and it's like no rather create YouTube videos. - Yeah, exactly. - Books are hard. Books are hard. Go on, sorry. - I guess on the getting started side, I said a little bit earlier it's, you still wanna start from zero I make another analogy, which is if you're gonna learn mathematics, you're not gonna start with calculus if you don't even know basic addition and subtraction and algebra. You wanna start with the basics and work your way up. Even if, 'cause I get some people to come into a class if I'm teaching one and they say why aren't we starting right away with Windows 11 with every exploit mitigation enabled? And that's pretty much my answer. It's like, do you know how this works and that works and have you done this before? And if they're saying no, we can't just jump right into that. You need to understand the basics. So when I teach exploit development, I always start with a very basic buffer overflow on the stack with no mitigations so that you can see what it used to look like or what it looks like without any mitigations and then start turning one mitigation on at the time. So let's turn on randomization. How does it change the attack? It breaks obviously, so what do we need to do to fix it? It's not always gonna be possible to fix it, so let's understand when it is possible. And then let's add on another mitigation like data execution prevention. I say like treat it like a video game where I used to play games like Halo and Skyrim and once my wife and I had our daughter, I had to give up something to have time and I was like I gotta give up the gaming 'cause I've gotta stay on top of the exploitation stuff on computers. If you take something like Exploit Guard which replaced the enhanced mitigation experience toolkit on Windows, Exploit Guard is kind of like the flagship or custom, no I shouldn't say custom cutting edge mitigations that aren't turned on by default. Microsoft's in a situation where if they go and turn on all the mitigations that they have, it's gonna break a lot of applications because a lot of applications have dependencies on third party DLLs or may not be written the same way Microsoft writes things and so they don't want to break things but they're there for you. If you're an administrator and you know how to test those mitigations to make sure they're not gonna negatively impact production, that's awesome. Most admins don't know how to do that or don't take the time to do that 'cause they're busy. But if you do, you can significantly cut down on if there is a zero day, will it be able to exploit your system or not. What I was saying is if you get a working exploit on like a modern Windows system or Linux or Apple, then you can start turning on those mitigations one at a time and treat it like a video game where it's like level one, level two, level three, level four as you turn on each one. You learn a ton by doing that and you get to a point where you probably are way beyond what you actually need to be able to do because most people don't turn on the mitigations. So I would say to like get started, a lot of operating system vendors, like even Microsoft, I remember, I think it was Mark Rossovich at Microsoft said recently, if you're gonna start a new big project that needs the power of a low level language like C or C++, use Rust because rust is a lot safer from a memory management perspective. You shouldn't go and start using C and C++ because there are some inherent problems with those languages and you really need to be safe and understand the power that you have can result in pretty significant security issues if you don't wield them that properly. So I would say like pick up a C book, pick up like an introduction to C, introduction to C++, write hello world, I mean it to write Hello world and Python, you know, super easy right print, hello world. - Too easy. - And and in and C it's even easy print F but is there a safer alternative than print F now? Yes there is. So like figure out what the but if you wanna look at vulnerabilities, use the unsafe versions of functions and write a little hello world program, compile it, and then open it up in Ghidra or IDA Pro or Hopper or some other disassembler to see what, a basic program like that looks like at the assembly level and then go in and create a function call. So now your C program in the main function, it doesn't just call print F and say hello world. The main function actually calls another function where you can pass a string argument to it and that function will now print out what you want it to print and then you compile it, disassemble it in Ghidra or whatever. And then you get to see the delta what the difference is now that your program is a little bit more complex and spending a lot of time like learning how to write a driver, a really basic driver on Windows or reverse engineering and going and playing capture the flags and trying those little crack me programs where you're doing reverse engineering. Anything like that is gonna give you a great kind of headstart, especially if your goal is to go and sit a course or if even if you're doing self-study and you're trying to go further and further along. There's a great group of people out there called known by Shellphish, shell as in like seashell and fish as in phishing scam, Shellphish. And they've got this how to heap section on the website and it's all of these heap overflows like heap exploit techniques going way back to the late 90s all the way up to today. So it gives you a good starting point, like getting old version of a Linux operating system and trying out the old heap exploit technique and working your way up. So I guess my point is start from the beginning and work your way up and do lots of capture the flags and some people will say capture the flags are not, they're not worth your time, they're pointless. And I completely disagree with that. Not everybody goes to university and you certainly don't have to go to university, but some people that I know who have gone to schools that are really well known for their computer science and security programs, if typically to a theme anyway that I've heard from them is it's not about the classes and the professors being so amazing that you're getting an exponentially greater experience than another school. It's about the people that you meet, their ambition, the capture to flag groups and the teams that you make. And instead of going out and partying in the evenings and the weekends, these people are studying and hacking. And when one of these individuals comes to a class I'm teaching, I'm like, oh man, this person is well beyond even what we're covering a lot in this class and I gotta step up my game. So associating with smart people and finding what the local captured of flag groups or security groups going to Bsides and all, and I made the example of having to give up something and I said, I'm not gonna give up time with my daughter, so I'm gonna give up video games. I'm not, I don't wanna talk about Twitter, I don't personally like social media and I find that for whatever reason certain people in the hacking community are quite toxic on Twitter. - Yeah. - And so I try to not, I have made good use of the mute button or mute filter, whatever mute words. - (laughs) Exactly. - Because what I'm gonna say is something that I've seen people campaign against and I'm sorry I'm for this, which is you gotta give up time somewhere if you want to get really good at this. We don't have the luxury of going back and being a child again and being immersed in Japanese or something if we wanna learn that language. If you wanna learn Japanese today, it's gonna take a huge amount of dedication and self-discipline. So to get good at reversing, exploit development, programming, if you don't already have that experience and even if you do to get better, you've got to give up sleep, going out with that friend on that Friday night, using some of your weekend time. I mean I remember riding in and outta San Francisco on the Bart train which is our subway, and crack open a book. I was always, anytime I had a spare moment because most of us don't have the luxury of working at a company who is gonna pay us to learn all this on the job. To get those cool jobs, you need to know this stuff already, but to know this stuff, someone's had to pay you to do it or take classes or self-study. So you've gotta be prepared to really spend a lot of time. - It's hard advice, but it's true. I mean, if you really want to get, become the best in something, you've got to, there's only 24 hours in a day, what are you doing with your time? I don't watch television as an example because I just don't have the time. And you, like you gave up gaming, you've gotta give up something if you want to be really good in something specific. And it's life choices, you've gotta decide what's right and wrong for yourself personally. - No athlete in the Olympics is- - Yeah. - Is gonna tell you that they didn't sacrifice. - Yeah, exactly. Yeah exactly, exactly. - And you know, and I'm absolutely not saying give up everything and go 24/7 hard on this. You still need a life, you still need hobbies, you still need friends. That's all very important. I'm just saying, oh that one time your friends are going out to the pub, maybe stay home and do some studying or Oh, I could have done this. And exercise is so important, right? (laughs) - You gotta decide what's right for you. I think, I mean if you wanna watch, if you wanna watch TV shows the whole day and sit on the couch, that's your choice. But you know, you're gonna, you're not gonna be the same way physically as someone who exercises every day. It's like, what are your life choices? And I mean, if this is really important, I mean it sounds like the rewards can be very high from a financial point of view as well because I mean those prices that you were showing that's more the how did you say, the less reputable examples, is that right? But like reputable is, it's still good money, right? - Yeah, yeah, absolutely. The prices have gone up. So like I said earlier, what would've been worth 10 to $20,000 back in 2014 before the mitigations ramped up exponentially would now be worth potentially $100,000. So you're getting paid a lot more, but it's hard. It's, I'm not gonna discount that. It's a lot of work. - So Ghidra, that's a tool that allows you to do reverse engineering and de-assembly, is that right? - Yeah Ghidra was released by the NSA a couple years ago at RSA conference and it's a free disassembler and it's also got a decompiler in it as well, which is nice. So I mean the great thing about it's free. The commercial defacto kind of standard is IDA Pro, but IDA Pro is very expensive. But you know, if you ask me if I have the choice between both and someone bought me IDA Pro, I'm gonna use IDA Pro 'cause it's been around a lot longer, it's a commercial application. So it's got a lot more dev resources and community support over the years. - So I mean, is the reason I'm asking this is they're huge financial cost to doing what you do? Or is it like, is a lot of free tools out there? - Oh, you can do everything completely free. I don't see many instances where you have to spend a whole lot of money because all the tools that you need, they're all free, like win to bug for example, and GDB and people have written brilliant extensions like Jeff and Peter and such on GDP that you can use to help with exploitation. So I can't think of any, a whole lot of costs aside from like your hardware you need. - And I mean hardware, it just depends which operating system you're going after, right? Like is it Android or is it iOS or is it Windows, et cetera. Is that correct? - Yeah, so I mean I certainly wouldn't recommend if you're just getting started in exploit dev to start going after IOS. It's really hard. There are big groups and research teams out there that are decades ahead and they're well funded, they've got a lot of money and it's the ramp up to get to the point where you can be, I don't wanna say useful, but effective or like, it's long and the techniques that you tend to hear about publicly are oftentimes outdated by a year or two. And so to get cutting edge, that information is held close to the chest. It's worth a lot of money. So why would people just give that to anyone? Yeah, I would say, starting off on like Linux or the Windows operating system, I mean there's a lot of companies out there still running Windows seven I think there's still 10s of millions of Windows seven boxes out there. And when you look at Windows seven against 10 or 11, of course the mitigations and the security is gonna be a lot weaker. - Yeah, I mean, so if I'm starting, I can start for free and I could use Windows as I'm, I've perhaps got a Windows computer or I can just virtualize and run Windows locally or Linux locally and start learning this, right? - Yeah, absolutely. The cost is in like if you want to build a fuzzing farm or something like that at home, obviously you can increase the likelihood that you're gonna find a bug if you build a big fuzzing farm and the cloud or with hardware resources at home and the cost can go up at that point. But getting started in it and still being effective, you don't need much at all. - In on your YouTube channel, and I just wanna highlight that once again, you putting a whole bunch of like, I would say hardcore, like more advanced content and one of the interviews you had was with someone talking about crypto, is that right, and blockchain hacks. - Right, I had Steve Walbro on from the company Halburn, who's like the top company out there doing blockchain, smart contract security web three kind of pen testing, code review and assessing. - The reason I ask this is obviously there's a lot of interest in crypto and blockchain and stuff like that, but it sounds like a lot of the security done by some of these organizations isn't that great? Like Microsoft has got years and years of experience of creating operating systems. Is that fair to say and is there a lot of opportunity like attacking crypto block, a blockchain, stuff like that? - Yeah, I mean, anytime there's a new technology, there's a new attack surface associated with it. So mistakes are gonna be made and there are new languages that are being used for crypto. You hear about things like solidity as an example of one. Then there are other languages like Rust that people use to build crypto and to right. You know, build blockchains and things like that. So the same programmatic errors are able, they can be made with any new technology as long as those languages are being used. Like what I've seen are things like unsafe functions being used that might allow you to execute assembly. And if it's not properly coded or if it's merely just there and a user can impact what's being sent to a function, it could then potentially execute it as assembly. And one of the things we went over are the op codes that could be executed that might allow you to do like a rock chain return oriented programming chain or something else. Some type of code execution that could result in some something significant. And one of the big problems with the crypto spaces, the vulnerabilities, I'm not saying there's like tons and tons of them, but when they are there they can be worth millions or billions of dollars. And there are other like scams out there like the rug pull scams and someone says, oh there's all these new coins coming out. Like luckily, or I should say sadly, the crypto boom that happened along with that, people saw that, hey, I can get rich quick. There's a lot of people getting rich quick out there. So people started to exploit that and they said, I'm gonna go get an influencer on TikTok to announce to their people there's this new coin coming out and it's not public yet, but if you go and go in the defi space, and I shouldn't say defi space, but if you go into the right locations and use pancake swap or whatever to go and buy this crypto, you're gonna be one of the first and it's probably gonna blow up. So you're gonna get rich. So people go in and spend all of their money, five, $10,000 and then there's a rug pull where they execute some function and it just, takes everything. Or there's different types of attacks, like 51% attacks where if you can get majority stake in a particular crypto, you can make decisions on behalf of everyone. And so some of it's like just some of it's coding flaws like you would think in a normal programming language and how they could exist. And other is specific to the technology itself, like new types of attacks that no one ever knew about before. - Yeah, it's very interesting. I mean there's been a lot of interest I think especially younger people in that space and yeah, I agree with you, there's been a lot of like dodgy stuff happening and in a way it's sad a lot of people have lost a lot of money, but it's good that people are aware of the problems with crypto, but from a technical point of view it sounds like there's still opportunities there. So I wanted to ask you, we spoke about iOS being more difficult to attack and just give us your opinion, which is more secure Windows, MacOS or Linux. 'Cause I know that there'll be a flaming war about this, but it's good to get like your opinion. Have they all got vulnerabilities? - It used to be an easier question to answer and like I said, back when Bill Gates released that trustworthy computing memo and they started really ramping up the security, it took a while, but Microsoft's become one of the leaders in the space of security. So if you take a fully patched Windows 10 system with all those mitigations running, the kernel has gotten hardened significantly compared to in the past. And it's really hard now to gain code execution on a in user land and especially in kernel land, there's all kinds of code signing occurring now and virtualization based security and I mean there are dozens of mitigations and they're doing an incredibly effective job and it's near impossible to get like a remote code execution opportunity into Windows kernel anymore. You can get right primitives and things like that can result in like spawning a new process that's owned by system and local privilege escalation and such. But like the days of, hey, here's a malicious font and I'm gonna send you a Word document and this font's gonna execute malicious code and exploitive vulnerability in the kernel and I'm gonna get remote code execution and set up command and control. That's mostly unheard of. They do happen and they're worth seven figures. So it takes a lot of work to get there and that's why you see a lot of people moving and focusing on like connected car security or IT type devices or newer areas like you were just talking about crypto, I'm not a crypto expert, but with all new technology you've get, you get these new developers who are learning as they go as well and you get really savvy people who identify the vulnerabilities and type of mistakes that can get made and then they go and find them. So when you look at, if you take a modern Linux kernel and Linux operating system and compare it to a modern cutting edge iOS version or Mac OS version and compare it to a Windows 10 or 11 fully patched and hardened, it's, they're pretty similar. They're really, I wouldn't say that one is any greater than another as long as it's deployed properly. Most of the problems I see are in misconfigurations, programming errors as for the operating system does, developers themselves, they're doing a really good job. Microsoft's can't stop you from installing a third party application that brings along with it a bunch of DLLs that weren't compiled properly. - So the operating system is, it's is great but it's, the problem is the, it's tricking users into running stuff. It seems to be a big problem. - Yeah, look at how effective ransomware is. - Yeah. - That's like a extremely trivial problem. You're just getting someone to execute code on their system that's malicious so you can fish to them or whatever. I mean you, we've seen a few ransomware examples where someone wormed a patched vulnerability and it gets onto a system and executes. But like if you're properly using VBS, Virtualization Based Security on Windows and you're putting things in sandboxes, technically if you're doing it right, if that ransomware is executed, it should be contained in an area where it can't get out and encrypt the files on your file system. - God's I'm glad you said this, I mean it's always, there's always people in different camps saying like one's better than the other. Programming languages, you seem to be, you've mentioned Rust a few times, if I was wanting to learn a programming language, would Russ be a good place to start or would you like do Python perhaps? 'Cause that's another one a lot of people seem to talk about. - It depends on your goals. I mean Python is, used to be Pearl, right, everybody used to Pearl. - Yeah. - And then Pearl I would say kind of fell off with regard to this new language called Python came along and the community loved it. They thought it was more friendly, they thought it was more intuitive and everybody started contributing to it. And so from a security perspective, like you've got Scape, which is Python based and you've got support for Python with IDA Pro and Ida Python, you've got support for Python and immunity, debugger and tools like PyMade the reverse engineering framework from PET Romania and like all this development started happening with Python and I remember Metasploit Project almost moved to Python instead of Ruby but they chose Ruby. But like it's, if you want to do scripting and be able to automate like PowerShell Python, those are all really easy languages and more intuitive to get up to speed at. If you want to be a developer who is writing big robust applications that where speed is critical, then that's where you need to get into your C++ and your Rust and Rust is seen as a language that has a lot of the power and speed of the low level languages like assembly and C and C++. But a lot more of the safety with that you have with things like intermediate languages like c sharp .net where you've got MSIL and you've got memory management being handled for you. So it all depends on your goals. Obviously if you're going to, if your primary goal is to do binary exploitation, most of those things are still gonna be written in C, C++ like your operating systems. And so those are important languages to understand and it's interesting, you made me think of something where I've met so many people in security who have avoided learning how to program or being a developer their whole career and they know a little scripting but they're not developers. And so when you see them reverse engineering something, they'll never use a decompiler. They're always living in disassembly because to them it's easier and they understand that better. But if you take a developer and you show the developer the assembly versus decompiled pseudocode, they're like, you people are crazy. Like why are you using disassembly? It's so much easier to read this decompiled code because what was like 500 lines in assembly is only 10 lines in pseudo code. - I think it's great advice. I mean it's like you said, I mean are you gonna be a developer or just a, like someone who does scripting and that's, it's for some people it's a big jump to jump from one to the other. But I think it's like you said what's your motivation? Where do you want to go Stephen? I we don't want to, we don't wanna sell SANS 'cause that's not the point. The point is like is there like kind of a roadmap or something that you can share like okay I wanna get to your course but that course is really like you know, difficult I can't start that tomorrow perhaps. Is it, what do I need to do to get to that course? Like is there roadmap of course is that you've written or that you can recommend that I would take and mean again not sales just like give us the kind of like courses and courses show content so then people can see the content in those courses and prep self-study or go to SANS. - [Stephen] Yeah, absolutely. So if you do decide to invest in a training course out there and if you can do it yourself obviously or if you have an employer who will help you out with that. And one thing I will mention before I even talk about specific courses is at SANS, there are facilitator opportunities and a facilitator is someone who pays, I believe it's 2,500 US dollars. So a pretty reasonable price for a six day course. And you get the whole course, you get the labs, you get everything, you just help out a little bit with the actual class when it's running, you will maybe hand out evaluations and collect those evals. You might help students out if they have questions in general, not about labs and stuff, just in general it's a pretty easy role but you're just helping out the instructor and SANS with the course and in return you pay less than one third of the actual price for the course and to get there, if you go to, I believe it is get involved work study, if you go to get involved work study that will give you all the information and allow you to apply to that. And I'll tell you one trick I might get in trouble for saying this but I've seen it a lot where there are even opportunities where once you become a facilitator and you're known by SANS, oftentimes last minute opportunities come up and they'll say we need someone to facilitate this, these two courses next week at free of charge. So you can sometimes get completely free but that's not the norm. But I just wanted to let you know that little trick in case that opportunity is there. - But you also get to know people like you more, you know that's also another huge benefit networking. - [Stephen] Yes, absolutely. (chuckles) So with offensive operations, that's the curriculum that I'm responsible for. So I'm the curriculum lead for the offensive operations curriculum and we put together different roles and we try to categorize things and examples would be red teaming, purple teaming, application pen tester, and then vulnerability researcher and exploit developer. That's more along the lines of what we've been talking about. But you can certainly go the path of obviously be a pen tester or red teamer. There's actually a class running this week that I'm sitting in on that's offensive Windows tool development. So it's all about kind of writing your own C2, command and control on Windows systems. So really cool, very specific stuff. But if we go under vulnerability researcher and exploit developer, you see these three classes here. So not a ton but we're talking about kind of a niche area. The 660 course is both an advanced pen test course and then three days of it are spent on fuzzing, so finding bugs and then exploit development on Linux and exploit development on Windows. And this would be what I consider introductory but quickly getting you into intermediate. We focus a lot on getting around exploit mitigations because you're so likely to run into those. Then once or maybe you already have a strong foundation on basic exploit development, maybe you've gone to the core land website or diff security tube or what's David's channel and other resources out there that help get you up to speed on the basics of exploit development. If you feel that's where you're at. We've got a couple options. One is a two-day course on ARM specific exploit development. ARM is the second most popular or widely used processor out there and a lot of the IOT internet of things devices are running ARM, a lot of mobile type devices are running ARM. So it's specific to that instruction set and architecture. But the more advanced course is this SEC 760 advanced exploit development course. This is the one where there's a capture the flag on the end but we spend five full course days and they're extended hours days looking at reverse engineering using IDA Pro how to do things like IDA scripting, looking at exploit mitigations. Then we get into the next day on Linux heap exploitation. So a whole day on Linux heaps because there's not a whole lot of courses out there that focus on Linux. Day three or section three is a whole day on advanced fuzzing. So using things like WIN AFL and Frida and other tools as to how you would go about setting up your fuzzing harness to go after real commercial applications. Day four is spent 100% on binary dipping and patch dipping as well as a bit of Windows internals on the end. And that prepares us for the day five, which is 100% on Windows kernel exploitation. And then from there, and that's why I call it a survey course 'cause we kind of touched these different areas and then from there you would then go take a five day course specific on or specific to like Windows kernel exploitation. We don't offer that right now, but there are classes out there, specialty classes and such that run at Black Hat and other locations where you can get that more focused content. - That's great. I mean I think the, there might be criticism like SANS is crazy expensive but you know the good thing about this is if someone's interested in, what those courses contain, you've given us kind of a roadmap and someone can go look at like the what those courses have as like topics and that can give them an idea of what to look at. Did you wanna show something else? - [Stephen] No. It's just going back to that work study program where you go and click apply and again you can potentially get in for 2,500 US dollars. - That's brilliant. So you mentioned CTFs and is a CTF part of that class? Is there any like websites or places that you could recommend for CTFs? Is it like hack the box or Try Hack Me places like that? Or is there something specific? - Yeah, unfortunately I don't remember it off the top of my head but there is a website out there where I'm sure you can Google for it and find it, but it's a big list of all the capture to flag events going on around the world. Some of them are put on by universities, some of them by companies and government agencies. But there are more than you absolutely would ever have time for and they span different levels of difficulties. Some of them are very intro, some of them are extremely hard. At SANS we have a lot of capture the flags we do with Counter Hack with Ed Scotus, we have a holiday hack that happens every winter around Christmastime and that's a really fun gamified hacking capture the flag game where there's always like a task at hand and you get to do all kinds of things. I heard from Ed that they're even putting like a blockchain capture to flag challenge in that one. This year we actually at SANS, we run conferences, they're called summits. So we have the conferences where there are the training courses, then we have summits like every November we have the Hackfest summit where we run multiple capture the flags and if you attend it virtually but typically free to play. So that's a good option if you want to play a free CTF from the SANS Institute. There's a lot of different programs out there, like if you are in the military, if you are a veteran from the military or if you work maybe in law enforcement or if you some for students, there's diversity programs and initiatives as well and you can go and take a look at the website to see if there are opportunities to play free CTFs that are focused and even win things like free training as well. But absolutely there are, you could go and Google and Try Hack Me as a good example and hack the box. I believe that's for a fee. I don't know if there's free ones. - [David] There's some free, some are paid. Yeah, yeah, yeah. - Yeah. I think most organizations out there have some form of free stuff which to, for the community, which is great. And then of course there's paid models as well. - And books. I mean obviously this is the book that people are gonna buy. Good book, great book recommended by lots of people. Any other books that you would recommend someone have a look at or is it just like going get a book on CEO but anything that you really personally like? - Yeah, there's a lot of great books. They, some of them are a bit outdated but they're still good on the foundations like old ones like Hacking the Art of Exploitation from John Erickson, that's a classic and a great one. Shell Coder's Handbooks, quite outdated. But that was a great book. There's a ton of free papers and stuff released out there at different conferences that are always great. There are very focused books on things that are useful. Like there's one called Linkers and Loaders and it focuses on how applications do dynamic linking, whether it be Linux or Windows. And that's a really important thing to understand because I always like to compare it's a silly analogy, but to the original Karate Kid movie if you saw that where Mr. Miyagi is having having Daniel-san wax the car and paint the fence and sand the floor and it's all these miserable arduous tasks and he finally gets frustrated. He's like, why am I doing all this stuff for you for free? I'm not learning anything. And he is like, show me capture, catch the fly. What? Show me paint the fence, show me wax the car or whatever. And and then suddenly it clicks and he sees that this stuff is all very useful. A lot of these foundational books that I'm mentioning like \"Linkers and Loaders,\" \"What Makes it Page?\" \"What Makes It Page\" is all about 64 bit virtual memory management and how you do virtual to physical mapping. And it's like several 100 pages and it's a hard complex read but it's so useful. There's a book that's entirely on C++ dynamic pointers which is very useful there. I'll give another analogy. The reason that it's so important to understand pointers and indirection with languages like C++ and my analogy is if you wanna order a pizza, you don't feel like making you go into an app and you order it, there's multiple points of indirection. You've got the cooks who are making the pizza, you hope they wash their hands, you hope they didn't drop the dough, you hope they wash the vegetables. Then there's another layer of indirection who delivers the pizza to your house. You hope we've seen horror stories, you hope they don't eat your pizza or do worse. And versus if you were to make it yourself in your own kitchen, you know it's safe. So when you're dealing with a language or these dynamic tables that are provisioned at runtime in a process and things are being populated dynamically, those are points of indirection. We used to call this hooking, a lot of malware and root kits would hook things. Now a lot of the operating system vendors have reduced the ability to do a lot of this hooking, but it's still there. Of course there's dynamic tables of pointers and so when you're dealing with a language that is very pointer happy, you need to understand that can result in vulnerabilities. It's like specifically like the use after free bug class. But in the early 2000 tens there was a book called \"Journey Into Ring Zero,\" which was great. It's all about kernel exploitation and it touches a bit on Linux, Windows and Mac. There are the Windows or Intel 64 bit architecture guides. It's a set of a few books. You can typically purchase a set of them or you get 'em free online and those are fantastic resources. Honestly though, like I mentioned before, writing a driver, like one of the best things you can do is download Visual Studio Code if you don't have Visual Studio, the big version and just start playing around with it because you could get lost and spend a ton of time there and just Google for some tutorials on how to do basic compilation, how things like calling conventions work and how subsystems work so you can learn about compiling because when you look at a tool as complex as Visual Studio, it can be intimidating. Same thing with looking at something like IDA Pro, but you gotta get started with the basics and there are guides out there that teach you how to write a basic driver. Doing stuff like that and learning what like IO control values are and IRPs associated with drivers, that is priceless. It's extremely useful knowledge and the more that you understand about the programming side of it, the easier it is when you start doing things like reversing something as complex as the Windows kernel. Oh there's a great site I wanna show you. So there's this great project called The Vergilius Project that you see right here and it's maintained by a couple awesome people and you say explore kernels, it's got every single Windows kernel that is relevant, right XP even all the way up to Windows 11 and you click on let's say Windows 10 and it's got all the different versions, even 21H2 and 20H2, you know the different build numbers and you click on one and then what it does, it shows you all the structures. So you can either navigate through by scrolling or you can type in a structure like we could say KPRCB, which is the kernel process of region control block. And we click on that structure and it shows us all the different fields inside that structure and the data type and such. And then you can click on the nested sub structures and you can see kind of where that takes you. And the reason this is so important is because a lot of the Windows kernel is undocumented and it's not just a kernel. Like we could even go back and say, well what if I wanna look at some user mode structure like the tib, so NT tib let's say 64 and this is a thread information block associated with each thread in a userland process. They all get it. So it's a Window specific thing and you can see what the various offsets inside of that structure hold and what they point to. It's immensely useful and saves you a ton of time because again, a lot of the stuff in a Windows kernel is undocumented. And this is helpful but I'll say it again, the more you understand about programming in C, C++ or Rust, you're gonna have a much easier time because if you don't understand what things are, like mutexes and spin locks and semaphores and different things like K Process and EProcess and the thread local storage and like all these things I'm ranting out right now, you're gonna have a more difficult time because then you gotta go and kind of catch up. You gotta say, well what is this thing? And it's a lot easier if you've done some basic Windows development and that's why I was saying doing things like writing a driver is very useful. - Stephen, I really wanna thank you for, sharing your knowledge and experience because I often find, it's so nice to hear from people who've walked the road because if you're starting out you're not quite sure where to go. So I really appreciate you, giving us a roadmap, talking about things that are really important and if I've learned anything is I need to learn how to ride a driver or start. That's a great place to start. Give us your socials out and just for everyone who's watching, please go and subscribe to Stephen's channel. Again, a lot of people complain about the content on YouTube being too basic, so this is a great place to go to get like really hardcore stuff. Stephen, just tell us where people should go, to make contact once again. - Yeah, so my Twitter handle is Stephen Sims but there's a three instead of a E in there and one of 'cause it was already taken of course. I didn't sign out to Twitter until very late in my career 'cause somebody made me. (David laughs) So yeah, Stephen Sims with a three instead of the second E and then the, like you said, the channel that I just created, the Off By One security stream or whatever it's called, I plan. I'm trying to be diligent. I've been meaning to start that for a long time and now that I finally have, I'm doing okay with being consistent. I'm trying to do it every Friday and I'm gonna start doing things like scheduling them out in advance if I'm not gonna be available. But I hope to be consistent with that. And like you said, the goal is to really help people get from like a basic position 'cause I think there's a lot of material already out there on that. And then hopefully to the next step and I'm totally taking in and willing to take in suggestions. Like if you wanna see a particular topic and it's something that I've got an expertise on, I can talk about it or maybe I can get someone to come on as a guest. The example you mentioned around blockchain and smart contract security, I dabble in that but it's not my forte. You can't be an expert at everything. So having someone on is fantastic there. My Twitter DMs are open and you can also email me at Stephen with a PH Deadlisting.com. Deadlisting. But that's pretty much the only places I'm at on the social media side. - That's brilliant. Stephen, thanks so much once again. Really appreciate it. - Yeah, thank you for having me. It's been a lot of fun and I look forward to watching your channel more. - Yeah, hopefully we can get you back. I mean, so just for the audience, if there's any topics that you want Stephen to come back and talk about, put in the comments below, buffer overflows or you know, getting into some more detailed stuff, let us know. Stephen, thanks. - Yeah thank you. (upbeat music)",
    "transcript_keywords": [
        "people",
        "Windows",
        "Yeah",
        "lot",
        "things",
        "exploit",
        "time",
        "SANS",
        "back",
        "Windows kernel",
        "kind",
        "start",
        "stuff",
        "day",
        "Exploit Development",
        "Security",
        "Linux",
        "great",
        "code",
        "Stephen"
    ],
    "transcript_entity_values": [
        "Microsoft",
        "Baltimore",
        "a ton",
        "Bart",
        "the \"Advanced Exploit Development",
        "Linux",
        "three",
        "up to $2.5 million",
        "20 years",
        "95%",
        "Apple",
        "IOS",
        "Journey Into Ring Zero",
        "13",
        "only 10",
        "Cisco",
        "Gray Hat",
        "Christmastime",
        "ZDI",
        "Verisign",
        "SANS Sec",
        "two",
        "four",
        "Russ",
        "Tony Hawk",
        "two hours",
        "Visual Studio",
        "night",
        "tomorrow",
        "Signal",
        "51%",
        "November",
        "second",
        "Loaders",
        "YouTube",
        ".com",
        "Google",
        "Hackfest",
        "the next day",
        "8",
        "Xbox",
        "Ida Python",
        "MacOS",
        "Python",
        "IO",
        "Aleph One",
        "Mark Rossovich",
        "Linux",
        "Windows seven",
        "Tony Hawk's",
        "Japanese",
        "one day or end day",
        "C2",
        "Intel",
        "Ghidra",
        "thousands",
        "the earlier mid 90s",
        "Corland",
        "40 to 60",
        "660",
        "Romania",
        "David Bombal",
        "Windows and Mac",
        "100,000",
        "last minute",
        "months",
        "The Vergilius Project",
        "PowerShell Python",
        "Exploit Guard",
        "only 24 hours",
        "Tipping Point",
        "Android",
        "Frida",
        "XP",
        "the day five",
        "John Erickson",
        "Zerodium",
        "last days",
        "the years",
        "MSIL",
        "Treasure Island",
        "June",
        "Olympics",
        "8.1",
        "Vern",
        "Miyagi",
        "up to 2 million",
        "SEC",
        "the early 2000",
        "Smashing a Stack for Fun and Profit",
        "Windows 7",
        "2002",
        "98",
        "247",
        "This year",
        "20,000 US dollars",
        "20H2",
        "Service Pack 1",
        "90s",
        "today",
        "only five",
        "Japanese",
        "every day",
        "zero days",
        "10s of millions",
        "Windows",
        "Windows 7",
        "Bill Gates",
        "weekend",
        "a couple years ago",
        "Ed",
        "Tor",
        "2003",
        "CTF",
        "five full course days",
        "the whole day",
        "one",
        "Off",
        "2,500 US dollars",
        "SANS",
        "Corland Coder",
        "11",
        "Stephen Sims",
        "$2 million",
        "up to 2.5 million US dollars",
        "Linkers",
        "millions or billions of dollars",
        "100",
        "SMS",
        "64",
        "zero day",
        "five days",
        "Ruby",
        "the 90s",
        "03026",
        "Windows",
        "less than one third",
        "Counter Hack",
        "Vista",
        "10,000",
        "SANS Institute",
        "first",
        "500",
        "Stephen",
        "dozens",
        "Idefense",
        "two-day",
        "10 to",
        "Daniel-san",
        "Kevin Mitnick",
        "Mac",
        "Rust",
        "two hour",
        "the day",
        "Pearl",
        "decades",
        "a million US dollars",
        "Skyrim",
        "about 64",
        "Black Hat",
        "September",
        "VPN",
        "PyMade",
        "Whoopin",
        "WIN AFL",
        "years",
        "Windows",
        "Belgium",
        "over $3,000",
        "C++",
        "IDA Pro",
        "five day",
        "2022",
        "David",
        "What Makes it Page",
        "IP",
        "NSA",
        "Gray Hat",
        "Pegasus",
        "Scape",
        "Linux",
        "Halo",
        "Accenture",
        "2014",
        "Ghidra",
        "K Process and EProcess",
        "talking millions of dollars",
        "Mona dot Pi",
        "Linkers and Loaders",
        "San Francisco",
        "Windows 10",
        "the Cult of the Dead Cow",
        "fifth",
        "Blaster",
        "Peter Van Iko",
        "TikTok",
        "2012",
        "Shell Coder's Handbooks",
        "US",
        "Hopper",
        "10",
        "WhatsApp",
        "Ed Scotus",
        "CCIE",
        "Patch Tuesday",
        "Metasploit",
        "Bsides",
        "Steve Walbro",
        "Metasploit Project",
        "Tor",
        "next week",
        "RSA",
        "Nmap",
        "Shellphish",
        "10 to $20,000",
        "2004",
        "sixth",
        "day",
        "20,000",
        "seven",
        "third",
        "YouTubers",
        "Chrome",
        "Chrome Apache",
        "this week",
        "C++",
        "20 years ago",
        "five",
        "One",
        "10 years ago",
        "two weeks",
        "F",
        "Jeff",
        "Twitter",
        "Windows, Exploit Guard",
        "Maryland",
        "zero",
        "about 48 hours",
        "three days",
        "Internet Explorer 8",
        "100%",
        "Metasploit",
        "Karate Kid",
        "760",
        "the late 90s",
        "21H2",
        "Explorer",
        "like zero days",
        "Tuesday",
        "the 90s and the 2000s",
        "IOT",
        "KPRCB",
        "around 15 years",
        "Windows 11",
        "2.5 million US dollars",
        "a year",
        "Petra Amini",
        "Halburn",
        "Millworm",
        "Peter",
        "six day",
        "IDA",
        "14",
        "the SANS Institute",
        "Twitter",
        "fourth",
        "Friday",
        "October",
        "Burning Man"
    ],
    "transcript_entity_types": [
        "ORG",
        "GPE",
        "QUANTITY",
        "ORG",
        "EVENT",
        "ORG",
        "CARDINAL",
        "MONEY",
        "DATE",
        "PERCENT",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "DATE",
        "CARDINAL",
        "ORG",
        "WORK_OF_ART",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "PERSON",
        "TIME",
        "ORG",
        "TIME",
        "DATE",
        "ORG",
        "PERCENT",
        "DATE",
        "ORDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "LOC",
        "DATE",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "GPE",
        "ORG",
        "PERSON",
        "GPE",
        "PRODUCT",
        "PERSON",
        "LANGUAGE",
        "DATE",
        "PRODUCT",
        "ORG",
        "GPE",
        "CARDINAL",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "GPE",
        "PERSON",
        "ORG",
        "MONEY",
        "TIME",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "TIME",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "PERSON",
        "PERSON",
        "DATE",
        "DATE",
        "NORP",
        "LOC",
        "DATE",
        "EVENT",
        "CARDINAL",
        "ORG",
        "PERSON",
        "MONEY",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "ORG",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "MONEY",
        "PERSON",
        "ORG",
        "DATE",
        "DATE",
        "CARDINAL",
        "NORP",
        "DATE",
        "DATE",
        "CARDINAL",
        "WORK_OF_ART",
        "WORK_OF_ART",
        "PERSON",
        "DATE",
        "DATE",
        "PERSON",
        "ORG",
        "DATE",
        "PRODUCT",
        "DATE",
        "DATE",
        "CARDINAL",
        "ORG",
        "MONEY",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "MONEY",
        "MONEY",
        "PERSON",
        "MONEY",
        "CARDINAL",
        "ORG",
        "DATE",
        "DATE",
        "DATE",
        "ORG",
        "DATE",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "ORG",
        "MONEY",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "PERSON",
        "CARDINAL",
        "GPE",
        "DATE",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "TIME",
        "DATE",
        "PERSON",
        "DATE",
        "MONEY",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "DATE",
        "PRODUCT",
        "PERSON",
        "PERSON",
        "ORG",
        "DATE",
        "ORG",
        "GPE",
        "MONEY",
        "LANGUAGE",
        "PERSON",
        "DATE",
        "DATE",
        "PERSON",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "PERSON",
        "PRODUCT",
        "ORG",
        "DATE",
        "PERSON",
        "ORG",
        "MONEY",
        "ORG",
        "WORK_OF_ART",
        "GPE",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "DATE",
        "ORG",
        "GPE",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "PRODUCT",
        "LAW",
        "PRODUCT",
        "PRODUCT",
        "PERSON",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "ORG",
        "PERSON",
        "MONEY",
        "DATE",
        "ORDINAL",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "NORP",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "DATE",
        "PRODUCT",
        "PERSON",
        "PRODUCT",
        "ORG",
        "GPE",
        "CARDINAL",
        "TIME",
        "DATE",
        "PRODUCT",
        "PERCENT",
        "ORG",
        "PERSON",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "PRODUCT",
        "DATE",
        "DATE",
        "DATE",
        "NORP",
        "ORG",
        "DATE",
        "PRODUCT",
        "MONEY",
        "DATE",
        "PERSON",
        "PERSON",
        "ORG",
        "PERSON",
        "DATE",
        "PERSON",
        "DATE",
        "ORG",
        "ORG",
        "ORDINAL",
        "DATE",
        "DATE",
        "WORK_OF_ART"
    ],
    "vector": [
        -0.036282677203416824,
        0.030133044347167015,
        -0.04683935269713402,
        -0.012770197354257107,
        -0.04469502344727516,
        -0.05661387741565704,
        -0.008561991155147552,
        0.023631172254681587,
        -0.03736404329538345,
        0.017339378595352173,
        -0.006401730235666037,
        0.006801107432693243,
        0.01684906892478466,
        -0.0010796182323247194,
        0.0015321123646572232,
        0.014146239496767521,
        -0.016877425834536552,
        -0.02037159912288189,
        -0.008890005759894848,
        -0.05296759679913521,
        -0.03471352905035019,
        -0.09678030759096146,
        0.0005869407905265689,
        -0.06474018096923828,
        -0.04449135810136795,
        0.009590690955519676,
        -0.014948900789022446,
        -0.03977006673812866,
        -0.013145853765308857,
        -0.020387740805745125,
        0.010205072350800037,
        0.10426230728626251,
        0.029277099296450615,
        0.01358247734606266,
        0.022518282756209373,
        0.010607762262225151,
        0.03217625245451927,
        -0.012161828577518463,
        -0.04030967876315117,
        -0.06688941270112991,
        -0.043265096843242645,
        -0.014325462281703949,
        -0.04214995726943016,
        0.0793718621134758,
        -0.004650472197681665,
        -0.05462238937616348,
        0.022366978228092194,
        0.005420147441327572,
        0.04996193200349808,
        -0.030733291059732437,
        -0.07319778949022293,
        -0.047577861696481705,
        0.03604946285486221,
        -0.02989521063864231,
        -0.08002853393554688,
        -0.04616760462522507,
        0.04326759651303291,
        -0.004511329345405102,
        0.07035793364048004,
        0.0175143014639616,
        -0.015492665581405163,
        0.00780075415968895,
        -0.054669879376888275,
        0.0412626676261425,
        0.022483134642243385,
        0.002510403050109744,
        0.04891517385840416,
        0.043427690863609314,
        -0.03252565860748291,
        0.012838342227041721,
        -0.09487910568714142,
        -0.07325514405965805,
        -0.018206622451543808,
        0.0537273995578289,
        0.01874748431146145,
        -0.009634634479880333,
        -0.046622857451438904,
        -0.009524157270789146,
        0.005981390830129385,
        -0.029381796717643738,
        0.050913549959659576,
        -0.046631067991256714,
        7.596044451929629e-05,
        0.035477444529533386,
        -0.01690165512263775,
        0.10734989494085312,
        -0.013763567432761192,
        0.04884128272533417,
        0.16601568460464478,
        -0.06495726108551025,
        -0.048496510833501816,
        0.017205404117703438,
        0.02162834256887436,
        0.012974204495549202,
        0.08423307538032532,
        0.012088790535926819,
        0.04910093545913696,
        -0.020921435207128525,
        -0.07297384738922119,
        0.07576004415750504,
        -0.017169315367937088,
        -0.010355650447309017,
        -0.00839965045452118,
        -0.12567107379436493,
        0.05398255214095116,
        0.09752131253480911,
        -0.004915927071124315,
        0.08864785730838776,
        0.005785106215626001,
        0.012976979836821556,
        -0.023592786863446236,
        0.08952564746141434,
        0.0035096234641969204,
        -0.0714009702205658,
        0.05141526833176613,
        0.03087267093360424,
        -0.037455033510923386,
        0.06789296120405197,
        -0.013925042934715748,
        0.13395482301712036,
        0.09978307038545609,
        0.10217782855033875,
        -0.06502880901098251,
        -4.053584052599035e-05,
        -0.005269830580800772,
        -0.04757936671376228,
        -0.015513679012656212,
        4.155783218495605e-33,
        0.05310604348778725,
        0.0429525151848793,
        -0.04497339203953743,
        0.027903616428375244,
        0.08213680982589722,
        -0.029964156448841095,
        0.10128425061702728,
        0.092692069709301,
        -0.07996458560228348,
        0.03252124786376953,
        0.08690586686134338,
        -0.04932326078414917,
        -0.022350961342453957,
        -0.006579679436981678,
        0.10475047677755356,
        -0.04798007383942604,
        0.015976207330822945,
        -0.05755315721035004,
        0.029654549434781075,
        -0.040100228041410446,
        0.02519843727350235,
        -0.07722042500972748,
        0.013099675066769123,
        -0.0668218582868576,
        0.04925940930843353,
        0.02217470481991768,
        -0.04219282045960426,
        -0.04780658707022667,
        0.142069011926651,
        0.013712518848478794,
        -0.04869283363223076,
        0.0015537920407950878,
        -0.06648099422454834,
        -0.05777353420853615,
        0.020244045183062553,
        0.029479805380105972,
        -0.00981830433011055,
        -0.08110952377319336,
        0.012932558543980122,
        0.01795554719865322,
        -0.13892093300819397,
        0.024502888321876526,
        0.012970908544957638,
        -0.09565874934196472,
        0.01197277382016182,
        0.032173555344343185,
        0.03919326886534691,
        -0.044649746268987656,
        0.02391422912478447,
        0.0426960252225399,
        -0.06917203962802887,
        0.035544659942388535,
        -0.03738712519407272,
        -0.05852213129401207,
        -0.09741948544979095,
        -0.04814999923110008,
        0.041839100420475006,
        -0.0641002207994461,
        -0.048132505267858505,
        0.0977744609117508,
        0.027171090245246887,
        -0.02147049270570278,
        -0.07019474357366562,
        0.04028603062033653,
        -0.11073072254657745,
        -0.009010324254631996,
        0.04819078743457794,
        0.03278571739792824,
        -0.03633475303649902,
        0.06185019761323929,
        -0.03545985743403435,
        0.005950456485152245,
        0.047433964908123016,
        0.028891094028949738,
        -0.1016695573925972,
        0.040108539164066315,
        0.05201021581888199,
        -0.02957182377576828,
        0.0054910192266106606,
        0.0003923503390979022,
        0.12151360511779785,
        0.004168975166976452,
        0.029165318235754967,
        -0.021723099052906036,
        0.03215966001152992,
        0.04509732127189636,
        -0.007763450033962727,
        -0.018828371539711952,
        0.004508944693952799,
        0.023656750097870827,
        -0.049435537308454514,
        -0.04686994105577469,
        0.027631623670458794,
        0.006464154459536076,
        -0.023471608757972717,
        -5.679260631359753e-33,
        -0.04590454697608948,
        -0.033971913158893585,
        -0.06383051723241806,
        0.07119623571634293,
        0.04099535942077637,
        0.04252912104129791,
        -0.012307822704315186,
        0.027647607028484344,
        0.03550800308585167,
        0.006186419632285833,
        -0.0835009440779686,
        0.10781693458557129,
        0.04505005106329918,
        -0.005516866222023964,
        -0.01114687416702509,
        -0.08608905225992203,
        -0.016557592898607254,
        0.02072475291788578,
        -0.026304148137569427,
        0.06850426644086838,
        0.016086766496300697,
        0.1062731221318245,
        -0.11756712943315506,
        -0.026516130194067955,
        0.07880125939846039,
        0.047213368117809296,
        -0.0007223509019240737,
        0.08205438405275345,
        0.03275749832391739,
        0.1130269467830658,
        0.04956711828708649,
        0.013741633854806423,
        -0.02711518295109272,
        -0.06411835551261902,
        0.027049437165260315,
        0.04635052755475044,
        0.06963633000850677,
        -0.002553439000621438,
        -0.010283540934324265,
        -0.01100813876837492,
        0.08607007563114166,
        -0.025458339601755142,
        -0.07286544144153595,
        -0.06391303986310959,
        -0.01810123398900032,
        0.009601264260709286,
        -0.08265354484319687,
        0.01715015061199665,
        0.01576446369290352,
        -0.036950260400772095,
        0.03990691155195236,
        0.03806246444582939,
        0.029763180762529373,
        -0.05471141263842583,
        -0.036111872643232346,
        -0.04908917844295502,
        -0.01688195951282978,
        -0.029796583577990532,
        0.053037431091070175,
        -0.004914007615298033,
        -0.06398680806159973,
        0.018822498619556427,
        -0.05396648868918419,
        -0.008909477852284908,
        -0.02010061778128147,
        -0.033204104751348495,
        -0.04634203761816025,
        0.07188518345355988,
        -0.08344961702823639,
        -0.07267437875270844,
        -0.014883036725223064,
        0.03265460580587387,
        -0.034837521612644196,
        -0.09233909845352173,
        -0.09110110998153687,
        0.07570337504148483,
        0.0212505292147398,
        -0.04463588446378708,
        -0.055424515157938004,
        0.05672089010477066,
        0.07719875872135162,
        0.050739631056785583,
        -0.0016457551391795278,
        0.033491238951683044,
        0.012465006671845913,
        0.07449908554553986,
        0.029942413792014122,
        -0.006243775598704815,
        -0.027148012071847916,
        -0.05195286124944687,
        -0.057032983750104904,
        -0.026072198525071144,
        0.008137770928442478,
        0.09335564076900482,
        0.05238458514213562,
        -6.316129486094724e-08,
        0.04084969684481621,
        -0.04605479910969734,
        0.006554846651852131,
        0.033456336706876755,
        0.022415336221456528,
        0.008836938999593258,
        -0.0424182191491127,
        -0.015962108969688416,
        -0.002945241518318653,
        0.03779520466923714,
        0.05190974846482277,
        -0.05577929690480232,
        -0.04257137328386307,
        0.018586423248052597,
        0.02877774089574814,
        0.06692830473184586,
        -0.0626261755824089,
        -0.04753687605261803,
        -0.05324376001954079,
        -0.005616020876914263,
        0.055922310799360275,
        -0.011268981732428074,
        0.006401093211025,
        -0.040109410881996155,
        -0.028414325788617134,
        -0.03901971876621246,
        0.0660063698887825,
        0.041015639901161194,
        0.013124966062605381,
        0.011056753806769848,
        -0.0927322581410408,
        -0.05875406041741371,
        -0.01898515596985817,
        -0.0012453956296667457,
        -0.013926618732511997,
        -0.07783576101064682,
        -0.06033329293131828,
        -0.01647435687482357,
        0.014212310314178467,
        0.00943781528621912,
        -0.05053146928548813,
        -0.03803100809454918,
        0.07245826721191406,
        -0.0012584319338202477,
        -0.084378682076931,
        -0.013547549955546856,
        -0.15140482783317566,
        -0.017949523404240608,
        0.08665820211172104,
        -0.025585725903511047,
        0.020538732409477234,
        0.0002691610134206712,
        0.015678199008107185,
        0.031275298446416855,
        0.09032973647117615,
        0.04638226330280304,
        -0.011992286890745163,
        -0.03005671687424183,
        -0.013251989148557186,
        0.08391518145799637,
        0.01951012574136257,
        -0.08313588052988052,
        -0.05270352214574814,
        0.011463994160294533
    ]
}