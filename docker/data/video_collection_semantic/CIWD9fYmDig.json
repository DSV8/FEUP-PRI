{
    "id": "CIWD9fYmDig",
    "title": "Hacking networks with Python // Creating malicious packets and breaking TCP/IP rules",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-04-22T14:00:05Z",
    "video_url": "https://www.youtube.com/watch?v=CIWD9fYmDig",
    "category": "Science & Technology",
    "tags": [
        "python",
        "scapy",
        "hacking",
        "ethical hacking",
        "hacking tutorial",
        "hacking video",
        "hacking python",
        "tcp ip",
        "tcp/ip",
        "tcp vs udp",
        "tcp udp",
        "osi model",
        "tcp ip model",
        "linux",
        "kali linux",
        "kali linux python",
        "linux python",
        "black hat",
        "cyber security",
        "ceh",
        "oscp",
        "scapy python",
        "scapy python3",
        "python scapy",
        "scapy sniffing",
        "scapy python pcap",
        "wireshark",
        "scapy in python",
        "scapy python script",
        "scapy python sniff",
        "cisco",
        "ccna",
        "comptia",
        "security+",
        "python coding",
        "scapy http",
        "scapy sniff",
        "python basics"
    ],
    "views": 115386,
    "likes": 5933,
    "comments_count": 222,
    "description": "Learn the basics of how to use Python and Scapy to create malicious or dodgy packets and send those into networks. Who knows what's going to happen when packets are created like these. Also learn that what they teach you about the TCP/IP model in the CCNA course isn't necessarily true in the real world.   You need to learn to code! Learn Python. Learn Networking. You are going to be very powerful and very scary if you combine knowledge of networking with Python scripting! But, do good.  Learn to code. Learn Linux. Learn Networking.  // Menu // 00:00 - Coming up 00:28 - Introduction 01:00 - How to generate dodgy packets with Scapy 01:14 - TCP/IP model 01:25 - Protocol data units 01:46 - OSI model video 02:12 - Importing Scapy into Python 04:25 - Spoof mac address 06:18 - Sending traffic into the network 08:52 - Sending weird packets 11:43 - \"Advanced stuff\" 15:11 - In the real world 17:17 - Conclusion    The OSI Model is a lie:  Scapy documentation:   Playlist:   // SCAPY RESOURCES // Website:  Documentation:   // SCAPY INSTALLATION // sudo apt update sudo apt install python3-pip sudo pip3 install scapy  // SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  python scapy kali linux kali kali linux python osi model tcp tcp ip tcp/ip tcp ip model python scapy ccna ccnp ccie cisco routers ccna 200-301 python scripts linux kali kali linux 2022 kali linux 2021 oscp ceh security+ pentest+  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #python #hacking #cyber",
    "description_links": [
        "https://youtu.be/apr63p7K_3A",
        "https://scapy.net/",
        "https://davidbombal.wiki/scapy",
        "https://scapy.net/",
        "https://scapy.readthedocs.io/en/latest/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal"
    ],
    "transcript": "- Don't get hung up and get into arguments about where stuff is in the OSI model or where it is in the TCP/IP model. Just be aware that if you're an application developer or you're a hacker, you can do all kinds of weird things, and you can mix things around. You can take some layers and put them on top of other layers. We can create tunnels where we take ethernet, IP, VXLAN, ethernet, IP, and then other stuff on top of it and send that into the network. I will get the (upbeat music) - In previous videos, I've shown you how to use Scapy to hack protocols, such as BGP. How to, for instance, reset the neighbor relationships, how to inject fake routes into BGP. I've shown you how to hack protocols such as EIGRP which is a routing protocol. I've shown you how to circumvent VLANs and do other interesting things with Scapy, but a lot of you have told me that you've struggled to understand the basics of Scapy. In this video, I'm gonna show you how to use Scapy to generate packets, but not just standard packets, dodgy packets or weird packets, if you like. I'm gonna also show you that what a lot of people believe about the OSI or TCP/IP model is incorrect. People who are studying for their CCNA, as an example, are taught that we have the application layer, and then we have the transport layer, then we have the network layer, and then we data link, and then we have a physical layer. And then we're taught how protocol data units are sent from, say, the application layer. Then we get header for the transport layer, TCP, as an example. Then we get an IP header. Then we get a ethernet header, and then it sends bits on the wire, but in reality, you can actually mix your layers. The TCP/IP model and the OSI model are just models. They don't always relate to reality. I have a YouTube video where I talk about the OSI model being a lie. I'll link that below where I talk about some of the theory about how developers don't do what they supposed to do, and not everything fits neatly into the OSI or TCP/IP model, but what I'm gonna show you here is how you can easily create your own malicious packets, if you like, or your own dodgy packets that you can send into the network using only a few commands. We're gonna use Python and Scapy to do this. In this example, I'm using Kali within a virtual machine on a Windows 11 laptop. I'm controlling that from my Mac, but, basically, you need to have a system that supports Scapy and Python. Kali makes this very, very easy because it's installed by default. So what I'm gonna do is open up a terminal. I'm gonna use sudo. I want to use sudo privileges because I want to send packets into the network and I need sudo privileges to do that. I don't just want to create the packets. I actually wanna send them into the network and show you what they look like. So I need sudo privileges. In this example, I am going to be using Python 3, 9, 10. Basically, you just need a version of Python that supports Scapy. Scapy is installed by default on Kali so all I need to do in Python is type from scapy.all import * Now you could limit the modules that you import, but I'm just gonna keep those very, very simple and import everything, so import all of Scapy. I'm gonna create a variable. I'll just call this Layer2, and I'm going to make this equal to ethernet. This is ethernet header. Just by doing that, I can show you what my ethernet packet looks like. Scapy generates some of this for me. So the destination is a broadcast, a bunch of Fs. Source is this. Type is set to this. Now what about Layer3? So let's create a variable Layer3, and I'll set that to IP, as in IPv4, and then I can say a Layer3.show, and you can see the defaults used here, are IPv4 Source address is this. Destination address is this. You may wanna change that. I could do something for IPv6. Don't forget about IPv6. So IPv6 equals IPv6, and then I can do a show once again to have a look at what that looks like. You can see that similar to IPv4, the IPv6 address is all loop back addresses. So all I've done now is I've imported Scapy into Python, I've created some variables, and I've made them to equal to various layers of the OSI or TCP/IP model Layer2, and then I've got Layer3 for IPv4. So again, if I have a look at Layer2, that's the settings. Now, you probably want to change that. This Mac address is the Mac address of the Kali virtual machine. So if I type IP address in Kali and look at the ethernet zero Mac address, notice 00:0c ends in 76, and there you go, that's the Mac address that was created. You may wanna spoof your Mac address, as an example. So let's set a Layer2=ethernet source 01:02:03:04:05:06, and I need to specify source equals. So that's my Mac address. If I have a look at Layer2 again, so Layer2 show, notice, the Mac address has changed. I've just created a random Mac address. So rather than using the actual Mac address of the virtual machine, I'm spoofing my Mac address by simply doing that. Now, let's change the Layer3 IP address. So I'm gonna set the Layer3 IP address to have a destination of 192.168.1.249. So now Layer3.show, you can see, and I need to use brackets, you can see that the source IP address is this. The destination IP address is that. The IP address of my Kali virtual machine is 192.168.1.59. So I could change that IP address if I wanted to, but for the moment, let's just leave the IP address as it is. So, again, Layer3.show looks like that. Layer2.show looks like that. That's okay, but we wanna send traffic into the network. So I'm gonna say send=sendp and then I'm gonna, only for the moment, send Layer2. A lot of people are under the misconception that you have to send Layer2, Layer3, Layer4, Layer7, if you like. You don't have to do that. I could just send Layer2. Remember, here, I could create my own malicious packets. I could create weird and wonderful packets. So I could send whatever I wanted to. Before I send that into the network, let's run Wiresharks so we can see what's going on. So I'm gonna start capturing on my ethernet interface. I get a lot of traffic, but what I'm gonna do is filter for that Mac address. So at the moment, nothing is captured, but if I send that packet into the network, that's captured in Wireshark. You can see, we're told that it's a malformed packet. It's a broadcast from this Mac address. Ethernet II is the frame that was sent out. It's a broadcast with this source Mac address, 01:02 up to 06. It says it's a loop back. Remember, that when we looked at Layer2, the type was this, so loop back. We told that this is a malformed packet, but we were able to send a Layer2 frame into the network. Now, rather than just sending Layer2, I'm gonna use / That / just allows me to put another layer on top of this layer. So I've got Layer2, let's put Layer3 on top, so Layer3. We'll send Layer2, Layer3, and in our Wireshark capture, we can see that that information is displayed. Source Mac address is this. Destination Mac address is a Cisco router in my local infrastructure, and if we have a look at the IP packet, you can see source IP address is 192.168.1.59 Destination is 249. What's great about Scapy is it doesn't force you to set all the options. It just fills in a bunch of options for you if you haven't filled them in already. At Ethernet II, we didn't specify the type, but that's changed from the previous frame, which was loop back. Notice the type is 9000. Here at Layer2, the type at Layer3 is IPv4 Scapy filled that in for us. We didn't have to fill in those details. The only thing we changed was the source Mac address. Scapy changed the type field to reference the Layer3 protocol correctly. So we've got Ethernet II at Layer2, and we've got IP version four at Layer3, but now let's do some weird stuff. Let's break the OSI theory and send two Layer3 packets. So I'm sending Layer2, Layer3, and then Layer3 again, and if we have a look at that, you can see that's exactly what's sent into the network. We've got Layer2, we've got IPv4 and then we've got IPv4 again. I'm sending IPv4 twice into the network and that doesn't stop me doing other weird things like this. Let's put Layer3 three times. So we've got IPv4, IPv4, and IPv4. That's what happens in the real world. In the real world, we may be running multiple protocols so we might have ethernet, and then we might have MPLs, multi protocol label switching, then we might have IPv4, and we might have a GRE tunnel, then we might have IP sec, and inside there, we may do other weird things. You can, as an example, put Layer2 on top of Layer3. So let's do that. It won't necessarily like it. Wireshark won't like this, but notice I've got Layer2, Layer3, Layer2. So if I look at that, I've got Ethernet II at Layer2. I've got IPv4 and now it's not quite sure how to interpret this. It's seeing this as IPv6 where I'm actually sending an ethernet frame on top of IPv4 This is why the theory of CCNA isn't always true in the real world because if you're a developer or, in this case, using an application like Scapy, you could, as a hacker, send malicious packets into the network to do weird things. Let's have a look at Layer4. So Layer4, let's make our variable equal to TCP so that, and let's have a look at what Layer4 looks like. So that's our variable. We've set it to TCP. Source port is port 20, which is FTP data. Destination port is port 80. Scapy has just selected port 20 here, but you could change that if you wanted to, but for the moment, I'll leave that as it is. Let's send a more realistic packet into the network. So we are gonna send Layer2, Layer3, and Layer4. That's been sent into the network, and now you can see we've got Ethernet II. Source Mac address is the Mac address that we were using previously. Destination Mac address is my Cisco router. Type field is IPv4 Now, if you are wondering, how does it know that Mac address and op could have been sent to the network to discover that device? So we've got the destination Mac address, source Mac address, and if we look at the type field, that's IPv4 Protocol at Layer3's IPv4, once again, source and destination Mac address, and if we look at the protocol field, it's telling us that the protocol at Layer4 is TCP, and here, we've got our TCP information source port, as mentioned, is 20. Destination port is 80, but now, let me show you some more advanced stuff. Let's load something into Scapy. So some of the Scapy stuff that has to be brought in. and I'm breaking the rules here. Now, those of you who know Python know that this is bad practice. I'm using single inverted commas rather than double inverted commas here or quotation marks if you're from the States. That doesn't matter for our demonstration. I'm just gonna do that. I'm gonna import MPLS, and now I'm gonna say MPLS.show, and I need double brackets there. We can see information about MPLS, like the label number, ttl, and other settings. Now, if you're not sure what that is, MPLS or Multi-Protocol Label Switching is used in service provider networks, big companies like AT&T or BT will often have an MPLS environment. It allows them to more efficiently move traffic through the network, allows them to create what are called Layer3 VPNs, and do other things more easily using MPLs than traditional protocols, such as IP4 and access lists. We won't get into that. All I wanna show you is that I can stitch MPLS into our packets. Now, before I do that, what I'm gonna do is I'm gonna make something called MyMPLS. So I'll create a variable, and I'll set that to MPLS, and then what I'll do now is send Layer2, send MyMPLS, send Layer3, send Layer4. Okay, packet has been sent, and now, notice we've got ethernet at Layer2. We've got multi-protocol label switching. We can see bottom of stack equals one. So that's what the S is, if you're not sure about that. We've got IPv4 at Layer3 or is that now Layer4? This is where the OSI model gets a little bit interesting because this MPLS Layer2 is a Layer3. A lot of people will see it as Layer2 and a half. So we've got ethernet at Layer2. We've got MPLS at Layer2 and a half. We've got IP at Layer3, and we've got TCP at Layer4, but as you can see, the lines are already getting blurred. Let's do some other crazy stuff. So let's do something like this where we stack MPLS on top of Layer3. So MyMPLS and Layer4 now. So it's accepted that. Packet's been sent to the network. Notice, we've got ethernet. We've got MPLS. We've got IPv4 We've got MPLS, and now it's seeing that as ethernet. So it got a bit confused with the data that was sent into the network. Wireshark is not reading that properly. So why don't we do this then? Let's do this. We put Layer2 on top of MPLS, and then we put our Layer3, and then we have Layer4. So we'll send that into the network. Notice what we've done here. Now, Wireshark is not reading this properly. It's seeing this as data now rather than ethernet. So it just says, \"Okay, this is just data.\" It doesn't like that. So let's try Layer3 on top of MPLS rather than Layer4. Okay, so we've got ethernet at Layer2, MPLS at Layer2 and a half, IP at Layer3. MPLS said \"What layer is that?\" Then we've got IP, and then we've got TCP. Notice how we've stacked layers on top of other layers. Now, this happens, as I've mentioned, all the time in the real world. Think about it. If you use a VPN, so you connect to some VPN provider somewhere, on the internet, the router on the internet are gonna see the IP address is from your device, as in like your home router, to the VPN service provider. So they're gonna see those IP addresses. Other information is gonna be encrypted so your actual IP address will be encrypted. So what we've got is we've got IP on top of IP. So this kind of stuff happens all the time in the real world. Don't get hung up with trying to put protocols into specific layers because the TCP/IP model and the OSI model are models, but they don't always perfectly reflect reality because developers might create weird protocols that do weird things. As an example, voice protocols, like VoIP protocols, put stuff into the VoIP packets that would typically not be there that would be at high layers. stuff gets mixed in by developers. Here, I've just shown you a simple example of how to forge weird packets, and I mean, you could do all kinds of things with Scapy. So as an example, rather than doing this kind of crazy stuff, let's just send Layer2, Layer3, and ICMP, so ICMP like that. So all I've done there is send a proper ethernet frame, a proper IPv4 packet and ICMP, but now here we get the question, \"At what layer does ICMP reside? Is it Layer3? Is it Layer4? Is it Layer3 and a half?\" Don't get hung up and get into arguments about where stuff is in the OSI model or where it is in the TCP/IP model. Just be aware that if you're an application developer or you're a hacker, you can do all kinds of weird things and you can mix things around. You can take some layers and put them on top of other layers. As an example, in data centers, they use something called VXLAN rather than MPLS. We can create tunnels where we take ethernet, IP, VXLAN, ethernet, IP, and other stuff on top of it, and send that into the network. I'm hoping this gives you a good idea of how to get started with Scapy. If you're interested, let me know, and I'll create more Scapy videos. Scapy is extremely powerful. I've created other videos where I show you how to pack BGP or protocols like Spanning Tree or do VLAN hoppings or circumvent VLANs and other protocols on a network. I'm David Bombal. If you enjoyed this video, please like it, please consider subscribing to my YouTube channel, and clicking on the bell to get notifications. I wanna wish you all the very best I will get the (upbeat music)",
    "transcript_keywords": [
        "Mac address",
        "Mac",
        "source Mac address",
        "address",
        "Destination Mac address",
        "Scapy",
        "MPLs",
        "ethernet",
        "send",
        "TCP",
        "source Mac",
        "OSI model",
        "network",
        "OSI",
        "Destination Mac",
        "packets",
        "model",
        "Source",
        "top",
        "Python"
    ],
    "transcript_entity_values": [
        "three",
        "Python",
        "MyMPLS",
        "AT&T",
        "EIGRP",
        "VXLAN",
        "TCP/IP",
        "192.168.1.249",
        "80",
        "Cisco",
        "Wiresharks",
        "MPLS",
        "VPN",
        "a half",
        "four",
        "9000",
        "two",
        "249",
        "Destination Mac",
        "sec",
        "Scapy",
        "Wireshark",
        "FTP",
        "GRE",
        "States",
        "TCP",
        "zero",
        "BGP",
        "YouTube",
        "3",
        "Fs",
        "10",
        "IP",
        "Multi-Protocol Label",
        "IP4",
        "Kali",
        "Python",
        "9",
        "Mac",
        "BT",
        "MyMPLS",
        "VoIP",
        "Spanning Tree",
        "VLAN",
        "Windows 11",
        "76",
        "Layer3",
        "Ethernet II",
        "CCNA",
        "192.168.1.59",
        "TCP",
        "VPN",
        "Wireshark",
        "OSI",
        "Scapy",
        "MyMPLS",
        "David Bombal",
        "20"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "NORP",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "PERSON",
        "PRODUCT",
        "ORG",
        "ORG",
        "GPE",
        "NORP",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "PERSON",
        "ORG",
        "CARDINAL",
        "LOC",
        "ORG",
        "ORG",
        "PRODUCT",
        "DATE",
        "PERSON",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "LOC",
        "PERSON",
        "CARDINAL"
    ],
    "vector": [
        -0.07670111209154129,
        -0.00048726267414167523,
        -0.026568226516246796,
        -0.005494452081620693,
        -0.010779863223433495,
        -0.06208942458033562,
        0.038003597408533096,
        -0.014948608353734016,
        -0.0665564239025116,
        0.02330208756029606,
        0.014783229678869247,
        -0.016387533396482468,
        0.059332605451345444,
        -0.033663783222436905,
        -0.00016152678290382028,
        -0.02910652570426464,
        -0.01689029484987259,
        -0.020488355308771133,
        0.036820266395807266,
        -0.056626494973897934,
        -6.250869773793966e-05,
        0.014694489538669586,
        -0.026372872292995453,
        -0.0332937054336071,
        -0.06411027908325195,
        0.021183650940656662,
        0.062118709087371826,
        0.0006967551889829338,
        -0.06902699917554855,
        0.027553431689739227,
        -0.005867930594831705,
        0.036916401237249374,
        -0.062341127544641495,
        -0.016888312995433807,
        -0.006521353963762522,
        -0.021823355928063393,
        0.03478571027517319,
        0.04051096364855766,
        -0.005701940506696701,
        0.0027986245695501566,
        -0.006630778778344393,
        -0.0038693933747708797,
        -0.009829767979681492,
        -0.012536929920315742,
        -0.02772917039692402,
        -0.05936200171709061,
        -0.013766204938292503,
        0.015155091881752014,
        0.043006781488657,
        -0.06491782516241074,
        -0.032096922397613525,
        -0.005030169617384672,
        0.027456296607851982,
        0.015110370703041553,
        0.09098553657531738,
        -0.054455727338790894,
        -0.08400426805019379,
        -0.03570947051048279,
        0.038360338658094406,
        -0.0667472630739212,
        -0.05512060225009918,
        0.005961940623819828,
        -0.0038315895944833755,
        0.04082248732447624,
        0.03743356466293335,
        -0.012641741894185543,
        -0.02845553494989872,
        0.1034405305981636,
        0.100008025765419,
        0.053913332521915436,
        -0.04807158559560776,
        -0.03372808173298836,
        -0.07043696194887161,
        0.11537481844425201,
        0.03863999620079994,
        -0.02998075634241104,
        0.04111514613032341,
        -0.030397595837712288,
        -0.024118592962622643,
        0.014123847708106041,
        -0.006895595695823431,
        -0.01202295534312725,
        -0.054740771651268005,
        0.04654176905751228,
        -0.019040094688534737,
        0.0003636929322965443,
        0.006027672439813614,
        0.05769240856170654,
        0.05161133036017418,
        0.05648351460695267,
        0.034668732434511185,
        0.03970740735530853,
        0.00654178112745285,
        0.0215627271682024,
        0.07588375359773636,
        0.04047849774360657,
        0.0031499622855335474,
        -0.07025399059057236,
        -0.05207686498761177,
        0.0992547944188118,
        -0.010450053960084915,
        -0.051936760544776917,
        -0.0325152613222599,
        -0.0548371858894825,
        0.12239114195108414,
        0.07424645870923996,
        0.03234671428799629,
        -0.06918220967054367,
        0.021474823355674744,
        0.05058346688747406,
        -0.06393518298864365,
        -0.014568177051842213,
        -0.04994109645485878,
        -0.09789025038480759,
        0.044812869280576706,
        0.10034330189228058,
        0.012462007813155651,
        0.10568150132894516,
        -0.050844836980104446,
        0.02874113991856575,
        0.016387393698096275,
        -0.013383553363382816,
        -0.03093986213207245,
        -0.0003854221722576767,
        0.0342363677918911,
        -0.06779848039150238,
        0.005400140769779682,
        4.449091834228813e-33,
        -0.0057778446935117245,
        -0.005077219568192959,
        -0.06430892646312714,
        0.04170415550470352,
        0.10071375966072083,
        -0.05806199088692665,
        0.09243222326040268,
        0.08661957830190659,
        -0.06033414974808693,
        0.014689251780509949,
        -0.095537930727005,
        -0.014161401428282261,
        -0.004051008727401495,
        -0.010761546902358532,
        0.02915537916123867,
        -0.01804494671523571,
        -0.05587787553668022,
        -0.049493033438920975,
        0.07142749428749084,
        0.037011437118053436,
        0.006673454772680998,
        -0.06129622086882591,
        0.06801093369722366,
        -0.03328291326761246,
        0.04111944139003754,
        -0.020771432667970657,
        -0.06568742543458939,
        -0.053032368421554565,
        0.07647304236888885,
        0.023043019697070122,
        -0.04014826938509941,
        0.029556486755609512,
        -0.08588027209043503,
        -0.0026473195757716894,
        0.0075036296620965,
        -0.012319739907979965,
        -0.05251600593328476,
        -0.09366483986377716,
        -0.01586945354938507,
        0.015204541385173798,
        -0.04306845739483833,
        -0.03946574032306671,
        -0.05756490305066109,
        -0.027113959193229675,
        0.0004899646737612784,
        0.037824492901563644,
        -0.014805604703724384,
        0.018779287114739418,
        -0.03890504688024521,
        0.01834934949874878,
        -0.011694198474287987,
        -0.010356037877500057,
        0.042046066373586655,
        -0.026154721155762672,
        -0.08555874973535538,
        0.016481559723615646,
        0.10716717690229416,
        -0.010062645189464092,
        0.04467499628663063,
        0.12498345971107483,
        0.011914213187992573,
        0.021371448412537575,
        -0.00818797666579485,
        -0.005059428978711367,
        0.036525119096040726,
        0.019851038232445717,
        -0.010348320938646793,
        0.011812212876975536,
        0.013932398520410061,
        -0.05873933434486389,
        -0.040079474449157715,
        0.07145709544420242,
        -0.0667075514793396,
        0.04285017028450966,
        -0.01899910718202591,
        0.019108964130282402,
        0.020592646673321724,
        -0.013098130002617836,
        -0.007793153170496225,
        0.0725497454404831,
        0.04694247245788574,
        -0.00904830638319254,
        0.05332601070404053,
        -0.009114383719861507,
        -0.017398307099938393,
        -0.030035480856895447,
        0.005322709213942289,
        -0.010030745528638363,
        -0.01193756703287363,
        0.06015302613377571,
        -0.016736235469579697,
        -0.058522243052721024,
        0.08659625798463821,
        -0.01262729149311781,
        -0.024740910157561302,
        -5.9992830908993663e-33,
        -0.00024694731109775603,
        0.056222230195999146,
        -0.07317662984132767,
        0.05313221737742424,
        -0.0661960020661354,
        -0.017695952206850052,
        -0.005591881461441517,
        0.030175119638442993,
        0.020760947838425636,
        -0.016234692186117172,
        -0.028948873281478882,
        0.013845817185938358,
        0.07620063424110413,
        -0.054130345582962036,
        0.0874561294913292,
        -0.06070594862103462,
        -0.028187036514282227,
        0.0205891951918602,
        -0.06385378539562225,
        -0.0761403813958168,
        -0.0434834286570549,
        0.09766628593206406,
        -0.07479368895292282,
        -0.11747019737958908,
        -0.045654840767383575,
        -0.009725264273583889,
        0.02621510624885559,
        0.0786653459072113,
        -0.03155205398797989,
        0.07971061021089554,
        -0.004866086877882481,
        0.03779546171426773,
        0.007487200200557709,
        0.03653904050588608,
        0.016933416947722435,
        0.07348758727312088,
        0.07487840205430984,
        0.07816264778375626,
        0.06589791923761368,
        -0.027361944317817688,
        0.10889232903718948,
        0.08026789128780365,
        -0.09168858081102371,
        0.046923696994781494,
        -0.0152555787935853,
        0.009897774085402489,
        -0.05331362038850784,
        0.1088360846042633,
        -0.07417619228363037,
        -0.03532572463154793,
        0.06642996519804001,
        0.017063764855265617,
        -0.005993204191327095,
        -0.041480377316474915,
        0.013376452028751373,
        0.05383026972413063,
        0.05721006914973259,
        -0.026451827958226204,
        0.06096233054995537,
        0.03219228237867355,
        -0.003168608760461211,
        -0.11937262117862701,
        -0.0829634740948677,
        0.06973964720964432,
        0.004533408209681511,
        -0.03325566649436951,
        -0.11142925173044205,
        -0.015894748270511627,
        -0.020429154857993126,
        -0.07141894102096558,
        0.010959283448755741,
        -0.002584745641797781,
        -0.003937458619475365,
        0.00975721050053835,
        -0.030368885025382042,
        -0.038112103939056396,
        0.0025493833236396313,
        0.04030777886509895,
        -0.033460237085819244,
        0.06851345300674438,
        0.013504610396921635,
        0.006072826683521271,
        -0.005859049968421459,
        0.050552934408187866,
        -0.005756882950663567,
        0.06840548664331436,
        0.04598397761583328,
        -0.03146634250879288,
        0.09913592785596848,
        -0.019500093534588814,
        -0.10259956121444702,
        0.08592084050178528,
        0.01970461755990982,
        0.054515063762664795,
        0.02278110571205616,
        -4.2781266529345885e-08,
        -0.031465113162994385,
        -0.02125394344329834,
        0.008015982806682587,
        0.0828973799943924,
        0.003949203994125128,
        0.12854406237602234,
        -0.06511252373456955,
        -0.07286480814218521,
        0.04783010110259056,
        -0.02478984370827675,
        -0.018009399995207787,
        -0.03154895454645157,
        -0.05833985656499863,
        -0.0709117203950882,
        -0.005223106127232313,
        0.120215505361557,
        -0.060457997024059296,
        -0.015734242275357246,
        -0.04173875227570534,
        -0.03858310356736183,
        0.03267407789826393,
        -0.025689372792840004,
        -0.05480435863137245,
        0.08804937452077866,
        -0.06530706584453583,
        0.010653667151927948,
        0.03570340573787689,
        0.038089197129011154,
        -0.07813665270805359,
        0.0019883031491190195,
        -0.09353082627058029,
        -0.13801312446594238,
        0.01167601253837347,
        0.04204956069588661,
        -0.001476301345974207,
        0.0632205381989479,
        -0.07364889979362488,
        -0.09135006368160248,
        0.0394548736512661,
        0.06552215665578842,
        -0.12402401119470596,
        -0.08586649596691132,
        -0.03394191712141037,
        -0.030499672517180443,
        -0.019792042672634125,
        0.045875851064920425,
        -0.09818330407142639,
        0.02257588878273964,
        0.017747502774000168,
        -0.007371580693870783,
        0.0918218195438385,
        0.01209791749715805,
        0.017847081646323204,
        -0.009480983018875122,
        0.06319785863161087,
        0.030076783150434494,
        -0.026156192645430565,
        -0.07704436033964157,
        -0.03054218366742134,
        0.05563947558403015,
        -0.02099674940109253,
        0.10614669322967529,
        -0.010206046514213085,
        0.018028361722826958
    ]
}