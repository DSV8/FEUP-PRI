{
    "id": "o9rlLuUpYxo",
    "title": "Hacking IoT devices with Python (it's too easy to take control)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2023-04-21T14:00:35Z",
    "video_url": "https://www.youtube.com/watch?v=o9rlLuUpYxo",
    "category": "People & Blogs",
    "tags": [
        "python",
        "kali linux",
        "linux",
        "yeelight",
        "yeelight python",
        "yeelight telnet",
        "yeelight hack",
        "hack yeelight",
        "yeelight automation",
        "yeelight bulb",
        "xiaomi",
        "xiaomi yeelight",
        "iot",
        "iot hack",
        "iot hacking",
        "smart home",
        "yeelight review",
        "kali linux tutorial",
        "kali linux tools",
        "python hack",
        "hack python",
        "infosec",
        "cybersecurity",
        "security",
        "how secure",
        "home hack",
        "home security",
        "wifi",
        "android",
        "iphone",
        "samsung",
        "app",
        "app security",
        "iot security",
        "internet of things",
        "wireshark",
        "authentication",
        "encryption"
    ],
    "views": 169006,
    "likes": 6286,
    "comments_count": 315,
    "description": "Internet of Things (IoT) devices often have very poor security. It's important to be aware of their vulnerabilities - make sure you put those devices on a separate VLAN. Don't trust that your IOT devices have the necessary security to be trusted on networks that have confidential or important data.  // Lights used // Amazon.com:  Amazon.co.uk:   // GitHub // Yeelight Discovery:  Telnet to Yeelight:  Yeelight1 Python script:  Yeelight2 Python script:   // MY STUFF //   // David SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // Menu // 00:00 - Hacking IoT bulbs // The dangers of IoT devices 01:23 - Intro & disclaimer 01:55 - Bettercap device discovery 01:29 - Hacking IoT bulbs demo // Using Telnet 03:52 - Wireshark capture 04:34 - Hacking IoT bulbs demo // Using Python 08:35 - Conclusion  // Credits // Kody (SecurityFWD):   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   Disclaimer: This video is for educational purposes only. Only attack devices that you own or have permission to attack. I own all the devices used in this video.  python kali linux yeelight iot iot security wireshark  #python #hacking #iot",
    "description_links": [
        "https://amzn.to/41vpusL",
        "https://amzn.to/3KPE5bi",
        "https://davidbombal.wiki/yeelightdiscovery",
        "https://davidbombal.wiki/yeelighttelnet",
        "https://davidbombal.wiki/yeelight1",
        "https://davidbombal.wiki/yeelight2",
        "https://www.amazon.com/shop/davidbombal",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://www.youtube.com/watch?v=iUm1-EEnS3o"
    ],
    "transcript": "- May this be a warning to both you and your family. IOT devices may be easy to control, a lot of us have allowed these kind of devices into our homes, but they often have very weak security or very basic security. Often lots of vulnerabilities in devices such as these. And this example, I've got some Yeelights. What I'm gonna do is I'm gonna control those lights using a simple Python script with no authentication and no encryption. I'm changing the colors of these lights. I can turn them on, I can turn them off. I have full control over these lights with no authentication. In other words, there's no username and password, there's no encryption. Everything is sent in cleartext. I don't even need Python. I could just use Telnet to connect directly to the devices and then control them. It's funny, I often get comments on my YouTube videos. David, this is so dumb. No one's ever going to implement devices where there's no encryption or no authentication. Well, here's just one example of that. I can control the devices as long as I have local access to the network. In other words, I've gained access to the Wi-Fi network or to your network by another means. It's very important that you use good passwords on your Wi-Fi networks because if you use poor passwords, they can easily be cracked. I've demonstrated a whole bunch of examples of that in other videos on my channel. This video is for educational purposes only to warn you about the vulnerabilities and issues with devices such as IOT devices. Okay, so let's get started and I'll show you how I can control these devices using Telnet or Python. Very easy to do. (electronic tone buzzing) (soft music) Okay, so normal user may decide to control the light using their app. That looks great. Nice pretty interface, very easy to use, but, and this is what's really worrying. I can control those lights if I'm on the same network and local control has been enabled. I've shown in many videos on my YouTube channel how to crack Wi-Fi passwords that have weak passwords. So make sure that you use good passwords on your Wi-Fi networks. Let's say I do get access to the local network. I need to discover those devices. I'll show you two ways to do that. Firstly, let's use bettercap. There are many ways to do this, but bettercap is one of the ways, you could also use Python to discover those lights. Very easy to do. So I'll just type net.show to show the devices that have been discovered. I've got a TP-Link router, which is a Wi-Fi router, which I've got right next to me. Again, as always, only attack networks that you either own or have permission to attack. In this case, I own these lights. I own the Wi-Fi router, I own all the infrastructure. I'm testing the vulnerabilities of these lights and I can't say I'm impressed with the security of these lights. Now I could type help to see various commands, but what I'm gonna do here is type net.recon on to discover devices on the network. You can see some devices were discovered. So I'll clear the screen and I'll type net.show. And as you can see here, some lights have been discovered. So I've got a light with this IP address 192.168.0.105 and a light with this IP address 192.168.0.112. So I'll turn off the recon, because it's generating a lot of traffic. And I wanna use Wireshark to see what's going on without all that traffic. But just like that, I have discovered two lights. What I can do is telnet directly to the light, telnet to the IP address 55443 is the port number used by default by these lights. Now you can discover that quite easily and I'll show in a moment how to do that with Python. Press Enter, notice I get invalid code. This, remember, is telnet. It's in cleartext. And just to make the point, I'll run Wireshark and I'll start capturing traffic. And what I'll do is I'll set the IP address to that light so I'm seeing traffic to that light. You can see TCP traffic is sent between my device and that light. Now all I need to do is paste in a command such as this, turn off the light, notice the light just went off. I could paste in another command as an example to turn it on. There you go, back in Wireshark, what you'll be able to see is data is transmitted. And if we look at the output of the data, methods, params, power, on. So I am basically setting the light on and there's an okay message. If I scroll back, I turn the light off and there was a reply message. That's all in cleartext. So notice the protocols used here are ethernet because we're on a Wi-Fi network, it's IP/TCP, and there's the data in cleartext. Everything's sent in cleartext. Okay, so I could turn the light off, and on my app, it actually shows that the light is off. Turn it on again here, and I see the output on my screen. So as an example, if I do something on the light, I can see that through the telenet session. But telenet to a single light is okay. Let's see if we can make this better. Let's see if we can automate this using Python. So what I'll do is open up another terminal and let's run Python3. Now, before I run the Python script for this to work, you have to install Yeelight. So pip3 install yeelight. So I've done that already. So now I can do Python3. And in Python3, I can discover the lights. So as an example, I can say from yeelight, import discover bulbs. Before I discover the bulbs, let's run our Wireshark capture again. And what I'll do is use the command discover_bulbs(). So what that's gonna do now is send traffic onto the network to discover the bulbs. And there you go. First bulb, you can see the port number that it's using. You can see the capabilities of the bulb. Here's the second bulb. Port number is 55443. So it looks like, and I can't say this is true or not, 443 is typically used as the port for SSL. They're using 55443, but it's in cleartext. So it doesn't really help much. It's really easy to discover devices on the network and then use Nmap to discover the ports that are open on those devices. So just like that, I could discover the devices, but I can control them with Python. So as an example, I can say from yeelight import Bulb. I can use a variable that say bulb = Bulb and the IP address of my first light. So there you go. And then I can say bulb and I'll press tab twice now. And I can see various methods for that bulb. As an example, let's turn the bulb off 'cause they're on already. So there it's off. Turn it on. There you go. So just by using these two commands, I can do something like that. I could obviously change a whole bunch of properties of the bulb. So I could set the RGB to something and I'll just use some arbitrary numbers here. And notice the bulb light has changed. Change it to something else. Notice the color of the bulb has changed. Okay, so that's all right, but let's do something else. So let's have some fun. So what I've done is I've created some Python scripts. Let's have a look at yeelight1 script. What I'm doing once again is just telling you you need to import pip. I'm importing time. And then from yeelight, I'm importing bulb. I'm setting the bulb to the first bulb, and then I'm turning it on, sleeping a second, changing the color, waiting a second, changing the color and so forth. And I do that manually, but I know a lot of people would complain if I did it manually that way. So what I've also done is created a loop, which just changes the value of the colors. So as an example, let's turn off both bulbs from the app. So both of them are off, but what I can do now is simply use Python3 yeelight1.py. And what it should do is turn the light on, which it's done, and then it should just change the colors of the bulb. So it's doing it manually. And then in a moment it should go through my loop and then just change the colors. You can see the RGB colors on screen, just some kind of basic calculation that I did nothing fancy. I just wanted to show you that it's possible to change the colors. So again, if I look at that script, I've set the RGB values to that. Then credit a basic loop where I set those values wait a second, increase I by one, because it doesn't like zero and then I'm just multiplying it by some arbitrary value, printing the value and then changing the bulb to that. And then at the end of the day, I set it to a default value. Now to make it more fun, you could do this with a whole bunch of bulbs. So what I've done with script two is I'm importing both bulbs and I just need to edit that because the one bulb changed its IP address. So this is 112, I think. So I'll set it to 105 and 112. Save the script and let's run python yeelight2.py. Notice the bulb comes on and what you should see is the colors are changing on both those bulbs. I am controlling both lights using Python with no authentication, no encryption. Don't need an app to change the colors. I can simply do it through Python. I can telnet to the lights once again and change the colors. You could have a lot of fun with this by changing different colors, turning lights on or off as long as you get access to the local network. You can do all of this using Python or somebody telneting to the devices. Again, may this be a warning to both you and your family that you need to put your IOT devices on a separate VLAN, a separate network to your devices like your computers and other devices that have confidential information. Security is either non-existent or very basic on IOT devices. As always, don't use this for unethical purposes. May this be a warning to you. I'm David Bombal. I wanna wish you all the very best. (electronic tone buzzing)",
    "transcript_keywords": [
        "devices",
        "bulb",
        "light",
        "Python",
        "lights",
        "turn",
        "network",
        "discover",
        "bulbs",
        "IOT devices",
        "control",
        "colors",
        "WiFi",
        "Telnet",
        "change",
        "Python script",
        "Wireshark",
        "Yeelight",
        "IOT",
        "cleartext"
    ],
    "transcript_entity_values": [
        "first",
        "the end of the day",
        "192.168.0.105",
        "IOT",
        "yeelight2.py",
        "Bulb",
        "a second",
        "443",
        "Wi-Fi",
        "yeelight1",
        "55443",
        "two",
        "Wireshark",
        "Firstly",
        "Wireshark",
        "SSL",
        "zero",
        "second",
        "YouTube",
        "David",
        "IP",
        "RGB",
        "VLAN",
        "Python",
        "112",
        "Nmap",
        "105",
        "Yeelight",
        "one",
        "IOT",
        "Yeelights",
        "the Wi-Fi",
        "First",
        "Wireshark",
        "YouTube",
        "David Bombal"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "DATE",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "PERSON",
        "TIME",
        "CARDINAL",
        "LOC",
        "GPE",
        "DATE",
        "CARDINAL",
        "PERSON",
        "ORDINAL",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "NORP",
        "PERSON",
        "ORG",
        "ORDINAL",
        "ORG",
        "PERSON",
        "PERSON"
    ],
    "vector": [
        -0.08729872107505798,
        0.035825904458761215,
        -0.010358301922678947,
        -0.0176335908472538,
        0.07124068588018417,
        -0.1551034152507782,
        0.08452708274126053,
        0.007501249201595783,
        -0.016556372866034508,
        0.01194323692470789,
        0.0830787643790245,
        0.003974143881350756,
        0.06257181614637375,
        -0.02231481671333313,
        0.03569013625383377,
        0.005942284595221281,
        -0.00780703267082572,
        -0.08114156872034073,
        0.0025765348691493273,
        -0.060944609344005585,
        0.012214574962854385,
        0.04974760860204697,
        0.09392110258340836,
        -0.01790173165500164,
        -0.02992270700633526,
        -0.06736329197883606,
        0.06506624072790146,
        0.016693443059921265,
        -0.05891938880085945,
        -0.04335640370845795,
        0.017466487362980843,
        0.03365927189588547,
        -0.06659683585166931,
        -0.0007031976128928363,
        0.006358974613249302,
        -0.024560045450925827,
        0.05371337756514549,
        -0.02308592200279236,
        -0.06903574615716934,
        0.027035431936383247,
        -0.001865945989266038,
        -0.11471766233444214,
        -0.06547830998897552,
        -0.06020301952958107,
        -0.05530761554837227,
        0.01974613219499588,
        -0.031730808317661285,
        -0.04279501363635063,
        -0.01934066042304039,
        -0.05511748790740967,
        -0.0015534753911197186,
        0.025893954560160637,
        0.009157349355518818,
        0.025067200884222984,
        0.0029925897251814604,
        -0.02382555790245533,
        -0.023991400375962257,
        0.0360739529132843,
        0.0675237849354744,
        -0.059086985886096954,
        0.038449835032224655,
        0.04416045546531677,
        0.015199299901723862,
        -0.005507431924343109,
        -0.04863400757312775,
        0.056711893528699875,
        -0.017677471041679382,
        0.04866175726056099,
        0.02168295532464981,
        -0.00397160928696394,
        -0.0519985593855381,
        -0.02256517857313156,
        -0.044867224991321564,
        0.0837409719824791,
        0.053702037781476974,
        -0.027738606557250023,
        0.02148582600057125,
        -0.06727801263332367,
        -0.08270499855279922,
        -0.01199193112552166,
        -0.024057898670434952,
        0.0013999721268191934,
        -0.04560741409659386,
        0.08307791501283646,
        0.04346545785665512,
        -0.021181542426347733,
        -0.025435876101255417,
        0.0965719074010849,
        0.02708188258111477,
        -0.008513816632330418,
        -0.05182730406522751,
        -0.002604706911370158,
        0.059768691658973694,
        0.019665302708745003,
        0.046409107744693756,
        0.034190140664577484,
        -0.007411318365484476,
        -0.12370558083057404,
        -0.09575527906417847,
        0.041990239173173904,
        -0.040321074426174164,
        -0.06769316643476486,
        -0.08188927173614502,
        -0.0008208758081309497,
        0.09970992058515549,
        0.021293779835104942,
        0.02551814168691635,
        -0.07664091885089874,
        0.08064789324998856,
        0.017812546342611313,
        0.004344979766756296,
        -0.017242243513464928,
        -0.04149435833096504,
        -0.014509711414575577,
        0.011355359107255936,
        0.06557349860668182,
        -0.00679007126018405,
        0.13277925550937653,
        0.07967787981033325,
        0.04607540741562843,
        0.07585695385932922,
        0.015030735172331333,
        0.014280944131314754,
        0.01621999591588974,
        0.04410570487380028,
        0.04013724625110626,
        -0.009130414575338364,
        5.3901683669261505e-33,
        0.04024798795580864,
        0.08853056281805038,
        -0.07626884430646896,
        -0.014946360141038895,
        0.05486622825264931,
        0.04135902598500252,
        0.09283361583948135,
        0.06442602723836899,
        -0.050113119184970856,
        -0.002528880722820759,
        -0.07345724105834961,
        -0.007478997576981783,
        0.011110986582934856,
        -0.06902377307415009,
        0.08403480798006058,
        -0.038233622908592224,
        0.012807317078113556,
        -0.0053519257344305515,
        0.04213197901844978,
        0.044804129749536514,
        -0.007380609400570393,
        -0.051478803157806396,
        0.02667907252907753,
        -0.0033101262524724007,
        0.022199343889951706,
        -0.04701830446720123,
        -0.05328574776649475,
        0.008188918232917786,
        0.08694382011890411,
        0.043789613991975784,
        -0.03838415816426277,
        0.0006674104370176792,
        0.03204266354441643,
        0.038349173963069916,
        -0.003921462222933769,
        -0.034361641854047775,
        -0.08921264111995697,
        -0.10921985656023026,
        -0.024187788367271423,
        -0.029856396839022636,
        -0.06689349561929703,
        0.012755542993545532,
        -0.03637512028217316,
        -0.058283016085624695,
        0.0018600159091874957,
        0.024043096229434013,
        -0.06466438621282578,
        0.06892724335193634,
        -0.02412211336195469,
        0.015709757804870605,
        -0.07976129651069641,
        -0.00909887533634901,
        -0.0353330597281456,
        -0.09516109526157379,
        -0.02451656572520733,
        0.0007302571320906281,
        -0.005506020504981279,
        -0.012478053569793701,
        0.07794812321662903,
        -0.03761589899659157,
        0.03312910348176956,
        0.07214850932359695,
        0.06793829798698425,
        0.014055158011615276,
        0.001907327095977962,
        -0.041738107800483704,
        0.07873658835887909,
        0.03573203459382057,
        -0.09225712716579437,
        0.002969244262203574,
        -0.07454511523246765,
        0.03629414364695549,
        -0.0450446680188179,
        -0.0437687486410141,
        0.002149052219465375,
        0.025393322110176086,
        0.019869372248649597,
        -0.010799248702824116,
        -0.025738779455423355,
        -0.026653695851564407,
        0.059409938752651215,
        -0.01915791444480419,
        0.0648379847407341,
        -0.0390150360763073,
        0.015805255621671677,
        -0.10197459161281586,
        -0.004395746625959873,
        -0.015330225229263306,
        -0.07328435778617859,
        0.12549228966236115,
        -0.02268083579838276,
        -0.013231374323368073,
        0.0256905946880579,
        -0.04968583211302757,
        -0.09882722795009613,
        -5.077946781772181e-33,
        -0.025845441967248917,
        0.028798449784517288,
        -0.014408199116587639,
        0.01604301854968071,
        0.004125995095819235,
        -0.1126808151602745,
        -0.014564840123057365,
        -0.0669512078166008,
        0.019470693543553352,
        0.031094076111912727,
        -0.027334706857800484,
        -0.06926610320806503,
        -0.023086488246917725,
        -0.15109039843082428,
        0.11003772914409637,
        -0.014562150463461876,
        0.012849784456193447,
        0.005548484157770872,
        0.04638756811618805,
        -0.013965963385999203,
        -0.07490550726652145,
        0.06092464551329613,
        -0.02385408617556095,
        -0.03255151957273483,
        -0.07818133383989334,
        0.012849204242229462,
        -0.00650033401325345,
        0.02941768616437912,
        -0.037385378032922745,
        -0.0015745942946523428,
        -0.0924307107925415,
        0.015123482793569565,
        0.006336320657283068,
        0.029643293470144272,
        0.06540051102638245,
        0.07052124291658401,
        0.11775766313076019,
        0.01135560218244791,
        0.00950749684125185,
        -0.0913611426949501,
        0.10265292227268219,
        0.004691362380981445,
        -0.05798284336924553,
        -0.0161858219653368,
        -0.09435166418552399,
        -0.06599654257297516,
        -0.06972099095582962,
        0.09160121530294418,
        -0.07057280838489532,
        0.0017211840022355318,
        0.06000760570168495,
        0.04067573323845863,
        0.002554066712036729,
        0.01902054063975811,
        -0.0489710234105587,
        0.03901897743344307,
        0.11061955243349075,
        0.0187599565833807,
        -0.029477965086698532,
        -0.035997431725263596,
        0.037411898374557495,
        -0.1448116898536682,
        0.011485802941024303,
        0.1071033775806427,
        -0.010555416345596313,
        -0.02767261676490307,
        -0.05362391099333763,
        0.04176340997219086,
        0.018929090350866318,
        -0.006216632667928934,
        0.03585384041070938,
        -0.03348927944898605,
        0.10910578072071075,
        -0.037019986659288406,
        -0.03116835467517376,
        0.009188763797283173,
        -0.002272004261612892,
        -0.016483651474118233,
        -0.020633546635508537,
        0.017216257750988007,
        0.011255158111453056,
        0.01668732427060604,
        0.010087982751429081,
        -0.016756577417254448,
        -0.007463603280484676,
        0.017673786729574203,
        0.059455644339323044,
        0.0846121609210968,
        0.03408002480864525,
        0.021374575793743134,
        -0.10220079869031906,
        0.0253517534583807,
        0.03115360625088215,
        0.10129104554653168,
        0.07229170203208923,
        -5.091464672091206e-08,
        0.03775089979171753,
        -0.002118767937645316,
        -0.025238264352083206,
        0.08992422372102737,
        -0.009589570574462414,
        0.0522037111222744,
        -0.011037017218768597,
        -0.02793053723871708,
        0.005899825133383274,
        0.011993879452347755,
        -0.000466389290522784,
        0.005471374839544296,
        0.0009244908578693867,
        0.02224433794617653,
        0.009031347930431366,
        0.05324290320277214,
        -0.045218225568532944,
        -0.04523574560880661,
        -0.002995600923895836,
        0.02871430665254593,
        0.014421327039599419,
        -0.04649728164076805,
        -0.018148651346564293,
        0.022363686934113503,
        0.0007620517862960696,
        0.08319906145334244,
        -0.019836099818348885,
        -0.024615904316306114,
        -0.026835907250642776,
        -0.011159155517816544,
        -0.03422956168651581,
        -0.1024184599518776,
        -4.5517073886003345e-05,
        0.0809280276298523,
        -0.057373084127902985,
        0.03439025580883026,
        -0.08956949412822723,
        -0.03505810722708702,
        0.015603913925588131,
        0.04370415210723877,
        -0.06481762230396271,
        -0.017629453912377357,
        -0.07014115154743195,
        0.030793147161602974,
        -0.003690683515742421,
        -0.020466014742851257,
        0.0011867304565384984,
        -0.0021115243434906006,
        0.009575091302394867,
        0.04885528236627579,
        0.020198093727231026,
        -0.06410887092351913,
        0.04829898849129677,
        0.012040783651173115,
        0.033964864909648895,
        0.04485771059989929,
        0.07816518843173981,
        -0.09333955496549606,
        -0.0018768704030662775,
        0.0729772299528122,
        0.006763547193259001,
        0.11267109960317612,
        0.0475674644112587,
        0.01777128130197525
    ]
}