{
    "id": "N7xlwUhvX7o",
    "title": "Jeremy explains the GNS3 2.2 Architecture",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2019-08-31T15:10:31Z",
    "video_url": "https://www.youtube.com/watch?v=N7xlwUhvX7o",
    "category": "Science & Technology",
    "tags": [
        "gns3",
        "ccna",
        "gns3 vm",
        "ccnp security",
        "ccnp",
        "david bombal",
        "ine",
        "virl",
        "mcsa",
        "ccie",
        "gns",
        "cisco virl",
        "gns3 tutorial",
        "virtualbox",
        "linux",
        "gns3 vmware workstation",
        "gns3 ios",
        "qemu",
        "how to use gns3",
        "gns3 virl",
        "virl image download",
        "gns3 switching",
        "iou",
        "gns3 iou",
        "iou virl",
        "haxm",
        "gns3 asav",
        "gns3 asa",
        "gns3 asa lab",
        "docker",
        "docker vs vm",
        "docker gns3",
        "gns3 docker",
        "gns3 virtual machine",
        "gns3 virtualbox",
        "gns3 installation",
        "cisco",
        "gns3 architecture",
        "gns3 controller",
        "gns3 compute",
        "gns3 rest api"
    ],
    "views": 5012,
    "likes": 130,
    "comments_count": 15,
    "description": "How does the GNS3 work? Jeremy (creator of GNS3) explains the GNS3 architecture. Note: The Server component is also called the Compute Server or Compute.  GNS3 consists of four parts: - the user interface or GUI (gns3-gui or gns3-web projects) - the controller (gns3-server project) - the compute server (part of the gns3-server project) - the emulators (Qemu, Dynamips, VirtualBox) The controller pilots everything, it manages the state of each project. Only one controller should run.  The GUI displays a topology representing a project on a canvas and allow to perform actions on given project, sending API requests to the controller.  The compute controls emulators to run nodes. A compute that is on the same server as the controller is the same process.  The compute usually starts an emulator instance for each node.  GNS3 Architecture:",
    "description_links": [
        "https://gns3-server.readthedocs.io/en/latest/general.html"
    ],
    "transcript": "Keep it down (energetic music) - Jeremy, in Version 2.2 and later of GNS3, what does the GNS3 architecture look like? I mean we've spoken briefly in the past about, like there's a client and there's a VM. But can you talk more about the components and the different processes that run within sort of the GNS3 architecture? - Sure, totally. I can show you. - Yeah, that'd be great. - So as they told you, we have a client and a server package. - Yep. - So, in GN3 you have clients. A client can be um, a Web Ui, or a desktop Ui. It can also be any script that's using a API, will talk to the server. - Okay. A REST API, yeah? - Yes, a REST API. So any client can talk to the server using the REST API. REST API. And that's the server, and to be more specific this is a controller. - So that's like a process running somewhere? - This is a process that can run in the GNS3 VM, in the remote server or locally on your machine. So the controller, and then the controller talks to the GNS3 Server that we call compute. So one controller can control multiple computes. - Okay so this is, just to make sure I understand, this is a client, could be a Windows client, or could be a Linux client, could be a Mac client? - Yes. - It's talking using a REST API, to the controller process? Which could be running either on the clients, on your PC, or it could be running on the GNS3 VM? - Yes. - Now in this example, I'm assuming you've got three GNS3 VM's because you've got three server processes-- - Yeah, it could be VM's here, or it could be our remote servers. - Okay. So, I mean this could be running on ESXi? - That Could Be ESXi-- - This could be in like-- - HGV. - Or Hyper-V, and this could be like in the Cloud? - Like in the Cloud, yes. - As long as you've got IP connectivity? - Exactly, yes. - Okay. So, I mean this is the compute process? - Yes. - And then on these we've got server processes, is that right? - Yes. Actually I should just... - Yeah, just change it that's fine. - Write controller. That's a controller and that's the VM's. We just have our inside. - Sorry, I know you've only got one hand so let's (mumbling). (laughing) - So we've got like, server process running here? - Yes. - Here we've got a controller process. The server process runs, or has to run, within the GNS3 VM, is that right? - Can be the GNS3 VM, or remote server, or anywhere else you'd like. - Okay, so when you talk about a remote server, how's that different to GNS3 VM? - So the GNS3 VM is meant to be ran with VMware, Hyper-V, or it can be also in the Cloud ESXi. A remote server can be a bare-metal server. - Oh okay, so that's the difference, yes? - Yes. So this could be a bare-metal on packet, or on a server that you've got? - Yes. - This could be running in ESXi in our example? And this could be Hyper-V or something like that, yeah? - Yep. - Okay, so we've got three GNS3 server processes. Two in VM's, one on bare-metal server. We've got this controller, where does the controller run? Does it run on all of these? Or does it like, select one of them? - So the controller can run on the same host as the client. - Yep. - Or it can run in any server, or any of those VMs. But there can only be one controller. - Okay, so there's one of these? Here you could have multiple clients couldn't you? - Yes. - Because I could have a Windows client, here I could have a Mac client. So there could be many here. And I could have a Linux client as an example. So, multiple clients that all us the REST API to the controller, is that right? - Yeah the controller is like the decision point. - Like a brain, yeah? - Like the brain of GNS3. - Okay. And that could run on a client? - That could run on the same host as the client. - But it would be better to run it on a server? - It would be better to run it on a server, yes. - And then you select perhaps the most powerful server? - Yeah, you can do this like you can select the most powerful server. - But by default it GNS3 just chooses something? - Yes. - So this gets run on one of them, but you can manually change it to go on say, the bare-metal server? So put this process on here? - You can manually decide to run it there, yes. - So physically you've got a Windows computer, Mac, Linux. This is actually a process that's running either in ESXi, in the GNS3 VM, or on Hyper-V, or on the bare-metal server. Now, here we've got three servers. Are there any other things? How does that interact with DynaMaps, or QEMU, etc.? - So each server will control emulators. - Yep. - So inside here as part of this, you have like, emulators. - Yes. Which would be DynaMaps, would it? - DynaMaps, or QEMU. So the servers are in charge of managing the emulators, like starting the emulator, or creating the actual VM, like the actual host, know what I mean? - So these are emulators? - Yes. - And you would have the same kind of thing here? You'd have multiple emulators on each of these servers, yeah? - Yes. - And the emulators actually run the Cisco operating system, or whatever operating system you're using. Is that correct? - This is correct, yes. - So inside here you've actually got like IOSV, IOSV layered to Juniper. - Juniper. - Whatever. - X Tera. - Okay, well I mean, - Actually yeah you're that's a bad example yeah. the wrong way. That should run in QEMU. We should be yes. So that would be... - IOS Classic. - Yes, like a 7200 image would run in there. That Cisco VIRL image, as an example, would run in QEMU. They are controlled by the server process. So, this is local? - Yes. - This is local, this is local? This thing is on one of those. And then what kind of interface are they using here? - So we also use a REST API. So REST API. But this one is a internal REST API. Only the controller is supposed to us this API to talk to the servers. - Okay so this. Is this API exposed? So in other words - This one is public. is this public? So anyone can use it. You can create a script that uses API to create like GNS3 projects or control GNS3 projects. - Okay so, you could write a Python script or something. - Yes. - And that could be another client in to the controller? And you've told me previously when we've spoken before, that you could write your own client. - Yes, you could also write your own console client for instance. - Yes, so some guys have asked about that. So you could write your own console client, or Python script or something that interacts with the controller using the REST API. - Yeah. - And this is all internal? - Yes, all this is internal, so all of this is not exposed. - So, again we've got three physical clients. Running let's say the Windows Executable, So that's your thick client. Now what about the web client? - So the web client will come here for instance. - So that's just another client? - Yeah. - Let's put it up here. - Yes there's more space. - Yeah, so we've got the Web Ui, yeah? - Yes the Web Ui will come here, and the Web Ui's also use REST API to talk to the GNS3 controller. - And one of the advantages you were telling me previously of that model is if you make a change here, like you drag a device into your typology, it's actually just doing a REST Call, isn't it? - Yes, it's giving the REST call, then the controller creates for instance, a nodes on one of the server, and but also replicates the information to the other clients who appear on the same project. So, for instance, we have the Web Ui here, and the desktop Ui. They open the same project, and if you create a node here, the controller will inform the Web Ui, \"Oh there's a new node there.\" And you will see the node up here in the Web Ui. - Okay so, yeah so everything's replicated. So if I've got like one, two, three, four, five clients? If the Windows guy, adds a new node and connects it, say with a link to another node, that's replicated. And all of these in real time will be able to see that change. - And to do this, we have Web Sockets Notifications to every clients'. - Is it Web Sockets? - Yeah, it's called Web Sockets. - Okay. - It's like a notification stream. - Yep. - So, each client has a notification stream. So the controller can tell every client that there is a change in the project. - Great. Anything else you want to tell us about the architecture? Anything else that's important? - Yes. So to connect, for instance, we have a node running on this VM, and a node running on this VM internal server. So how can a node from here can communicate with this node here? - Out of space here, so I mean in other words, there's some kind of connection between these two, yeah? - Yes, there's a connection. - Oh that's a very bad red pen so we'll have to use another color. I'll just use blue. So there's some kind of connection logically here. - Exactly. - And what's doing that? - So there's a small program called UBRIDGE. - Oh UBRIDGE, yeah? - So UBRIDGE is in charge of interconnecting the nodes. So if you should connect those two nodes in your project, they will be a small program called UBRIDGE that will be started for this node and this node. And UBRIDGE will take the packets from this node, and put it in what we call a UDP tunnel, and send the data to the other UBRIDGE instance. Which will take that and send it to this node. - Okay so, I think we discussed this in another video in more detail, but if I had Docker Container running here, I'd use a TAP interface on the Docker Container. If the Docker Container sent an IP packet, that would go through the TAP interface, then go in to the... - To UBRIDGE. UBRIDGE tunnel. - Which then goes to the UBRIDGE tunnel, yes. - Oh okay. - The UDP tunnel I mean. - UDB Tunnel. - So that goes as a UDB Tunnel over here and if you had like another type of device that used a different type of interface. Let's say ESXi, VNet, the UBRIDGE would push that to the VNet interface onto the Windows client or whatever it is? - Yes. And actually there's two UDP Tunnels. - Okay. - Because there is one for each way. - Oh so it's unidirectional? - So yeah, unidirectional so for one UDP node to send to this node, and one UDP Tunnel to go to the opposite direction. - Okay. That happens automatically doesn't it? - This is all handled by the server, the GNS3 server, and UBRIDGE. - Okay so we as a client, or user should I say you, don't have to do any of that? - No, you don't have to do any of this. - You just drag your devices on, you create the links. - Yes. - If I had, like a Ethernet link in GNS3 from this node, to this node, that's just happening automatically in the background? - Yes. - And it doesn't, so just to reiterate, this could be a bare-metal server, this could be an EXSi server? - Exactly. As long as you have a IP to connect you between the two. The UDP tunnel will be created. - That's great. Anything else? - No I think that's everything. - Yeah, so that's like sort of an overview of the GNS3 architecture. Jeremy, thanks for that. - Yeah no problem. - In subsequent videos we'll talk about this in more detail. (energetic music)",
    "transcript_keywords": [
        "REST API",
        "server",
        "API",
        "client",
        "REST",
        "controller",
        "Yeah",
        "Web",
        "UBRIDGE",
        "run",
        "node",
        "running",
        "UDP tunnel",
        "clients",
        "tunnel",
        "process",
        "Web Sockets",
        "Windows",
        "Windows client",
        "UDP"
    ],
    "transcript_entity_values": [
        "Linux",
        "three",
        "Web Sockets",
        "7200",
        "Mac",
        "Cloud",
        "Cisco",
        "Docker Container",
        "UBRIDGE",
        "API",
        "Ui",
        "GNS3",
        "five",
        "Ethernet",
        "two",
        "GNS3 Server",
        "four",
        "GNS3 VM",
        "the Docker Container",
        "processes-- - Yeah",
        "the REST API",
        "Classic",
        "IP",
        "Python",
        "Hyper-V",
        "UDP Tunnels",
        "one",
        "Linux",
        "VMware",
        "GNS3",
        "UDP Tunnel",
        "IOSV",
        "Cisco",
        "Two",
        "Windows",
        "Jeremy",
        "2.2",
        "VM",
        "Windows",
        "the REST API",
        "GNS3 VM's",
        "UDP"
    ],
    "transcript_entity_types": [
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "GPE",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "GPE",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "GPE",
        "CARDINAL",
        "PRODUCT",
        "PERSON",
        "PRODUCT",
        "ORG",
        "NORP",
        "PRODUCT",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.09514792263507843,
        -0.08399850130081177,
        -0.0407821349799633,
        -0.055405691266059875,
        -0.059965964406728745,
        -0.05117029324173927,
        0.004477628041058779,
        -0.07857730239629745,
        0.10018051415681839,
        0.022527439519762993,
        -0.036134377121925354,
        0.0020424704998731613,
        0.021566683426499367,
        -0.08817405998706818,
        -0.01669994369149208,
        0.000890531053300947,
        0.11216726154088974,
        -0.06655827164649963,
        -0.02233707904815674,
        -0.056998640298843384,
        0.092828169465065,
        0.042719416320323944,
        0.020245656371116638,
        -0.015756210312247276,
        -0.05877422168850899,
        0.05873551592230797,
        -0.03755911812186241,
        0.012691022828221321,
        0.09308875352144241,
        0.0035862119402736425,
        0.04564810171723366,
        -0.02607666328549385,
        -0.03597920015454292,
        0.06199270114302635,
        -0.04550718516111374,
        0.07794245332479477,
        -0.054684776812791824,
        -0.030971964821219444,
        -0.11787346750497818,
        -0.009570365771651268,
        0.06963301450014114,
        -0.0021436777897179127,
        -0.0646367073059082,
        0.005315362010151148,
        0.045287732034921646,
        0.04338611289858818,
        -0.02966470830142498,
        -0.070166677236557,
        -0.03895614296197891,
        -0.07273048907518387,
        0.0811811313033104,
        -0.11719702184200287,
        0.05469108372926712,
        0.025171274319291115,
        0.006167293526232243,
        0.0028987315017729998,
        -0.07875926047563553,
        0.05230126529932022,
        -0.004779355134814978,
        0.10127770155668259,
        -0.03032984398305416,
        -0.0009441999718546867,
        -0.05258515849709511,
        -0.030434658750891685,
        0.15308095514774323,
        -0.026063736528158188,
        0.0640396699309349,
        -0.04452626034617424,
        0.013396301306784153,
        -0.10837660729885101,
        0.01868327520787716,
        -0.023814735934138298,
        -0.005169760435819626,
        -0.12633486092090607,
        -0.10172845423221588,
        -0.03297710046172142,
        -0.03261420875787735,
        0.0865461453795433,
        -0.01674504764378071,
        -0.06944112479686737,
        0.12399771809577942,
        0.0009738981025293469,
        -0.0047179292887449265,
        0.07931723445653915,
        -0.07505058497190475,
        -0.06371315568685532,
        -0.07620523124933243,
        0.020493924617767334,
        0.026198487728834152,
        0.012981989420950413,
        -0.029542261734604836,
        -0.010130357928574085,
        0.03609214723110199,
        0.04812607914209366,
        0.06332484632730484,
        0.03812161087989807,
        -0.015907032415270805,
        -0.030783116817474365,
        0.05096179246902466,
        0.03920595720410347,
        -0.007843558676540852,
        0.03512980788946152,
        0.1384921818971634,
        0.011150596663355827,
        -0.03143979236483574,
        0.039509307593107224,
        -0.06498175859451294,
        0.099502794444561,
        0.0165797621011734,
        0.006741928402334452,
        -0.09701830893754959,
        0.0772973820567131,
        0.0053314222022891045,
        0.029370885342359543,
        -0.05573037266731262,
        0.049813371151685715,
        0.015261947177350521,
        0.05122154578566551,
        0.029534470289945602,
        0.06669400632381439,
        -0.038500793278217316,
        -0.02681546099483967,
        0.023819340392947197,
        -0.018318302929401398,
        -0.015927297994494438,
        0.005513962358236313,
        -0.0845920592546463,
        1.8168247831767344e-33,
        7.047680264804512e-05,
        -0.04159431532025337,
        -0.0013685447629541159,
        0.047243811190128326,
        0.031929995864629745,
        0.03287386894226074,
        -0.006078185047954321,
        -0.015047398395836353,
        -0.020068516954779625,
        0.03232211992144585,
        -0.0040674670599401,
        0.07138083875179291,
        0.02178671769797802,
        0.08411864936351776,
        0.05736880004405975,
        -0.05236223340034485,
        -0.0447702594101429,
        -0.03612067177891731,
        0.08831072598695755,
        -0.032018184661865234,
        0.03520892560482025,
        0.01915622316300869,
        0.01663840375840664,
        0.011224753223359585,
        0.058743879199028015,
        0.0704207569360733,
        0.00942295789718628,
        -0.011989777907729149,
        -0.02506188489496708,
        -0.020302657037973404,
        0.03179437667131424,
        -0.0367884635925293,
        -0.059191204607486725,
        0.015621116384863853,
        -0.007907935418188572,
        0.027496425434947014,
        -0.042182035744190216,
        -0.08438725024461746,
        -0.029422245919704437,
        -0.0007821627659723163,
        -0.031139088794589043,
        0.006682270206511021,
        -0.03340202942490578,
        -0.08562404662370682,
        -0.0439574271440506,
        -0.014584094285964966,
        0.02893676981329918,
        -0.10259875655174255,
        0.029031746089458466,
        0.04755104333162308,
        0.11332252621650696,
        -0.010597716085612774,
        0.03386961296200752,
        -0.010985969565808773,
        0.06097746640443802,
        -0.05444100871682167,
        0.05265430733561516,
        0.04190685600042343,
        0.012383269146084785,
        0.06529205292463303,
        0.04560297727584839,
        -0.05355450138449669,
        -0.1059841588139534,
        0.025416506454348564,
        -0.0003895290719810873,
        0.08270707726478577,
        -0.10490240156650543,
        0.033193908631801605,
        0.04639983922243118,
        0.06697696447372437,
        -0.03428070247173309,
        0.03373563662171364,
        0.03756292909383774,
        0.05210471153259277,
        0.03420509025454521,
        0.011222632601857185,
        -0.08384071290493011,
        -0.07096949219703674,
        -0.09409552812576294,
        0.02192048169672489,
        -0.05204039812088013,
        0.045196130871772766,
        -0.04660975560545921,
        0.08228551596403122,
        -0.09383188188076019,
        -0.05052202194929123,
        -0.008451253175735474,
        -0.01038977038115263,
        0.0015864911256358027,
        -0.03374559059739113,
        -0.03686520457267761,
        -0.04499661922454834,
        0.029463453218340874,
        0.06818203628063202,
        -0.008627481758594513,
        -3.2395625138464045e-33,
        -0.014354479499161243,
        -0.024855054914951324,
        -0.05119576305150986,
        0.03043615259230137,
        0.06076861917972565,
        -0.03675154969096184,
        -0.03708363696932793,
        0.01608734205365181,
        -0.04152596741914749,
        -0.02684660442173481,
        -0.009544976986944675,
        0.027785927057266235,
        0.06647031754255295,
        0.04250134155154228,
        -0.03606433793902397,
        -0.017174990847706795,
        -0.02777501754462719,
        -0.12195583432912827,
        -0.010130577720701694,
        -0.040662676095962524,
        0.07570385932922363,
        0.06238391622900963,
        0.004193434491753578,
        -0.04697507247328758,
        -0.029486466199159622,
        -0.012014644220471382,
        0.04295443370938301,
        0.006033035926520824,
        0.0791243314743042,
        0.025986328721046448,
        -0.0016520330682396889,
        -0.08141128718852997,
        0.010331765748560429,
        -0.010265130549669266,
        0.03985191509127617,
        0.03515554592013359,
        0.07915215939283371,
        0.021023374050855637,
        -0.02135523408651352,
        -0.09263118356466293,
        0.03783781826496124,
        -0.015021431259810925,
        0.004756489302963018,
        0.037590913474559784,
        0.026210498064756393,
        0.12338540703058243,
        -0.03523283451795578,
        0.0653577372431755,
        -0.08606824278831482,
        -0.03072451241314411,
        0.030118752270936966,
        0.021991021931171417,
        -0.049743376672267914,
        0.00012020522262901068,
        0.046543460339307785,
        -0.035395752638578415,
        0.06478850543498993,
        -0.006206623278558254,
        -0.014247771352529526,
        0.021347016096115112,
        0.09728127717971802,
        -0.11538807302713394,
        -0.0012038933346047997,
        0.07044953107833862,
        -0.06346486508846283,
        0.03726741671562195,
        0.028891045600175858,
        0.06294355541467667,
        0.09424380213022232,
        0.050807736814022064,
        -0.058400578796863556,
        -0.04075926914811134,
        -0.03832406550645828,
        -0.04160749539732933,
        -0.005950776394456625,
        0.009159872308373451,
        -0.005928866099566221,
        -0.08166522532701492,
        0.031225454062223434,
        -0.07559502869844437,
        -0.03376324847340584,
        0.013620919547975063,
        0.00816320814192295,
        0.0160684771835804,
        0.029952045530080795,
        0.015492320992052555,
        0.06347253173589706,
        0.038839660584926605,
        -0.008085896261036396,
        -0.042505137622356415,
        0.003643896896392107,
        0.033944934606552124,
        -0.01577829197049141,
        0.0793229192495346,
        -0.10591981559991837,
        -4.7241336176284676e-08,
        0.04377312585711479,
        0.02630515582859516,
        0.006487345322966576,
        -0.01973993517458439,
        -0.030790463089942932,
        0.01879696547985077,
        0.06780068576335907,
        -0.01004091463983059,
        -0.009436541236937046,
        0.039048485457897186,
        0.023890260607004166,
        -0.02459985576570034,
        -0.02970917522907257,
        -0.07286163419485092,
        0.05766691267490387,
        0.08709661662578583,
        0.028409909456968307,
        0.01249179057776928,
        -0.00782798882573843,
        -0.04672928526997566,
        -0.006569673307240009,
        0.030843304470181465,
        -0.043350622057914734,
        -0.019370192661881447,
        0.02275797724723816,
        -0.04106802120804787,
        -0.004282515496015549,
        0.04257756471633911,
        -0.056024789810180664,
        0.0686301440000534,
        0.035280875861644745,
        0.025712449103593826,
        0.03648011386394501,
        0.004122557118535042,
        -0.04611269012093544,
        -0.006947659887373447,
        -0.03218557685613632,
        -0.054306741803884506,
        0.10611652582883835,
        -0.03579743951559067,
        -0.06638079136610031,
        -0.008235599845647812,
        0.01763766072690487,
        0.010184277780354023,
        0.025261923670768738,
        0.03491799160838127,
        -0.02874416671693325,
        -0.021525410935282707,
        -0.015393523499369621,
        0.059865470975637436,
        0.012395689263939857,
        -0.02538643218576908,
        -0.049949534237384796,
        0.08088059723377228,
        0.0047133686020970345,
        -0.04273261874914169,
        -0.01865451969206333,
        -0.07717554271221161,
        0.10195744037628174,
        -0.03588750958442688,
        -0.011969937942922115,
        0.005852668080478907,
        -0.03175508603453636,
        -0.0008556884131394327
    ]
}