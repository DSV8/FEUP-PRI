{
    "id": "SiFyhipl57A",
    "title": "They said this doesn't work ðŸ¤£ Hacking networks with VLAN hopping and Python",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-05-13T14:00:11Z",
    "video_url": "https://www.youtube.com/watch?v=SiFyhipl57A",
    "category": "Science & Technology",
    "tags": [
        "python",
        "cisco",
        "vlan hopping kali",
        "vlan hopping attack",
        "vlan hopping attack explained",
        "vlan hopping mitigation",
        "vlan hopping explained",
        "vlan hopping example",
        "vlan hopping cisco",
        "vlan hopping tool",
        "scapy python",
        "python scapy",
        "scapy in python",
        "scapy python3",
        "kali linux",
        "scapy kali linux",
        "python hacking",
        "scapy python tutorial",
        "scapy tutorial",
        "scapy python pcap",
        "scapy packet crafting",
        "scapy python 3",
        "cyber security",
        "vlan hopping",
        "double tagging",
        "hacking cisco"
    ],
    "views": 146112,
    "likes": 4811,
    "comments_count": 295,
    "description": "Don't believe what you read online. VLAN hopping is possible and I'm going to show you how :)  I'll also show you have to mitigate these types of attacks.  Boson Bombal 8 Weeks to CCNA:   // MENU // 00:00   Messing With The Network 00:51   Intro to VLAN Hopping 01:20   VLAN Test Setup 2:35   Starting Wireshark Captures//Filtering for ICMP 3:30   Python Script Explained 4:13   Windows 11 Network Setup 4:52   VLAN Configuration Diagram 5:02   Python Script Explained Continued 5:17   Test 01 - Running the script in Kali Linux 5:51   Examining ICMP Packets in Wireshark 6:46   Examining Network Setup with PuTTY 8:29   Why the script doesn't work 8:44   Test 02 - One More Time 9:30   How to make it work 10:21   Test 03 - Running the modified script 10:40   The Trick Step by Step 11:31   Test 04 - I'll Do That Again 12:46   Test 05 - Let's Try That Again 15:44   How To Mitigate VLAN Hopping 17:26   Test 06 - After Implementing Mitigation 18:09   Don't Use VLAN 1 18:22   Changing the Native VLAN 19:22   Test 07 - After Changing Native VLAN 19:45   Test 08 - After Changing Native VLAN 19:58   Again, Don't Use VLAN 1! 21:00   Looking At The Modified Python Script   21:55   Changing the Python Script to Target New VLAN Config  23:04   Stacking Multiple Packets  // TAP used // Dualcomm ETAP-2003 10/100/1000Base-T TAP :  // Script // Github:   // Previous videos // Previous video:  Playlist:   // SCAPY RESOURCES // Website:  Documentation:   // SCAPY INSTALLATION // sudo apt update sudo apt install python3-pip sudo pip3 install scapy  // David's SOCIAL // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  python cisco vlan hopping vlan hopping python python hacking hacking kali linux  vlan hopping kali vlan hopping attack vlan hopping attack explained vlan hopping mitigation vlan hopping explained vlan hopping example vlan hopping cisco vlan hopping tool 802.1Q dot1q vlan tagging vlan tag stacking scapy scapy python python scapy scapy in python scapy python3 kali linux scapy scapy kali linux python hacking scapy python tutorial scapy tutorial scapy python pcap scapy packet crafting scapy python 3 cyber security vlan hopping double tagging hacking cisco ethical hacking kali kali linux python python scapy ccna ccnp ccie cisco routers cisco switches ccna 200-301 python scripts linux kali kali linux 2022 kali linux 2021 oscp ceh security+  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #python # #hacking #cyber",
    "description_links": [
        "https://davidbombal.wiki/bosonbombal",
        "https://amzn.to/3we7mGI",
        "https://github.com/davidbombal/scapy/blob/main/vlan-hopping.py",
        "https://youtu.be/CIWD9fYmDig",
        "https://davidbombal.wiki/scapy",
        "https://scapy.net/",
        "https://scapy.readthedocs.io/en/latest/",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal"
    ],
    "transcript": "- Avoid using VLAN one for connections to your access ports, but I'm not gonna let that stop me. I'm basically messing around with the network. (upbeat music) I wanna thank Boson Software for sponsoring this video, and also collaborating with me on the Boson Bombal 8 weeks to CCNA program. This is a program where you get mentored instruction from a CCI instructor. You have access to the Boson courseware. You have access to the Boson, NetSim, Boson ExSim, and a whole bunch of other benefits as part of this program. Bryan, who's the CCI instructor on this program will mentor you over the period of eight weeks to get ready to pass your CCNA exam. If you're interested in taking a mentored program to get your CCNA, use the links below. In this video, I'm gonna show you how to use a simple Python script to do VLAN hopping. I've seen a lot of people online say that this is no longer possible, but that's because they only used a certain type of VLAN hopping. I've discovered a way to hop from one VLAN to another by using a simple Python script and stacking, 802.1Q frames. I'll also show you at the end of this video, how to mitigate against this. You need to be careful how you configure your switches to stop a VLAN hopping. In this topology, I've got two switches, switch1 and switch2. These are Cisco 1000 series switches here on my desk. I've updated the software on the switches, so this switch, as an example, is running the latest version. I've got a Kali virtual machine connected to gigabit 1/0/1 on switch2. The switch is connected to switch1 on gigabit 1/0/10, but I've also got a tap on that link so that I can capture traffic, and show you what the added to of 802.1Q tags look like. So the two switches are connected to the tap using port 1/0/10, and then it's connected to my Mac so that I can capture the traffic. So basically, we'll see what Python does when we send frames from the Kali virtual machine to the network. A copy of the frames will be sent to my Mac, and I'll capture that in Wireshark, and then the frame will be sent to switch 1, and then we'll be able to see what happens on the network. A lot of people, as I've said, have tried this, and there are articles online saying that this doesn't work on modern Cisco switches, but I'm not gonna let that stop me. Don't believe what you read online, as they say. Try things for yourself, and I'm gonna show you how my simple Python script can circumvent VLANs. So I'll start Wireshark on my Mac, and I'll capture traffic on the ethernet as zero interface. You can see a bunch of traffic, like broadcast. You can see per VLAN spanning tree messages and other messages on the network, but I'm gonna filter for ICMP, because I'm gonna use Python Scapy on this virtual machine to send traffic into the network, and I'll show you what happens with the tags. Okay, so this Kali virtual machine is connected to gigabit 1/0/1 on the first switch. What I'll do here is run Wireshark so that we can see the frames generated by the virtual machine, but the important piece is to view the traffic on the Mac. That will show us if the switches actually accepted the frames, and where it's sending it into the network. Okay, so what I'll do here on Kali is fault it for ICMP, and let's have a look at the hopnotag first, so nano hopnotag, this Python script imports Scapy. I'm just importing all of Scapy. Now, I'll show you scripts in a moment where I'm crafting an 802.1Q header. This one doesn't have an 802.1Q header. We've created a variable, and we are going to set the destination ethernet frame to a broadcast, so we are basically sending a broadcast into the network. What we're then gonna do is stack another layer, and we're just gonna continue the line rather than having one long line. This just tells Python that this is part of the same line. I'm gonna set the source to 10.1.2.2, and the destination to 10.1.2.3. Now, in our network, the Windows 11 computer has an IP address of 10.1.2.3 on the ethernet four interface. That's the interface connected to our network. What I'll do here is also start Wireshark so we can see what traffic arrives or is received by the Windows 11 computer. So I'll capture ethernet four. You can see spanning tree messages from a Cisco switch, some other Cisco messages, but I'll filter for ICMP. Let's see if traffic sent on VLAN 1ends up in VLAN 2. Very important to mention, the Kali virtual machine is in VLAN 1. The Windows 11 computer is in VLAN 2. They shouldn't be able to talk to each other, but Python will allow us to do that. We're then sending ICMP at layer four, so layer two ethernet broadcast layer two is a source address of this destination address of this ICMP at layer three. This will allow us to see the packet, and this is actually gonna send the packet into the network. So sudo, I wanna use sudo privileges to send traffic into the network. I'm using Python3, hopnotag, P Y is my script, press enter, put in my Kali password. That's what we send into the network. Layer two is this destination Mac address, source Mac address, or a bunch of zeros. The type fill that layer two is telling us that IPv4 is used at layer three. We can see IPv4, source, destination IP address, protocol used. At layer four, if you like, is ICMP. It's an echo request message. Packet was sent into the network. So in Wireshark, that's what we see. We can see source and destination Mac address, source and destination IP address. We can see that's an ICMP message. We didn't get a response, so Wireshark is just telling us that no response was received. Okay, but let's have a look at this link where we've got our tap. What does the Mac show us? Basically the same information, source and destination Mac addresses, source and destination IP addresses, and ICMP echo request. No response was received. That's because on the Windows 11 computer, the frame didn't arrive. These switches are doing what they're supposed to be doing. VLAN 1 can't talk to VLAN 2. Now, the Kali virtual machine is connected to gigabit 1/0/1 on switch 2. That should be in VLAN 1. And the Windows 11 computer is in VLAN 2, and is connected to gigabit 1/0/2, so let's confirm that. On switch 2, this is the switch that my Kali virtual machine is connected to. Show IP interface brief, notice port 1/0/1 is up. That's the connection to my Kali virtual machine. Show interface gigabit 1/0/1 switchport. What you'll notice is there's the command. This interface is configured as static access. It's operating a static access, and it's in the default VLAN, VLAN 1. Now, that's not a good idea. You don't wanna do that. You want to actually use different VLANs to VLAN 1. But in this example, the Kali virtual machine is connected to VLAN 1. On our trunk interfaces, so if I type show interface trunk, we are using 802.1Q trunking on the interfaces gigabit 1/0/10. That is the interface that connects switch 2 to switch 1. The native VLAN is VLAN 1. So the reason why this frame from the Kali virtual machine is not tagged in this case is because it's in VLAN 1, and that's the native VLAN on the trunk, so it's sent across untagged, but it can't get into the other VLAN, because the PC is in a different VLAN. So on switch one, show IP interface brief, gigabit 1/0/2. That's this interface where the Windows 11 computer is connected to. Interface is up up. Show interface gigabit 1/0/2 switchport. This is configured in VLAN 2. So VLANs look like they're working properly in this example. So let's have a look at the script first. I'm gonna open the script called hopbroken. In this example, we've got our ethernet frame at layer two, and we're going to add two 802.1Q frames. That's typically what you see with VLAN hopping examples, and this doesn't work. So just to prove that, sudo Python hopbroken.P Y. That's sent into the network. If we look at Wireshark on Kali, you can see that we've got two 802.1Q tags added. We've got VLAN 1, and we've got VLAN 2. That's correct per our script. So if ICAT hopbroken.P Y, we are adding VLAN 1, and then we are adding VLAN 2. That's exactly what we see here. The switch will not accept a tag that doesn't match the port, and I'll show you that in a moment. So it should accept the frame, which it does. Notice on the link between the two switches where I've got my tap, and I've got my MacBook connected, you can see that the frame was received, but the tags were removed. And this is what a lot of people will tell you. If you implement VLAN hopping, so you do a double tag, it doesn't work, because the tags are stripped, but let me show you what I discovered. I'm going to open the script, hop one to two.P Y, and all I did here was add a third tag. So when testing things, don't believe what people tell you. Test various options. Rather than me just sending a frame with no tag, or with one tag, or with two tags, I'm adding three tags here. So I've got three 802.1Q VLANs. This is the VLAN that the port is in, and this is the VLAN that I want to send it to that's gonna be stripped, and this is the VLAN that I wanna send it to, and that's gonna go through the network. At the moment on my Windows 11 computer, no ICMP traffic is seen. I'm gonna run the script sudo Python3, hop1to2.P Y. Notice an ICMP message was received on this PC, even though it's in a different VLAN. I have successfully hopped from one VLAN to another, using a simple Python script. The trick here is to add three 802.1Q tags, and then that allows me to hop to a separate V line. So let's go through the whole process. I sent the frame into the network. This is on the Kali virtual machine. Notice three tags. Outer tag is the tag that the port is in, and then I added two tags for the network that I want to jump into. When it hits the switch, this switch is gonna strip the two outer tags, but what is it gonna forward across the link between the two switches? Notice on the Mac mini, I can see ethernet two, and I can still see the 802.1Q tag. That was preserved. The switch stripped the first two tags. The VLAN ID is VLAN 2. Source and destination IP addresses are here, ICMP message, and it was now received by the PC and the other VLAN. I'll do that again. Let's send the frame again. Notice the Windows 11 computer received the ICMP message. Now, you'll notice that no response was received, but what I can do is inject traffic into another VLAN, and get two devices to talk to each other, as an example. So what I'll do here is add a Cisco router to the topology. I'm not routing from one VLAN to another. I'm simply injecting traffic into another VLAN. I'm just using a Cisco router in this example, so that I can get the Cisco router and the Windows 11 computer to talk to each other. The Cisco router in this example, show IP interface brief, has this IP address in VLAN 2, 10.1.2.254. Let's edit our script to get the router to talk to the PC. So what I'll do is rather than saying source equals two, I'll set that to three, and set the destination to the router. So this will act as if the Windows 11 computer is pinging the router. Save that, run the script again. So we've got 10.1.2.3 going to 10.1.2.254. We'll have to, I might have been a bit too quick here. Let's make sure that the PC can ping the router. So can we ping 10.1.2.254? Okay, ping works, so let's try that again, and there you go. Notice I didn't wait long enough for spanning tree to converge. There's the message from the PC to the router, and there's the message or reply from the router to the PC. And just to prove the point, I'll clear this and send that into the network. There is the traffic from the Windows 11 computer to the router. It's actually from my Kali virtual machine, and then the router's replying. So I can get these two devices to talk to each other in another VLAN even if I'm in a separate VLAN. You could create a simple loop, and just send many, many packets into the network, so something simple, like for I in range ten, one, two, three, four, send packet. And I forgot to put that there, so colon, send that again, and notice we've sent a whole bunch of packets into the network. That's as if pings are sent from the PC to the router, and the router replies. Okay, so that's a simple example of sending packets from one VLAN to another, but what I'll do now is move the PC to another VLAN. I'll move the PC to port three, which is in VLAN 3. So on switch one, you can see gigabit 1/0/2 went down, gigabit 1/0/3 came up, so show IP interface brief. 1/0/3 is up up. Show interface gigabit 1/0/3 switchport. Operational mode is static access. It's in VLAN 3. I could actually just do show run interface gigabit 1/0/3, and you can see the configuration of the port. What I'll do is restart Wireshark. Now, I've moved the PC. I haven't changed the IP addresses. Typically, you would change the IP addresses, but what I'm gonna do now is edit that script. And what I'm gonna do here is change the VLAN to VLAN 3, and what I'll do for the moment is remove the loop, save the script, and run it again, and there you go. Traffic was received by the Windows 11 computer even though it's in a different VLAN. If we have a look at our Wireshark capture on Kali, notice VLAN 1 tag VLAN 3 tag sent it to the network, and notice on the PC, I actually see the message and a reply from the router. Now, the router has interfaces in all VLANs, so it actually sends the traffic back into the network, and you can see it's tagged as VLAN two, but it did reply back to the PC, which is interesting. So the PC is seeing the reply from the router. I'm basically messing around with the network. I've got this PC in VLAN 1, the Kali virtual machine. I've got this PC in VLAN 2, and I am hopping from VLAN 1 into VLAN 2. Now, how do you mitigate this? The first thing you need to do is go onto your switches, so switch 1 and switch 2, and change the native VLAN. So if I look at switch 1 and scroll down, this switch was badly configured in that gigabit 1/0/10 wasn't configured with a separate native VLAN. If I look at the other switch, switch 2, show run interface gigabit 1/0/10. It's configured as a trunk port, and that's negotiated with the other side, but I didn't specify the native VLAN. So I should say switchport trunk native VLAN, and let's use VLAN triple nine. So I'll copy that to the other switch interface, gigabit 1/0/10, paste that in. So on switch 1, show run interface gigabit 1/0/10. That's our configuration. On switch 2, show run interface gigabit 1/0/10. That's our configuration. Show interface trunk. Did they form a trunk? And the answer is yes, they did. On switch 2, we've got gigabit 1/0/10 trunking in VLAN nine. Now, this interface 1/0/9 is actually the connection to the routers, so show CDP neighbors, you can see that switch 1 is connected on gigabit 1/0/10, and now I've got the router connected to 1/0/9. But the important part is this connection between the two switches. You should use a separate VLAN to the interfaces used on your PCs, so don't have VLAN 1 here and VLAN 1 here. Okay, so once we've done that, let's see what happens when we run exactly the same script again. We try to send traffic into the network the same as before. In this example, it's VLAN 1, VLAN 3, VLAN 3 that's tagged. What happens on the link between the two switches? What you'll notice now is it keeps the three tags. That traffic is not sent to the Windows 11 computer. What's interesting, however, is the router still replies, so the routers replying with VLAN 2 in this example. So the router replies, but that's because it's got IP addresses in every VLAN, and I'm using VLAN 1 as the native VLAN to the router. The PC, however, doesn't receive that traffic. We have successfully mitigated that PC from talking to another VLAN. So the moral of the story is make sure that the interfaces that connect to your hosts or your PCs is not using the same VLAN as the native VLAN on your trunks. Change your native VLANs on your trunks to something else. Let's make another change just to see what happens here. On the router, I have configured the native VLAN as VLAN 1, so let's change that. So interface gigabit 0/0/1, encapsulation.one, triple nine native will make that to the native VLAN, so show run. I'll fault the fault gig. This interface now has triple nine as the native VLAN. That means we need to change it on our switch connected to the router, so gigabit 1/0/9, and the command we want to use is switchport trunk native VLAN triple nine, so show CDP neighbor. We see the router twice at the moment, show interface trunk. We should see that trunking on both those interfaces is triple nine, which it is. Let's go back to our Kali virtual machine, and send traffic into the network. Before I do that, I'll restart the capture on the MacBook, so send that into the network. Notice now we don't get a response. The router is not replying now, because the native VLAN has been changed to a VLAN that's not being used elsewhere in the network. Tag of one, two, and three is sent into the network. Neither the router, nor the Windows computer replies to that, because we've changed the native VLAN. I'll send the traffic into the network again. There's the ping from Kali to the router, pretending to be the Windows 11 computer. Windows 11 computer doesn't see that traffic. The router's not replying to that traffic. Okay so the moral of the story is make sure that you set your trunk ports to use a native VLAN not used by your access ports, so the port's connected to the PCs. You should put your PCs into other VLANs, not into VLAN 1. Avoid using VLAN 1 for connections to your access ports. Make sure that as an example, the interface where the Kali virtual machine is, is in a separate VLAN, not in VLAN 1. So at the moment, as an example, show interface, gigabit 1/0/1 switchport, that's VLAN 1. Let's set it to something else, so interface gigabit 1/0/1, switchport access VLAN, and I'll just set it to three as an example, well, actually let's make it two so it's in a separate VLAN to the Windows computer, which is currently in VLAN 3. If we try and run our script again, nothing is received by the PC in VLAN 3, and nothing is received on the trunk port, because a separate VLAN number is used than the one that's received. So just so that it's not confusing, I'm going to show you what hop one to three looks like. I'll copy hop one to two to hop one to three. PC's in VLAN 3 at the moment, so nano hop one to three. This is the script that we've been using. We've been sending VLAN 1, and then double tagging VLAN 3. That's no longer gonna work, because we've changed the VLAN from VLAN 1 to VLAN 2. So again, show interface gigabit 1/0/1 switchport. That port is now in VLAN two, not VLAN one. So when I try and send that into the network, I'm sending VLAN 1 and then VLAN 3 twice. That doesn't get accepted by the switch. Notice nothing on the link between the two switches, because the traffic is blocked, however, if I know what I'm doing, I could simply edit that. And let's set this to VLAN 2, the VLAN that I'm in, run that again, and what you'll notice is traffic is received on the link between the two switches, but it doesn't go to the Windows 11 computer, because of the tags being stripped. Okay, this is actually interesting. This is not what I saw before. I saw all the tags preserved. Let's run that again, and see if we can circumvent this. So I'm sending VLAN to VLAN 3. VLAN 3 in my test before, that didn't work. This is what I saw before, VLAN 2, VLAN 3, VLAN 3, for some reason, the previous one stripped VLAN 2, but this is the behavior that I've seen. It preserves all the VLANs, so on the port, that's not a native VLAN. It actually preserves all the VLANs. Doesn't matter how you stack it, VLAN hopping is gonna fail. So if I remove the one tag, and just set it as a double tag, both those tags are preserved, and the PC doesn't receive the traffic. Now, I've shown you in a previous video, which I'll link below, how you can stack multiple packet types, and we could do something similar here, so you could try things, and see if you can break the network. So I'll stack a whole bunch of VLAN 3, and send that into the network. On my MacBook, the link between the two switches, I'm seeing all those tags VLAN 2, 3, 3, 3, 3, but it doesn't get through. I've stopped the Kali virtual machine from breaking into other VLANs by not using the native VLAN, making sure that the native VLAN on my trunk ports is set to a VLAN that's not used in the network. Okay, that was a very long video. Hopefully, you enjoyed it. I am trying to give you a lot of technical detail with Python and Scapy, and show you how to hack networks, and then also show you how to mitigate this kind of nonsense in networks. If you enjoy these types of videos, please like this video, consider subscribing to my YouTube channel, and clicking on the bell to get notifications. I'm David Bombal, and I wanna wish you all the very best. (upbeat music)",
    "transcript_keywords": [
        "VLAN",
        "native VLAN",
        "Kali virtual machine",
        "VLANs",
        "Kali virtual",
        "Kali",
        "VLAN hopping",
        "separate VLAN",
        "Windows",
        "network",
        "show",
        "interface",
        "switch",
        "router",
        "gigabit",
        "sending VLAN",
        "traffic",
        "ICMP",
        "trunk native VLAN",
        "Python"
    ],
    "transcript_entity_values": [
        "eight weeks",
        "first",
        "ten",
        "zeros",
        "three",
        "Python",
        "one to",
        "NetSim",
        "1/0/9",
        "switch2",
        "Cisco",
        "two",
        "four",
        "CCI",
        "VLAN 2",
        "10.1.2.254",
        "Scapy",
        "CCNA",
        "Wireshark",
        "1/0/3",
        "0/0/1",
        "1/0/3",
        "1/0/10",
        "zero",
        "2",
        "1",
        "nine",
        "one to two",
        "YouTube",
        "1/0/1",
        "Boson",
        "ICMP",
        "IP",
        "Boson ExSim",
        "VLAN",
        "Python",
        "Kali",
        "MacBook",
        "Mac",
        "hopnotag",
        "10.1.2.2",
        "one",
        "VLAN 1",
        "the Boson Bombal",
        "P Y",
        "3",
        "Windows 11",
        "11",
        "CCNA",
        "Y. Notice",
        "the period of",
        "VLAN 1",
        "a third",
        "Bryan",
        "Wireshark",
        "Windows",
        "Interface",
        "switch1",
        "1",
        "David Bombal",
        "8 weeks",
        "Boson Software",
        "CDP"
    ],
    "transcript_entity_types": [
        "DATE",
        "ORDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "NORP",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORG",
        "PERSON",
        "FAC",
        "PERSON",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "LAW",
        "LAW",
        "ORG",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "PERSON",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "CARDINAL",
        "PERSON",
        "DATE",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.0870215967297554,
        0.09353655576705933,
        -0.06886301189661026,
        0.009050557389855385,
        0.031255077570676804,
        -0.042922116816043854,
        0.03597414493560791,
        -0.03847956657409668,
        -0.08723811060190201,
        0.024492312222719193,
        0.047702208161354065,
        0.021986905485391617,
        -0.006876830011606216,
        -0.01224430464208126,
        0.02311168611049652,
        0.04343448951840401,
        -0.0007627736777067184,
        0.0218920037150383,
        -0.0040001291781663895,
        -0.09750614315271378,
        0.02180568501353264,
        0.0052697923965752125,
        0.06121958792209625,
        -0.01260328944772482,
        -0.027671698480844498,
        0.0201454758644104,
        0.047915007919073105,
        0.020818447694182396,
        -0.03730250895023346,
        -0.02035248838365078,
        0.0018444713205099106,
        0.0852915421128273,
        -0.0776587501168251,
        0.03342440724372864,
        0.04764941707253456,
        -0.034856151789426804,
        -0.04756975546479225,
        0.07259999960660934,
        -0.01007620245218277,
        -0.009452376514673233,
        0.04511529207229614,
        -0.0326465368270874,
        -0.05275163799524307,
        -0.0490405336022377,
        -0.07550743222236633,
        -0.04757598787546158,
        -0.03779502585530281,
        0.0863373875617981,
        -0.026289692148566246,
        0.008291839621961117,
        -0.03763215243816376,
        0.06406524777412415,
        0.013507621362805367,
        -0.00255604088306427,
        0.05507902055978775,
        -0.02805277146399021,
        -0.05287421867251396,
        0.08185309171676636,
        0.07978855073451996,
        -0.05471087992191315,
        -0.02562916837632656,
        0.01902340166270733,
        -0.0647033154964447,
        0.02288820780813694,
        -0.01688840426504612,
        -0.008671239018440247,
        -0.046535320580005646,
        0.06270786374807358,
        -0.023190457373857498,
        0.02180766500532627,
        0.02761710062623024,
        -0.017678357660770416,
        0.016358859837055206,
        0.050573185086250305,
        0.020160458981990814,
        0.038629915565252304,
        0.04736589267849922,
        -0.016918985173106194,
        -0.0006068607908673584,
        -0.05926138535141945,
        -0.011036570183932781,
        -0.05724524334073067,
        -0.09160721302032471,
        0.03643951937556267,
        -0.018824608996510506,
        0.052343226969242096,
        -0.0809788629412651,
        0.044950421899557114,
        0.07710809260606766,
        -0.03928130120038986,
        -0.0006575278821401298,
        0.006100813392549753,
        -0.050924256443977356,
        -0.013599365949630737,
        0.06298374384641647,
        0.010909668169915676,
        0.07057278603315353,
        -0.036013659089803696,
        -0.01767921820282936,
        0.07386810332536697,
        0.023567503318190575,
        -0.06885816901922226,
        -0.010492364875972271,
        -0.016084877774119377,
        0.05602381005883217,
        0.00626080296933651,
        0.12610112130641937,
        -0.027147572487592697,
        -0.012627615593373775,
        0.03489737585186958,
        -0.0258608590811491,
        0.08061380684375763,
        0.028309833258390427,
        -0.12063544988632202,
        0.021663831546902657,
        0.10605223476886749,
        -0.0019111394649371505,
        0.12963756918907166,
        0.05368756130337715,
        -0.033737123012542725,
        -0.0009732358157634735,
        0.010382024571299553,
        -0.021924035623669624,
        0.017499107867479324,
        0.01654450222849846,
        0.010676180012524128,
        0.03197222575545311,
        1.1447170434502799e-32,
        0.04723304882645607,
        -0.03858724609017372,
        -0.07318024337291718,
        0.001589106977917254,
        0.0651438906788826,
        -0.025295322760939598,
        0.04843171685934067,
        0.0037268511950969696,
        -0.02959871105849743,
        0.03600773960351944,
        -0.07964775711297989,
        -0.08557009696960449,
        -0.00871764961630106,
        -0.017070023342967033,
        0.022249117493629456,
        0.0019461323972791433,
        0.005872397217899561,
        -0.058666523545980453,
        -0.006164941005408764,
        0.034343261271715164,
        0.09131608158349991,
        -0.12390828132629395,
        0.0027751633897423744,
        -0.048296406865119934,
        -0.028373686596751213,
        0.058972086757421494,
        -0.07927283644676208,
        0.002902270294725895,
        0.046548180282115936,
        0.05586796998977661,
        -0.06215269863605499,
        0.09033046662807465,
        -0.04767880588769913,
        -0.004222798626869917,
        -0.017127374187111855,
        0.02287481538951397,
        -0.024970244616270065,
        -0.038469716906547546,
        -0.036883968859910965,
        -0.05278085172176361,
        -0.087090864777565,
        -0.013469500467181206,
        -0.06105346232652664,
        -0.06546914577484131,
        0.020364759489893913,
        -0.09952029585838318,
        -0.07283564656972885,
        0.07627654820680618,
        -5.252665505395271e-05,
        0.09509512782096863,
        0.005712705198675394,
        0.047979939728975296,
        0.048836592584848404,
        -0.06620237976312637,
        0.029925700277090073,
        0.0009764893911778927,
        0.041206903755664825,
        -0.024640638381242752,
        0.0777018815279007,
        0.10834316909313202,
        0.06978637725114822,
        0.019929200410842896,
        -0.03894538804888725,
        0.013339001685380936,
        0.0323881097137928,
        -0.006566755473613739,
        -0.060816291719675064,
        0.06539776921272278,
        0.017330704256892204,
        -0.003857441246509552,
        -0.03293352946639061,
        0.04906763136386871,
        -0.03289524465799332,
        0.014595470391213894,
        0.01229865476489067,
        -0.05072775483131409,
        0.04369096830487251,
        0.05390237644314766,
        0.04289849102497101,
        -0.02771119400858879,
        0.10176116228103638,
        -0.024755770340561867,
        0.062423497438430786,
        -0.05530157685279846,
        0.004741584416478872,
        -0.022467320784926414,
        -0.005399896297603846,
        -0.07826457172632217,
        -0.07129061222076416,
        0.06681057065725327,
        -0.004355177283287048,
        -0.020735112950205803,
        0.07040005922317505,
        0.004404416773468256,
        0.005504467058926821,
        -1.1664160814192839e-32,
        0.05114729702472687,
        0.05822722986340523,
        -0.00390964699909091,
        -0.005486822221428156,
        -0.046809446066617966,
        -0.05197889730334282,
        0.057219769805669785,
        -0.030522964894771576,
        0.01561813522130251,
        -0.01516158040612936,
        -0.06089390441775322,
        -0.005830033682286739,
        -0.03920123726129532,
        -0.037084244191646576,
        0.07970163971185684,
        -0.02490215376019478,
        0.02983246184885502,
        0.021436402574181557,
        -0.0014037757646292448,
        0.014997541904449463,
        -0.02394888922572136,
        0.0981755182147026,
        -0.055385176092386246,
        -0.07447829842567444,
        -0.01967020519077778,
        -0.049584563821554184,
        0.039309579879045486,
        0.11450400948524475,
        0.0005458685336634517,
        -0.010262013413012028,
        0.01369424443691969,
        0.07564739882946014,
        -0.032920461148023605,
        0.08715379983186722,
        0.11784999817609787,
        0.01814577542245388,
        0.09685215353965759,
        0.08595050126314163,
        -0.002696339739486575,
        -0.06564666330814362,
        0.05193573981523514,
        -0.006195954047143459,
        -0.10318070650100708,
        0.020162316039204597,
        0.013618730008602142,
        0.04731494188308716,
        0.05966426804661751,
        0.05951204150915146,
        -0.17223821580410004,
        -0.05876126140356064,
        0.05587596818804741,
        -0.04674208536744118,
        -0.02464548498392105,
        0.031074076890945435,
        0.02683502808213234,
        0.04064851626753807,
        0.07262616604566574,
        -0.027163611724972725,
        0.05180802941322327,
        -0.031181056052446365,
        -0.0027589923702180386,
        -0.09589404612779617,
        -0.04070696607232094,
        -0.0175306536257267,
        0.05252717435359955,
        -0.06219867616891861,
        -0.07744719833135605,
        -0.006714601069688797,
        0.034028392285108566,
        -0.07343966513872147,
        -0.01844136230647564,
        -0.08647583425045013,
        0.0010368628427386284,
        -0.045102495700120926,
        -0.06929732859134674,
        0.0017654448747634888,
        -0.01253876555711031,
        0.00497887097299099,
        -0.02240988053381443,
        0.007590913213789463,
        -0.06442070007324219,
        -0.03877229616045952,
        -0.05708443745970726,
        -0.01959734782576561,
        -0.04897066205739975,
        0.08233852684497833,
        -0.008621486835181713,
        0.015423686243593693,
        0.023047856986522675,
        0.013018901459872723,
        -0.0769510343670845,
        -0.02617070823907852,
        0.08154091238975525,
        0.1135631799697876,
        0.03908867388963699,
        -6.159360310675766e-08,
        -0.04130372032523155,
        0.07010617107152939,
        -0.09634359925985336,
        0.054875925183296204,
        -0.0038907963316887617,
        0.08890783041715622,
        0.0187405776232481,
        -0.06628008931875229,
        0.03629468381404877,
        -0.06665320694446564,
        -0.004287750460207462,
        0.057845719158649445,
        0.029343750327825546,
        0.04548876732587814,
        -0.053069401532411575,
        0.0012839268893003464,
        -0.04784903675317764,
        -0.07399718463420868,
        -0.016464117914438248,
        0.013094460591673851,
        -0.0008903834386728704,
        -0.025165347382426262,
        -0.018950624391436577,
        0.04091696813702583,
        -0.10286732017993927,
        0.08245156705379486,
        -0.007559932302683592,
        0.013754731975495815,
        -0.03157885745167732,
        -0.03856540843844414,
        -0.06385266035795212,
        -0.013947872444987297,
        -0.014317600056529045,
        0.0637686476111412,
        -0.029573312029242516,
        0.06336604058742523,
        -0.008580811321735382,
        0.007022830657660961,
        0.05344899371266365,
        -0.04578031972050667,
        -0.11508746445178986,
        -0.11056559532880783,
        -0.06107906997203827,
        -0.016674412414431572,
        -0.07379534095525742,
        -0.0180995911359787,
        -0.035701677203178406,
        0.04510540887713432,
        -0.010447894223034382,
        -0.041575849056243896,
        -0.00789693184196949,
        -0.00638920022174716,
        -0.0032793774735182524,
        -0.053912851959466934,
        0.049317147582769394,
        -0.01950918510556221,
        0.03883716091513634,
        -0.11046259850263596,
        0.006221437826752663,
        0.009663213044404984,
        0.011911863461136818,
        0.05556069687008858,
        -0.05271854251623154,
        -0.058437347412109375
    ]
}