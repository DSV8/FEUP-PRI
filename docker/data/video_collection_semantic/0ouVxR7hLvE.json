{
    "id": "0ouVxR7hLvE",
    "title": "crunch",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-02-07T16:00:09Z",
    "video_url": "https://www.youtube.com/watch?v=0ouVxR7hLvE",
    "category": "Science & Technology",
    "tags": [
        "crunch",
        "wordlist",
        "wordlist for brute force",
        "wordlist generator",
        "wordlist generator kali",
        "crunch wordlist",
        "crunch wordlist generator",
        "crunch wordlist windows",
        "crunch wordlist generator for windows 10",
        "wordlist kali linux",
        "wordlist generator windows",
        "wordlist kali linux download",
        "wordlist for wpa wpa2",
        "crunch kali",
        "crunch kali linux tutorial",
        "crunch wordlist tutorial",
        "wordlist.txt download",
        "kali linux",
        "wordlists",
        "password cracking",
        "kali",
        "kali linux wordlist",
        "kali linux tools"
    ],
    "views": 107613,
    "likes": 3432,
    "comments_count": 283,
    "description": "It's easy to create hacking wordlists using crunch. But is it the best way?  Menu: Use prebuilt wordlists in Kali Linux: 0:00 Kali Wordlists: 0:22 rockyou.txt wordlist: 0:35 nmap wordlist: 0:57 Crunch options: 1:08 crunch wordlist example 1 (1 to 5 characters): 1:38 crunch wordlist example 2 (8 characters): 2:48 man crunch: 4:34 crunch wordlist example 3 (1 to 5 with lower/upper/numbers): 5:02 GPU bruteforce: 5:30 crunch wordlist example 4 (8 upper/lower/numbers): 7:20 crunch wordlist example 5 (special characters): 8:11 Why you should use rockyou: 9:20  ================ Previous videos: ================ Cracking WiFi WPA2 Handshake:  It's too easy to own a WiFi network:  WPA2 GPU hacking video:  Kali Installation:  Wordlists (rockyou):   ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    ================ Support me: ================ Buy my CCNA course and support me: DavidBombal.com: CCNA ($10):   Udemy CCNA Course:  GNS3 CCNA Course: CCNA ($10):   ====================== Special Offers: ====================== Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  crunch wordlist generator wordlist rockyou wordlists password cracking password hacking kali kali linux kali linux 2020 kali linux 2020.4 comptia ceh oscp hack hacker hacking ethical hacking ine  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #kalilinux #crunch #wordlist",
    "description_links": [
        "https://youtu.be/WfYxrLaqlN8",
        "https://youtu.be/Ezy1KTNF6dw",
        "https://youtu.be/J8A8rKFZW-M",
        "https://youtu.be/VAMP8DqSDjg",
        "https://youtu.be/rgWcguAg-XA",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/ccnafor10dollars",
        "https://bit.ly/gns3ccna10"
    ],
    "transcript": "- In previous videos which I've linked below, I showed you how to use pre-built wordlists within Kali to crack WPA passwords. In this video, I'm gonna show you how you can create your own wordlists. We're gonna use an application called crunch which makes it very, very easy to create various types of wordlists. So if you wanna create your own wordlist this is a very easy way to do it. Okay so in Kali if I type wordlists, I can see pre-built wordlists. Various wordlists are found in usr/share/wordlists. So as an example, the rockyou wordlist is a very popular wordlist. This wordlist contains millions of passwords. Great wordlist to use if you wanna try and crack passwords. These are stolen passwords so these are actual passwords that people have used. Millions of passwords in this wordlist. Various other wordlists are available. We've got an nmap wordlist, we've got metasploit, fasttrack, various other wordlists, but let's create our own wordlists. So to do that, I'm gonna use the command crunch and if you use -h, that'll give you help. You can also use --help, gives you similar kind of information. So, once again crunch --help. The command to use if fairly simple it's crunch minimum password length, maximum password length and then we've got a whole bunch of options. Okay so let's go to my home directory and let's use the command crunch. Minimum password length will be one, maximum will be five, I'm gonna output the data to mywordlist1. Press Enter. It will generate this amount of data, 70 meg in size, it's not a gig or a terabyte, or petabyte, so many lines have been generated. So I can use the command less mywordlist to read that wordlist. You can see password length is a because we started with one and then it goes to two characters. If I continue down, this will then go to three characters and then we'll continue until I get to four and then five characters. So it's created and I'll just go to the end of the file. Notice it's created passwords from going through the top, a, going to the end, five Zs, or five Z's if you prefer. And that's once again, because we specified password length of one to five. I didn't specify the characters to use, so it only used lowercase in this example. So I'll clear the screen and let's run crunch again. In this example, I'll specify 8 to 8, so minimum length is eight, maximum length is eight. These are the characters to use and the password, so digits zero, one, two, up to nine and I'm gonna output this to wordlist2. Because I previously typed this command, I can press the right key in Kali to autocomplete the command. But once again, command is crunch, minimum, maximum length, characters to use and I'm gonna output the information to this file. This will now contain 100 million lines. It's 858 meg in size. So as you can see, this is a much bigger file. We can see that it's generated 78% and now 100% of the output. If I type less mywordlist2, because that's the wordlist that I created, you can see that it starts with eight zeros, then seven zeros and a one, seven zeros and a two and just goes through all the options. So paging down, you can see it then goes to 1000s and this will just continue through all the variations, so all the variations from eight zeros and go right to the end, eight nines. And if I go backwards, you can see all those combinations. So clear the screen. LS shows me that I've got my two wordlists which I could use. So once again, if I look at my first wordlist, that's what it contains. And then if I look at my second wordlist, that's what it contains. It's very simple to create wordlists using crunch. Now, there are a lot of options with crunch. You can use the command man crunch to see the documentation or manual with regards to crunch. So once again, command is crunch, minimum length, maximum length, character string and any options that you wanna use. Minimum length is the minimum number of characters in a password, maximum is maximum, that's fairly simple, then you can specify the character strings to use. So let's do another example of that. So as an example, crunch minimum character is one, maximum character is five. We've got lowercase, we've got uppercase and then we've got digits and I'm gonna output that to the file called mywordlist3. In this example, it's gonna be 5313 meg, that's the number of lines that it's gonna generate, that's the number of bytes. You can see it's 9% completed. Now, in a separate video, which I've linked here and below, I showed you how to use a GPU to do a brute-force attack using hashcat against WPA passwords. So you could pre-generate passwords using crunch, or you could just go and use a brute-force attack using a GPU. I'll show you some additional brute-force attacks, using a very powerful GPU in another computer in a separate video, but this shows you how easy it is to create basic wordlists using crunch. You can see at this point, it's at 69%. In this example, I'm using Kali within a virtual machine on my Mac, so I'm not getting access to the GPU resources like our Word using hashcat, directly on Windows as an example. So it's actually gonna be slower here than using a very powerful GPU with hashcat. But there you go, it's created the wordlist, there it is, mywordlist3.txt, that's the one that we specified, I'll clear the screen. Less mywordlist3.txt. You can see it starts with lowercase single characters, then it goes to uppercase single characters, then lowercase double characters and then it's mixing them upper and lower, mixing with numbers, so we've got all the various combinations from one character and if I go to the end, to five characters. So as an example here, four nines, uppercase K, here we've got five nines. Scrolling up, you can see it's going through all those different combinations. Now, I don't wanna bore you, but hopefully, you get the idea. Crunch has created all the different combinations in this file, going right to the beginning and there we go. So once again, that was from one to five. And this is just a matter of time, so if I wanna go through all those combinations, but I want it from eight to eight, this is gonna be a much bigger file. Notice this is a petabyte of data. So I'm gonna stop that now because that's just gonna take a long, long time to generate that file. You need to be careful with the sizes of files that you create, so I'll stop that at this point. Notice it ended at this point in the file, so it got to that point and then stopped. That's gonna take a long time to create and it's gonna create a huge amount of data. This is why the pre-built wordlists in Kali are sometimes better, because they are actual passwords, rather than just trying to try every single combination to crack a password. This is brute force, it's clunky, it's just trying every single combination with a hope that you'll find the correct password. Now crunch does once again have a lot of options. I suggest that you look at the manual, because you can use special types of characters such as these to indicate a lowercase or uppercase or insert numbers, or insert symbols. So as an example here, I've got four different character types. I'm gonna push that into wordlist4. Notice I've specified these special characters, so if I type less mywordlist5, I see all the different types of characters that can be used. So this includes uppercase, lowercase digits, as well as special characters in the password. So if I once again, look at the Man file, this is lowercase, uppercase, numbers and symbols. Crunch has a lot of examples in the documentation, so again, have a look at the documentation for more options. I don't wanna make this video too long and show you all kinds of weird options, just note that crunch gives you a whole bunch of options to create passwords. But again, you may prefer using a list like rockyou, which are actual passwords that people have used in the real world, rather than just creating a dictionary or wordlist of all kinds of passwords and using a brute-force attack. Okay, I hope you enjoyed this video. If you did, please consider subscribing to my YouTube channel. Please like this video and click on the bell to get notifications. I'm David Bombal, wanna wish you all the very best. (upbeat music)",
    "transcript_keywords": [
        "crunch",
        "wordlists",
        "wordlist",
        "characters",
        "passwords",
        "password",
        "length",
        "password length",
        "create",
        "command",
        "file",
        "minimum",
        "Kali",
        "character",
        "maximum",
        "options",
        "GPU",
        "prebuilt wordlists",
        "lowercase",
        "minimum password length"
    ],
    "transcript_entity_values": [
        "first",
        "eight zeros",
        "metasploit",
        "three",
        "one to",
        "WPA",
        "Millions",
        "five nines",
        "Zs",
        "contains millions",
        "five",
        "two",
        "four",
        "mywordlist3",
        "858 meg",
        "eight",
        "zero",
        "100 million",
        "second",
        "69%",
        "eight to eight",
        "YouTube",
        "100%",
        "8",
        "Kali",
        "Mac",
        "fasttrack",
        "one",
        "70 meg",
        "eight nines",
        "GPU",
        "1000s",
        "5313 meg",
        "9%",
        "four nines",
        "mywordlist2",
        "up to nine",
        "78%",
        "Windows",
        "seven zeros",
        "seven zeros",
        "David Bombal",
        "mywordlist5",
        "wordlist2"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "QUANTITY",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "QUANTITY",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "PERCENT",
        "CARDINAL",
        "ORG",
        "PERCENT",
        "CARDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "CARDINAL",
        "QUANTITY",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "DATE",
        "PERCENT",
        "QUANTITY",
        "GPE",
        "CARDINAL",
        "PERCENT",
        "PRODUCT",
        "QUANTITY",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.035850465297698975,
        -0.044977590441703796,
        -0.05058562010526657,
        -0.008399002254009247,
        -0.08010002970695496,
        0.01113919261842966,
        0.011138545349240303,
        0.049184735864400864,
        -0.04125536233186722,
        -0.023897962644696236,
        0.07646388560533524,
        0.019005177542567253,
        0.035620737820863724,
        0.026851339265704155,
        0.015040995553135872,
        -0.019562050700187683,
        0.0022952400613576174,
        0.029379134997725487,
        -0.06097153201699257,
        -0.10990579426288605,
        0.07473494112491608,
        0.02328391931951046,
        0.04123756289482117,
        -0.022881049662828445,
        0.04387476295232773,
        0.025330176576972008,
        -0.04992641508579254,
        0.0531788170337677,
        0.04867478460073471,
        -0.026388036087155342,
        0.06859354674816132,
        0.06604812294244766,
        0.1315964162349701,
        0.03900099918246269,
        0.0003100103931501508,
        -0.05066137760877609,
        -0.07315588742494583,
        0.03724341467022896,
        -0.043313026428222656,
        -0.02866002358496189,
        -0.0863351970911026,
        -0.07346503436565399,
        -0.028721118345856667,
        0.0799604207277298,
        0.053531140089035034,
        -0.07134770601987839,
        -0.08402702212333679,
        0.03921929746866226,
        0.06913387775421143,
        -0.009662519209086895,
        -0.05659788101911545,
        -0.017831401899456978,
        -0.016780640929937363,
        0.032419074326753616,
        -0.01433138269931078,
        -0.005271906964480877,
        -0.001675120322033763,
        -0.015539574436843395,
        0.03955836221575737,
        -0.06193016469478607,
        0.04391145333647728,
        -0.021779347211122513,
        -0.040261536836624146,
        -0.001977583859115839,
        0.04021048545837402,
        0.012077173218131065,
        0.04548472911119461,
        0.003032464301213622,
        0.008452176116406918,
        0.07354184240102768,
        -0.029777569696307182,
        0.01937692239880562,
        0.007670159451663494,
        -0.04831690341234207,
        -0.009318198077380657,
        0.05106751248240471,
        -0.01480667944997549,
        -0.07750194519758224,
        -0.04521429166197777,
        0.00746262539178133,
        0.05768125504255295,
        -0.010168849490582943,
        0.09326475113630295,
        -7.575308700324968e-05,
        0.004443502984941006,
        0.02169784903526306,
        0.014778144657611847,
        -0.011190330609679222,
        -0.009355084039270878,
        -0.09222444891929626,
        -0.03920627757906914,
        -0.09554874897003174,
        0.04989589750766754,
        -0.05923870578408241,
        -0.024568235501646996,
        0.014690362848341465,
        -0.013855363242328167,
        -0.010207664221525192,
        -0.12337000668048859,
        0.01808140240609646,
        -0.061570100486278534,
        -0.01804254576563835,
        0.022117946296930313,
        -0.037728916853666306,
        -0.028461294248700142,
        -0.024392709136009216,
        0.08576229959726334,
        0.03624124079942703,
        -0.05074719339609146,
        0.007300709839910269,
        -0.011589573696255684,
        0.0401901975274086,
        -0.03322531282901764,
        -0.07319726794958115,
        0.019361378625035286,
        0.038920484483242035,
        -0.033584870398044586,
        0.04102455824613571,
        -0.00884659681469202,
        0.09941095113754272,
        -0.04061790555715561,
        0.005525148473680019,
        0.02043096534907818,
        -0.013590984977781773,
        -0.05930780991911888,
        -0.011035231873393059,
        0.0024389533791691065,
        7.54824669065728e-33,
        0.0808277577161789,
        0.0004076545010320842,
        -0.08726675063371658,
        -0.018348805606365204,
        0.027209606021642685,
        -0.12478660047054291,
        -0.06172109395265579,
        -0.06070633605122566,
        -0.06895942240953445,
        0.07220668345689774,
        0.0463215634226799,
        -0.07215544581413269,
        -0.008833411149680614,
        0.03263384476304054,
        0.08621259778738022,
        -0.06778737157583237,
        -0.0016117069171741605,
        -0.010126463137567043,
        -0.06992822140455246,
        0.011016684584319592,
        -0.022184381261467934,
        -0.03048095479607582,
        0.0008236590656451881,
        -0.0696222111582756,
        0.05612986907362938,
        0.0751066729426384,
        -0.03999044746160507,
        -0.02713845670223236,
        0.03132079914212227,
        0.00740740355104208,
        -0.042771175503730774,
        -0.08844929188489914,
        -0.015167200937867165,
        -0.042602818459272385,
        -0.030721860006451607,
        -0.008136640302836895,
        -0.05936659127473831,
        -0.039330221712589264,
        0.01801174506545067,
        -0.09121298044919968,
        -0.022218311205506325,
        -0.014796435832977295,
        0.05229606479406357,
        -0.06304550915956497,
        0.1116526871919632,
        -0.012956836260855198,
        0.012708586640655994,
        0.0916694849729538,
        0.03270411491394043,
        0.024836257100105286,
        0.024840492755174637,
        0.07032185792922974,
        -0.05487959459424019,
        -0.023592509329319,
        0.013594607822597027,
        -0.02685922384262085,
        0.10235968977212906,
        0.0030609883833676577,
        0.06970933824777603,
        0.15552036464214325,
        -0.0676799863576889,
        0.04150417819619179,
        0.02141856774687767,
        0.07443705946207047,
        -0.028785957023501396,
        -0.026052461937069893,
        -0.011760625056922436,
        0.019372014328837395,
        -0.02274634875357151,
        0.07025262713432312,
        -0.07505369186401367,
        -0.021262092515826225,
        -0.0054609766229987144,
        0.04123043641448021,
        -0.02368326298892498,
        -0.024751966819167137,
        0.11998581141233444,
        -0.05765647441148758,
        -0.07689407467842102,
        -0.06582408398389816,
        0.0729847252368927,
        -0.08171437680721283,
        0.023492859676480293,
        0.0025215575005859137,
        -0.06242528557777405,
        -0.009371294640004635,
        0.007365992292761803,
        -0.13512417674064636,
        0.05552138760685921,
        0.009418213739991188,
        -0.13571129739284515,
        0.06575772911310196,
        0.006027552764862776,
        -0.05132735148072243,
        -0.03094857558608055,
        -8.340533556531348e-33,
        0.09163986891508102,
        0.004793161526322365,
        0.04926619678735733,
        0.04155120998620987,
        0.010427421890199184,
        0.017122136428952217,
        0.07431203126907349,
        0.024754643440246582,
        0.020073816180229187,
        -0.04710149019956589,
        -0.057255666702985764,
        0.08225340396165848,
        -0.02104055881500244,
        -0.12481257319450378,
        0.10088340938091278,
        0.0036702288780361414,
        -0.030189303681254387,
        0.007152911741286516,
        0.048970483243465424,
        0.0499534085392952,
        -0.042699623852968216,
        0.037893522530794144,
        -0.005690103396773338,
        -0.023440856486558914,
        0.024706363677978516,
        -0.00932852178812027,
        0.03041437268257141,
        0.0393802709877491,
        0.06956686079502106,
        0.03489607200026512,
        0.003207059809938073,
        0.006940982770174742,
        -0.048286598175764084,
        0.044552482664585114,
        -0.022287994623184204,
        -0.01771848276257515,
        0.015808165073394775,
        0.10217327624559402,
        -0.045849282294511795,
        0.05882713571190834,
        0.06828667223453522,
        0.07473830133676529,
        -0.0829271599650383,
        -0.022089648991823196,
        -0.05188213661313057,
        -0.01707499288022518,
        -0.029175058007240295,
        -0.0008582264417782426,
        -0.0838046446442604,
        -0.06420537084341049,
        0.12214820832014084,
        0.046599749475717545,
        -0.0545220747590065,
        0.006207136437296867,
        -0.009686650708317757,
        0.06143694370985031,
        -6.003416274324991e-05,
        -0.10574007779359818,
        0.010430937632918358,
        -0.03551263362169266,
        -0.024757450446486473,
        -0.04543280228972435,
        0.03479906916618347,
        -0.017344124615192413,
        0.09708353877067566,
        -0.03473307564854622,
        -0.07075133919715881,
        0.016166137531399727,
        -0.14785312116146088,
        -0.004571308847516775,
        -0.02523217909038067,
        -0.05797906219959259,
        0.011647309176623821,
        0.009123645722866058,
        0.021384716033935547,
        0.03131172060966492,
        -0.07482773810625076,
        -0.005822333972901106,
        0.0018281470984220505,
        -0.033772122114896774,
        0.002373817376792431,
        0.04672568663954735,
        -0.004420280456542969,
        -0.0011158505221828818,
        0.04876326769590378,
        0.06704966723918915,
        -0.0518261082470417,
        0.07903140783309937,
        0.07413457334041595,
        -0.009293027222156525,
        -0.014389226213097572,
        -0.011950819753110409,
        0.1255149394273758,
        0.04438650980591774,
        0.021460646763443947,
        -4.829873390121975e-08,
        -0.040348686277866364,
        -0.03507738560438156,
        -0.009170383214950562,
        0.046220049262046814,
        -0.017214443534612656,
        -0.03086892142891884,
        -0.029884308576583862,
        -0.08528801053762436,
        0.03387954458594322,
        0.003115160157904029,
        0.02159864455461502,
        -0.0022231056354939938,
        -0.12409576773643494,
        0.04143638536334038,
        0.002509244717657566,
        0.05221277102828026,
        0.02742629498243332,
        0.022794218733906746,
        -0.03329646587371826,
        -0.00125183816999197,
        -0.005527454894036055,
        0.037394892424345016,
        0.04559491574764252,
        -0.007846647873520851,
        -0.03268130123615265,
        0.034712109714746475,
        -0.018449025228619576,
        0.060523636639118195,
        -0.018475158140063286,
        -0.013722991570830345,
        0.03896923363208771,
        -0.012391127645969391,
        -0.04559413716197014,
        -0.027692319825291634,
        0.021647607907652855,
        0.022365204989910126,
        -0.06316390633583069,
        0.021107399836182594,
        0.0020212784875184298,
        0.11059005558490753,
        -0.06208377704024315,
        -0.10098044574260712,
        -0.008213666267693043,
        0.0073788464069366455,
        -0.09435667097568512,
        -0.04172360897064209,
        -0.0494251623749733,
        -0.04585672914981842,
        0.06639295816421509,
        -0.040465280413627625,
        -0.04184189438819885,
        -0.028684038668870926,
        0.05054609850049019,
        -0.06621041148900986,
        0.0480215921998024,
        0.04545991122722626,
        0.0827108696103096,
        -0.020311355590820312,
        0.02840997464954853,
        -0.021044209599494934,
        0.04532063007354736,
        -0.01648939587175846,
        0.004347523208707571,
        0.023521795868873596
    ]
}