{
    "id": "Dp2mFo3YSDY",
    "title": "DHCP Explained - Step by Step Server Configuration",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2019-09-18T22:06:08Z",
    "video_url": "https://www.youtube.com/watch?v=Dp2mFo3YSDY",
    "category": "Science & Technology",
    "tags": [
        "DHCP",
        "dynamic host configuration protocol",
        "what is dhcp",
        "dhcp explained",
        "how dhcp works",
        "static ip",
        "dynamic ip",
        "dhcp server",
        "static IP vs dynamic IP",
        "ip address",
        "dhcp protocol",
        "how does DHCP work",
        "dhcp server configuration",
        "IP address assignment",
        "Dynamic Host Configuration Protocol (Internet Protocol)",
        "IP Address (Protocol)",
        "wireshark",
        "wireshark dhcp",
        "dhcp wireshark",
        "configuration",
        "computer network",
        "network",
        "tcp/ip",
        "cisco",
        "ccna",
        "ccent",
        "tutorial",
        "dhcp tutorial",
        "dhcp basics",
        "dora",
        "icnd1"
    ],
    "views": 135941,
    "likes": 4250,
    "comments_count": 211,
    "description": "What is DHCP? How does it actually work? This video shows you practical examples of DHCP in real time and includes Wireshark captures showing you actual DHCP messages. Download Wireshark capture here:   Menu:  Introduction and basic terms: 00:00 iPhone DHCP Client explanation: 03:46 Lab and DHCP server configuration: 07:54 Cool Wireshark Flow Graph: 15:15 Wireshark deep dive: 17:23 Cisco router output: 22:25 Linux client and Wireshark coolness: 23:07  This video also discusses the difference between static and dynamic IP addresses.  DHCP messages: DHCPDiscover - Sent by client. Discover / find DHCP servers on the network. DHCPOffer - Sent by server. Offering an IP address and other parameters for the client to use. DHCPRequest - Sent by client. The client requests the address that was offered by the server. DHCPACK - Sent by Server to acknowledge client. Contains information like IP address, lease time, default-gateway and other information.  You need to learn DHCP for your ccna and ccent exams. It is also important to understand the actual messages used and thus I am using wireshark in this video. You can also download the wireshark capture and check it out yourself.  #dhcp #dhcpserver #dhcpexplained",
    "description_links": [
        "http://bit.ly/2mk4FS9"
    ],
    "transcript": "- You're probably using it right now. 'Cause we both deserve it all (upbeat music) - Don't deny it, you're probably using DHCP if you're watching this video. Whether it's on a device like this, notice, using DHCP to connect to the internet, or, perhaps, on a computer. Modern networks rely very heavily on DHCP. For example, if you go to Starbucks, or a coffee shop, or you go to the airport, it's very unlikely that you're gonna be walking around saying, \"What's the IP address that I should be using? \"Which IP address should I configure my device as?\" Very unlikely that you're gonna be doing that, and the reason for that is IP addresses are, more often than not, dynamically allocated, especially to client devices. So, here's an example of some client devices. Client devices could be PCs, could be Internet of Things devices, such as these, could be phones. Servers typically have IP addresses configured statically, because you need to connect to that server. So, as an example, if you go to facebook.com, or some other website, that domain name needs to be resolved to an IP address, and you need to connect to a specific IP address, or range of IP addresses, and they are statically defined, but more often than not, client devices are automatically configured, or dynamically configured, because it's too much work to manually configure these devices. I mean, when was the last time you manually configured your phone with an IP address? Most of us probably have never done that, or only in exceptional circumstances. With Internet of Things devices, such as these lights, or devices like cameras, it doesn't make sense to manually configure IP addresses. So as an example, here's a IP camera. I'm probably not going to configure this device statically. I'm gonna let it dynamically be configured. Now, DHCP, or Dynamic Host Configuration Protocol, is, once again, a fundamental building block in networks today. Okay, but, how does DHCP actually work? Do you know the messages sent between what's called a client and a server? Do you know how they work? In this video, I'm gonna show you practically how to configure and use DHCP. I've got a network here. I'm gonna demonstrate DHCP using a router, which I'll configure as a DHCP server. This is a Cisco router, but the same principles apply whether you're configuring a home router, or some other kind of device as your DHCP server. I've got a Windows PC and I've got a Linux PC that are going to get IP addresses from the router, and I'm gonna run Wireshark in this topology to show you how DHCP actually works. So rather than just talking about it, I'm gonna demonstrate it. Here's an example of someone just talking about what DHCP is, rather than practically demonstrating it. Alexa, what is DHCP? - [Alexa] In computer networking, the Dynamic Host Configuration Protocol, DHCP, the network application protocol used by devices, DHCP clients, to obtain configuration information for operation in an internet protocol network. - Okay, not sure if you understood any of that, but there you go, there's a so-called definition of DHCP. It's gonna make a lot more sense, however, if I show you this practically. Now, she did mention some terms there, so let's look at some of those on this iPhone. If I go to Settings, go to my Wi-Fi networks, so, in this example, it's ABC1top 5GHz. Go and look at the information. I can see firstly that the address has been allocated automatically rather than manually. BootP is the predecessor to DHCP, we won't worry about that. Two main ways to configure IP addresses: dynamically, or automatically, if you prefer that term, or statically, where you manually configure the IP address on the device. Notice we have an IP address. In this example, it's 192.168.1.11. We have a subnet mask, 255.255.255.0. We have a router, 192.168.1.249. That is also known as the default gateway, or the way to get to the internet. So, for a lot of people, they don't understand necessarily the technical terms here, they just want Wi-Fi, and Wi-Fi equates to internet, so that's obviously not the same thing. Wi-Fi is the way that we connect to a network using wireless technologies. The internet is a totally different concept, and I won't discuss that right now, but basically, the router, or the default gateway, is the way that you get, typically, to the internet. Notice we've got this option, Renew Lease. DHCP IP addresses are typically only allocated for a period of time. When you configure the DHCP server, you as the administrator decide how long a lease is, so you can say it'll last for three days, or for a week. You typically don't wanna allocate IP addresses permanently, even though you can in certain cases, because devices change. As an example, when you go to Starbucks, you're not gonna be there permanently. You're only going there for a period of time. A DHCP pool, or scope, typically only consists of a range of IP addresses, so there may be only 250 IP addresses in the pool, or in the scope. As people come and go, we wanna reuse those IP addresses, so we only wanna allocate them for a period of time. At Starbucks, or other places, they may reduce that interval to a much smaller period of time, so that addresses are reused more often. Notice this option, Configure DNS, Automatic or Manual. In this example, the DNS server is the local router, 192.168.1.249. That could be configured as 8.8.8.8. That's a Google DNS server, quite a famous one. That, once again, is configured by the DHCP administrator. So that's an example of DHCP on a client, a phone. We have many devices that use DHCP. IoT, or Internet of Things devices such as these, typically don't get configured statically, or manually. It's too much work to configure it manually. You're gonna wanna do it dynamically. This device, as an example, gives me a indication of the air quality in this room, so my iPhone, using IP, is connecting to the information from that device so that I can see how good the air quality is in the room. I can talk to an Alexa. Alexa, start CCNA Quiz. - [Alexa] Welcome to David Bombal's CCNA Quiz. I will ask you 24 questions. Try to get as many right as you can. Just say the number of the answer. Let's begin, question one. Which of the following describes RSTP-- - Alexa, stop. - [Alexa] Okay, let's play again soon. - So, that device has been allocated an IP address by DHCP. It's connecting through Wi-Fi, no physical ethernet cables here, to the internet, so going to the default gateway. Okay, so, without further ado, I'm gonna show you practically how to configure DHCP now, and show you how it actually works. Okay, so in this topology, I've turned off the Windows PC and the Linux host. I wanna configure the router first, and then once I've configured the router, I wanna run Wireshark on this link so that you can see the DHCP messages, so you can see the entire thing happening. Okay, so here's the router. Show IP DHCP, let's look at some options, binding. At the moment, there are no bindings. We haven't configured an address pool yet. Now, an address pool, in Cisco terminology, is very similar to a scope on, say, Windows, or another platform. I'm basically gonna create a pool of addresses, and I'm gonna give it a name. Let's call it pc. This could be any name. I'm gonna specify the network that is gonna be allocated, and the subnet mask. Now, don't worry if you aren't used to Cisco commands. Similar kind of principles apply no matter what device you're working on. Here, I've got a home router. This is a BT home router. I'm based in the UK, so British Telecom is my service provider. This is the device that connects me to the internet. If I go to Advanced Settings here on this device, make this a bit bigger, and go to Home Network, and go to IP Addresses, what you'll see here is this is the IP address of the router, so that would typically be my default gateway if I connected to the wireless network, or Wi-Fi network, on this device. There's the subnet mask. The DHCP server is enabled, and I've manually configured a range of addresses, and I've specified the lease time. So, a lease time, in this case, is three days. Typically, a host will try and renew its IP address halfway through the lease time, so that's an example on a home router, in this example, a British Telecom router. On Cisco routers, you're typically gonna use the CLI, or Command Line Interface, to configure the devices. So the network is, once again, this network. That's similar in concept to specifying a range of addresses. The way Cisco do it is you specify the network, and then you specify what's called an exclusion range of addresses that you wanna exclude. So typically, you're gonna wanna exclude the router's IP address from the pool, and perhaps other network devices that you've got. Okay, so default gateway, or default router, will be the local router. That's the IP address of the local router. I'll specify the DNS server as the local router as well. Now, I know that IP address, because I've configured this router to use this IP address, so I've basically configured, show run shows me the configuration of the Cisco router, I've configured the Cisco router with a DHCP pool. This is the network. This is the default router, or default gateway. This is the DNS server. Very similar to this being the IP address of my BT router. This is the subnet mask that's being used, and these are the addresses that are being allocated. Now, I haven't specified a lease time. I could do that, so ip dhcp pool pc. Many options are available here. Many commands can be configured. So, I could specify lease, and then specify number of days if I wanted to, or specify infinite. Be careful with infinite, because you could use up your pool of addresses. So I'll just specify a lease time of one day. I could specify a domain name, as an example, of, let's say, that, so davidbombal.com. If I go back one step, I could say IP DHCP excluded addresses, and let's exclude the router from the address pool. So, on the router, show ip dhcp pool. I've configured a pool of addresses. The pool's name's pc. Total addresses in the pool is this. This is the addresses in the address pool. No addresses have been leased at the moment. Show run once again shows us that IP addresses in this range will be allocated, but this one won't. Default router, DNS server, domain name. Okay, so let's start Wireshark on the link between the switch and the router. So, Wireshark is running. I can see various protocols here. You can see, as an example, CDP, Spanning-tree, a bunch of protocols, but I'm gonna filter for DHCP, because I only wanna see DHCP messages. Okay, what I'll do is start the Windows host first. So this Windows PC is actually running as a virtual machine in my topology. I'm running on a Mac here. GNS3 is a way for me to virtualize networks, and I'm virtualizing a network of a Cisco router, switch, a Linux host, and a Windows PC, so. PC has booted up, I'll log in. I'm gonna start a CMD prompt, and I'll make this bigger so that it's easier to read. So, ipconfig, and I'm thinking Linux there, it should be ipconfig, not ifconfig, so ipconfig. Notice I can see domain name. I can see IP address that was allocated. I can see subnet mask, default gateway. Now, the reason this PC used that address, and not 10.1.1.1, is because that address was allocated previously, and it's just trying to get to the same IP address. So, IP address has been allocated. I can use the command ipconfig /all to see more information, so scrolling up again, there's the command. This is the host name. Now, notice it's called MSEdgeWin10. That becomes important when we look at the Wireshark capture. There's the domain name. We can see the MAC address of the PC, so this is the MAC address burnt into the network interface card. I could see that, as an example, by going to Control Panel, Network and Internet, View network status, look at my network interface card. Notice if I click on Details, I'll be able to see the physical IP address, and IP address information in a similar way to using ipconfig. I can also see when I go to Properties that I'm using DHCP. Obtain IP address automatically, obtain DNS server information automatically, and using the ipconfig /all command, I can see IP address, subnet mask, notice, default gateway, and DNS server information, shown in the output here. Okay, so let's have a look at Wireshark. Now, before getting into the nitty-gritty, I wanna show you a really nice option in Wireshark. Notice here we have messages: Discover, Offer, Request, and Acknowledgment. In Wireshark, you can go to the Statistics menu, and click Flow Graph, and you can see messages being sent on the network. I'm gonna limit this to the filter, which at the moment is DHCP, and notice what you can see in the output here. Just make this a bit smaller, so I can zoom in. Notice we've got DHCP Discover, with this Transaction ID ending in c3. Here's an Offer, here's a Request, and here's an Acknowledgement. This shows graphically the process of how the client, notice there's no IP address here, sends a broadcast message, 255.255.255.255, trying to discover DHCP servers on the network. So, it's saying, \"Who's out there? I need an IP address.\" The DHCP server offers an IP address to the client. There may be multiple DHCP servers on the network, so the DHCP servers that receive these Discover messages will offer IP addresses to the client. The client will then request one of those IP addresses. In this example, it's only DHCP server, so it's only going to request the IP address from that DHCP server, but if there were multiple DHCP servers in the network, it would request an IP address from one of them, typically the first one to offer an IP address, and then the DHCP server will acknowledge that Request. This is a great option in Wireshark. You can graphically see, Discover, Offer, Request, and Acknowledgement. Again, Discover, try and discover DHCP servers on the network. DHCP server will offer an IP address to the client. The client will then accept that Offer, and request the IP address from that DHCP server, and the DHCP server will acknowledge that Request. Now, notice in the Wireshark capture, I've got a DHCP Discover, DHCP Offer, DHCP Request, and DHCP Acknowledgement. Notice the IP address on DHCP Discover. There's no IP address. It's sending a message to a broadcast address, so the PC is trying to discover a DHCP server on the internet. Notice the MAC address ends in 80:b0. Going back to my PC, notice MAC address ends in 80-B0, so this message is being sent from that Windows PC. We can also see that by looking at the client identifier. Notice MAC address there. Message Type is DHCP Discover. The PC is trying to discover a DHCP server, and as mentioned, notice it's requesting to use this IP address. The reason for that is because, once again, the PC used that IP address previously, and it's trying to get the same IP address. If a new device boots up, it won't do that, and I'll show you that in a moment, but because this MSEdgeWin10 PC previously was allocated this IP address, it's simply requesting the same IP address again. Notice you can see under Host Name the name of this Windows PC. Once again, there it is on the Windows host. So, in Windows, and in Wireshark. So, first step is Discover. PC is trying to discover the DHCP server. Now, this IP address, once again, 10.1.1.254, is the DHCP server. In our example, this is the router. Router is configured with this IP address, so the router replies back to a broadcast address, because the client doesn't have an IP address yet. It can't send a message to an IP address, 'cause the client doesn't have an IP address, so it broadcasts, saying, \"Your IP address is this.\" So, your client IP address is this. Your client MAC address, remember, ending in 80-b0. That is the MAC address of this Windows PC. So that MAC address will get this IP address. Option 53, this is an Offer from this DHCP server. I'll just jump back for a moment. Notice the protocol used here is UDP, from source port 68, to destination port 67, but here, we're using DHCP, which uses UDP. In this example, source port is 67, going to destination port 68, and again, the server with this identifier is allocating an IP address to the client with a lease time of one day. It needs to renew after 12 days. As I said previously, typically after half the lease period, clients will be told to renew. Notice subnet mask, default gateway, option three here, default gateway or router, DNS server, option six, and option 15 is domain name, so that's the Offer from the DHCP server to the client. The client then requests that IP address. The reason why is we could have multiple servers offering IP addresses to the client, and it needs to request one of them. So you could have two DHCP servers offering IP addresses to the client. It needs to choose one. Typically it chooses the one that replied first. So going up, notice it's UDP, source port 68 going to 67. MAC address is the client. It's a Request, so we're requesting that this MAC address use this IP address, the IP address that was offered by the server. So, back again, notice the server offered that IP address to the client, and that's the IP address that the client is requesting to use. So requested IP address is this from this DHCP server. This is my host name. Because this is Windows, it asks for NetBIOS, old protocol. Asks for other information, such as Private Classless Static Route, et cetera, and then lastly, the server acknowledges that Request. So, UDP, source port 67 to port 68. The server's saying, \"I acknowledge this as your IP address, \"this is your MAC address\". It's an Acknowledgement, and then similar kind of information is displayed once again. So, notice we have four messages here: Discover, Offer, Request, and Acknowledgement. Okay, so that was Wireshark. Let's have a look on the router. So, again, this is the MAC address of our client. This is the IP address that it got from the DHCP server. On the router now, show IP DHCP bindings. Notice this MAC address was allocated this IP address automatically. Show IP DHCP server statistics. We can see, as an example, that we have one address pool. There's been five Discover messages were received. There's been 12 DHCP Requests, and three Offers, and five Acknowledgements, so a bunch of stuff has been going on in the background here. Most important command here is typically binding, so that you can see which client received which IP address. Okay, so I have got a Linux host here. I'll start this Linux host up. Go back into Wireshark, and what you'll see is we've got a bunch of DHCP messages now. What I can do very nicely in Wireshark is do a filter so that I'll only see one host. Notice this MAC address here ends in c9:55. That is the MAC address of this Linux client. We can see, as an example, that this Linux client has obtained this IP address. ifconfig, 'cause this is Linux, shows me IP address, shows me the MAC address ending in c9:55. In Wireshark, I could actually add this as a filter. So add this as and Selected, so this changes the Wireshark filter to only show me that PC rather than the Windows PC, so I'm only seeing the messages from that Linux client. So notice here's a Discover message, sent out a broadcast. This is the Offer from the DHCP server. Here's the Request, and here's an Acknowledgement. So if we look at the Discover message, notice it doesn't have an IP address. It's sending out a broadcast with its MAC address, trying to discover DHCP server. It wants various parameters including NTP. The DHCP server replies back with an Offer, offering this IP address, 10.1.1.1 to this client. DHCP server is this. Again, lease time, renewal time, other information is displayed. So, on the client, I can see that it got given this IP address by the DHCP server. It requested that IP address, so it requested this IP address, and the DHCP server acknowledged that IP address. Okay, so that was quite a detailed video. I hope after this video you really understand how DHCP works. Now, if you've enjoyed this video, please like it, and please subscribe to my YouTube channel. I'm David Bombal, I wanna wish you all the very best. 'Cause we both deserve it all (upbeat music)",
    "transcript_keywords": [
        "DHCP",
        "DHCP server",
        "address",
        "MAC address",
        "discover DHCP servers",
        "DHCP Discover",
        "server",
        "discover DHCP",
        "router",
        "DHCP server offers",
        "Mac",
        "client",
        "Discover",
        "addresses",
        "Wireshark",
        "DHCP pool",
        "DNS server",
        "notice",
        "network",
        "Request"
    ],
    "transcript_entity_values": [
        "Linux",
        "three",
        "80",
        "Alexa",
        "Cisco",
        "GNS3",
        "two",
        "four",
        "one day",
        "5GHz",
        "CCNA Quiz",
        "YouTube",
        "Google",
        "BT",
        "Renew Lease",
        "Private Classless Static Route",
        "Alexa",
        "Linux",
        "NTP",
        "24",
        "David Bombal",
        "Wi-Fi",
        "Offer",
        "CDP",
        "a week",
        "NetBIOS",
        "12",
        "the ipconfig /all command",
        "today",
        "12 days",
        "Windows",
        "one",
        "the Dynamic Host Configuration Protocol",
        "Acknowledgement",
        "firstly",
        "67",
        "DNS",
        "Windows",
        "68",
        "first",
        "UK",
        "Starbucks",
        "IoT",
        "15",
        "days",
        "Wi-Fi",
        "Flow Graph",
        "Router",
        "Windows",
        "iPhone",
        "IP",
        "Linux",
        "192.168.1.249",
        "MAC",
        "Alexa",
        "192.168.1.11",
        "DHCP",
        "Command Line Interface",
        "View",
        "six",
        "Dynamic Host Configuration Protocol",
        "half",
        "five",
        "Wireshark",
        "Control Panel",
        "facebook.com",
        "Home Network",
        "three days",
        "Automatic",
        "Mac",
        "CCNA Quiz",
        "Cisco",
        "British Telecom",
        "Two",
        "Statistics",
        "David Bombal's",
        "BootP",
        "Wireshark",
        "CLI",
        "RSTP-- - Alexa",
        "UDP"
    ],
    "transcript_entity_types": [
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "FAC",
        "GPE",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "ORG",
        "DATE",
        "DATE",
        "WORK_OF_ART",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "ORDINAL",
        "GPE",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "LOC",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "NORP",
        "PERSON",
        "WORK_OF_ART",
        "GPE",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.08283846080303192,
        0.028179898858070374,
        0.04950409382581711,
        0.053315140306949615,
        -0.08485468477010727,
        -0.016063177958130836,
        -0.04275243356823921,
        0.036798153072595596,
        -0.004943100269883871,
        -0.014474206604063511,
        0.04119648411870003,
        0.031148264184594154,
        -0.008145797066390514,
        0.019438374787569046,
        -0.08516266196966171,
        -0.0044046309776604176,
        0.026231935247778893,
        -0.04796396195888519,
        0.0809502899646759,
        -0.032296277582645416,
        0.04123610258102417,
        0.021135805174708366,
        -0.020309722051024437,
        -0.022068778052926064,
        0.009756788611412048,
        0.06693373620510101,
        0.03860233724117279,
        0.007633018773049116,
        -0.007429777644574642,
        0.044669587165117264,
        0.003907148726284504,
        0.015761589631438255,
        0.0280301496386528,
        0.04453254118561745,
        -0.05117263272404671,
        -0.01917506381869316,
        0.06820674240589142,
        0.04526767507195473,
        0.07031402736902237,
        0.0022125113755464554,
        -0.002120068296790123,
        -0.046779897063970566,
        0.04602266848087311,
        0.0500650480389595,
        0.015255366452038288,
        0.11289828270673752,
        -0.020969945937395096,
        0.009881151840090752,
        -0.0364791601896286,
        -0.043206050992012024,
        -0.03576655313372612,
        0.010224912315607071,
        -0.04056110605597496,
        0.06672905385494232,
        0.03477524593472481,
        0.006457526236772537,
        -0.03355240449309349,
        0.020749982446432114,
        0.07022859156131744,
        0.004705608822405338,
        -0.06676679104566574,
        0.034293659031391144,
        -0.007673211395740509,
        0.07837820798158646,
        0.051410235464572906,
        -0.06310693174600601,
        -0.051022738218307495,
        0.052855879068374634,
        0.011473462916910648,
        -0.07859814912080765,
        -0.05196505784988403,
        0.05245848745107651,
        0.020858034491539,
        -0.022631419822573662,
        -0.04016780108213425,
        0.03534975275397301,
        0.043403107672929764,
        0.017663363367319107,
        -0.056021254509687424,
        -0.05909043550491333,
        0.07900481671094894,
        0.05408925563097,
        0.006002757232636213,
        0.04791735112667084,
        0.025194665417075157,
        -0.04904273897409439,
        -0.05313093587756157,
        0.025821706280112267,
        -0.06463350355625153,
        -0.012492306530475616,
        0.00995344202965498,
        -0.01810910739004612,
        -0.1884651482105255,
        0.00540968356654048,
        0.05645248293876648,
        0.05364718288183212,
        0.03693544864654541,
        -0.02445262484252453,
        -0.07825580984354019,
        0.007718238513916731,
        0.03479180857539177,
        -0.01530166994780302,
        -0.010779622942209244,
        -0.05106421560049057,
        0.03129250556230545,
        -0.023367732763290405,
        0.034661680459976196,
        -0.07102583348751068,
        0.08346561342477798,
        0.09654207527637482,
        -0.10467550903558731,
        0.030898217111825943,
        -0.05452398955821991,
        -0.060917340219020844,
        0.0411820188164711,
        0.024133605882525444,
        -0.03746335208415985,
        0.11653449386358261,
        0.005340321455150843,
        -0.04335370659828186,
        -0.05662544444203377,
        -0.006750650703907013,
        0.004771609324961901,
        -0.02407386340200901,
        -0.022160282358527184,
        -0.02897723950445652,
        0.061877310276031494,
        4.548491269192361e-33,
        0.008832375518977642,
        -0.01590268686413765,
        -0.06941286474466324,
        0.10260117053985596,
        -0.0008506021113134921,
        -0.09635592252016068,
        0.07991430908441544,
        0.02368174120783806,
        -0.04669556766748428,
        0.02667178027331829,
        0.05878447741270065,
        -0.01921774633228779,
        0.034409716725349426,
        0.07236632704734802,
        -0.07878914475440979,
        0.014571555890142918,
        -0.004386203363537788,
        0.007239190395921469,
        0.10917108505964279,
        0.021748971194028854,
        -0.037874750792980194,
        -0.025443769991397858,
        0.06725124269723892,
        0.009162374772131443,
        0.059928521513938904,
        0.028134115040302277,
        0.017587963491678238,
        -0.002666634973138571,
        -0.0839737057685852,
        0.0022313017398118973,
        -0.01734483614563942,
        -0.03957809507846832,
        -0.043072521686553955,
        -0.01618337444961071,
        -0.013775654137134552,
        -0.01914302445948124,
        -0.09643178433179855,
        -0.09279512614011765,
        -0.03360966220498085,
        -0.06815401464700699,
        -0.051115959882736206,
        -0.10885480046272278,
        -0.04337272793054581,
        -0.050529129803180695,
        -0.03554834797978401,
        0.03648962080478668,
        -0.08212703466415405,
        -0.004945485852658749,
        0.0018399892142042518,
        0.0905272513628006,
        0.027317438274621964,
        -0.020608950406312943,
        -0.06135595217347145,
        -0.0398523211479187,
        -0.024996263906359673,
        0.008743831887841225,
        0.0034739908296614885,
        -0.014833768829703331,
        -0.04533585160970688,
        0.08214098960161209,
        -0.04515405744314194,
        0.009765910916030407,
        -0.10588130354881287,
        -0.05139579623937607,
        -0.01678081601858139,
        -0.018783755600452423,
        -0.07683110982179642,
        -0.035528406500816345,
        0.047343261539936066,
        0.049368489533662796,
        0.040293190628290176,
        0.02406357042491436,
        -0.003855705028399825,
        -0.04608435556292534,
        -0.0055437637493014336,
        0.051764290779829025,
        -0.08074134588241577,
        -0.00037545934901572764,
        -0.030184369534254074,
        -0.00012323683768045157,
        -0.06627000123262405,
        0.023991981521248817,
        0.03336493670940399,
        0.042129214853048325,
        -0.009843549691140652,
        0.004738209303468466,
        0.049877263605594635,
        0.020479662343859673,
        0.03360101208090782,
        0.009512178599834442,
        0.029656536877155304,
        -0.06850536167621613,
        -0.047359589487314224,
        0.062093187123537064,
        0.06967370957136154,
        -6.09676536804512e-33,
        0.017286309972405434,
        0.03487353399395943,
        -0.11454126983880997,
        -0.053187936544418335,
        -0.032484378665685654,
        -0.046906787902116776,
        -0.05373296141624451,
        0.0621194951236248,
        0.02042287401854992,
        -0.03572046011686325,
        -0.03677639365196228,
        -0.016823379322886467,
        -0.09314648807048798,
        -0.013020752929151058,
        -0.009339564479887486,
        -0.013010523281991482,
        -0.17514361441135406,
        -0.047614309936761856,
        0.028239818289875984,
        0.05343807116150856,
        0.08048887550830841,
        0.12338989973068237,
        -0.03315054252743721,
        -0.06503700464963913,
        0.006569583900272846,
        0.03368145972490311,
        0.013028482906520367,
        0.0714540034532547,
        0.0698479413986206,
        -0.005246371496468782,
        -0.004247482866048813,
        0.041421812027692795,
        -0.08189518749713898,
        0.004126160405576229,
        0.036584895104169846,
        0.081059031188488,
        -0.02240731008350849,
        0.039810553193092346,
        0.06687650829553604,
        0.037785790860652924,
        0.04932975769042969,
        0.06996185332536697,
        -0.04724718630313873,
        -0.025779906660318375,
        0.04956614226102829,
        0.04997045174241066,
        0.046497996896505356,
        0.032099250704050064,
        -0.013920428231358528,
        -0.038176584988832474,
        0.03020380809903145,
        -0.010135580785572529,
        -0.08954398334026337,
        0.08202780038118362,
        0.007022642996162176,
        0.09633686393499374,
        -0.046016037464141846,
        0.0069554634392261505,
        0.011146430857479572,
        -0.03504430875182152,
        -0.0018860552227124572,
        -0.05913926288485527,
        -0.0011908619198948145,
        0.051025401800870895,
        -0.09266924858093262,
        -0.01446519885212183,
        -0.0337425097823143,
        -0.12751007080078125,
        0.01897023431956768,
        0.06378829479217529,
        -0.07777559757232666,
        -0.04200958460569382,
        0.023447861894965172,
        -0.03050476871430874,
        0.02091330848634243,
        -0.04327508434653282,
        0.05004162713885307,
        -0.019041938707232475,
        -0.09039616584777832,
        -0.0028774216771125793,
        -0.02738279476761818,
        0.018926063552498817,
        -0.06516896933317184,
        0.08968666195869446,
        -0.011522765271365643,
        -0.022171970456838608,
        0.05385323613882065,
        0.07716108113527298,
        -0.011752298101782799,
        0.023483168333768845,
        -0.009372703731060028,
        0.042879655957221985,
        0.005881925579160452,
        0.0792107954621315,
        -0.045167986303567886,
        -4.837961142811764e-08,
        -0.11766483634710312,
        0.03723219409584999,
        -0.02392427623271942,
        0.013052663765847683,
        -0.001273543108254671,
        0.03944304585456848,
        0.04384150356054306,
        0.036364372819662094,
        0.04184766858816147,
        -0.003355029271915555,
        0.04191179573535919,
        -0.018781261518597603,
        -0.04129510000348091,
        -0.008709130808711052,
        -0.0252677109092474,
        0.08944747596979141,
        -0.028766417875885963,
        -0.05055360496044159,
        0.027643851935863495,
        -0.007053077686578035,
        0.016943730413913727,
        -0.05323648080229759,
        -0.029670456424355507,
        0.06554124504327774,
        -0.03363151103258133,
        0.026117783039808273,
        0.06258506327867508,
        0.04301181435585022,
        -0.09719117730855942,
        0.030322080478072166,
        0.013347512111067772,
        0.05495041608810425,
        0.03656771406531334,
        -0.05659197270870209,
        0.0664239153265953,
        0.11096138507127762,
        -0.0452151857316494,
        -0.12425319850444794,
        0.06497586518526077,
        0.026454061269760132,
        -0.10444609075784683,
        0.013209811411798,
        -0.02434995211660862,
        0.016119513660669327,
        0.07091556489467621,
        -0.06218976899981499,
        -0.045697737485170364,
        -0.011238553561270237,
        -0.014796596951782703,
        0.01605207473039627,
        -0.07757967710494995,
        -0.03413248434662819,
        -0.04912766441702843,
        -0.053412966430187225,
        0.034175969660282135,
        0.05786991864442825,
        0.006647634785622358,
        -0.06812379509210587,
        0.02004319801926613,
        0.051837123930454254,
        0.02370337024331093,
        0.11131998151540756,
        -0.0006006452604196966,
        -0.04641691595315933
    ]
}