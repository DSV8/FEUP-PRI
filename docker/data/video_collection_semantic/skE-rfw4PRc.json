{
    "id": "skE-rfw4PRc",
    "title": "Free CCNP 350-401 ENCOR Complete Course: 6.2 JSON",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-05-01T13:28:29Z",
    "video_url": "https://www.youtube.com/watch?v=skE-rfw4PRc",
    "category": "Science & Technology",
    "tags": [
        "ccnp",
        "encor",
        "350-401",
        "json",
        "ccna",
        "ccnp encor",
        "ccnp enterprise",
        "ccnp training",
        "new ccnp",
        "ccnp study",
        "network",
        "nexus",
        "cisco certifications",
        "cisco training",
        "cisco",
        "cisco certified network professional",
        "ccnp certification",
        "encor 350-401",
        "ccnp automation",
        "ccie",
        "ccie encor",
        "cisco ccnp exam",
        "ccie enterprise",
        "cisco certification 2020",
        "cisco ccnp",
        "ccnp routing",
        "cisco encor training",
        "cisco encor exam",
        "2020 ccnp",
        "ccnp review",
        "cisco ccna",
        "ccna study",
        "ccna training",
        "cisco encor test",
        "ine"
    ],
    "views": 54760,
    "likes": 1411,
    "comments_count": 240,
    "description": "This is a FREE complete CCNP 350-401 ENCOR Course. In this video we discuss JSON and why it's important for Network Automation. I'll discuss the theory and then demonstrate some practical examples using a Cisco Nexus device. In the next video I'll demonstrate how to use on-box Python and a local Python script to access JSON data on the Nexus.  I will be covering all the topics in the Cisco CCNP ENCOR exam. I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  Slides:    CCNP ENCOR playlist:   Menu: Overview: 0:00 Why do we care? 0:17 Basic example: 2:37 JSON Object 4:21 Cisco Nexus Example: 6:13 JSON on Cisco: 8:52 JSON Array: 10:49  ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  GNS3 Academy: CCNA ($10): bit.ly/gns3ccna10 Wireshark ($10): bit.ly/gns3wireshark  DavidBombal.com CCNA ($10):  Wireshark ($9): bit.ly/wireshark9  CCNP CCNP ENCOR CCNP 350-401 CCNP Enterprise ccnp training CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccnp #encor #json",
    "description_links": [
        "https://bit.ly/encorjson1",
        "https://bit.ly/freeccnp",
        "http://bit.ly/yt999ccna"
    ],
    "transcript": "- In this video, we're going to discuss JSON, or JavaScript Object Notation. This is something that you need to know for the exam. So make sure that you watch this video and that you understand JSON. (upbeat dance music)` Okay, so let's start with why. You've probably seen one of these before. Are you a human or robot? Now the reason we have captchas is because machines struggle with unformatted data. If the data isn't clear, machines will struggle to interpret the data. JSON is a way to format the data. It's also a way to send data from one machine to another. We, as humans, can interpret data quite easily, especially if it's slightly off. So as an example, if you type show version on a Cisco IOS device, so let's say classic IOS, the output will be different to a Cisco IOS XE device, which is different to a Cisco Nexus device. The output will vary slightly. Now that's not a problem for us as humans. We can make adjustments for the slight changes in the output of the data, but machines struggle with that. So we want data that is consistently formatted properly so that machines can communicate properly. As an example, if I SSH to a switch using Python, so I connect to the switch using Python and type show IP route or show version. If I'm not using a JSON format, so the output is not formatted in JSON format, or another format such as XML or YAML, it's difficult to write code that can interpret the data properly. Now Cisco, once again, have made things easier using pyATS. So if you use pyATS rather than, say Netmiko, to connect it directly to a device using a Python script, the output comes back in a format that's easy to interpret using a Python script. But if you're using pure Netmiko or pure Telnet and you're simply typing show version and you're trying to pass that output, it's very difficult to write good Python code to pass the output, number one, and secondly, to handle a situation when the output changes. So you upgrade the router, as an example, and the output formatting is different. Your Python code will struggle to interpret that. So, for machine to machine communication it makes a sense to use standard output, and it makes sense to have a format that's easy to interpret, especially for machines. So to help us with JSON formatting, let's start with a Tesla. Okay, I'm gonna ask you some questions about this Tesla. Well, first question is who's the manufacturer? That would be Tesla. What type of model is this? Model X. Notice how I've formatted this data. Manufacturer: Tesla. This is known as a key, and this is known as a value. So we've got a key value pair. What is the model? It's Model X. Color white. Fuel electric. Miles per gallon city 99. Miles per gallon highway 93. I've simply pulled this information off Google, hopefully it's correct. But don't get hung up about the data. Look at the format of the data. Again, we have what's called a key separated by a colon, and then we have a value. You need to understand JSON formatting. That's an example of JSON formatting. It actually looks like this. We have to use double inverted commas. So it would be something like firstname colon, then David, as an example. So JSON data is written as name value pairs. So going back here, I said key. It could be also referred to as name. So, name value pair. Another example is lastname. And a value. Name value pair consists of a field in double quotes followed by a colon, followed by a value. Make sure you understand that format. Now, for the exam there are two JSON data types that you need to know, objects and arrays. Let's start with an object. So, a JSON object would look something like this. Notice we've got curly braces. Data is surrounded by curly braces and it's an unordered collection of key value pairs. So here's our key. Firstname: David, lastname: Bombal. Notice separated by a comma. Make sure that you know the format. So, curly braces surrounds the data. We've got key value. The keys and values use double quotes not single quotes. Each key value pair is separated by a comma, except the last one. Trailing commas must not be used. Now it's going to be easier to look at it in this format, easier to read. Spaces are not important with JSON. So notice the curly braces First key first value. Second key second value, separated by a comma. Comma third key, third value. No comma. So if you put a comma here that would be a problem. Make sure, once again, that you recognize this format for the exam. So, just to summarize, a JSON object is an unordered collection of key value pairs. In other words, this is not ordered. It could be in any order, doesn't matter. Surrounded by curly braces, once again. Key and value pairs are separated by a colon, spaces don't matter. But make sure that the last one doesn't have a comma. Use double quotes not single quotes. That's all very good and well, me showing you the stuff with PowerPoint, but let me show you this practically. You'll be able to download this PowerPoint presentation so that you have access to the details. But I want to show you this practically because it's going to be a lot easier to demonstrate this on a live Cisco device rather than just showing you the stuff with PowerPoint. Now the great thing is that DevNet have a Nexus always on sandbox. You can simply SSH to the sandbox and you'll be able to try commands, which I'm going to show you right now. Now on a Mac I'm going to use this command, but on Windows you could use Putty, as an example, to connect. Okay, so I'm going to copy this. Open up a terminal. I'll make this big to make sure that it's clear. And I'm going to paste that command in. So basically I'm SSHing to port 8181, using this username and this is the DNS name of the router. I have to put my password in, which is admin_1234! or bang if you prefer. So, there's the password. There's the user name. This is the port. This is the protocol we need to use, and this is the domain name. Okay, it's complaining about my password, let's try that again. Okay, so I've successfully logged in to this Nexus box, hosted by Cisco DevNet. Cisco DevNet have made things so much easier because you can practice this stuff, you can try things using their free labs. Now on a Windows computer you could use Putty, and SSH to port 8181. So SSH. Hostname is sbx-nxos-mgmt.cisco.com. And I can click open. You have to accept the public key, so I'm going to say yes. Login as admin. Admin_1234! or bang. And there you go. I've logged in. So, show version. This command shows me that this is a Nexus device. We can see various information about the device. We can see it's a 9000v Chassis, as an example. So I'm going to jump back to my Mac and do this on my Mac. Show version on the Mac will show the same kind of information. Now we can use standard commands like show int vlan 100. And that shows us standard information like we would get on any other type of device. So we can see, as an example, DEMO PLEASE DON'T TOUCH IP address is this. But what we could do is we can send that to JSON. So, let's just use JSON, and we get to the JSON information like that, but it's not very easy to read. So let's use json-pretty. So json-pretty. There's our information. So show int vlan 100. We see the JSON formatting. Notice the curly braces. We've got information about this interface Vlan100. Important to note, key, value, separated by a colon then a comma, key, value again, comma at the end, double inverted commas. Very important. The last entry doesn't have a comma at the end. Data is contained within curly braces. So this data has these curly braces. TABLE_interface has these curly braces. And then we've got the all encompassing curly braces,. So that's an example, practically, of JSON formatting versus show interface vlan 100. Standard command. This is a format that we as humans would understand, but this is a format that a machine will understand much better. So just remember, we want to have standard formatting for machines. As an example, sh ip int brief here gives us a list of interfaces on the device. That's human readable format. But if we say json-pretty, this gives us the information in JSON formatting. Sh ip int brief | json-pretty. Notice there's a big difference here, we have the square brackets. So ROW_intf, square bracket, scrolling down. Now the link may be quite slow here. My internet connection to the DevNet site is quite slow, but notice here is the next square bracket. Here we've got data within curly braces. Again, notice no comma at the end here, but this has curly braces and a comma at the end. The data within here is key value comma. Now the reason why we have square brackets is because we are using what's called an array. In this slide I've kind of summarized it. Notice the curly braces. Here we've got square brackets. And inside here we've got an ordered list of values. The reason why we want this is because we've got multiple interfaces. So we've got interface Vlan100. And then here we've got interface Vlan200, and information about those interfaces. So rather than just showing information about one interface, so a single object, we've now got an array of interfaces that we're looking at. So an array in JSON is an ordered list of values. Uses square brackets. It can store all kinds of data. So, it could store things such as strings. A string is like a sentence, hello, or a word, hello. Whereas a number is something like 1 or 2 or 2.123. Values must be separated by commas, once again. So, notice once again that an object doesn't have those square brackets. This is the output for show version | json-pretty. Important here, comma. Comma. No comma. We've got the key value pair separated by a colon. Make sure that you know this formatting. I have said that enough times now I think. So here's an example, once again, of show interface Vlan100. Again you can download this PowerPoint slides so that you have all this information. I've given you a few examples of that. But again, it's much easier to see this practically. And I'm going to take this to the next level now by showing you how to run Python on this Nexus box and do stuff in Python, and then I'm going to show you how to access the box remotely using a Python script that I'm going to run on my local computer and then pull out similar JSON information. (upbeat dance music)",
    "transcript_keywords": [
        "JSON",
        "data",
        "JavaScript Object Notation",
        "JSON formatting",
        "key",
        "comma",
        "Python",
        "curly braces",
        "show",
        "format",
        "curly",
        "braces",
        "Object Notation",
        "output",
        "JSON data",
        "information",
        "Cisco",
        "JSON format",
        "Notice",
        "make"
    ],
    "transcript_entity_values": [
        "first",
        "Model X. Notice",
        "Netmiko",
        "Cisco Nexus",
        "JSON",
        "SSH",
        "XE",
        "Mac",
        "IOS",
        "Putty",
        "Cisco",
        "third",
        "secondly",
        "two",
        "gallon",
        "DevNet",
        "vlan 100",
        "Second",
        "2",
        "second",
        "JavaScript Object Notation",
        "Google",
        "David",
        "number one",
        "99",
        "IP",
        "Python",
        "Mac",
        "8181",
        "93",
        "one",
        "PowerPoint",
        "about one",
        "YAML",
        "JSON",
        "2.123",
        "Cisco DevNet",
        "Python",
        "Cisco",
        "XML",
        "First",
        "Nexus",
        "DNS",
        "Windows",
        "1",
        "Bombal",
        "admin_1234",
        "Tesla",
        "Admin_1234",
        "Cisco IOS"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "ORDINAL",
        "ORDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "ORDINAL",
        "CARDINAL",
        "ORDINAL",
        "PRODUCT",
        "ORG",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "GPE",
        "CARDINAL",
        "ORG",
        "WORK_OF_ART",
        "GPE",
        "ORG",
        "ORDINAL",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "NORP",
        "ORG",
        "PERSON",
        "ORG"
    ],
    "vector": [
        -0.08628994971513748,
        0.043837375938892365,
        -0.00798069592565298,
        -0.03613896667957306,
        -0.013544734567403793,
        -0.041709162294864655,
        -0.0014290635008364916,
        0.04683971405029297,
        -0.10272282361984253,
        -0.012840315699577332,
        0.05823677033185959,
        0.001751611242070794,
        -0.0485922247171402,
        0.018688110634684563,
        0.08114131540060043,
        -0.01920291967689991,
        0.050671081990003586,
        -0.03009645827114582,
        -0.03874521702528,
        -0.06966967135667801,
        0.0019017728045582771,
        -0.030120540410280228,
        0.035150062292814255,
        -0.013698476366698742,
        -0.11061035096645355,
        0.029804373160004616,
        0.06591633707284927,
        -0.003241069382056594,
        0.004426071420311928,
        0.005066430661827326,
        -0.06793990731239319,
        0.03364516422152519,
        0.04238724336028099,
        0.0637989193201065,
        0.0020689498633146286,
        -0.0298450980335474,
        -0.024906689301133156,
        -0.012875227257609367,
        -0.023716602474451065,
        -0.0455743670463562,
        0.02902768924832344,
        0.011810556054115295,
        -0.03613502159714699,
        0.004107694141566753,
        0.0077904826030135155,
        -0.12088888883590698,
        -0.0700615718960762,
        -0.059913598001003265,
        0.04244391247630119,
        -0.00810609757900238,
        -0.07990189641714096,
        0.057639170438051224,
        0.0027836381923407316,
        -0.036337029188871384,
        -0.015395904891192913,
        0.03753845393657684,
        -0.02747482992708683,
        -0.021909503266215324,
        0.03614374250173569,
        -0.014052973128855228,
        -0.010916727595031261,
        -0.06922464072704315,
        -0.03479443117976189,
        0.0416506826877594,
        0.030232297256588936,
        -0.02822539396584034,
        -0.01384888868778944,
        0.08492841571569443,
        0.011631056666374207,
        -0.025497838854789734,
        -0.018783921375870705,
        -0.004551272839307785,
        -0.01146763376891613,
        0.04688050225377083,
        0.04522699490189552,
        0.029578708112239838,
        0.033277444541454315,
        -0.09958001971244812,
        -0.06403309851884842,
        -0.02844279631972313,
        0.034948933869600296,
        -0.01643487624824047,
        -0.07012470811605453,
        -0.00019711331697180867,
        0.05758591368794441,
        0.028576044365763664,
        -0.003045034362003207,
        0.07418324798345566,
        -0.07087836414575577,
        -0.00924686435610056,
        0.023256920278072357,
        -0.03744075819849968,
        -0.061011120676994324,
        -0.002610299037769437,
        0.05425252020359039,
        0.06850706040859222,
        0.07467672973871231,
        -0.09813649207353592,
        -0.07891230285167694,
        0.06425436586141586,
        0.08808129280805588,
        -0.013048499822616577,
        0.014123632572591305,
        -0.020467499271035194,
        -0.03751065582036972,
        -0.012856334447860718,
        0.07191566377878189,
        0.005928371101617813,
        0.037428323179483414,
        0.02598271705210209,
        -0.06166773661971092,
        0.04969733953475952,
        -0.063910573720932,
        -0.08898197114467621,
        0.0023637281265109777,
        0.044082824140787125,
        0.01836831122636795,
        0.08995120227336884,
        0.07694113254547119,
        0.03044999949634075,
        0.022391119971871376,
        -0.03018740750849247,
        -0.0699126124382019,
        -0.016941815614700317,
        0.01472416054457426,
        -0.036100052297115326,
        0.03916091471910477,
        7.598540951141181e-33,
        -0.019077550619840622,
        -0.02195797488093376,
        -0.02536475844681263,
        0.03057125210762024,
        0.03687096759676933,
        -0.056685976684093475,
        0.08933372050523758,
        0.06536826491355896,
        -0.10811283439397812,
        -0.002667522756382823,
        0.017866048961877823,
        0.11169465631246567,
        -0.017516188323497772,
        0.06366384774446487,
        -0.08901073038578033,
        -0.11252368986606598,
        -0.07211082428693771,
        0.0006573486607521772,
        0.06540645658969879,
        0.03457992896437645,
        0.020219754427671432,
        -0.011197598651051521,
        0.01439623162150383,
        0.005467682145535946,
        0.009745792485773563,
        0.00417538033798337,
        -0.036532774567604065,
        0.011353600770235062,
        0.021521909162402153,
        0.03311972692608833,
        -0.06525533646345139,
        0.00494561530649662,
        -0.09877152740955353,
        0.023739803582429886,
        0.04512897878885269,
        0.020543133839964867,
        0.015870550647377968,
        -0.07027094811201096,
        -0.0026160841807723045,
        -0.14166605472564697,
        -0.07070375233888626,
        0.0005419992958195508,
        -0.07545874267816544,
        -0.04499449208378792,
        -0.09243983775377274,
        -0.029486702755093575,
        0.02225775085389614,
        -0.01858494058251381,
        0.03839912265539169,
        0.0053200488910079,
        0.000343089341185987,
        0.04599153995513916,
        -0.08222296088933945,
        -0.10359988361597061,
        0.028905384242534637,
        -0.0964541807770729,
        0.05252309888601303,
        0.008112344890832901,
        0.0324995182454586,
        -0.004902043379843235,
        0.044277191162109375,
        0.01849917322397232,
        -0.037628572434186935,
        0.0009674308821558952,
        -0.03815295174717903,
        0.055058255791664124,
        -0.11796773970127106,
        -0.08395010977983475,
        0.08347606658935547,
        0.012676420621573925,
        -0.03510883450508118,
        0.06612911075353622,
        -0.009075421839952469,
        -0.04942973703145981,
        0.026457739993929863,
        0.06781286746263504,
        -0.07186777889728546,
        -0.003836109535768628,
        0.0006547992234118283,
        0.02859298512339592,
        0.010369963943958282,
        -0.01680678315460682,
        -0.0004850429540965706,
        0.0777231827378273,
        -0.036690276116132736,
        0.0034413759130984545,
        0.007750575430691242,
        -0.05213657766580582,
        -0.07664071768522263,
        -0.025090834125876427,
        -0.010684303939342499,
        0.015367311425507069,
        0.03557441756129265,
        0.009917770512402058,
        0.03135394677519798,
        -9.251414578091938e-33,
        0.025057658553123474,
        0.006016818806529045,
        -0.02464754320681095,
        0.018961001187562943,
        0.0016371806850656867,
        -0.06342287361621857,
        0.04257889464497566,
        0.031667560338974,
        0.07732804119586945,
        0.030342284590005875,
        0.0019275052472949028,
        -0.04950392246246338,
        0.022872986271977425,
        -0.07681534439325333,
        0.033240240067243576,
        -0.029035286977887154,
        -0.11629614233970642,
        0.006156416144222021,
        0.05605246126651764,
        -0.019655894488096237,
        -0.0004017954342998564,
        0.17025810480117798,
        -0.08629617840051651,
        -0.011219453997910023,
        -0.02966216765344143,
        0.004277770407497883,
        -0.028300819918513298,
        -0.007431278005242348,
        -0.02315048687160015,
        -0.02331390231847763,
        -0.042002491652965546,
        -0.007310186047106981,
        -0.025231562554836273,
        0.09556324779987335,
        -0.0006420903955586255,
        0.06400640308856964,
        0.09189442545175552,
        0.0775810107588768,
        -0.03356402739882469,
        -0.012143521569669247,
        0.05924994498491287,
        0.03197329863905907,
        -0.06231607124209404,
        -0.0031384804751724005,
        0.0192875973880291,
        -0.005737253464758396,
        0.023992668837308884,
        0.0908413752913475,
        -0.04535149410367012,
        0.007168325129896402,
        0.032862864434719086,
        0.05146884545683861,
        -0.06743074208498001,
        -0.06229676678776741,
        0.012705639004707336,
        0.0757678747177124,
        0.02700984664261341,
        -0.08911581337451935,
        0.02791144885122776,
        0.010327956639230251,
        -0.01733262836933136,
        -0.07217317074537277,
        -0.030207188799977303,
        0.04000714048743248,
        0.015592116862535477,
        -0.08018872141838074,
        -0.05103021115064621,
        -0.05676543340086937,
        0.004065312910825014,
        -0.06992769241333008,
        -0.019129425287246704,
        0.01216715294867754,
        0.05180763080716133,
        -0.027127793058753014,
        0.04468592628836632,
        -0.012566057965159416,
        -0.010701574385166168,
        -0.053270161151885986,
        -0.04691034182906151,
        0.0042014652863144875,
        -0.01836966536939144,
        0.011511050164699554,
        -0.013995157554745674,
        0.1569041609764099,
        -0.007831648923456669,
        0.08004310727119446,
        0.07056744396686554,
        -0.019098561257123947,
        -0.06063143536448479,
        0.0543934591114521,
        -0.05417945608496666,
        0.035694725811481476,
        0.04439076408743858,
        0.14842697978019714,
        0.003477945225313306,
        -5.554116810913001e-08,
        -0.055879928171634674,
        0.050347909331321716,
        -0.05840056762099266,
        0.0401349775493145,
        -0.061458248645067215,
        0.037618495523929596,
        0.00865384005010128,
        -0.06299595534801483,
        0.0437065027654171,
        0.0139204366132617,
        0.05708853155374527,
        0.003619004040956497,
        -0.08066951483488083,
        0.08471927791833878,
        -0.0015690959990024567,
        0.0902564749121666,
        -0.04154315963387489,
        0.01270244736224413,
        -0.00929972343146801,
        0.008114544674754143,
        0.07444370537996292,
        -0.0030429887119680643,
        0.013028254732489586,
        0.04570673778653145,
        -0.05984342843294144,
        0.07507355511188507,
        -0.019663767889142036,
        0.09279903024435043,
        0.006962734740227461,
        -0.03633785992860794,
        -0.07310302555561066,
        -0.09496518969535828,
        0.04454823583364487,
        0.027245083823800087,
        0.05555477738380432,
        0.013343246653676033,
        -0.03970969468355179,
        -0.053925760090351105,
        0.007317651994526386,
        0.04045182466506958,
        -0.06012948602437973,
        -0.053307920694351196,
        -0.11347823590040207,
        0.022595146670937538,
        0.04359160363674164,
        -0.008917329832911491,
        -0.10940742492675781,
        0.008423256687819958,
        -0.00359034794382751,
        0.057767126709222794,
        -0.028320347890257835,
        -0.021041199564933777,
        -0.04278979077935219,
        -0.017729926854372025,
        0.09391817450523376,
        0.04427240043878555,
        0.022151824086904526,
        -0.02459028922021389,
        -0.02985548786818981,
        0.040621183812618256,
        0.046447765082120895,
        0.1378001719713211,
        -0.04911922290921211,
        0.008610635064542294
    ]
}