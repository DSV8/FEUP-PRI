{
    "id": "PgejkSWzvNs",
    "title": "How Many Cores Do AMD FX Processors *Actually* Have?",
    "channel": "Greg Salazar",
    "channel_id": "UCmbkRUS_4Efdt5UIhwNqtcw",
    "subscriber_count": 895000,
    "upload_date": "2016-07-13T06:57:16Z",
    "video_url": "https://www.youtube.com/watch?v=PgejkSWzvNs",
    "category": "Education",
    "tags": [
        "AMD",
        "FX",
        "6300",
        "8350",
        "9590",
        "8300",
        "CPU",
        "Architecture",
        "Bulldozer",
        "Piledriver",
        "Red",
        "Team",
        "Radeon",
        "How",
        "Does A",
        "Processor",
        "Work",
        "Many",
        "Cores",
        "Do",
        "Processors",
        "Actually",
        "Have",
        "Computer",
        "Build",
        "Guide",
        "Tutorial",
        "Explain",
        "Explanation",
        "Why",
        "Intel",
        "i7",
        "2700K",
        "6700K",
        "Sandy Bridge",
        "Ivy",
        "Skylake",
        "Broadwell",
        "Comparison",
        "Vs.",
        "vs",
        "Competition",
        "Head",
        "To",
        "Differences",
        "Cinebench",
        "Scores",
        "FPS",
        "Gaming",
        "Game",
        "Frames",
        "Per",
        "Second",
        "Science",
        "Studio",
        "Greg",
        "Salazar",
        "Zen",
        "Technology",
        "Graphics",
        "Card",
        "Nvidia"
    ],
    "views": 333982,
    "likes": 13115,
    "comments_count": 1725,
    "description": "- It's been under heated debate for years: How many cores do AMD FX processors *actually* have? The content in this video gets very technical, so I invite you to pause and rewind segments that you many have subconsciously brushed-over. This was interesting to learn, and I hope you're able to pull something out of this as well.   FACEBOOK:  TWITTER:  INSTAGRAM:   Subscribe to our channel!  Thanks for learning with us!  MUSIC: 'Neptune' by Arc North 'Savior' by Flexxus  DISCLOSURES: All Genius links are tied to our Amazon Associate account, from which we earn a small sales commission. Links containing a 'bit.ly' reference forwarding to Newegg are tied to our CJ account, from which we earn a small sales commission. All sponsored links and comments will contain the word \"SPONSOR\" or \"AD.\" Any additional revenue stream will be disclosed with similar verbiage.",
    "description_links": [
        "https://www.facebook.com/sciencestudioyt",
        "https://www.twitter.com/gregsalazaryt",
        "https://www.instagram.com/gregsalazaryt"
    ],
    "transcript": "The tech jargon is, well, jargon so let me simplify things for you. First up, I want you to erase every preconceived notion you've had about AMD FX Cores. When you see the FX 6300 advertised as a Hexa(6)-Core Processor or the FX 8350 advertised as an Octa(8)-Core Processor. You're looking at facts. By acceptable definitions, these processors have the correct number of cores specified. But they are not designed and do not function in the same way that equivalent Intel cores do. And that's what this video will seek to clarify. The two architectures that we'll be comparing are: The Bulldozer Architecture from AMD, most notably found in the FX 8000 Series. And the Sandy Bridge Architecture from Intel, which you'll find in their core 2000 series and a few others. Although you could stretch this to any modern Intel CPU, they haven't really changed much in this sense So let's consider the FX 8350 and the i7 2700k It's not a 2700k, but you get my point In these 2 cases, things on paper look fairly similar Well, apart from price Transistor Architecture is identical, 32 nanometers for both They both have 8 threads They both have 8 Megabytes of L3 Cache They also both have unlocked multipliers But the FX 8350 is advertised as an 8-Core processor Whereas the i7 2700k is only advertised as a Quad-Core with Hyper-Threading A technology implemented by Intel to increase Instruction Processing. Essentially, here's a crash course in Hyper-Threading: A single Intel core is split up into two quote-unquote Logical cores which share a total workload and increase processing efficiency This is explained clearly in Intel's 2012 Architecture Manual quote, if both logical cores are active, the queue is partitioned so that both logical processors can make independent forward progress, end quote Independent, that's the key word here. An adept scheduler efficiently allocates data between two logical cores, one of which could be busy processing, and the other which could be demanding more information So how is this hyper-threaded i7 any different from an eight-core FX processor? And why can't Intel just say that their i7 27k is an eight-core processor? Let's dive a little deeper. So in short the reason AMD can get away with calling their 8350 an octa-core CPU and Intel cannot is because, shocker, the FX processor is actually featuring 8 processing cores Each core has its own unique scheduler which decides what from system memory will be processed next as well as its own Level 1 cache. This contrasts Intel's logical core setup in which 2 logical cores rely on a single Intelligence Scheduler to disperse data. These logical cores by the way, are not physical cores. In fact, there are two logical cores per physical core which means that hyper-threading is really just a manipulation of one core or however many cores are in the processor So yes, FX processors are special but in both good and bad ways. Let's take a look at the Bulldozer Block Diagram. The FX-8350 features four modules and two integer cores per module. These integer cores are legitimate CPU cores, no doubt. But are packed into condensed modules for the sake of space, cost and efficiency but only in some cases. Each module shares 2 Megabytes of L3 cache for a total eight megabytes as described. And each also shares a single FPU or floating point unit. This FPU handles mathematical functions addition, subtraction, multiplication, you get the point. And the fact that Bulldozer forces pairs of cores to rely on a single FPU is what raises a bit of concern here. You see, on Intel's side the i7 2700k features four unique cores with four independent FPUs. So one FPU per core. This is a case for any modern Intel CPU, and while this alone may not seem like such a big deal It's what ultimately gives Intel CPUs the clock-for-clock edge in single core performance. FPUs handle most mathematical functions via the binary system. And allocating a single FPU per pair of cores can result in delays or quote-unquote lag times. Reducing overall performance in especially intense programs, even gaming. AMD claims the opposite that a single a FPU per module allows for overclocking headroom and higher mathematical complexity and they're correct, in theory, this should be the case; most modern GPUs actually follow this setup as well. FX FPUs themselves, technically have \"Two Unique Cores\" But the technology over the years hasn't given the Central Processing Units the edge AMD expected them to have Thanks to Windows and other programs assigning tasks in non-sequential arrays. This means that, instead of software seeing an FX CPU as a true quote-unquote 8-core It forces data through a pipeline similar to hyper-threading Which, if you remember, is nowhere near as efficient as two independent cores. This explains why CineBench for example sees the FX-8350 has a 4 core processor with 8 threads And not an 8-core processor with 8 threads Basically AMD banked on software following suit with their new CPU design, and that didn't happen at all. In fact, from what we know about Zen it seems like AMD's falling back on what Intel has been sporting for several years now. Coming at this entire debate from a different angle. Processor Savvy individuals on the blue team might also make the argument that Because each module only features a single Fetcher and Decoder, the two units that receive and prepare data to be processed. The pair of cores within each module is essentially bottlenecked. You see, much like hyper-threading which we discussed earlier; FX processors feature a single point of entry, per se, for every two cores Meaning that information can be bottlenecked up top, reducing the overall efficiency of each physical core. Intel cores instead do not share these Fetchers and Decoders, With a simple frequency calibration, Fetchers and Decoders can relay information to the Scheduler At the same rate that the scheduler disperses information to the physical core or logical cores, in the case of hyper threading. There are a few less relevant things I decided to leave out For the sake of both: time and well, comprehension. A lot was mentioned in this video but the gist of this should be rather clear. While FX processors do, by definition possess the correct number of cores specified on their boxes, The cores themselves are very dependent on other gates within the die. Namely, the FPUs, Decoders and L2 caches, all of which individual Intel cores do not share. FX Cores are also limited by software and operating system optimization, as described a moment ago. Something it's safe to say is, neither the fault of AMD nor developers Since Intel chips handle things much differently and it's kind of hard to play both sides of the aisle. Several other factors play into the differences and processing power between, say, an FX 8350 and an i7 2700k. Overall Block diagram, Design, Clock speeds and core efficiency are among them. Just something to keep in mind, it would take several semesters to fully explain the architectural differences between the platforms. And while I'm about to graduate with a degree in Engineering, I am eons away from being able to explain these without thorough and extensive research beforehand. If there's anything you'd like to add in the comments section below, by all means have at it. If you liked what you saw in this video and maybe learned a thing or two, be sure to give this thing a thumbs up. Give it a thumbs down if you feel the complete opposite or if you hate everything about life. Be sure to subscribe if you haven't already. And stay tuned for a Future PC Build as well as some interesting reviews and head-to-head clash ups that I've got planned. Be sure to stay tuned for the next one, folks. This is Science Studio, thanks for learning with us.",
    "transcript_keywords": [
        "Cores",
        "Intel",
        "Logical cores",
        "Intel cores",
        "core",
        "Intel logical core",
        "modern Intel CPU",
        "Intel CPU",
        "Processor",
        "single Intel core",
        "AMD",
        "Logical",
        "FPU",
        "CPU",
        "single",
        "single FPU",
        "Intel CPUs",
        "processors",
        "individual Intel cores",
        "tech jargon"
    ],
    "transcript_entity_values": [
        "Hyper-Threading",
        "L3",
        "Transistor Architecture",
        "L2",
        "Fetchers",
        "AMD FX Cores",
        "Decoder",
        "the Central Processing Units",
        "the years",
        "a Future PC Build",
        "several years",
        "Science Studio",
        "8350",
        "FX",
        "two",
        "four",
        "4",
        "several semesters",
        "Clock",
        "Fetcher",
        "AMD",
        "eight",
        "32 nanometers",
        "Decoders",
        "2",
        "CPU",
        "27k",
        "Level 1",
        "FX Cores",
        "Bulldozer",
        "2 Megabytes",
        "the Sandy Bridge Architecture",
        "Intelligence Scheduler",
        "8",
        "a moment ago",
        "2000",
        "Zen",
        "one",
        "Intel",
        "8350",
        "Two",
        "CineBench",
        "the Bulldozer Block Diagram",
        "First",
        "Quad-Core",
        "Windows",
        "AMD",
        "CPU",
        "2012",
        "eight megabytes",
        "Design",
        "Scheduler"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "DATE",
        "ORG",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "QUANTITY",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "LAW",
        "ORG",
        "PERSON",
        "PERCENT",
        "FAC",
        "ORG",
        "CARDINAL",
        "DATE",
        "DATE",
        "PERSON",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "FAC",
        "ORDINAL",
        "ORG",
        "PRODUCT",
        "ORG",
        "PRODUCT",
        "DATE",
        "QUANTITY",
        "ORG",
        "PERSON"
    ],
    "vector": [
        -0.02827598713338375,
        -0.06713730096817017,
        0.05508613586425781,
        0.02043888345360756,
        0.04994380101561546,
        -0.035218495875597,
        0.023442910984158516,
        0.05328386276960373,
        -0.015561483800411224,
        -0.025306683033704758,
        -0.011160051450133324,
        -0.025349454954266548,
        0.00979814026504755,
        -0.06444256752729416,
        -0.04752056673169136,
        -0.016507714986801147,
        0.07498156279325485,
        -0.03686575964093208,
        -0.0688890814781189,
        -0.03439640998840332,
        0.045067522674798965,
        -0.06900963187217712,
        -0.00965797621756792,
        -0.013631246984004974,
        0.06763902306556702,
        0.03963750600814819,
        -0.0009143016068264842,
        -0.03985431417822838,
        -0.0028247328009456396,
        0.035460229963064194,
        0.04273024573922157,
        0.03937169909477234,
        0.055897582322359085,
        0.010365977883338928,
        0.08854619413614273,
        0.017061110585927963,
        -0.006638842169195414,
        -0.0327439159154892,
        -0.02589518204331398,
        -0.005931445397436619,
        0.01688929833471775,
        -0.05829465389251709,
        -0.0054758572950959206,
        0.045885536819696426,
        0.03224208578467369,
        0.004397692624479532,
        0.020261986181139946,
        -0.05914762616157532,
        -0.011208867654204369,
        0.017661744728684425,
        -0.06386969983577728,
        -0.03692638874053955,
        -0.007209703326225281,
        -0.022663716226816177,
        -0.028117571026086807,
        0.024357756599783897,
        0.014700055122375488,
        -0.050166819244623184,
        -0.024366436526179314,
        0.06964361667633057,
        0.052312999963760376,
        -0.07013332098722458,
        0.005510934162884951,
        0.048328034579753876,
        0.018538493663072586,
        -0.007021688856184483,
        -0.006613646633923054,
        -0.009939947165548801,
        -0.0376364067196846,
        -0.05930255725979805,
        0.02720431610941887,
        -0.02929115854203701,
        -0.02031545527279377,
        0.05321834608912468,
        0.008608155883848667,
        -0.011751481331884861,
        0.06311597675085068,
        -0.048805151134729385,
        0.030827201902866364,
        -0.09827124327421188,
        0.007646765094250441,
        -0.026645533740520477,
        0.008800068870186806,
        -0.10554184764623642,
        0.03844628483057022,
        0.030588971450924873,
        0.07364918291568756,
        -0.00729376869276166,
        0.04059727489948273,
        -0.04124516621232033,
        -0.03541208431124687,
        -0.01792605035007,
        0.08862343430519104,
        -0.02930176630616188,
        0.06882746517658234,
        0.026096072047948837,
        -0.03820684924721718,
        0.0219736248254776,
        -0.0361710749566555,
        0.043693605810403824,
        -0.034826334565877914,
        -0.011279162019491196,
        0.06771263480186462,
        -0.019880561158061028,
        -0.11327368021011353,
        0.005465774331241846,
        -0.1199365183711052,
        0.16690687835216522,
        -0.040584031492471695,
        -0.025591449812054634,
        -0.019110605120658875,
        0.09526518732309341,
        -0.02834014967083931,
        -0.021761925891041756,
        0.0655631348490715,
        0.017178652808070183,
        0.009412380866706371,
        0.025988366454839706,
        0.18492645025253296,
        0.06005142629146576,
        -0.014894344843924046,
        0.027450023218989372,
        -0.016418153420090675,
        0.028383156284689903,
        0.004966193810105324,
        -0.054936304688453674,
        -0.0974058136343956,
        6.1655156245209e-33,
        -0.007507695816457272,
        0.08635158091783524,
        -0.0011427619028836489,
        0.00022628116130363196,
        -0.04643603786826134,
        0.014074290171265602,
        -0.011343041434884071,
        0.016971150413155556,
        -0.005871116183698177,
        0.07783417403697968,
        -0.011174490675330162,
        0.06831750273704529,
        0.03732948750257492,
        0.1073124036192894,
        0.007386394310742617,
        -0.11288627982139587,
        0.020208990201354027,
        -0.00610304856672883,
        0.05466436967253685,
        -0.004122570622712374,
        0.041159696877002716,
        0.08527454733848572,
        0.02005974017083645,
        0.023517757654190063,
        0.011810509487986565,
        -0.082857146859169,
        -0.08475655317306519,
        0.01197232399135828,
        -0.01649053394794464,
        0.0317186675965786,
        -0.06527388095855713,
        0.0008122480940073729,
        -0.028067663311958313,
        -0.025944752618670464,
        -0.0366789810359478,
        0.026160305365920067,
        0.02089216560125351,
        -0.11611628532409668,
        -0.010911896824836731,
        -0.008710217662155628,
        -0.06376036256551743,
        0.10022617876529694,
        -0.05121718347072601,
        -0.08753571659326553,
        -0.11844740808010101,
        0.08686847239732742,
        -0.0496862567961216,
        -0.036571674048900604,
        0.05930274724960327,
        0.02916371263563633,
        0.024065792560577393,
        0.032660357654094696,
        0.09259433299303055,
        -0.05315059423446655,
        0.08050321042537689,
        -0.024915041401982307,
        0.013612614944577217,
        0.020907631143927574,
        0.0879240408539772,
        0.09122209995985031,
        -0.06440988183021545,
        -0.02253107912838459,
        -0.09460099041461945,
        0.053401634097099304,
        -0.12754878401756287,
        0.1181982085108757,
        0.04117279872298241,
        0.05399857833981514,
        -0.0013081664219498634,
        0.036630578339099884,
        -0.10864380747079849,
        0.027498630806803703,
        -0.011864559724926949,
        -0.061660878360271454,
        0.02295534871518612,
        0.03680296242237091,
        -0.01110739354044199,
        -0.051315806806087494,
        -0.04591209813952446,
        -0.014093165285885334,
        -0.05205698311328888,
        0.06116355583071709,
        0.007439255714416504,
        -0.027427302673459053,
        0.04865160956978798,
        0.044827818870544434,
        -0.04750277101993561,
        0.056996993720531464,
        0.05744408443570137,
        -0.02931199036538601,
        0.026691971346735954,
        -0.05887068808078766,
        0.014002122916281223,
        0.05958980321884155,
        -0.09815770387649536,
        -6.349085965133093e-33,
        -0.0894172191619873,
        -0.024442339316010475,
        -0.03409966081380844,
        0.07450921088457108,
        -0.011576120741665363,
        0.017383117228746414,
        0.07552560418844223,
        -0.033326905220746994,
        -0.038067784160375595,
        -0.16371655464172363,
        0.016595562919974327,
        -0.005090637598186731,
        -0.016187094151973724,
        -1.2606361451616976e-05,
        -0.04696575552225113,
        -0.038054004311561584,
        -0.04574701562523842,
        -0.05291277542710304,
        0.04243654012680054,
        -0.016223561018705368,
        0.03979310765862465,
        0.03534123674035072,
        -0.020706338807940483,
        -0.020517293363809586,
        0.0020595050882548094,
        0.03567633777856827,
        -0.08525962382555008,
        0.01698586530983448,
        0.057954806834459305,
        -0.007591362576931715,
        0.012475572526454926,
        -0.049699388444423676,
        -0.04124181717634201,
        0.05870908126235008,
        -0.00572560541331768,
        0.05393921583890915,
        -0.01664302498102188,
        0.03783638775348663,
        0.02119898796081543,
        0.029312878847122192,
        -0.012413985095918179,
        -0.047829240560531616,
        -0.016362953931093216,
        0.05373770743608475,
        -0.060021962970495224,
        -0.0034613267052918673,
        0.006555106490850449,
        -0.04167074337601662,
        0.028409462422132492,
        -0.032230306416749954,
        -0.08611447364091873,
        -0.09342388063669205,
        0.055035464465618134,
        -0.02979731559753418,
        -0.08162933588027954,
        0.0022769924253225327,
        0.027977123856544495,
        0.013862432911992073,
        0.011546111665666103,
        -0.033325210213661194,
        0.041228629648685455,
        -0.014068903401494026,
        0.03687267377972603,
        0.002945376094430685,
        0.019472070038318634,
        -0.07088269293308258,
        0.011589963920414448,
        0.0041326191276311874,
        -0.10203568637371063,
        -0.03866790607571602,
        -0.009665112942457199,
        0.010439121164381504,
        -0.06856697797775269,
        -0.09192598611116409,
        -0.06086389347910881,
        0.011939939111471176,
        0.045147690922021866,
        -0.05606057494878769,
        -0.028943274170160294,
        0.041497550904750824,
        -0.033520836383104324,
        0.02939637191593647,
        0.015184943564236164,
        0.0078880675137043,
        0.07493218034505844,
        0.03797771781682968,
        0.043065596371889114,
        -0.04712240770459175,
        0.031935736536979675,
        -0.04507894068956375,
        -0.050415605306625366,
        0.026249779388308525,
        0.021443122997879982,
        0.013862674124538898,
        -0.022400598973035812,
        -6.635578841951428e-08,
        0.06604581326246262,
        -0.0212237685918808,
        -0.017260434105992317,
        0.005257653072476387,
        0.14012455940246582,
        -0.0232698991894722,
        -0.005626298952847719,
        -0.008832775056362152,
        -0.006278927903622389,
        0.03621784970164299,
        0.11841855943202972,
        -0.001882583717815578,
        -0.0828453004360199,
        -0.0241546593606472,
        0.029045291244983673,
        0.005484114866703749,
        -0.0654776319861412,
        0.0986088439822197,
        0.009310927242040634,
        -0.05832422524690628,
        -0.024201184511184692,
        0.037675656378269196,
        0.06503831595182419,
        -0.03635989874601364,
        -0.06586915254592896,
        0.018975751474499702,
        0.06250058114528656,
        0.040872231125831604,
        0.07413807511329651,
        0.06752573698759079,
        -0.09096413850784302,
        -0.014584151096642017,
        0.023800574243068695,
        -0.06803351640701294,
        0.04723517224192619,
        0.001292081899009645,
        0.002846112474799156,
        0.05710117891430855,
        0.013529607094824314,
        0.01822618581354618,
        -0.038778383284807205,
        -0.03753144294023514,
        0.05769489333033562,
        0.056666452437639236,
        0.07274437695741653,
        0.04888082668185234,
        -0.147971972823143,
        -0.050693899393081665,
        0.008731911890208721,
        -0.06298273801803589,
        0.010193191468715668,
        -0.011628197506070137,
        -0.04294440895318985,
        0.07528823614120483,
        0.01711234636604786,
        -0.028693316504359245,
        -0.0790252834558487,
        0.006804130505770445,
        0.010845011100172997,
        -0.00824342668056488,
        0.05220833793282509,
        -0.08078726381063461,
        0.03535439819097519,
        0.015824200585484505
    ]
}