{
    "id": "J8A8rKFZW-M",
    "title": "Brute force WiFi WPA2",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-12-18T18:33:14Z",
    "video_url": "https://www.youtube.com/watch?v=J8A8rKFZW-M",
    "category": "Science & Technology",
    "tags": [
        "wifi",
        "hashcat",
        "kali linux",
        "hashcat windows 10",
        "hashcat brute force",
        "hashcat wpa2",
        "hashcat windows 7",
        "kali",
        "linux",
        "wifite",
        "wifite kali linux",
        "kali linux tutorial",
        "kali linux install",
        "kali linux hacking tutorials playlist",
        "kali linux basics",
        "kali linux tutorial for beginners",
        "kali linux 2020",
        "kali linux hacking tutorials",
        "ethical hacking",
        "ethical hacking tutorial",
        "ethical hacking course",
        "how to become a hacker",
        "linux tutorial",
        "ceh",
        "oscp",
        "hacker",
        "wpa2",
        "wpa",
        "brute force attack"
    ],
    "views": 939943,
    "likes": 25330,
    "comments_count": 1038,
    "description": "It's really important that you use strong WiFi passwords. Otherwise it's easy to use hashcat and a GPU to crack your WiFi network. Make sure that you are aware of the vulnerabilities and protect yourself. Disclaimer: Video is for educational purposes only. All equipment is my own. Make sure you learn how to secure your networks and applications.  Need help? Join my Discord:   Menu: Overview: 0:00 Alfa Card Setup: 2:09 Start Wifite: 2:48 Select WiFi network: 3:31 Capture handshake: 4:05 Convert cap to hccapx file: 5:20 Copy file to hashcat: 6:31 Hashcat: 6:50 View GPUs: 7:08 hashcat options: 7:52 Start hashcat: 8:45 Cracked: 10:31  ================ Network Adapters: ================ Alfa AWUS036NHA:  Alfa AWUSO36NH:   ================ Previous videos: ================ Kali Installation:  One command wifite:   ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    ================ Support me: ================ Join thisisIT:  Or, buy my CCNA course and support me: DavidBombal.com: CCNA ($10):   Udemy CCNA Course:  GNS3 CCNA Course: CCNA ($10):   ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  ITPro.TV:  30% discount off all plans Code: DAVIDBOMBAL   Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  wifi kali linux kali linux 2020 kali linux 2020.4 hashcat hashcat gpu gru wifi wpa2 wpa3 wifite wpa wep wps alfa comptia cech oscp security+  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #hashcat #wifi #kalilinux",
    "description_links": [
        "https://discord.com/invite/usKSyzb",
        "https://amzn.to/3qbQGKN",
        "https://amzn.to/3moeQiI",
        "https://youtu.be/VAMP8DqSDjg",
        "https://youtu.be/TDVM-BUChpY",
        "http://discord.davidbombal.com",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://bit.ly/thisisitccna",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/ccnafor10dollars",
        "https://bit.ly/gns3ccna10",
        "https://itpro.tv/davidbombal"
    ],
    "transcript": "- In this video I'm gonna show you how to use a brute force attack to crack a WPA version 2 password. We gonna do that within a few minutes. So within seven minutes, using this laptop behind me, I'm gonna show you how to crack a WPA version 2 password, random password using brute force and an application called Hashcat. Now, for this to work you need access to a GPU, in your laptop as an example. So in that laptop I have a GEForce GPU that I can access to do a brute force attack very, very quickly against a WPA version 2 password. Please note that the password that I'm using in this example is a random password on a TP Link router. This is actually the password that the router shipped with. One of the problems with TP Link routers, same on this router, is that the default password that the routers are configured with is an eight digit number. That allows us to much more quickly crack the password using a brute force attack with a GPU. They're not using alphanumeric characters, they're just using numeric characters. They're not using special characters as part of the default password. So if a user uses the default password, and a lot of people do when they get new routers, we can use a brute force attack with a GPU to very quickly crack the password. This is a terrible weakness on TP Link routers. It once again took me less than seven minutes to crack this password using a laptop and a GEForce GPU in the laptop. Now, I'm showing you the whole process in this video. I'm gonna show you how to capture the 4-way handshake. I'm gonna show you how to convert the cap file into a format that Hashcat can understand. I'm gonna show you how to bring that into windows and use Hashcat within windows to launch the brute force attack against the password. So use this menu to jump to a specific topic of interest. If you're not interested in the 4-way handshake capture, you're just interested in the Hashcat brute force part of the video, then again jump to the relevant part of the video. Okay. Let's get started. I've been in your waters Okay. So once again I'm controlling that laptop from my Mac using VNC. First thing I need to do is have a wireless network card. So in this example, I'm using an Alfa network adapter. I've connected it to that laptop using its USB port. And what I've done is connected to the Kali virtual machine running on this windows computer. So if I open up a command prompt and type IP address, what you'll notice is wlan0 is available. So in other words the wireless network adapter has been picked up by Kali Linux. So to simplify this process, I'm gonna use Wifite. And I'm gonna use this command, \"sudo wifite wpa kill.\" I'm only gonna attack WPA networks and I'm gonna kill any processes that interfere. Have a look at this video where I explained some of the basics of Wifite. I'm not gonna explain too much about the software in this video. You don't have to use Wifite, you could use other tools. But Wifite just makes it very simple. So first thing I need to do is decide which network I'm gonna attack. I'm gonna press Control + C to stop Wifite scanning for networks. In this example, I wanna attack this network, TP-Link. So I'm gonna press 1 to start the attack. Now we could run a Pixie Dust attack, but I'm not gonna do that. I'm gonna press Control + C and then C to continue to the next attack. I'm also not gonna run the null pin attack. Press C to continue. I'm also not gonna run a WPS Pin attack. C to continue. Could also run another attack but I'm not gonna do that. The only attack I'm wanting to run in this example is the WPA handshake attack. Now, it's discovered clients. I'll try and connect to the TP-Link router. But I'm getting kicked off the network. That's what we want. It's now captured the handshake and it's tryna run the probable word list against that captured handshake. Now, in my previous videos, a lot of people complained saying they not gonna be using simple passwords on their wifi networks. But again, in this example, I'm using the default password that the router is configured as. So this specific TP-Link router has this wireless password. This router has a different password, but it's also only eight characters in length. So these are the random passwords that the routers are shipped with. So again, this is the password on the router. But that wasn't discovered because it's not in this word list. If I type ls, we have this hs directory. And if I go to that directory and type ls you'll notice there's a cap file. So that's the captured handshake. I'll clear the screen. And once again, there's the captured handshake. That needs to be converted now into a format that Hashcat can use. So to do that, I'm gonna use user, share, hashcat- Utils. They quite a few tools here but the tool I wanna use is this tool. And I wanna convert our handshake file to a file such as wpa2hccapx. And press enter. Okay. So I should have remembered to put sudo in. So let's put sudo in to convert that. We can see that the handshake has been written. So ls now shows us that we've got this new handshake in this directory. So I'll clear the screen. And once again, there is the new handshake saved in Kali. What I'll do now is open up a folder. So under hs, we've got the file. And what I'm gonna do is make VM way smaller. And I'm gonna copy that file into windows into my Hashcat directory. To actually use Hashcat, I'm gonna open up a command prompt. I'm gonna go to my downloads directory. I'm gonna go to my Hashcat software. DIR shows me the files here. I'll clear the screen. The software that I wanna use is Hashcat.exe. And I'll use hyphen or dash I to see the GPUs available on this computer. So we can see that device three is unstable. But we've got CUDA information here. Backend device number one is a GEForce GTX 1650 Ti. And then we've got OpenCl information. We've got NVIDIA CUDA information here. Device two is once again the GEForce GTX GPU in the computer. Now, fortunately, we don't have to specify all of those details when running Hashcat. What I'm gonna do is run Hashcat, the executable and the type that we're going to attack is WPA. You can see all of those options on the Hashcat Wiki. So we gonna be attacking WPA version 2. The attack is gonna be a brute force attack. So in the Wiki as an example, they've got a brute force attack against MD5. That's not what we're using here because we're not using -0, we're using -2,500, so WPA. But it's a brute force attack. And the attack that I wanna launch is against the WPA2 file that we created. And this specifies that Hashcat should use brute force using digits, eight digits in length in this example. So I'll press enter there. Hashcat is starting. We can press S to see the status. We can see that we're using a WPA attack against this file called WPA2. The estimated time to break this is nine minutes. So within 10 minutes, and it's actually gonna be quicker In this example, Hashcat will crack this WPA2 password. Press S to see the status again. We can see that we already at 5.9% progress. Now, this is one of the problems that you can have with your GPUs, is that the performance will be reduced because of the temperature being raised. But notice the attack has lost at 55 seconds. Estimated is 9 minutes 41 seconds. It's already progressed through 8.6% of this number of variations. So at this point, the fans on that laptop are spinning up making a lot of noise. But notice we are now at 11%, after 1 minute and 18 seconds. Now, when going I'm gonna speed up the video at this point because all it's gonna do now is continue going through all the different variations doing a brute force attack against that password. It's taken it about 2 minutes 41 seconds to get through a quarter of all of those different options. So it's not taking a lot of time. After five minutes, it's through about 50% of all the combinations. Okay, so there you go. After 6 minutes and 55 seconds, it's cracked the password. It went through 69% of a hundred million combinations. So the 69 millionth combination was the actual password. And if I type this again, it will tell us that it's already got the password. We should use show to display the password. So if I typed show now, I can see that this is the password for this wireless network. And if I go and look on the access point, there you go. That's the password using WPA version 2 PSK, encryption is AES. It took Hashcat 6 minutes and 55 seconds to crack that password. Now in windows, you can open up the potfile with, say notepad. And you'll be able to see the actual password, which once again is the password on the wireless access point. Hashcat is fantastic software, lots of options available. I'll show you in subsequent videos, more about Hashcat. I'll teach you more about Hashcat If you're interested. Hope you enjoyed this video. If you did, please like it, please subscribe to my YouTube channel. And please click on the bell to get notifications. I'm David Bombal, wanna wish you all the very best. I've been in your waters I thought you were my love I know one thing for sure I've never been so close",
    "transcript_keywords": [
        "brute force attack",
        "password",
        "Hashcat",
        "attack",
        "brute force",
        "force attack",
        "WPA",
        "WPA version",
        "brute",
        "force",
        "GPU",
        "handshake",
        "minutes",
        "Hashcat brute force",
        "default password",
        "router",
        "Wifite",
        "laptop",
        "show",
        "video"
    ],
    "transcript_entity_values": [
        "first",
        "Hashcat",
        "three",
        "USB",
        "Mac",
        "WPS Pin",
        "WPA",
        "9 minutes 41 seconds",
        "11%",
        "nine minutes",
        "Hashcat.exe",
        "about 50%",
        "5.9%",
        "One",
        "two",
        "4",
        "AES",
        "Press S",
        "a hundred million",
        "Pixie Dust",
        "GEForce",
        "2",
        "Alfa",
        "NVIDIA CUDA",
        "only eight",
        "1 minute and 18 seconds",
        "69%",
        "PSK",
        "WPA2",
        "YouTube",
        "Hashcat",
        "a quarter",
        "Hashcat",
        "IP",
        "wifite",
        "eight digits",
        "a few minutes",
        "Kali",
        "VNC",
        "about 2 minutes 41 seconds",
        "69 millionth",
        "eight digit",
        "one",
        "55 seconds",
        "GPU",
        "the Hashcat Wiki",
        "8.6%",
        "Kali Linux",
        "Wifite",
        "First",
        "five minutes",
        "less than seven minutes",
        "Wifite",
        "seven minutes",
        "1",
        "VM",
        "-0",
        "10 minutes",
        "OpenCl",
        "6 minutes and 55 seconds",
        "David Bombal",
        "Wiki",
        "WPA2",
        "CUDA"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "TIME",
        "PERCENT",
        "TIME",
        "ORG",
        "PERCENT",
        "PERCENT",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "WORK_OF_ART",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "TIME",
        "PERCENT",
        "ORG",
        "PRODUCT",
        "ORG",
        "PERSON",
        "DATE",
        "PRODUCT",
        "ORG",
        "PERSON",
        "QUANTITY",
        "TIME",
        "PERSON",
        "PRODUCT",
        "TIME",
        "QUANTITY",
        "QUANTITY",
        "CARDINAL",
        "TIME",
        "ORG",
        "ORG",
        "PERCENT",
        "PERSON",
        "PERSON",
        "ORDINAL",
        "TIME",
        "TIME",
        "NORP",
        "TIME",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "TIME",
        "ORG",
        "TIME",
        "PERSON",
        "ORG",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.019832272082567215,
        0.04254326596856117,
        -0.023608358576893806,
        -0.06315223127603531,
        0.006317242048680782,
        0.025391221046447754,
        0.0166169423609972,
        -0.011762038804590702,
        -0.01742626167833805,
        -0.010902848094701767,
        0.0336775928735733,
        0.021153051406145096,
        -0.0024800526443868876,
        -0.09253226965665817,
        -0.02367621660232544,
        -0.024080250412225723,
        -0.0706598088145256,
        -0.07926371693611145,
        -0.08826041221618652,
        -0.11706201732158661,
        0.012957772240042686,
        -0.03539662063121796,
        0.038766779005527496,
        -0.031122442334890366,
        0.04083497077226639,
        0.09984337538480759,
        0.1143302321434021,
        0.07077010720968246,
        -0.06346647441387177,
        -0.058114439249038696,
        0.019215980544686317,
        -0.014363380149006844,
        0.016192110255360603,
        0.005929160863161087,
        -0.024838894605636597,
        -0.07366486638784409,
        0.02617388591170311,
        0.0335264690220356,
        0.048052478581666946,
        -0.052851393818855286,
        -0.06424488127231598,
        0.011223566718399525,
        -0.04095783084630966,
        0.07708345353603363,
        -0.01628412865102291,
        -0.04245876893401146,
        -0.04219118505716324,
        0.04076165333390236,
        0.09931711107492447,
        -0.02390306070446968,
        -0.05191120505332947,
        0.004373921547085047,
        0.05034015700221062,
        0.035857606679201126,
        -0.0389891043305397,
        -0.04385915398597717,
        -0.057763077318668365,
        0.003099160734564066,
        0.06515917927026749,
        -0.08822601288557053,
        -0.021151401102542877,
        0.009285285137593746,
        0.023068152368068695,
        -0.01472060102969408,
        0.02630944363772869,
        0.01731979474425316,
        -0.010946935974061489,
        0.02493295818567276,
        0.07555241882801056,
        0.01679113134741783,
        -0.05941026285290718,
        0.03385747969150543,
        -0.06893353164196014,
        0.012549838982522488,
        0.004590165335685015,
        0.014832152053713799,
        -0.052000775933265686,
        -0.060374438762664795,
        0.06036045029759407,
        0.017408227548003197,
        -0.01622866280376911,
        -0.056604690849781036,
        0.06068553775548935,
        0.026298634707927704,
        0.01339158695191145,
        0.02433180809020996,
        -0.032868124544620514,
        0.003500071121379733,
        0.0052895802073180676,
        -0.06387727707624435,
        -0.1089087650179863,
        0.04579347372055054,
        0.024436380714178085,
        0.0065700882114470005,
        0.07789705693721771,
        0.06858376413583755,
        0.0032026423141360283,
        0.011995536275207996,
        -0.07741394639015198,
        0.06533823162317276,
        -0.012399228289723396,
        -0.04685342684388161,
        -0.05125055089592934,
        -0.06646176427602768,
        0.030663035809993744,
        -0.010245329700410366,
        0.05963733047246933,
        0.0684991255402565,
        0.030693070963025093,
        -0.007066348567605019,
        0.04871668294072151,
        0.028763938695192337,
        -0.06321126967668533,
        -0.02878059260547161,
        0.08190566301345825,
        0.05634382739663124,
        -0.005409401375800371,
        0.06915474683046341,
        -0.03167246654629707,
        0.04937693476676941,
        0.005301195662468672,
        -0.044855084270238876,
        -0.019702104851603508,
        -0.035802122205495834,
        -0.03558049723505974,
        -0.015324314124882221,
        0.02379194088280201,
        1.4632214255042035e-32,
        0.0272370558232069,
        0.07592543214559555,
        -0.12619595229625702,
        0.051554154604673386,
        -0.00707178795710206,
        -0.04975827410817146,
        -0.0024128297809511423,
        0.01835670694708824,
        -0.08584482222795486,
        0.04305202141404152,
        -0.08872661739587784,
        -0.07490948587656021,
        -0.06012037768959999,
        -0.04381559416651726,
        0.03290720656514168,
        -0.0627535954117775,
        0.02343006245791912,
        0.010766034945845604,
        -0.03894553333520889,
        0.1001434251666069,
        0.01210112776607275,
        -0.08119948208332062,
        0.038962800055742264,
        -0.01262611337006092,
        0.03997040167450905,
        0.017731597647070885,
        -0.061288982629776,
        -0.026828423142433167,
        0.1002761721611023,
        0.0016717466060072184,
        0.0017098920652642846,
        -0.01666480302810669,
        -0.03740456700325012,
        -0.01258118636906147,
        -0.027867082506418228,
        -0.0654737800359726,
        -0.07375993579626083,
        -0.05285762622952461,
        -0.07448072731494904,
        -0.047660354524850845,
        0.0022649874445050955,
        -0.013490654528141022,
        -0.022337280213832855,
        -0.03427867591381073,
        0.09044282883405685,
        -0.07275477051734924,
        -0.012235814705491066,
        0.04058048874139786,
        -0.013746467418968678,
        0.03395887836813927,
        -0.07139521837234497,
        0.08026541024446487,
        -0.002617261605337262,
        -0.04038870707154274,
        0.02775581181049347,
        0.04125375673174858,
        0.07579858601093292,
        0.05196592956781387,
        0.04859257861971855,
        0.1064019724726677,
        0.04525873810052872,
        0.018689211457967758,
        0.00365066877566278,
        0.03743370994925499,
        0.04387775436043739,
        -0.05511556565761566,
        -0.015290752984583378,
        0.035106051713228226,
        -0.023456182330846786,
        0.11346647888422012,
        -0.031011804938316345,
        -0.05384783074259758,
        0.0002069629990728572,
        -0.006398743484169245,
        0.004630205687135458,
        -0.06347756832838058,
        0.0481884591281414,
        0.014852963387966156,
        -0.02469848096370697,
        -0.041836854070425034,
        0.010514472611248493,
        -0.03780415281653404,
        0.048463962972164154,
        -0.01035271305590868,
        -0.048028476536273956,
        -0.03579346835613251,
        0.034608643501996994,
        -0.13695213198661804,
        -0.04826240986585617,
        0.05995749682188034,
        -0.06664689630270004,
        0.06954631209373474,
        -0.0075964489951729774,
        -0.10520975291728973,
        -0.010651045478880405,
        -1.4058220363535512e-32,
        0.08018855005502701,
        -0.0012915550032630563,
        0.0547487735748291,
        -0.036112718284130096,
        0.042573463171720505,
        -0.001487254980020225,
        0.02146310731768608,
        -0.007092780899256468,
        0.006045780144631863,
        0.008192960172891617,
        0.07520611584186554,
        0.012249919585883617,
        -0.010594230145215988,
        -0.021474407985806465,
        0.017594803124666214,
        -0.05289468914270401,
        0.09998978674411774,
        0.005632755812257528,
        -0.04671232029795647,
        -0.009476806037127972,
        -0.0218352023512125,
        0.05638797953724861,
        0.0692339688539505,
        0.00812646746635437,
        -0.009378388524055481,
        -0.04305639490485191,
        0.06492448598146439,
        0.06247947737574577,
        0.051269423216581345,
        0.012140070088207722,
        -0.009322072379291058,
        0.02388349547982216,
        0.011273302137851715,
        -0.006920348387211561,
        0.026099327951669693,
        -0.005394489970058203,
        0.09828965365886688,
        0.07248149812221527,
        -0.032886385917663574,
        0.000713011366315186,
        0.08978620171546936,
        -6.922044121893123e-05,
        -0.0969981923699379,
        -0.05685914680361748,
        -0.013127784244716167,
        -0.0863400474190712,
        -0.0034034845884889364,
        0.03757141903042793,
        -0.14115986227989197,
        -0.0072745829820632935,
        0.10222978889942169,
        -0.0522586815059185,
        -0.01461299043148756,
        0.08134395629167557,
        0.025798942893743515,
        0.05202259495854378,
        0.05039450153708458,
        -0.061017800122499466,
        0.01305385772138834,
        -0.018925238400697708,
        -0.027738334611058235,
        -0.045328713953495026,
        -0.03989529237151146,
        0.12445581704378128,
        0.059244025498628616,
        -0.08946636319160461,
        -0.12810656428337097,
        0.0090284189209342,
        -0.08775927871465683,
        0.11740906536579132,
        -0.002508364152163267,
        -0.019991252571344376,
        0.05089675262570381,
        0.061915624886751175,
        0.047889236360788345,
        -0.018527453765273094,
        -0.02335636131465435,
        0.06062507629394531,
        -0.007573865354061127,
        -0.07919855415821075,
        0.021538469940423965,
        -0.011569108814001083,
        -0.036664195358753204,
        0.01895417645573616,
        0.10864634066820145,
        -0.006036319769918919,
        0.021920179948210716,
        0.0375521220266819,
        0.0311211459338665,
        0.003411953803151846,
        -0.06607306003570557,
        -0.03312234207987785,
        0.02117222361266613,
        0.009975859895348549,
        0.012928889133036137,
        -5.813025794054738e-08,
        -0.0911969542503357,
        0.002474102657288313,
        -0.03340516984462738,
        0.07435967773199081,
        0.021139031276106834,
        0.09804297238588333,
        -0.01788431964814663,
        -0.17099624872207642,
        -0.023195527493953705,
        -0.0016610660823062062,
        -0.01781880483031273,
        0.03674040734767914,
        -0.05893951281905174,
        0.02170393243432045,
        -0.0679711326956749,
        0.03452398255467415,
        -0.010848626494407654,
        -0.05080766975879669,
        0.030017884448170662,
        -2.5229972379747778e-05,
        -0.0024138642475008965,
        -0.017605941742658615,
        0.053430214524269104,
        0.04307753965258598,
        -0.002048957161605358,
        0.04397540166974068,
        0.028001345694065094,
        0.006305788643658161,
        -0.011171936057507992,
        -0.02314228191971779,
        -0.10038106143474579,
        -0.06815621256828308,
        0.026129627600312233,
        -0.05007866770029068,
        -0.018215429037809372,
        0.07901374995708466,
        -0.050725869834423065,
        0.016347011551260948,
        -0.08065441250801086,
        0.044237472116947174,
        -0.048690006136894226,
        -0.011917313560843468,
        0.018708158284425735,
        -0.05663973093032837,
        -0.040563005954027176,
        -0.019642895087599754,
        -0.009622020646929741,
        0.04944456368684769,
        0.01870713196694851,
        -0.0007398115703836083,
        0.024216877296566963,
        0.0052170525304973125,
        0.03883752599358559,
        0.003948640078306198,
        -0.0095051946118474,
        0.0846140906214714,
        0.08501081168651581,
        -0.14166711270809174,
        0.028604751452803612,
        0.03044564090669155,
        0.0819762572646141,
        0.02368098869919777,
        -0.04440760985016823,
        -0.04348666965961456
    ]
}