{
    "id": "nHDixd-EdEQ",
    "title": "Break WiFi networks using Cloud GPUs in seconds",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2023-02-05T15:00:26Z",
    "video_url": "https://www.youtube.com/watch?v=nHDixd-EdEQ",
    "category": "People & Blogs",
    "tags": [
        "kali linux",
        "hashcat",
        "hashcat gpu",
        "hashcat wifi cracking kali linux",
        "hashcat wifi cracking windows",
        "hashcat brute force",
        "hashcat wpa2",
        "how to hack wifi password",
        "penetration testing",
        "wpa2 cracking",
        "wifi",
        "wifi password hacker",
        "wifi password hacker app",
        "ethical hacking",
        "wifi hacking",
        "hashcat password recovery",
        "hashcat install",
        "hashcat wpa2 brute force",
        "hashcat dictionary attack",
        "hashcat wifi cracking",
        "wireless security",
        "wpa2 hacking",
        "wifi cracking",
        "linode",
        "cloud",
        "cloud gpu"
    ],
    "views": 366900,
    "likes": 11005,
    "comments_count": 384,
    "description": "WiFi Password Warning: Use good passwords otherwise they can be hacked in seconds using cloud GPUs. Create your own virtual machine on Linode with a 60-day $100 credit:   Disclaimer: This video is for educational purposes only. I either have permission to use, or own all equipment used for this demonstration. No actual attack took place on any websites. Only use the tools demonstrated in this video on networks you have permission to attack. Use the tools ethically to improve network security.  // Previous Videos // WPA/WPA2 vs hashcat and hcxdumptool:   16 secs to break it! 70% of real world WiFi networks owned!:   Wifi Adapters:  Old method using airmon-ng:  Old method using GPUs:   // Menu // 00:00 - Intro 01:12 - Don't use weak wifi passwords! // Quick wifi cracking demo 05:28 - Setting up for wifi hack // Setting up a Linode server 08:08 - Setting up for wifi hack // Installing Hashcat 09:05 - Setting up for wifi hack // Installing NVIDIA CUDA Toolkit 12:42 - Cracking wifi passwords using Hashcat 17:08 - How the Hashcat command works // Detailed explanation 21:08 - Cracking a range of wifi passwords 27:24 - \"Mixed passwords are strong passwords\" 27:57 - Cracking a range of wifi passwords (continued) 28:54 - Conclusion  // David's Social // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  YouTube Shorts Channel:  Apple Podcast:  Spotify Podcast:   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // Hashcat Steps // 1) Setup server in Linode GPU server  2) SSH to server: ssh root@192.168.1.1  3) Install Hashcat: $ sudo apt update $ sudo apt install hashcat $ hashcat -I  4) Install Cuda: (Docs:  ) $ sudo apt update && sudo apt upgrade $ sudo apt install build-essential linux-headers-$(uname -r)  5) Install nvidia drivers (Docs:  ) $ wget  $ sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 $ wget  $ sudo dpkg -i cuda-repo-ubuntu2204-12-0-local_12.0.0-525.60.13-1_amd64.deb $ sudo cp /var/cuda-repo-ubuntu2204-12-0-local/cuda-*-keyring.gpg /usr/share/keyrings/ $ sudo apt-get update $ sudo apt-get -y install cuda $ sudo shutdown -r now  6) Upload files to the server: sftp root@192.168.1.1 put 8-digit-wpa2.hc22000  7) Check GPUs available: hashcat -I  8) Run Hashcat: 8 digits: hashcat -m 22000 8-digit-wpa2.hc22000 -a 3 ?d?d?d?d?d?d?d?d -d 6,7,8,9 -w 4  10 alphanumeric: hashcat -m 22000 10-digit-letters-wpa.hc22000 --increment --increment-min 10 --increment-max 12 -1 ?d?l?u -a 3 ?1?1?1?1?1?1?1?1?1?1?1?1 -d 6,7,8,9 -w 4  ====================== Hashcat commands: ====================== -m 22000 means WPA-PBKDF2-PMKID+EAPOL  -a 3 means Attack mode is brute force -d means Backend devices to use, separated with commas -1 means mask to use  Explanation of WPA/WPA2:    wifi gpu cloud gpu kali linux kali wifi kali alfa alfa network alfa network adapter wifi password wpa wpa2 hashcat linux  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #wifi #wpa2 #hashcat",
    "description_links": [
        "https://davidbombal.wiki/linode",
        "https://youtu.be/Usw0IlGbkC4Kali",
        "https://youtu.be/ZTIB9Ki9VtYWiFi",
        "https://youtu.be/5MOsY3VNLK8",
        "https://youtu.be/WfYxrLaqlN8",
        "https://youtu.be/J8A8rKFZW-M",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://www.youtube.com/channel/UCEyCubIF0e8MYi1jkgVepKg",
        "https://davidbombal.wiki/applepodcast",
        "https://open.spotify.com/show/3f6k6gERfuriI96efWWLQQ",
        "https://www.amazon.com/shop/davidbombal",
        "https://www.linode.com/docs/products/compute/gpu/guides/install-nvidia-cuda/",
        "https://www.linode.com/docs/products/compute/gpu/guides/install-nvidia-cuda/",
        "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin",
        "https://developer.download.nvidia.com/compute/cuda/12.0.0/local_installers/cuda-repo-ubuntu2204-12-0-local_12.0.0-525.60.13-1_amd64.deb",
        "https://hashcat.net/wiki/doku.php?id=mask_attack",
        "https://hashcat.net/wiki/doku.php?id=cracking_wpawpa2"
    ],
    "transcript": "- In this video, I'm gonna show you how to crack wifi passwords using the cloud. I'm gonna show you all the steps in this video, I'm gonna show you how to set up the Linode server from scratch to getting it working. I'm gonna show you how to install the relevant drivers, so that you can use the GPUs on the Linode server. I'm gonna show you the Hashcat commands to crack the passwords. The only piece that I'm not showing you is how to capture the information from a wifi network. I've shown you how to do that in separate videos. See the video which I've linked below, where I'll show you how to capture the information using a wifi adapter. My favorite is an alpha network adapter, but there's various ways to do this to capture the information from the wifi network so that you can crack the passwords. In this video, I'm simply showing you how to take the captured information and then crack the WPA/WPA2 passwords using GPUs in the cloud. In all the examples here, I'm using brute force attacks. I'm not using a dictionary, I'm not using a list of passwords, but I could, 'cause that actually allows me to speed things up, and people use bad passwords. (upbeat rock music) May this be a warning for you and your family not to use weak passwords. TP-Link routers such as this, have a default password length of eight digits. If you use that default, look how long it's gonna take me to crack that password. In this example, I am gonna crack an eight-digit WPA2 password. I'm using GPUs in the cloud to do this. How long will it take me to crack that password? Okay, one second, 27 seconds is the estimate. 11 seconds. Okay, that took 14 seconds to crack. It took me 14 seconds to crack an eight-digit password. Do not use the default passwords on wifi devices. You may say, \"David, that's really dumb. I'm not going to use such dumb passwords,\" but you'll be surprised what people use. Here's a real-world example. Researchers in Tel Aviv went out and captured passwords of different wifi networks. The researchers strapped an alpha network adapted to his back, captured a whole bunch of wifi information. They were able to crack 70% of wifi networks. Because, in this example, a lot of wifi networks were using telephone numbers as their wifi password. Or they were using easy-to-guess passwords, or passwords from well-known database breaches, such as the RockYou database. Here I'm gonna do something similar. I'm gonna crack a 10-digit password, but I'm gonna make some assumptions like the Israeli researcher that the password probably begins with zero two, which is the dialing code in London. I'm gonna start Hashcat now. Let's see how long it takes me to crack that password. According to this, maybe 26 seconds. Okay, so how long did that actually take? 11 seconds to crack. 11 seconds to crack a 10-digit password with the assumption that it starts with zero two. If I didn't use that assumption, let's assume the assumption is that it starts with zero, not zero two. How long would that take? So only assumption at the moment is that someone's using a telephone number, it starts with zero as the telephone number. So they could be using their cell phone or mobile phone, or a landline number as the password. According to this, it'll take four minutes and 29 seconds to crack that password. Hopefully this tells you why you should be using good passwords, not just numeric passwords. I'm gonna show you an example in a moment with alpha numeric, can also be cracked if it's a poor password. Here I'm cracking a 10-digit password in a few minutes, either in a few seconds if my assumptions about your password are correct. For example, that you're using zero two. Or, like in this example, it took one minute 54 seconds to crack a password where I assumed that the password was starting with a zero. Or, like in this example, started with zero two. But in this test, I assumed that it started with zero followed by nine digits. Now, at the end of this video, I'm gonna show you how to do a range, because that's probably the most common question I get. How do I do a starting range? So from this range to this range of different characters. So I'll show you that as an example as well. But before we get there, let's crack a 10-character password with digits and letters. Now, you may not know what a password contains, but in this example, just to speed things up, I'm using digits, lowercase, and uppercase characters. Not special characters, but I could add that to the list. I'll go through these commands in a moment. This is telling me that it's a brute force attack. Okay. According to this, it's gonna take 7,000 years to crack this password, but actually it took nine seconds. Nine seconds to crack a 10-character password with digits and letters, I got lucky here. So if I type show, so same command again, dash show, that shows me the password. I cracked this password in nine seconds rather than the estimated 7,000 years, I got lucky. Use good passwords, because if you use bad passwords like that, I could crack your password in a few seconds. In this example, with the Israeli researcher, they were able to crack 70% of passwords because people were using weak passwords or passwords in data breaches. They used the RockYou database to crack passwords. Don't use weak passwords from password breaches as an example. Simple passwords such as, \"I love you,\" or one, two, all the way up to seven. Weak passwords like that were very easy to crack. Don't just use telephone numbers. 10 digits, very, very easy to crack. Okay, so now I'm gonna show you how to set this up. You can use the link below to get a hundred dollar 60-day credit, so that you can try this yourself. I want to thank Linode once again for sponsoring this video. I've also put the commands below if you wanna simply see the commands and then use them yourself. First thing you need to do is register an account on Linode, and then you'll be able to create a new Linode server. I'm going to use Ubuntu 22 04 LTS. Now, not all regions support the use of GPUs. As an example, if I select London and specify GPU, only these places support GPUs. So I could change that as an example to Frankfurt, but I could also use one of the other regions as specified over here. Okay, so once I've done that, I need to choose the size. The 128 gig RTX6000 GPU times four costs $4,000 a month. I'm not gonna run this the whole time, and you're probably not going to do that either. You need to look at the price per hour. For some of these attacks, it only takes a short time. Some attacks will take a lot longer. So you need to decide which GPU you're going to choose. I'll choose the big one, it's not always available, but let's see if it's available. In this example, I'll say wifiGPU1 as my Linode label. You need to specify a password, and then you can say, create Linode. In this example, there's no availability in this region. So what I might have to do is choose a different region. I'll try Singapore, a 128 four GPU, see if that's available. So the other side of the world, but for the files that we uploading, doesn't matter in my example. In this case, you can see the Linode is starting. So that's good news. So if I open up a new tab and look at my Linode, you can see this wifiGPU1, which is dedicated 128 gig RTX6000 GPU times four, is being provisioned in Singapore. And that's what's great about the cloud. I'm setting up a server, literally on the other side of the world from where I am, and very, very quickly that becomes available, and I'll be able to access that server. As soon as the server's available, we are gonna SSH to the server. So what I'll do is open a terminal on my computer, and I'll paste that SSH command in. Can see the server is now booting up. Okay, there you go. The server has now booted, it's running. I'll press Enter to SSH to the server. We have to accept the public key. Put my password in, and there you go. I'm now running a Linode server in Singapore with four GPUs. Now, Hashcat isn't recognized. So what I need to do is install the software. I'm gonna use the command sudo apt update to update my references. Okay, so references are updated. Now what I'm gonna do is type sudo apt install hashcat to install Hashcat on the server. So literally update references on Ubuntu, install Hashcat. Okay, so Hashcat should now be available. Notice we are told to use the help command, so dash dash help. Lots of information available including some examples here, including that dash A three, means brute force. So we've got Hashcat installed, but this is the important piece. Hashcat dash I shows us that we only have a CPU available. We could try and crack passwords using a CPU, but it's gonna be a lot slower. The whole reason to get the GPUs is it allows us to crack passwords a lot quicker. So on the Linode's website, they tell us that we need to install the NVIDIA CUDA toolkit to be able to use the GPUs. And they give us the commands on Ubuntu and Debian to do this. And then they tell us what we need to do. For instance, reboot the GPU instance after running the commands, and then we can use this command to verify the drivers. So this first command is sudo apt update and apt upgrade. So I'll paste that in. Take the defaults and press Okay. Next step is to install software. I'm not gonna bore you going through explanations of all the commands when it comes to, for instance, installing the drivers. In my experience, you can literally just type the commands in except all the defaults and it'll work. The idea is that you need to get the relevant software installed to be able to use the GPUs. So you need to install the CUDA toolkit, and you need to install the drivers. Okay, so once we've done that, we need to install the CUDA toolkit. We need to select our platform, which in our case will be Linux. It's X86_64. In our example we're using Ubuntu 22 04. We are gonna use a local Debian installation, and we are given the commands to install the CUDA toolkit. In my experience, I literally just copy these commands and type them in, and they're all worked. So I'll copy and paste the first command, second command. You could literally just copy all of these and paste them in at the same time, and that worked in my experience, but I'll do them one by one just to make sure that they all work properly. We're gonna install the Debian package. Next command is actually the command we told to run in the output here, that the key is not installed. So we are gonna install that. Then we are gonna do an update. And then we are gonna install CUDA. Okay, so while that's installing, just to reiterate, we create the Linode server. Then we have to install the CUDA toolkit. So we have to run these commands. In our example, we're using Ubuntu. So we use those two commands. And then we need to go to the toolkit download page, and select the operating system that we're using. So in our example, it's Linux X86_64 bit. We're using Ubuntu 22 04 LTS. We are going to use a local installation, and then once we've done that, we need to reboot the server. Okay, so that's gonna take a while so we'll speed the video up at this point. I'm gonna select the default again, restart the servers, and there you go, it's now completed. Okay, so I'm gonna restart the server. I've lost my connection, I'll clear the screen. All I need to do now is wait for the server to reboot and then I'll be able to SSH back to the server. Okay, so the server is running again. I'll SSH back to the server, I'll put my password in. Okay, so previously, when we used the command hashcat dash I, we didn't see the GPUs. But notice now we can see backend devices. We have our CPU, we have backend device six, which is an RTX 6000 GPU. We have seven, RTX 6000 GPU. Same with eight, and same with nine. So multiple devices are now available, so that's good. That wasn't visible previously. But on the Linode documentation, we're told to use this command, nvidia-smi. That shows us that the CUDA software was installed correctly and we can see details about the GPUs on the server. Okay, so now we can start using Hashcat to crack the passwords once again. Okay, so I've copied the various captures to a folder on my computer. So notice I've got these HC 22,000 files. That's once again, because of the new way that Hashcat does WPA/WPA2 cracking. So since this version 6.0.0, we need to use this mode, 22,000. And various benefits are shown here. This is the right way to do it these days. Now, if you get an older version of Hashcat, you can still do it the old way, but this is the way that I've done it, because this is a recommended way of doing it. They give you again a whole bunch of reasons to do it this way. In my previous video, which I've linked below, I once again showed you how to capture this information and create these files. But for this video, what I want to do is get these files onto the server in Singapore. So the way I'm gonna do that, is I'm gonna use secure FTP root, and the IP address of my server. Put in my password. Okay, so at the moment, on the server, all I've got is that Debian file. So once again, through SSH I can see that Debian file. Let's get some of these files onto the server. So I'll say put that file, put that file, put this file. So ls, once again, will show us that we've got three files on the server. Now, I do have older format files. So if I installed an older version of Hashcat, I could break those with an older version of Hashcat. Won't work with a new version of Hashcat. So again, through SSH, those are the files on the server. So what I can do is use Hashcat to crack this eight-digit WPA file. So dash M is telling us that we're gonna use WPA, WPA2, PMKID and EAPOL. So those message pairs are in a single file. So it combines those two in a single file. Gives us lots of advantages once again. This is the file that we're gonna gonna crack, which is the file that I've uploaded. We are going to do bruteforce dash three, and this tells Hashcat that it's gonna be eight digits. I know this is an eight-digit password. I will once again show you later in the video how to crack a range of numbers. Okay, before I press Enter, I wanna see the devices that we've got, 'cause we've got GPUs running here. Hashcat dash I once again, it's six, seven, eight, and nine. What I want to do here is use the device six, seven, eight, and nine. So there's our command, let's see how long this takes. So Hashcat is starting. We told that these are the platforms that we are going to be using. We are not gonna be using device five. Okay, we can use S to see our status. As you can see, Hashcat is running. This is the file that we are trying to crack. At this point in time, it's taken two seconds. We're doing an eight-digit crack of that password. I'll say S to see the status again, we are now at 18 seconds. You can see the candidates that it's trying to crack. You can see it's using the different GPUs to do that. It actually already did that in about 19 seconds. You can see when I set 18 seconds, it had actually cracked the password already. Let's just do that again and I'll run it by itself. If I do that, it's gonna tell me that it's already cracked. So I need to use dash dash show at the end to see the password. And there it is. If I go to this directory, I can see the potfile, cat hashcat potfile. There is the password that was cracked. So what I'll do is I'll just move that hashcat potfile to another file called backup. I'll go back to my home directory. And let's clear the screen, 'cause there's a lot of output there. And what I'll do, is I'll start Hashcat again, doing exactly what I did before. We've got our four GPUs. We're using brute force, eight digits in this example. I'll press Enter now and I'll do nothing. I'll just let it run. Let's see how long it takes to crack that password. All I'll do is press S for status. Okay, and there you go. It took Hashcat 19 seconds to crack that eight-digit password. Let this be a warning to you. Don't use weak passwords like eight-digit passwords. Okay, so let me explain what the hashcat command is doing. This is hashcat, so we are running the binary file. This tells us the hashtype. So in the documentation, we can see dash M hashtype. So 22,000 once again is WPA/WPA2, PMK, EAPOL, that is the way that we should be doing it today. Per the Hashcat documentation, this is the way to do it since version 6.0.0. Older method is not available with Hashcat. If I try and use 2,500, the old method, we are told that that method has been deprecated. So you either need to use an older version of Hashcat if you want to use the old method, or you need to use 22,000. Okay. This is the file that we uploaded to the server. So we've uploaded various files to the server. That's the file that we are gonna crack. This tells us that we're using brute force, so that's our attack mode. Dash A three is brute force. We can see that here, brute force dash A three. So we're not using a word list or an association, we are gonna use brute force. This tells Hashcat the number of digits or characters in the password. In this case it's eight digits. I know that's an eight-digit password because I captured it. Here we can see various supported attack modes. So brute force dash A three. And with brute force we can use different characters. Question mark D is digits, L is lowercase, U is uppercase, and various other options. So we can use different characters. So as an example, we could mix our characters, and I'll show you that in a moment. But in this case, we're just looking for digits. This tells Hashcat the devices that we're gonna be using. So hashcat dash I will show us the devices available. In this case, we're using GPUs. So the GPUs that I want to use are six, seven, eight, and nine. So those are the GPUs in the server. Yours would vary. And this tells us how crazy we are gonna go. So the workload that we're using is Nightmare. Insane power consumption, rather than just allowing it to use the default performance, economic power consumption, we are gonna go Insane to make it happen more quickly. So again, we are running Hashcat. We are gonna crack WPA/WPA2 passwords. This is the file that we are going to use the cracking against. We are doing brute force, eight digits. We are gonna use four GPUs, and we are gonna go Insane or Nightmare mode with Hashcat. And if I run that once again, you can see that the GPUs have been selected. You can see the optimizers that have been applied. Press S to see status. We can see it's taken five seconds thus far, 22 seconds to go. Eight digits is what we are using. You can see that four GPUs are being used. It's actually already finished. So if I go back here, took 16 seconds. These are the candidates across the four GPUs. It already finished all of that. So if I try and run that again, it's gonna tell me to use show, because it's already cracked that information. So use show, because it's already cracked the password. So dash dash show, and there is the password for that file. Okay, so for a 10-digit one, we are using Hashcat. WPA/WPA2 password is what we're gonna crack. That's the file. This says brute force. I'm saying zero two followed by eight digits. We're gonna use four GPUs, and we're gonna go Insane mode basically. That's running now. We can press S to see the status. Just need to give it some time to start up. You can also create a checkpoint so that you can come back to it, or tell it to finish or quit. Okay, it's already finished. 12 seconds later it managed to crack that password. It got 41% through the file and found the password. So that'll tell you how far it's getting through the file, but we already got the password in 12 seconds. Okay, so the one that a lot of people wanna see is a range. How do we do a range? So again, this is what a lot of people ask me, \"David, how do I do brute force? So they dash A three, brute force. We are going to increment. And in this case we're incrementing from a minimum of eight, so minimum for wifi networks, up to, let's say, a maximum of 18 digits. So we are going from eight to 18. We are gonna use four GPUs and we're gonna do Insane mode. Let's see how long it takes us to crack the 10-digit password. Now in this case, I didn't specify any zeros, I just went digits. So simple digits. And what this is gonna try and do is start with eight digits. You can see there, eight digits. We're about 9% through this in two seconds. So I'll do S again to see the status. 14 seconds, we're about 52% through this. I'll do S again, 75% through this in 20 seconds. What it's trying to do is start with eight digits and get through all eight digits. So try and crack the password with eight digits. Now it's not gonna work, because this is 10-digit password. So if I do status again, notice it's now gone to nine digits. So eight digits didn't work, now it's trying nine digits. Progress here has been two seconds. According to this, it'll take four minutes, 35 seconds, to get through the nine-digit option. As you can see there, the progress is 0.47%. I'll do S to see progress, we're at 9% progress now. So it's got through that many of this number of passwords. So nine-digit passwords. And you can see it's just cycling through all of those passwords. At the moment, we are told that it's 38 seconds, four minutes to go. Now, all you need to do is wait. We're at 20%, 25%. This is just gonna take time. I'm not gonna bore you. I've already shown you how to crack this password using some clever stuff, like putting a zero in front, rather than just assuming all the digits being unknown. But literally all you need to do now is let that run in the background and let it crack the passwords. It goes very, very quick with four GPUs. As you can see here, it's cycling through those numbers very, very rapidly. Okay, so four minutes, 43 seconds, it got through nine digits. Press S again, notice it's trying to do 10 digits. This is gonna take 46 minutes according to this. All you need to do now is wait for that to complete. Again, I won't bore you waiting for this, because I've already shown you how to crack it by replacing that with a zero, rather than just assuming that it's an unknown digit. And again, if I made it zero two there, it would be a lot, lot quicker to crack. So rather than doing it that way, what I could do is say, \"Okay, I know the first two digits in this are gonna be zero, and let's say two.\" And let's see how long that takes to crack. Made a syntax error there, so that shouldn't be that, it should be zero two like that. So try and use some intelligence about the numbers rather than just assuming it could be anything. Let's see how long this takes now. Okay, so almost instant on eight digits, almost instant on nine digits, notice zero seconds, zero seconds for nine. We are ready at 10 seconds now, they reckon 26 seconds. We are seven seconds in now on 10 digits. So 21 seconds was already cracked. So let's see how long that took. Took 12 seconds to crack the 10 digit. So dash show, again, shows me the password. I'll remove that password and do it again, just to make sure that you followed what I did there. So I'll go to the Hashcat directory, remove the potfile, go back to my home directory, and run it again. Okay, so let's see how long it takes. All I've done now is replace it with zero two. It's an increment from eight digits up to 18 digits. We're using four GPUs, Insane mode. Not show, because we want to crack that again. Let's see how long it takes. As you can see, when I put zero two in the beginning, it takes it like no time to crack eight digits. So eight digits according to this is zero seconds. Press S again, we're already at nine digits. According to that, it would take two seconds to crack if it was nine digits in length. So nine digits in length, we already finished with nine digits, we're at 10 digits now, five seconds, 23 seconds to go. 10 seconds, 13 seconds. It really did it at 13 seconds, so- So here I made assumptions of what the telephone number would be, zero two followed by eight digits, took it seconds to crack. Comments I always get is like, \"David, I'm not gonna just use digits, I'm gonna have digits, letters, et cetera.\" So again, here I've got digits, lowercase, and uppercase. So I'm going to increment from a minimum of 10 up to maximum of 12. This is digits and letters in the password. And I'm gonna assume it's digits, lowercase and uppercase. We're gonna do a brute force notice. I've said dash one is that. That's based on the document from Hashcat where you create groupings of characters. So custom character sets. And what I did here, as I said, dash one is that list of characters. So this dash one would consist of these characters. Or this would consist of full seven ASCII character set. Have a look at the documentation on Hashcat's website. I won't bore you too much, but notice dash one. And here I'm using dash one in all the options. Let's see what this does. Okay, made a mistake in the file name, WPA2 rather than WPA. So let's try that again. Press Enter to start. Hashcat is starting. Okay, you can see it's gonna take 7,000 years to try and crack this password. It's taken 13 seconds so far, but still 7,000 years. It's trying a combination of lowercase digits and uppercase per our instructions. So you can see how that changes. Various options are tried and we've mixed digits. I didn't use special characters here, I just used uppercase, lowercase and digits. 42 seconds. Still according to this, it's gonna take 7,000 years. So it's gonna take a long time to create this video. You can see it's changing. We are so far through our characters, so 0%. Keeps changing, one minute, three seconds, still going through combinations. So this is an example of where using mixed characters makes a huge difference in your password. Don't just use digits, don't just use like lowercase or uppercase. Definitely don't just use your telephone number. You want to use uppercase, lowercase, special characters. Mix up your passwords to make them more complex, and make them much longer. A 30-character password, it's gonna be a lot better than, say, a 10-character password. It's gonna take exponentially longer to crack passwords if you make them a lot longer and if you mix characters, uppercase, lowercase, spatial characters and so forth. As you can see here, it's taking a long time. I'll quit that. So I've use WPA rather than WPA2 in the file name. So let's press Enter now and see how long it takes to do this time around. We are incrementing from 10 digits or 10 characters up to 12 characters. Digits, letters, uppercase. So at the moment, it tells us that it's gonna take 7,000 years to crack this. Notice, that's what we cracking 10 characters, uppercase, lowercase, and digits. We can see the output of what it's doing there. It actually already cracked it, so it took it nine seconds to crack that. I was very fortunate with this password. So if I do dash dash show, it actually shows me the password that it found. So the second GPU found the password over there, took all of nine seconds to crack rather than the thousands of years that it anticipated that it would take. Originally it was gonna take 7,000 years, but it never took that long, I got lucky again. Moral of the story is, use good passwords. Don't use short passwords, mix your characters. So uppercase, lowercase, digits, special characters. Rather have a 30-character password than a short password. Rather use a phrase. Or as a lot of you have told me, and I agree with this, use another language. Don't use English as your password. If you can speak another language, then mix your languages in your passwords, because those kind of passwords are gonna be less likely to be found in password breaches, such as like RockYou, well-known password databases. So do things to improve the security of your wifi passwords. This applies to all types of passwords. Make sure that you share this kind of information with family and friends, that people are aware that they should use good passwords rather than bad passwords on their wifi networks. (upbeat rock music)",
    "transcript_keywords": [
        "password",
        "Hashcat",
        "crack",
        "passwords",
        "digits",
        "GPUs",
        "server",
        "dash",
        "show",
        "file",
        "Linode",
        "crack passwords",
        "Hashcat dash",
        "Linode server",
        "characters",
        "GPU",
        "long",
        "command",
        "brute force",
        "install hashcat"
    ],
    "transcript_entity_values": [
        "Hashcat",
        "Linux",
        "Frankfurt",
        "three",
        "SSH",
        "London",
        "eight-digit",
        "nine seconds",
        "10 digit",
        "two",
        "four",
        "60-day",
        "nine digits",
        "ASCII",
        "eight",
        "22 seconds",
        "NVIDIA CUDA",
        "second",
        "13 seconds",
        "about 52%",
        "English",
        "20 seconds",
        "9%",
        "Tel Aviv",
        "zero seconds",
        "CUDA",
        "6000",
        "two seconds",
        "four minutes",
        "7,000 years",
        "18 seconds",
        "12",
        "11 seconds",
        "10 seconds",
        "all eight",
        "20%,",
        "30",
        "21 seconds",
        "Hashcat",
        "today",
        "a few minutes",
        "one",
        "U",
        "27 seconds",
        "46 minutes",
        "all of nine seconds",
        "Eight",
        "70%",
        "about 19 seconds",
        "128",
        "38 seconds",
        "42 seconds",
        "first",
        "PMK",
        "Israeli",
        "WPA",
        "0.47%",
        "the estimated 7,000 years",
        "nvidia-smi",
        "0%",
        "23 seconds",
        "Press S",
        "four minutes and 29 seconds",
        "19 seconds",
        "PMKID",
        "one minute, three seconds",
        "2,500",
        "nine",
        "Linux X86_64",
        "WPA2",
        "David",
        "IP",
        "a hundred dollar",
        "one minute 54 seconds",
        "10 digits",
        "Ubuntu and Debian",
        "Linode",
        "25%",
        "one second,",
        "Debian",
        "First",
        "Nine seconds",
        "WPA2",
        "10",
        "18",
        "4,000",
        "six",
        "zeros",
        "four minutes, 43 seconds",
        "nine-digit",
        "seven seconds",
        "seven",
        "12 seconds",
        "Linode",
        "10-digit",
        "May",
        "five",
        "22,000",
        "a few seconds",
        "16 seconds",
        "10 digits",
        "41%",
        "CPU",
        "zero",
        "75%",
        "about 9%",
        "14 seconds",
        "Nightmare",
        "eight digits",
        "four minutes, 35 seconds",
        "the thousands of years",
        "GPU",
        "EAPOL",
        "seconds",
        "nine digits",
        "18 digits",
        "L",
        "Singapore",
        "26 seconds",
        "five seconds"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORG",
        "GPE",
        "CARDINAL",
        "ORG",
        "GPE",
        "QUANTITY",
        "TIME",
        "QUANTITY",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "MONEY",
        "ORG",
        "CARDINAL",
        "TIME",
        "ORG",
        "ORDINAL",
        "TIME",
        "PERCENT",
        "LANGUAGE",
        "TIME",
        "PERCENT",
        "GPE",
        "TIME",
        "ORG",
        "CARDINAL",
        "TIME",
        "TIME",
        "DATE",
        "TIME",
        "CARDINAL",
        "TIME",
        "TIME",
        "CARDINAL",
        "PERCENT",
        "CARDINAL",
        "TIME",
        "PERSON",
        "DATE",
        "TIME",
        "CARDINAL",
        "ORG",
        "TIME",
        "TIME",
        "TIME",
        "CARDINAL",
        "PERCENT",
        "TIME",
        "CARDINAL",
        "TIME",
        "TIME",
        "ORDINAL",
        "ORG",
        "NORP",
        "ORG",
        "PERCENT",
        "DATE",
        "ORG",
        "PERCENT",
        "TIME",
        "ORG",
        "TIME",
        "TIME",
        "ORG",
        "TIME",
        "CARDINAL",
        "CARDINAL",
        "FAC",
        "PRODUCT",
        "PERSON",
        "ORG",
        "MONEY",
        "TIME",
        "QUANTITY",
        "PRODUCT",
        "PRODUCT",
        "PERCENT",
        "TIME",
        "NORP",
        "ORDINAL",
        "TIME",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "MONEY",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "QUANTITY",
        "TIME",
        "CARDINAL",
        "TIME",
        "ORG",
        "QUANTITY",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "TIME",
        "MONEY",
        "PERCENT",
        "ORG",
        "CARDINAL",
        "PERCENT",
        "PERCENT",
        "TIME",
        "ORG",
        "QUANTITY",
        "TIME",
        "DATE",
        "ORG",
        "ORG",
        "TIME",
        "QUANTITY",
        "QUANTITY",
        "GPE",
        "GPE",
        "TIME",
        "TIME"
    ],
    "vector": [
        -0.08366893231868744,
        0.021128950640559196,
        -0.004791366867721081,
        -0.014396783895790577,
        0.022801930084824562,
        -0.004324623383581638,
        0.01609700359404087,
        -0.053919460624456406,
        -0.04843422397971153,
        0.03223452344536781,
        0.06448164582252502,
        0.06786560267210007,
        0.008156810887157917,
        -0.0732903778553009,
        0.026243237778544426,
        0.06006084382534027,
        -0.012632135301828384,
        -0.059203144162893295,
        -0.06837385892868042,
        -0.05287894606590271,
        0.015578033402562141,
        -0.0857846587896347,
        0.07184812426567078,
        -0.019495662301778793,
        0.05712084472179413,
        0.05526840314269066,
        0.09364767372608185,
        0.0244342889636755,
        -0.03940907120704651,
        0.015832096338272095,
        0.0499759241938591,
        0.014062832109630108,
        -0.014136803336441517,
        -0.002646536100655794,
        -0.05036722496151924,
        -0.04678737372159958,
        -0.007791965734213591,
        0.05055885389447212,
        -0.019600659608840942,
        -0.057407669723033905,
        -0.03631516918540001,
        -0.004380922298878431,
        -0.07752393186092377,
        0.05027296394109726,
        -0.06011216714978218,
        -3.175348319928162e-05,
        -0.02553158439695835,
        0.06575407087802887,
        0.06029820442199707,
        -0.026681259274482727,
        0.008605155162513256,
        -0.0012154540745541453,
        0.06024814024567604,
        0.054155364632606506,
        -0.05992623791098595,
        -0.04331519827246666,
        -0.07346674799919128,
        -0.014774363487958908,
        0.11360384523868561,
        -0.031503837555646896,
        0.011166073381900787,
        0.023022282868623734,
        0.003157583996653557,
        0.010749168694019318,
        0.01616388000547886,
        0.00020098300592508167,
        0.029544485732913017,
        0.002516969572752714,
        0.02336503192782402,
        0.07799046486616135,
        -0.027438146993517876,
        0.044819124042987823,
        -0.08115075528621674,
        0.039369020611047745,
        0.07441634684801102,
        0.07762125134468079,
        -0.03000727854669094,
        -0.07687856256961823,
        0.05878051370382309,
        -0.009210423566401005,
        0.07105464488267899,
        0.02324114926159382,
        0.04660279303789139,
        0.01923299953341484,
        0.04475589469075203,
        -0.0032741669565439224,
        -0.010314318351447582,
        0.0191192626953125,
        0.08642569929361343,
        -0.06363523751497269,
        -0.02600720338523388,
        0.05990927666425705,
        0.07386366277933121,
        0.01828194595873356,
        0.11724282801151276,
        -0.016766035929322243,
        -0.010855969041585922,
        -0.023258840665221214,
        -0.11788997054100037,
        0.05720299109816551,
        -0.046768657863140106,
        -0.04004431888461113,
        -0.03209943696856499,
        -0.07656119763851166,
        0.008279958739876747,
        0.007706398610025644,
        0.008039122447371483,
        0.07278206199407578,
        0.03776548057794571,
        0.013569571077823639,
        -0.010828758589923382,
        0.046656493097543716,
        0.014546585269272327,
        -0.03493909910321236,
        0.01839262619614601,
        0.04206142947077751,
        -0.0019354202086105943,
        0.07344266772270203,
        -0.03623850271105766,
        0.07362687587738037,
        -0.0066024609841406345,
        -0.008661244995892048,
        0.016895312815904617,
        0.002912275493144989,
        0.002275834558531642,
        0.028575636446475983,
        -0.08861646801233292,
        5.840244582704865e-33,
        0.05225013196468353,
        0.09581614285707474,
        -0.09184863418340683,
        -0.04365094006061554,
        0.07195735722780228,
        -0.05826975777745247,
        0.006340785417705774,
        -0.0010154449846595526,
        -0.011180485598742962,
        0.04512931406497955,
        -0.0671377032995224,
        -0.06290477514266968,
        -0.07062802463769913,
        -0.059988852590322495,
        0.15873360633850098,
        -0.03844880312681198,
        0.0064719985239207745,
        0.02925938367843628,
        0.025570759549736977,
        0.11599033325910568,
        -0.018995029851794243,
        -0.08023396134376526,
        0.057888519018888474,
        -0.03437013551592827,
        0.015071291476488113,
        0.010273374617099762,
        -0.04222007840871811,
        -0.027537202462553978,
        0.0974813923239708,
        0.0067688883282244205,
        0.011936449445784092,
        -0.0855565145611763,
        -0.028285037726163864,
        0.009220601059496403,
        -0.09311242401599884,
        -0.024480223655700684,
        -0.08957033604383469,
        -0.08565433323383331,
        -0.026676824316382408,
        -0.034791361540555954,
        -0.05534811690449715,
        -0.005915699061006308,
        -0.0347476452589035,
        0.0038467952981591225,
        0.06975618004798889,
        -0.08918174356222153,
        -0.03380996361374855,
        0.03745880722999573,
        0.00222047814168036,
        0.07518871128559113,
        -0.08144371956586838,
        0.04136597365140915,
        -0.05666659399867058,
        -0.016713276505470276,
        -0.03281155228614807,
        0.03841810300946236,
        0.10782826691865921,
        0.010075743310153484,
        0.09211897850036621,
        0.06307056546211243,
        0.019601471722126007,
        0.013471419923007488,
        0.024249179288744926,
        0.0026259867008775473,
        -0.06738785654306412,
        -0.10590147227048874,
        -0.0001113487160182558,
        0.06936469674110413,
        -0.07430640608072281,
        0.14381738007068634,
        -0.05195390433073044,
        -0.0010578831424936652,
        -0.05481942743062973,
        -0.030101871117949486,
        -0.01597161777317524,
        -0.06101422756910324,
        0.04904837906360626,
        0.047951117157936096,
        -0.05271194130182266,
        -0.01981431618332863,
        0.05575859919190407,
        -0.0014141201972961426,
        0.06703592091798782,
        0.056862518191337585,
        -0.06778924912214279,
        -0.0475296713411808,
        0.01659228652715683,
        -0.11205561459064484,
        -0.07690872251987457,
        0.03384712338447571,
        -0.03901275247335434,
        0.026228034868836403,
        0.039792973548173904,
        -0.05618030205368996,
        -0.03134873881936073,
        -4.95332785019571e-33,
        -0.042831990867853165,
        -0.010060900822281837,
        0.045112431049346924,
        0.02534617856144905,
        -0.0002688103122636676,
        -0.018593933433294296,
        -0.035644207149744034,
        0.027692489326000214,
        -0.040726494044065475,
        -0.0082406522706151,
        0.0679742842912674,
        -0.001976268831640482,
        0.011837415397167206,
        -0.0016477950848639011,
        0.08908861130475998,
        -0.08674898743629456,
        0.10255953669548035,
        -0.012642720714211464,
        -0.051171544939279556,
        0.02148844301700592,
        -0.0030091842636466026,
        0.10789328068494797,
        0.03335859254002571,
        -0.04952096566557884,
        -0.039668310433626175,
        -0.023555653169751167,
        0.0584898516535759,
        0.07756638526916504,
        0.0287946704775095,
        0.04847012832760811,
        -0.019663138315081596,
        0.04872698709368706,
        0.012170310132205486,
        0.01614270731806755,
        0.09563420712947845,
        0.006320228334516287,
        0.10993478447198868,
        0.041567057371139526,
        -0.04327605292201042,
        -0.006662716623395681,
        0.1035856083035469,
        0.004478966351598501,
        -0.056196428835392,
        -0.05593963712453842,
        -0.0500512421131134,
        -0.07493891566991806,
        0.010300425812602043,
        -0.024986397475004196,
        -0.14966049790382385,
        0.012571762315928936,
        0.07242626696825027,
        -0.0439847894012928,
        -0.001856764778494835,
        0.07913456857204437,
        0.01590450294315815,
        -0.000258916086750105,
        0.009316748008131981,
        -0.04003864899277687,
        0.007569674402475357,
        0.003412506775930524,
        0.01153420377522707,
        -0.029986873269081116,
        0.01611959934234619,
        0.08822494745254517,
        0.01308764424175024,
        -0.02823224663734436,
        -0.09662088751792908,
        0.06996914744377136,
        -0.04501313716173172,
        0.07371198385953903,
        -0.0711098462343216,
        -0.009339370764791965,
        0.028023144230246544,
        0.02951512672007084,
        0.011826550588011742,
        -0.008018499240279198,
        0.0048920405097305775,
        -0.010749069973826408,
        -0.021845057606697083,
        -0.07479573786258698,
        -0.013138389214873314,
        0.005005774088203907,
        -0.039066530764102936,
        -0.08326957374811172,
        0.029267389327287674,
        -0.04252087324857712,
        0.038412030786275864,
        0.027855170890688896,
        0.030570663511753082,
        0.057907961308956146,
        -0.088638536632061,
        -0.0349767841398716,
        0.011595123447477818,
        0.08614245802164078,
        -0.015817271545529366,
        -4.745018955532032e-08,
        -0.04158974066376686,
        0.0740833580493927,
        0.0514163114130497,
        0.07891736924648285,
        0.05088692903518677,
        0.020372772589325905,
        -0.027283893898129463,
        -0.09424492716789246,
        -0.021960770711302757,
        0.0056175654754042625,
        0.01905001327395439,
        0.01437742542475462,
        -0.06448305398225784,
        -0.008344770409166813,
        -0.03602001443505287,
        -0.008706754073500633,
        -0.07948686927556992,
        -0.00469161244109273,
        -0.006920752581208944,
        -0.00878776703029871,
        -0.07378408312797546,
        0.04411039501428604,
        0.04746212437748909,
        0.01609308086335659,
        0.014559428207576275,
        0.04725971817970276,
        0.04347269982099533,
        -0.036088962107896805,
        0.0003553103597369045,
        0.04325169324874878,
        -0.12832076847553253,
        -0.023493658751249313,
        -0.005216491408646107,
        -0.004679062403738499,
        -0.07610131800174713,
        0.03553101047873497,
        -0.08811358362436295,
        -0.010937218554317951,
        -0.01711079850792885,
        0.05365697667002678,
        -0.06838630139827728,
        -0.01157160010188818,
        0.0298085305839777,
        -0.01893656700849533,
        -0.030470363795757294,
        0.014152240939438343,
        -0.0043298909440636635,
        0.021886497735977173,
        0.05979616567492485,
        0.05585820600390434,
        0.01692756824195385,
        0.017156081274151802,
        0.03576851263642311,
        -0.026414748281240463,
        0.01244906522333622,
        0.03232976421713829,
        0.038359109312295914,
        -0.13884486258029938,
        0.024252470582723618,
        0.019999776035547256,
        -0.006493133492767811,
        -0.025363992899656296,
        -0.02214178629219532,
        0.015867019072175026
    ]
}