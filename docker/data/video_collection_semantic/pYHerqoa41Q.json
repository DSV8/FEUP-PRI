{
    "id": "pYHerqoa41Q",
    "title": "Hacking networks with Python (FREE CCNA 200-301 Course 2024)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2024-09-01T14:00:45Z",
    "video_url": "https://www.youtube.com/watch?v=pYHerqoa41Q",
    "category": "Science & Technology",
    "tags": [
        "ccna",
        "kali linux",
        "linux",
        "kali linux hack",
        "ccna course",
        "ccna free course",
        "free ccna course",
        "ccna v1.1",
        "ccna 2024",
        "free ccna",
        "ccna 200-301",
        "cisco ccna",
        "ccna training",
        "packet tracer",
        "ccna full course",
        "new ccna",
        "ccna exam",
        "ccna study",
        "ccna 200-301 full course",
        "free lab",
        "free cisco",
        "switch",
        "starlink",
        "200-301",
        "scapy",
        "python",
        "scapy kali linux",
        "python hacking",
        "ethical hacking",
        "python scapy",
        "hacking",
        "spanning tree root guard",
        "root guard",
        "kali linux python",
        "spanning tree",
        "hack",
        "router"
    ],
    "views": 84645,
    "likes": 3640,
    "comments_count": 186,
    "description": "Big thanks to Cisco for sponsoring this video! You can access the free lab tutorial here:   // CCNA Complete Practical Course // Expect regular updates - the full course will be uploaded on my Tech Channel here:   // GitHub Scripts used in this video// Spanning Tree Root Attack:    Spanning Tree DOS Attack:    // David's SOCIAL //  Discord:   X:   Instagram:   LinkedIn:   Facebook:   TikTok:   YouTube:   // MY STUFF //     // SPONSORS //  Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com  // MENU // 00:00 - Coming Up 01:15 - Cisco U Advert 02:21 - Root Guard 04:08 - Demo 1: Hacking the Root Bridge 06:28 - Scapy 11:47 - Enable Root Guard 16:48 - Demo 2: Switch Advertising that is the New Root 18:55 - BPDU Guard 25:11 - Enable BPDU Guard 29:36 - Conclusion 30:14 - Outro  ccna python ccna v1.1 kali linux ccna 200-301 linux 200-301 ubuntu cisco u free ccna spanning tree spanning tree root guard spanning tree bpdu guard bpdu guard root guard cisco scapy free ccna course free ccna training new ccna cisco ccna ccna course ccna certification ccna training packet tracer ccna full course new ccna ccna exam ccna study ccna 200-301 full course cisco training ccna 200-301 course ccna 2024 network engineer free lab ccna course for beginners ccna security free cisco ccna fundamentals ccna full course 2024 ccna tutorial ccna networking   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   Disclaimer: This video is for educational purposes only.  #ccna #kalilinux #hacking",
    "description_links": [
        "https://davidbombal.wiki/ciscouroot",
        "https://davidbombal.wiki/freeccnayt",
        "https://github.com/davidbombal/scapy/blob/main/spanning-tree-root-attack.py",
        "https://github.com/davidbombal/scapy/blob/main/spanning-tree-dos-root-port.py",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/@davidbombal",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "this video is part of my complete practical CCNA course where I'm not showing you things using simulations but I'm actually demonstrating stuff with real equipment such as Cisco switches Linux in this case Kali Linux which I'll use to hack this network Windows devices and a Mac I've also got great news in that Cisco is sponsoring this video and making Labs available so that you can practice what I'm doing here yourself use the links below to access CSCO U so that you can practice this yourself. In the CCNA exam 200-301 v1.1 they tell us that we need to know root guard Loop guard BPDU filter and BPDU guard for the exam in this video I'm specifically going to show you root guard and demonstrate it as well as BPDU guard but again rather than just using a simulation I'm going to attack these physical devices using Kali Linux and a Python script that I've written now you don't have to study the Python script for the CCNA exam even though highly recommend that you learn python what you need to know is how to use root guard as an example and BPDU guard to protect a Spanning Tree Network I'm going to show you those two in this video and in the next video I'll show you Loop guard and BPD filtering. Did you know that you can join Cisco U for free and get access to a whole bunch of content there is both paid as well as free content available on Cisco U huge amount of content available in their paid tier where you get access to networking train training security training cloud training and a whole bunch of other training it's not just Cisco training you also get access to third party training as part of Cisco U but if you can't afford the price of Cisco U there is a whole bunch of free training available you can get access to various tutorials created on Cisco U once again you can practice what I'm showing you in this video on Cisco U for free I really want to thank Cisco for sponsoring this video as well as creating Labs that go with this training so use the link below once again to sign up to CSCO show The Love register for a free account get access to the free content there as well as follow along with this video now back to me showing you how you can use Python to hack networks and then I'll show you how to protect your networks from fake BPDUs sent into a Spanning Tree network using very basic Python scripts. So let's start with root guard so what is root guard it basically protects your Spanning Tree topology against unauthorized switches attempting to become the root bridge in other words they send superior BPDUs not inferior BPDUs or Bridge Protocol Data Units Superior BPDUs means that they have a lower priority as an example or lower Mac address and therefore through the election process become the root we want to block that so root guard is going to block access on a port until receipt of superior BPDU stops this allows you to protect your network against hackers which I'm going to demonstrate in this video or switches that are introduced into the topology that have a lower priority or lower Mac address in other words are going to be elected as the root bridge now in a Spanning Tree environment like this this switch could be the root as an example and this could be the backup route we do not want to allow switches to tell us that they are the root Bridge or root switch remember Bridge as a term in Spanning Trees based on bridges that existed years ago so we often talk about a root Bridge rather than a root switch in Spanning Tree so here's a example a rogue switch is introduced into the environment sending BPDUs but in this case Superior BPDUs let's say this switch has a priority of 4096 it's the root switch or the root bridge in the topology this switch sends BPDUs saying I am the root Bridge my priority is 0 as an example this will therefore become the root bridge but we want to stop that we want to make sure that our switch remains the root bridge in the same way we don't want to switch like this switch over here this access switch telling the network that it's the root Bridge we're going to error disable a port where Superior BPDUs are received now there's no better way I think to show this than to do a demonstration in this example I'm using Kali Linux which is running over here on this laptop in a Virtual Machine I'm going to send BPDUs from Kali using a Python script at the moment this switch the 9200CX switch in the middle is is the root switch but we going to say that we are the root switch by sending Superior BPDUs so in our topology we've got the 9200 over here we've got a Cisco 1000 switch switch one over here and another Cisco 1000 switch over here so three Cisco switches the 9200 has a Mac connected to it and the 1,000 series switches have Windows devices connected to them but the important part of the network is what's going to happen on this port 1/0/2 on the 9200 so the 9200 series switch I'll go to enable mode show Spanning Tree notice at the moment for VLAN1 the root ID and the bridge ID are the same so in other words the priority for both is 4097 that's because this switch and I'll just type sh run | include span to show us the output this switch has a priority set to 4096 increments of 4096 to set the priority this one is set to 4096 this is VLAN1 so the priority here is 4097 4096 + 1 because extended system IDs are used on this switch so what we can see is that this bridge is the root in other words this switch in the middle is the root switch we can see that all ports are designated ports all ports of forwarding we would expect the root switch or root bridge to have all ports as designated ports and all of them forwarding so again shows spanning tree local switch is the root priority of the root and Bridge are the same Mac address is the same okay but on Kali Linux which is connected to gigabit 102 on the 9200 we're going to send BPDUs so ls on Kali I've got the script spanning tree root hack.py I'm going to run the script so that you can see what happens and then I'll talk a bit about the script again you don't have to learn the details of the script I'm basically using something called scapy to create packets and inject packets into the network so sudo python3 I'm using Python 3 in this example and the python script that we're going to run is stp root_hack.py before I run that again show spanning tree notice this port gigabit 102 is a designated port it's forwarding the local switch is the root switch okay so run the script put in my sudo password something happens now you can see packets are being sent into the network previously gigabit 1/0/2 was a designated Port show spanning tree now notice gigabit 1/0/2 is now root Port it is forwarding but notice the root switch has a MAC address of a bunch of zeros and a one I don't know about you but I think that's a little bit suspicious which device has a MAC address of all 0 and a one and notice the priority is set to 0 in other words Kali Linux has now become the root switch in the topology again gigabit 1/0/2 is the root Port of the 9200 series switch in our topology this port is a root Port indicating that the root switch of the topology is Kali Linux by running a simple python script made Kali the root switch of our topology so again on the switch gigabit 102 is the root Port of the switch it's no longer the root the root has a priority of 0 and a MAC address of 1 what I'll do is stop the script on Kali on the switch show spanning tree still showing root Port give it a bit of time and as you can see it's now become the designated Port the switch has now become the root again whereas previously it wasn't the root if I run the script again switch was the root no longer the root the root is now Kali Linux so by running a simple python script I'm able to change the root switch in a Spanning Tree topology this is what the script looks like what I'm doing basically and again you don't need to know the details of the script I'm just showing you this for interest sake you can get the script on my GitHub so I have put the script on my GitHub using this link or you can just search for David Bombal GitHub and you'll find my scapy scripts what I'm doing is importing scapy scapy allows you to create or forge packets of any kind if you like so you can put layer three above layer four as an example you can mix your layers up you can do all kinds of interesting things with scapy create packets that shouldn't be allowed on a network but in this example I'm importing scapy and then I'm going to capture a Spanning Tree packet this is the destination Mac address for Spanning Tree so rather than creating a frame from scratch I'm going to capture this frame off the network with a destination address of this and then all I'm going to do is change some values in the packet so I'm going to change the source Mac address to be this so when the packet is sent into the network we can actually view the packet that's sent out at Layer Two the destination Mac address is the spanning tree protocol but I've changed the source to be a bunch of 0s and 1 so that's the source Mac address LLC has values that haven't been changed and this is the advantage of capturing a packet and then manipulating it when you send it out because you don't have to create all the layers but notice the root Mac address is this and the bridge Mac address is this because in the packet I'm saying root Mac address is this bridge Mac address is this and I'm setting the root ID to this and the bridge ID to this so I'm basically changing all the fields in the packet to ensure that my Kali Linux machine becomes the root so root ID is that bridge ID is that Mac addresses are set to a bunch of zeros and a one I've set the port ID age max age and other timers I've just left at default again one of the advantages of grabbing the packet off the Y and then just making changes to it is that your packet is a or frame is a legitimate packet or frame and you're just changing some values rather than having to recreate the entire packet so again you don't have to know this for the exam but there is my simple python script I'm showing the frame and then I'm creating a loop where I send 50 packets into the network so I'm sending packet into the network waiting a second and then looping so every second just send a BPDU into the network saying that I am the root switch and the net result is once again show spanning Tree on the 9200 it has this port as a designated Port it is the root switch but as soon as I launch my script it captures the packet off the wire or frame off the wire manipulates it and sends frames into the network the 9200 is no longer the spanning tree root the root becomes Kali you're going to want to stop this kind of nonsense and the way to do that again is to use root guard so I'll show you how to set up root guard first and then I'll show you demo 2 where a switch has a lower priority and becomes the root switch okay to enable root guard you do this on a per Port basis so you go into Global configuration mode and then on each interface or each port in this example gigabit 1/0/1 or for this specific example be 1/0/2 we enable root guard by using the command spanning tree guard root so simple as that to set this up if you type show run and a interface such as gigabit 1/0/1 you'll see in the output that that command has been enabled on your interface so before continuing with slides let's actually do a demonstration so we can see what's happening practically so on the switch conft interface gigabit 1/0/2 in this example spanning tree press question mark guard question mark root question mark enter so all I have to do is type that command on the interface and as you can see root guard has been enabled on that interface of the switch now in my topology I also have an interface to these two switches so I could enable spanning tree root guard on both of those ports so let's do that while we're here so I'll press up key twice go on to interface gigabit 1/0/3 and enable spanning tree guard root on that go on to the other interface gigabit 1/0/4 and enable spanning tree guard root on that interface okay so that may not be so clear so I'll type show run | begin gig and as you can see there in the running configuration of the switch this interface this interface and this interface have spanning tree root guard enabled on them okay so let's see what happens when Kali Linux sends BPDUs into the network so I'll clear the screen here and type pseudo and run the command again sudo python spanning tree root hack packets are now being sent into the network and notice straight away on the switch it says spanning tree root guard block root guard blocking on Port gigabit 1/0/2 on VLAN1 so show spanning tree now notice we've got a root inconsistent output notice on gigabit 1/0/2 it says blocking for for VLAN 1 root inconsistent so this is done on a per VLAN basis for VLAN1 that Port is blocked you can see once again in the output that it was blocking on VLAN1 and notice now it says unblock on VLAN 1 and that's because BPDUs are no longer being received so the port is now moved to the learning state it is now a designated port and should transition to the forwarding state after a period of time so it's learning and then should go forwarding which it's now done because no BPDUs are being received that's because Kali only sends 50 packets and then stops but if I run that again notice Port is now blocking again so shows spanning tree this port is now blocking Port is marked as a root inconsistent okay so what triggers root guard to block a port so the trigger is when a superior BPDUs is received by the switch switch on a specific Port the port is then put into the broken state for that VLAN so I said blocking but it's actually seen as broken all traffic is discarded the port state is root inconsistent as we could see over here notice broken root inconsistent by default the port is restored after a period of time when Superior BPDUs are no longer received and that's what we saw here notice root guard unblock Port is unblocking on gigabit 1/0/2 in VLAN 1 because no Superior BPDUs are received by the switch now you can use the command show spanning tree inconsistent ports to see which ports are in the inconsistent state so at the moment show spanning tree looks good show spanning tree inconsistent ports now you can see no ports are inconsistent at the moment but let's change that by running our script again so you can see that root guard is blocking the port show spanning tree inconsistent ports this port gigabit 1/0/2 on VLAN 1 is now root inconsistent number of ports in system is 1 if we look at a specific interface so gigabit 1/0/2 you can see that for this interface which is different to say 1/0/1 this interface is broken root inconsistent is the current state now that no BPDUs are received if we run that command again notice it's back to a point-to-point link it's busy learning the role is now designated status is learning and that will take a bit of time and then it will go forwarding as you can see over there send BPDUs again into the network Port is blocking show spanning tree status is broken type is Rooting consistent okay I think I've covered that enough now last demonstration is to simply change one of the switches to be a root switch so rather than introducing another switch into the topology I'm simply going to make this switch switch1 say that it's the root switch so on the 9200 show spanning tree at the moment switch is the root switch all ports are designated ports and are forwarding but what I'll do on the 1000 series switch switch1 that's the switch at the top here I will type spanning tree VLAN1 priority and in this case I'll set it to 0 the reason why is Show run | include span shows me that this switch has a priority of 4096 so I need to make the 1000 series switch have a lower priority so I'll set that to 0 and notice straight away root guard blocking on gigabit 1/0/3 so show spanning tree again this port is now broken root inconsistent on the switch show spanning tree it says that it's the root switch all ports are designated and I'll just do that command again so we can see clearly for VLAN1 priority is 1 it thinks it's the root switch but on the other side this switch is blocking the 1000 series switch so what I'll do is remove that command show spanning tree now switch still thinks it's the root it's now learned that it's no longer the root the switch with this priority 4096 and this Mac address is the root in other words the 9200 the local switch has a higher priority and Mac address so it now has a root port forwarding to the root switch and on the root switch or the 9200 notice the port is no longer blocking because no superior BPDUs are received okay so I think that's enough I have now shown you how to enable root guard using this simple command you do that on ports where you don't want to receive Superior BPDUs and if you do the port on a specific VLAN is basically blocked now let's talk about BPDU guard and how you can use BPDU guard to protect a spanning tree Network now on ports such as these two connected to PCs you may enable PortFast so spanning tree doesn't have to go through the different stages of blocking listening learning forwarding it can immediately go forwarding the problem with that is what happens if BPDUs are received by clients in that case we want to enable BPDU guard so that the port is error disabled if we receive BPDUs now a user with a PC may be connected directly to a switch but may decide that they're going to use a switch to allow two PCs to connect to the network in that case BPDUs may be sent by that switch and the switch could potentially become the root Bridge remember lowest Mac address lowest priority becomes the root Bridge which means that an old switch could potentially become the root Bridge of your topology another thing a user may do is connect two ports to the switch and that will cause a loop if you've got PortFast enabled on your edge switch so the moral of the story is don't trust your users enable BPDU guard on PortFast Port so that users don't by mistake or on purpose cause spanning tree loops or cause problems in your topology so in this topology I've changed it slightly I've made switch1 the root Bridge so this little 1000 series switch is now the route I've changed the cables as well so that the 9200 the middle switch is now connected to this bottom switch on Port 1/0/4 and c1002 is connect connected to the top switch so basically from the 9200 series point of view to get to the root Bridge it has to go via c1002 this bottom switch we can see that on the switch shows spanning tree its root port is gigabit 1/0/4 the switch in the topology but Kali Linux is now going to send BPDUs saying that it has a better path to get to the root Bridge so basically we're going to tell the switch to use that path to get to the root Bridge which means it should block this port because it has a better path to get to the root bridge in other words it'll cause problems in the network if this Mac sends traffic to this PC or to that PC it's not going to be able to send that traffic successfully because this port is now blocking so again we're going to make this switch believe that its root Port is the port to the Kali Linux machine when this Mac tries to send traffic through the network it's not going to work because this port is blocking so we're going to essentially break this network so on the MacBook at the top there I've got it sending a continuous ping to both the PCs on the Mac if we do a command such as if config pipe grip 192 we can see that its IP address is 192.168.1.2 it's pinging 1.1 which is this Windows computer and pinging 1.3 which is the Windows computer at the top continuous ping from the Mac to those two PCS let's hack the network user a simple Python script once again script that looks like this essentially what we're going to do is sniff spanning tree destination Mac address is spanning tree we're going to manipulate the packet to say that the path cost to get to the root is zero and we're going to send 50 packets into the network so ls on Kali we're going to block the network so cat stp block that's the script again you don't need to know this python script for the exam I simply want to show you a practical example of this so sudo of python spanning tree block before I hit enter notice once again on the 9200 series switch its root Port is gigabit 1/0/4 1/0/2 where the PC is connected is forwarding and it's a designated Port so press enter put in my password go back to the switch notice the root Port has become 1/0/2 GB 1/0/4 which was originally the root Port is now an alternate port and the state is blocking it was forwarding and now it's blocking because the switch believes that the best path to the root is via the hacking machine it believes that it can get to the root Bridge or root switch via the Kali Linux machine which it can't obviously what you'll notice is pings are failing on the MacBook the Mac is no longer able to Ping 192.168.1.1 this Windows computer or 192.168.1.3 that Windows computer at the top because the switch believes that the way to get to the rout is via Kali Linux this computer over here which is obviously not correct okay Kali has now stopped sending traffic into the network so hopefully what should happen is the root Port should go back to 1/0/4 which it has but notice the other two ports are still blocking because spanning tree needs to converge so now the status is learning and eventually that will go forwarding and there you go ports are now forwarding so back on the Mac notice pings are now succeeding but as soon as Kali sends BPDUs into the network once again root Port is now changed to gigabit 1/0/2 and pings are failing on the MacBook We have basically broken this network gigabit 1/0/4 is blocking it's an alternate port root Port is 1/0/2 so this port is now blocking root Port according to the switch is this port it's trying to send traffic from this Mac to that Windows computer and this Windows computer via Kali which is obviously not going to work we have essentially broken the network by sending BPDUs from Kali to the 9200 series switch again as soon as the python script ends MacBook can now ping the two Windows computers okay so how do we fix this we use BPDU guard which protects against BPDUs received on ports where they should not be received such as PortFast ports the receipt of unexpected BPDUs may be accidental someone by mistake plugged in the wrong port as an example or may be part of an unauthorized attempt to add a switch to the network someone shouldn't have added a switch to the network but they did so we want to block those ports so the way you set this up is on a Spanning Tree PortFast so let's say gigabit 1/0/2 where you've got PortFast enabled we want to run this command spanning tree bpdu guard enable so so it's only one additional command on the PortFast Port and here you can see the output of the show run command notice PortFast is enabled as well as BPDU guard on gigabit 1/0/2 what's the trigger any BPDU received on that Port will cause the port to be error disabled spanning tree removes the interface from the spanning tree instance so interface is no longer connected to spanning Tree by default recovery works as follows you need to shut the interface down and then no shut it so you have to manually shut it down and then no shut it or you can configure error disable recovery parameters but by default you have to manually shut and no shut at the Port this is what it looks like when BPDU guard is running we see a BPDU on the Port Port is error disabled and you can use a show command show interface specific interface status and you can see the port is error disabled now again slides are okay but it's much better to see this practically on this interface where are hacking device is connected we want to enable BPDU guard so conft interface gigabit 1/0/2 spanning tree bpdu option we're going to use is guard enable so showrun interface gigabit 1/0/2 I have previously configured spanning Tree PortFast on this port and we are enabling BPDU guard this is not relevant in this case I changed a spanning tree cost on this interface just to make sure that the the lab worked properly that's not needed you don't need to configure that these are the two important commands to take note of so before we send BPDUs into the network let's have a look at the status of the port as you can see there this interface is connected we can see information about the speed etc interesting that the speed was negotiated incorrectly that's why I had to set a spanning tree cost this should be showing gig but for whatever reason has decided to negotiate at 100 meg rather than gig on that interface but anyway show spanning tree that's what it looks like now I'll send BPDUs into the network from Kali and as you can see here spanning tree block BPDU guard receive BPDU on gigabit 1/0/2 with BPDU Guard enabled disabling the port so BPDU error detected on this port putting the port into an error disabled state interface has now changed to down so notice interface went down so show spanning tree notice that interface is no longer shown in the topology looking at the interface so show interfaces gigabit 1/0/2 status notice Port is error disabled now once the packets are stopped on the MacBook notice no pings were dropped so going all the way back here sequence numbers you can see no pings were dropped pings are continuing the network hasn't broken because of BPDUs is being sent by Kali Port is error disabled what we'll have to do is manually reenable it so go onto that interface gigabit 1/0/2 shut it down and then no shut it to reenable the interface so interface has now gone administratively down no shut it interface has now come up so if we look at the status of that interface again notice it's now connected if we look at Spanning Tree notice the port is is now forwarding interface is connected but if someone does something they shouldn't like sending BPDUs into the network interface goes down Spanning Tree has blocked it BPDU guard has blocked the port interface has gone down so if we look at the status once again so show interfaces gigabit 1/0/2 status notice error disabled again that doesn't affect the Mac all traffic is going through the network correctly the port where a BPDU was received is error disabled status is down basically it's no longer part of Spanning Tree okay so that was a long video but hopefully I've shown you practically how this works let me know if you enjoy seeing practical demonstrations like this of how networks actually work rather than just learning about stuff in pictures or simulations I'm hoping that's showing you how things actually work on a iOS X switch as well as iOS switches makes it more real world for you I really want to thank Cisco once again for sponsoring this video don't forget you can use the labs link below so that you can practice this for yourself and actually see how this works I'm David Bombal and I want to wish you all the very best",
    "transcript_keywords": [
        "show Spanning Tree",
        "spanning tree root",
        "Spanning Tree",
        "spanning tree bpdu",
        "Kali Linux",
        "Spanning Tree Network",
        "spanning tree guard",
        "port root Port",
        "tree guard root",
        "tree root guard",
        "root Port",
        "Kali Linux machine",
        "Port show spanning",
        "python spanning tree",
        "Spanning Tree notice",
        "root switch",
        "root bridge",
        "tree inconsistent ports",
        "BPDU guard",
        "root guard"
    ],
    "transcript_entity_values": [
        "three",
        "Port 1/0/4",
        "1/0/2 GB",
        "Cisco",
        "two",
        "four",
        "stp",
        "Kali Linux",
        "only one",
        "second",
        "1/0/1",
        "David Bombal GitHub",
        "Python",
        "9200CX",
        "Linux",
        "1000",
        "LLC",
        "0s",
        "Python",
        "CSCO",
        "1,000",
        "David Bombal",
        "192.168.1.3",
        "Bridge",
        "Tree",
        "1/0/4",
        "4096",
        "The Love register for a",
        "3",
        "100 meg",
        "Spanning Trees",
        "BPDU Guard",
        "VLAN",
        "Port of the 9200",
        "Spanning Tree",
        "one",
        "VLAN 1",
        "Port",
        "the MacBook the Mac",
        "BPDU",
        "Spanning Tree",
        "Kali Linux",
        "the Port Port",
        "Windows",
        "switch1",
        "first",
        "Bridge",
        "Spanning Tree",
        "Port",
        "Mac",
        "VLAN1",
        "MacBook",
        "Labs",
        "Port",
        "200-301",
        "9200",
        "IP",
        "MacBook",
        "1/0/2",
        "PortFast Port",
        "1/0/2",
        "MAC",
        "Kali Port",
        "Cisco U",
        "9200",
        "1.3",
        "102",
        "Layer Two",
        "4097",
        "1",
        "zeros",
        "1/0/2",
        "third",
        "iOS X",
        "Y",
        "1/0/3",
        "2",
        "VLAN1",
        "1.1",
        "zero",
        "Network",
        "192",
        "Kali",
        "Mac",
        "VLAN1",
        "max",
        "years ago",
        "Cisco",
        "CCNA",
        "0",
        "Ping 192.168.1.1",
        "50"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "FAC",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "CARDINAL",
        "GPE",
        "CARDINAL",
        "ORG",
        "DATE",
        "WORK_OF_ART",
        "ORG",
        "CARDINAL",
        "PERSON",
        "PRODUCT",
        "PERSON",
        "ORG",
        "ORG",
        "CARDINAL",
        "WORK_OF_ART",
        "CARDINAL",
        "QUANTITY",
        "LOC",
        "ORG",
        "ORG",
        "FAC",
        "ORG",
        "CARDINAL",
        "LAW",
        "ORG",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "PERSON",
        "FAC",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "PRODUCT",
        "FAC",
        "FAC",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "GPE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "FAC",
        "TIME",
        "FAC",
        "PRODUCT",
        "ORG",
        "PERSON",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "EVENT",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "NORP",
        "ORG",
        "ORG",
        "CARDINAL",
        "LOC",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PERSON",
        "PERSON",
        "PERSON",
        "PERSON",
        "DATE",
        "GPE",
        "ORG",
        "CARDINAL",
        "PERSON",
        "CARDINAL"
    ],
    "vector": [
        -0.1013261154294014,
        0.004746441263705492,
        -0.03148215636610985,
        -0.01792285032570362,
        0.024821478873491287,
        -0.06669959425926208,
        -0.022905347868800163,
        -0.017126580700278282,
        -0.06503495573997498,
        0.012720738537609577,
        0.046542853116989136,
        -0.057258762419223785,
        0.0023132239002734423,
        -0.03386671096086502,
        0.039321720600128174,
        0.05419992282986641,
        -0.05306103080511093,
        -0.011846831068396568,
        0.022309917956590652,
        -0.07614070177078247,
        -0.0010458354372531176,
        -0.027029067277908325,
        -0.015984676778316498,
        -0.0062163639813661575,
        -0.06250404566526413,
        0.004919139668345451,
        -0.016889693215489388,
        0.01073471363633871,
        -0.024619007483124733,
        -0.07121023535728455,
        -0.021737338975071907,
        0.0806204229593277,
        -0.018352996557950974,
        -0.021848540753126144,
        0.023823648691177368,
        0.012950089760124683,
        -0.07904049754142761,
        -0.03401950001716614,
        -0.019225632771849632,
        -0.018386337906122208,
        0.04042046144604683,
        0.005406773183494806,
        0.0061557721346616745,
        -0.02699078619480133,
        -0.03464965522289276,
        -0.0322466604411602,
        -0.009772655554115772,
        0.016085287556052208,
        0.07039330154657364,
        -0.0783340111374855,
        -0.012184731662273407,
        -0.017885999754071236,
        0.008824976161122322,
        -0.015898508951067924,
        0.04792054370045662,
        -0.03576936945319176,
        -0.0009232013835571706,
        -0.02027260698378086,
        0.1279544234275818,
        -0.050117865204811096,
        0.07920460402965546,
        0.0020723191555589437,
        -0.03737831488251686,
        0.056038998067379,
        -0.01923285983502865,
        -0.02921508066356182,
        -0.02027541771531105,
        0.11861854046583176,
        0.02482517436146736,
        -0.00017890152230393142,
        -0.0034936771262437105,
        -0.03670807555317879,
        -0.05425272881984711,
        0.06844790279865265,
        0.07771355658769608,
        0.02949327416718006,
        0.03337771072983742,
        -0.03982742875814438,
        -0.006701699458062649,
        -0.05774535983800888,
        0.06267515569925308,
        -0.06441545486450195,
        -0.0583978071808815,
        0.03866078332066536,
        0.07384828478097916,
        0.016532184556126595,
        0.00796792283654213,
        0.00869059655815363,
        0.07069344818592072,
        0.006996362004429102,
        0.02656312845647335,
        0.07535673677921295,
        -0.011327613145112991,
        0.026364685967564583,
        0.005244226194918156,
        0.014783521182835102,
        0.009079265408217907,
        -0.03754404932260513,
        -0.11267097294330597,
        0.1513439565896988,
        0.02905353531241417,
        -0.00782321859151125,
        -0.05196649953722954,
        -0.08926016837358475,
        0.027240898460149765,
        0.05171725153923035,
        0.05832933261990547,
        0.03945683687925339,
        0.08480522781610489,
        0.05769936740398407,
        -0.04497535526752472,
        0.013828866183757782,
        -0.04474151134490967,
        -0.1074264869093895,
        0.006087901536375284,
        0.041964560747146606,
        -0.02559693343937397,
        0.07751588523387909,
        0.05533779785037041,
        0.03383813798427582,
        0.04973083734512329,
        0.012856900691986084,
        -0.022929169237613678,
        -0.013732315972447395,
        0.018157484009861946,
        -0.04044317081570625,
        -0.010863181203603745,
        7.163198822366054e-33,
        0.008003124967217445,
        0.0038172458298504353,
        -0.07803041487932205,
        0.009668504819273949,
        0.16929763555526733,
        0.014314619824290276,
        0.04895082488656044,
        0.0026642298325896263,
        -0.13225795328617096,
        -0.014333118684589863,
        -0.061287082731723785,
        -0.011061533354222775,
        0.008220222778618336,
        -0.017761562019586563,
        -0.013548430055379868,
        -0.052270613610744476,
        0.014583850279450417,
        -0.06988917291164398,
        -0.0052827694453299046,
        -0.012449306435883045,
        0.033778320997953415,
        -0.009924128651618958,
        0.008619585074484348,
        0.010962176136672497,
        0.03983128443360329,
        -0.018296197056770325,
        -0.029200131073594093,
        -0.06464816629886627,
        0.10602182894945145,
        0.04137522354722023,
        -0.0865749940276146,
        0.01327394600957632,
        -0.014116179198026657,
        0.026152707636356354,
        0.021288523450493813,
        0.008151024580001831,
        0.003420706372708082,
        -0.12158433347940445,
        -0.09331376105546951,
        -0.06603830307722092,
        -0.051396023482084274,
        -0.01454230584204197,
        -0.028628021478652954,
        -0.0431118942797184,
        -0.012066462077200413,
        0.02612142823636532,
        -0.06249184161424637,
        0.057343196123838425,
        -0.011639418080449104,
        0.07170619815587997,
        -0.0028829423245042562,
        0.008652093820273876,
        -0.029362764209508896,
        -0.024416740983724594,
        -0.026684731245040894,
        -0.02455771528184414,
        0.012128227390348911,
        0.025769218802452087,
        0.03636367991566658,
        0.03395293280482292,
        0.030448494479060173,
        0.02363869547843933,
        -0.03943345695734024,
        0.044504180550575256,
        -0.04109876975417137,
        0.040717385709285736,
        -0.07215742766857147,
        0.0007178300875239074,
        0.04555738717317581,
        -0.045374978333711624,
        -0.10639792680740356,
        0.038610003888607025,
        -0.04586511477828026,
        0.03773907572031021,
        -0.031074965372681618,
        0.01688161864876747,
        0.004750425927340984,
        0.014155659824609756,
        -0.012484091334044933,
        0.02558702789247036,
        -0.01414833776652813,
        -0.06126006692647934,
        0.053338438272476196,
        0.006669215392321348,
        0.02095114067196846,
        -0.06418091058731079,
        0.05042637512087822,
        -0.061444416642189026,
        -0.0276079960167408,
        0.07824026048183441,
        -0.024360772222280502,
        0.0028098304755985737,
        0.007799568586051464,
        0.06421263515949249,
        0.006744604092091322,
        -8.219420904198189e-33,
        -0.0500444732606411,
        0.06133900582790375,
        0.033970724791288376,
        -0.07553356885910034,
        0.026277843862771988,
        -0.049437567591667175,
        0.020982656627893448,
        -0.034144461154937744,
        0.05629604682326317,
        -0.024771373718976974,
        0.007054101675748825,
        0.011914835311472416,
        -0.02617647871375084,
        -0.057889048010110855,
        0.0622706413269043,
        -0.05373203009366989,
        0.045718904584646225,
        -0.0035541930701583624,
        -0.07016463577747345,
        -0.006905837915837765,
        -0.016169767826795578,
        0.18429361283779144,
        -0.08390477299690247,
        -0.010617188178002834,
        0.008086329326033592,
        0.009143241681158543,
        0.08966287970542908,
        0.10646554082632065,
        0.09476619213819504,
        0.030551575124263763,
        -0.0025338768027722836,
        0.03900020197033882,
        -0.07015954703092575,
        0.09487449377775192,
        0.007856732234358788,
        0.1347557008266449,
        0.07242395728826523,
        0.10304296016693115,
        -0.028400782495737076,
        -0.02503199316561222,
        0.09730369597673416,
        0.03872658312320709,
        -0.13618531823158264,
        0.01614471711218357,
        -0.01784253679215908,
        0.013274552300572395,
        0.010154984891414642,
        0.02380167320370674,
        -0.11435998231172562,
        0.005320285446941853,
        0.052804235368967056,
        -0.01847205124795437,
        0.05577424168586731,
        0.008355708792805672,
        -0.014379855245351791,
        0.01716303639113903,
        0.06780795753002167,
        0.01654032990336418,
        0.021642126142978668,
        -0.02791920304298401,
        0.004330313764512539,
        -0.044461943209171295,
        -0.05169138312339783,
        -0.004307645373046398,
        0.0194034893065691,
        -0.07714634388685226,
        -0.07186334580183029,
        -0.015162735246121883,
        -0.008279523812234402,
        -0.06745089590549469,
        -0.040801238268613815,
        0.09658558666706085,
        -0.044056475162506104,
        -0.06944187730550766,
        -0.014176069758832455,
        -0.004125798121094704,
        -0.044844914227724075,
        -0.025265980511903763,
        -0.0340375192463398,
        0.014391819946467876,
        -0.028633730486035347,
        0.023683026432991028,
        0.031797345727682114,
        0.05368981882929802,
        0.00031593485618941486,
        0.022560207173228264,
        0.08712539076805115,
        0.09640676528215408,
        0.0743432268500328,
        0.02174142561852932,
        -0.0446828231215477,
        0.026447925716638565,
        0.027061210945248604,
        0.0948527455329895,
        0.05721718817949295,
        -6.124315632405342e-08,
        -0.053289610892534256,
        0.06457948684692383,
        -0.05525558069348335,
        0.06548890471458435,
        0.03865941986441612,
        0.07136766612529755,
        -0.007367054000496864,
        -0.09487582743167877,
        0.003105293493717909,
        -0.04514925926923752,
        -0.004588847514241934,
        0.048111770302057266,
        -0.049172624945640564,
        0.019067607820034027,
        -0.019715962931513786,
        0.02475695312023163,
        -0.08931110799312592,
        -0.03742778301239014,
        -0.044155146926641464,
        -0.03616858646273613,
        -0.07462611794471741,
        -0.03142675384879112,
        -0.016928598284721375,
        0.049864377826452255,
        -0.12266070395708084,
        -0.03156222030520439,
        0.03169810026884079,
        0.023434709757566452,
        -0.05507928878068924,
        -0.030910829082131386,
        -0.043845903128385544,
        -0.05222137272357941,
        -0.015827450901269913,
        0.01751135103404522,
        -0.02898549474775791,
        0.08775626868009567,
        -0.07566923648118973,
        -0.07102048397064209,
        0.02894149161875248,
        0.05083823576569557,
        -0.10623148828744888,
        -0.07940396666526794,
        0.035797733813524246,
        0.007823419757187366,
        -0.05086100101470947,
        -0.024117307737469673,
        -0.07372033596038818,
        0.0025321219582110643,
        0.10215581208467484,
        -0.08406703919172287,
        0.01882876269519329,
        -0.029223214834928513,
        -0.06879749894142151,
        -0.014722400344908237,
        0.11611034721136093,
        0.057889439165592194,
        0.012784646824002266,
        0.01299088541418314,
        -0.06157815456390381,
        0.04564189910888672,
        0.036023952066898346,
        -0.017192095518112183,
        0.017643345519900322,
        -0.009358231909573078
    ]
}