{
    "id": "Xgwph7kERps",
    "title": "Networking for Hackers and Cybersecurity professionals (How long until you learn something new?)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2023-12-01T14:30:10Z",
    "video_url": "https://www.youtube.com/watch?v=Xgwph7kERps",
    "category": "Science & Technology",
    "tags": [
        "kali linux",
        "linux",
        "nmap",
        "ssl",
        "http",
        "https",
        "ssh",
        "telnet",
        "chargen",
        "port",
        "port numbers",
        "kali",
        "hack",
        "hacker",
        "hacking",
        "cyber",
        "cybersecurity",
        "infosec",
        "wireshark",
        "tcp",
        "filters",
        "ip",
        "wireshark filters",
        "wireshark tutorial",
        "wireshark course",
        "wireshark tips",
        "tcp/ip",
        "how to use wireshark",
        "network troubleshooting",
        "packet analysis",
        "packet filtering",
        "free wireshark training",
        "free wireshark tutorial",
        "wireshark training",
        "wireshark analysis",
        "packet capture",
        "tcp fundamentals",
        "introduction to wireshark"
    ],
    "views": 96056,
    "likes": 3972,
    "comments_count": 273,
    "description": "Let's play a game. How long does it take you to learn something new in this video?  // YouTube VIDEOS mentioned // Decrypting TLS HTTP/2 and QUIC with Wireshark:    // YouTube PLAYLIST // Wireshark with Chris Greer:    // David SOCIAL //  Discord:   Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:   YouTube:   // MY STUFF //     // MENU // 00:00 - Introduction 00:28 - My Setup 00:43 - Do You Know? 01:26 - Start of Demonstration with Telnet 03:54 - Port Numbers Further Explained 04:55 - Using Apache2 06:29 - How Are Port Numbers Assigned? 08:39 - Ephemeral Ports 10:42 - Using Fing 11:34 - Restarting Apache2 and Denying TCP 15:54 - Which Port Numbers to Clients Actually Use? 17:46 - On Ubuntu 19:01 - Theory vs Reality 23:37 - Difference Between Port Number and Socket 26:07 - Demonstration Continued 29:04 - What You've Learned So Far 29:54 - One Last Demonstration 32:34 - Conclusion and Outro  // Detailed MENU // 00:00:00 - Introduction to the Game  - David introduces a game where viewers comment on the timestamp or topic where they learn something new.  00:00:11 - Importance of Port Numbers - Emphasis on understanding port numbers for those interested in cybersecurity, networking, or other fields.  00:00:24 - Network Setup  - David describes the network setup involving Kali Linux, Cisco routers, a Windows computer, and mobile devices.  00:00:48- Understanding Ports and Sockets - Queries about the difference between port numbers and sockets, and their relevance in TCP/IP.  00:01:28 - Demonstration with PuTTY and Telnet - A practical demonstration using PuTTY and Telnet to connect to a specific port on a Cisco router.  00:03:04 - Character Generator Protocol (CHARGEN) Discussion - Explaining CHARGEN Protocol and its historical significance.  00:03:11 - Disabling TCP Small Services and Testing Connection Refusal - The process of disabling TCP small services on a router and testing the impact on connectivity.  00:04:01 - Kali Linux Server Setup and Apache Service Start - Setting up a server on Kali Linux and starting the Apache service.  00:05:09 - Analyzing Network Traffic with Wireshark - Using Wireshark to analyze traffic and understand port numbers in network communications.  00:06:39 - Understanding IANA Port Numbers and Ephemeral Ports - A look at IANA's list of port numbers and an explanation of ephemeral ports.  00:07:54 - FCs and Operating System Differences in Port Usage - Discussing RFCs and how different operating systems use various port ranges.  00:08:54 - Testing Port Accessibility with Mobile Devices - Using mobile devices to test the accessibility of ports on a network.  00:11:38 - Implementing Access Lists on Cisco Router - Creating and modifying access lists on a Cisco router to control network traffic.  00:14:06 - Difference Between Port Numbers and Sockets - Explaining the conceptual difference between port numbers and sockets.  00:16:00 - Demonstrating SSH Connections and Port Usage - Demonstrating SSH connections from different devices and analyzing the port usage.  00:18:03 - Blocking SSH Traffic with Access Lists - Blocking SSH traffic using access lists on a router and observing the effects.  00:21:37 - Discussion on DNS Protocol and Traffic Blocking - Discussion on DNS protocols and the impact of blocking DNS traffic with access lists.  00:27:41 - Exploring HTTPS and QUIC Protocols with Browser Examples - Exploring HTTPS and QUIC protocols using various web browsers and analyzing network traffic.  00:32:11 - Conclusion and Future Content Ideas - Concluding remarks and thoughts on future networking-related content.  kali linux linux nmap ssl http https ssh telnet chargen port port numbers wireshark  #kalilinux #cybersecurity #hacker",
    "description_links": [
        "https://youtu.be/yodDbgoCnLM",
        "https://www.youtube.com/watch?v=rmFX1V49K8U",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/@davidbombal",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "Let's play a game! How far can you get through this video before you learn something new? Please put a comment below the with the timestamp where you learn something new or the topic that taught you something new. It's really important that you understand port numbers doesn't matter if you're interested in cyber security or in networking or perhaps in other fields a fundamental understanding of port numbers sockets and the like is required but let's test your knowledge. I've got a little network setup here I'm running Kali Linux on this laptop. I've also got two Cisco routers, so router 1 and router 2 per this topology. I've also got my Windows computer I've also got some additional devices such as an iPhone 15 and an Android phone which I'll connect via Ethernet to this topology as part of this demonstration. Some questions for you however; Do you know the difference between a port number and a socket? Do you know what a port is? Do you know what a socket is in TCPIP? Do you know what an Ephemeral Port is? What's a well-known port number? What is the range of well-known port numbers? When your PC as an example connects to a server which port number does it connect to and which port number does it use? And does that vary depending on an Operating System? So as an example is it different for Windows, is it different for Linux, is it different for Mac, is it different for Android iOS as an example. So let's put your knowledge to the test. On my Windows computer I'm going to open up PuTTY and I'm going to telnet to a specific Port not 23 I'm going to go to 19 and I'm going to go to IP address 17.1.1.1 that's the IP address of the Cisco router on this interface connected to router 2. So connect to that port and notice a whole bunch of gibberish or characters are shown on screen. Why is it doing this? Well this is known as CHARGEN or Character Generator Protocol defined in this RFC or Request For Comments 864 in 1983 so really really old. One of the things you need to know about TCPIP is it's been around for a long time a lot of things have changed but a lot of things have stayed the same. A lot of protocols that we used today were developed many many years ago. Now this was intended for testing debugging and measurement purposes but it's really used today. I mean it's not something you probably want to enable on a device. So I'll close this session and what I'll do is open up PuTTY again but in this example I'm going to connect to the serial port on my computer. I've actually got a USB to serial converter on my computer here and I've connected to the console of the Cisco router on COM 6 so if I go to device manager look at COM and LPT ports you can see that COM 6 is connected to my computer so I'll specify com 6 there speed is 9,600 bits per second and I'll click open and that connects me to the console of router 1 right at the top here. This is something that I've enabled which you don't typically want to enable. So I'm going to say no service TCP small service I'm going to disable that service and notice what happens now if I open up a new session and telnet to Port 19 back on that router and I'll just show you the IP address of the router to show that I'm connecting to this router show ip interface brief shows me IP address of the router gigabit 0/0/0. This interface here if I try and connect to that IP address now nothing happens. We're told that the connection is actually refused. And this is the thing about port numbers we enable a service on a specific port number a device such as the server will be running services different services run on different port numbers. This Kali Linux machine has an IP address I'm just remotely controlling it from this laptop has an IP address of [Music] 10.1.1.102 if I try and open up a web browser to that IP address notice nothing happens. The site can't be reached this IP address has refused to connect in other words the Kali machine is refusing that connection because it's not running a service on Port 80 that's the default Port that HTTP uses in this example it's not listening on that port and therefore refuses a connection to that Port but I can enable a service on that server to allow it to start listening and receiving connections on Port 80. So what I can do is run the command sudo systemctl start apache2 put my password in of Kali I've now started the Apache service on this machine and what I should be able to do on my PC, so the PC on the right in this diagram is I should be able to connect to the Kali machine using a web browser so what I'll do now is press enter and notice a page is displayed on my computer I can see Apache 2 Debian Default Page I started a web server on this page a web server is a service running on that server by default it uses Port 80 and my client which is running a web browser by default connects to the server on Port 80. We can see that by running Wireshark so what I'll do is start capturing traffic on my PC on Ethernet port 5, a whole bunch of traffic is shown here but I'll look for IP address equal to 10.1.1.102 that's the Kali PC. At the moment I see nothing but if I press enter here notice we can see a whole bunch of TCP traffic and if we look at some of the traffic as an example from 10.1.2.103 which is my client PC I can verify that by using the command ip config this local PC has this IP address it's connecting to Kali with IP address 10.1.1.102 with a source Port of 5216 going to a destination Port of 80. That server is listening on Port 80, my client is connecting to the server on Port 80. The client and the server need to know which port numbers to use so the question for you is how do they know which port to listen on and which port to connect to? In other words how does the client PC know which port number to connect to on Kali and which Port does the Apache service by default listen on? How does it know which port number to listen on? Fortunately we can find out this information by looking at the IANA or Internet Assigned Numbers Authority. Here's a list of port numbers updated very recently at the time of this recording. If we scroll through this list we can see a whole bunch of port numbers so scrolling down there is chargen port 19 both TCP and UDP. If we go to http scrolling down there's telnet Port 23. Notice here they list both UDP and TCP if we go down a bit more to Port 80 you can see www Port 80. So the client connects to the server on the well-known Port Port 80 because that is assigned by the IANA but the force Port used by the client is using some weird port number here of 52116. Why is it using that port number? This is known as an Ephemeral or random port number back on the IANA's website we can see that port numbers are assigned in different ways based on three ranges. We've got system ports or what a lot of people will call well-known port numbers from 0 to 1023. We've got user ports 1024 to 49151 and then we've got dynamic or private port numbers also known as ephemeral port numbers and then we told that the port numbers are discussed in this RFC. Now I won't bore you going through RFC's, RFC's are great if you can't sleep at night and you struggle to sleep then read some RFC's probably going to put you sleep. There obviously some very interesting RFCs such as the Avian carriers RFC talking about how to send data using pigeons but most RFC's aren't too exciting. But let's talk about ephemeral ports because what clients use actually varies. So on Wikipedia they have these different ranges of port numbers that devices use and this is something about history just because this is defined here doesn't mean that's what clients are actually going to be using or devices are actually going to be using. Notice what happened when I connected from my Windows computer to the server the PCU port number 52116 going to well-known Port 80, now we're told that this range is suggested by this RFC and the IANA for dynamic or private port numbers and that's actually what Windows 11 used in this example. We're told that Windows Vista 7 2008 and later used that range. Now an ephemeral port number is only used for a short period of time every time you initiate a session you're going to use a dynamic port or private port or ephemeral port to make that connection to the server. As an example if I open up another web browser to the server and let's just restart this Wireshark capture so I'll start that again what we should see is that there are multiple ports opened to the server and this allows the client and the server to differentiate the different sessions So as an example here we've got port number 52 425 and here we've got Port 52426. So different port numbers used for different sessions and if I scroll through the data you'll see different port numbers for different sessions from the client to the server. Port numbers are really important at differentiating which connections are made so in other words I've got two connections to the server the server needs to know the two connections to it so could be coming from the same PC could be coming from different PCs and the client in this example the same client receiving data back from the server same server IP address needs to know which session the data belongs to does it belong to this session the first session or the second session and port numbers allow us to differentiate that. Now just to show you something interesting before I continue you could use NMAP for this but I'm going to simply use an application on my phone. Fing which allows me to check port numbers on a server so I could go to tools find open ports and I'll specify the IP address of the Kali machine this iPhone is not connected via Wi-Fi I've got it connected via a USB C to ethernet adapter so it's actually connected physically to the network so I'll press find open ports and what you can see is that various ports are open on the Kali machine. Port 80 which we've already tested SSH and FTP are enabled or available on the server if I stop the Apache service and then run this again what you'll notice is HTTP is no longer available because I've stopped that service on the server. What I'll do now is start the Apache service again so service is now started on the Kali machine. So if I connect back to that page it works. Once again open up another session that works but you may not want to allow connections to a specific service like http is unencrypted all the data can be seen not a great protocol to use so you may want to block connections to a specific protocol. On my Cisco router show run interface g0/0/0 this interface is the interface that connects router 1 to router 2 in my topology I have previously configured this line which says IP access group 100 in that applies an access list to the interface to permit or deny traffic. At the moment show access list shows me that I don't have access list 100 I have access list 1 which is actually used for NAT or Network Address Translation notice I've got a NAT statement here that basically allows devices in my little topology to get onto the internet but that's for another conversation. I'm going to go to Global configuration mode now and type access list 100 and I'm going to deny and this is a question for you which protocol does http use it uses TCP so I'm going to deny TCP from anywhere to anywhere I could specify the Kali machine instead of anywhere but I'll just keep it simple denying anything going to anywhere and the important piece here is we need to specify. Are we looking at a specific port number or are we looking at Port numbers greater than a certain port number in this example I'll just specify equal rather than greater than or less than or other options so the port number we want to deny in this example is Port 80. So notice here has a whole list of port numbers there's chargen as an example, FTP, Port 21, FTP data, Port 20 scrolling down here's telnet and rather than HTTP it's shown as www so I could put in www but I'll just specify port number 80 and then I'll say access list if I can spell so access list 100 permit and I'm going to permit everything in this example. This is an IPv4 access list so I'm going to specify IP going anywhere to anywhere. So type end now show access lists 100 try that again access lists 100 notice we've got a permit statement already permitting traffic from anywhere to anywhere. What I'll do is close this browser window down and try and browse to 10.1.1.102 now it shows connected there and that's probably because it's been cached notice we've got no hits against the access list so what I'll do is open up a private or Incognito browser window and go to the same IP address and notice nothing happens. We can't access that server because the traffic is being blocked notice six hits against that access list. Open up another tab 10.1.1.102 we can't access that server because the traffic is being denied. You can't create access list rules or firewall rules if you don't know your port numbers because port numbers are used to identify specific applications such as HTTP or SSL or SSH etc etc. So this is a very simple example of the router blocking connections to the server the server is still running HTTP but connections from router 2 to this server via router 1 are being blocked. In other words connections from this PC via router 2 are being blocked to the Kali machine because I've configured an access list on this port gigabit 0/0/0 on router 1. And to prove that I could simply remove the access list so no access list 100 remove the access list type end here show access list 100 I'll do that command on again notice that doesn't exist so now when I press enter notice I can access the server because the router is no longer blocking traffic. Okay but which port numbers do clients actually use when they connect to a server? So my PC is connecting to the server which port numbers does it actually use I've shown you a bit of that already I'll specify IP address 10.1.1.102 again send traffic to the server 10.1.2.103 is using in this example port number 49944 things change because my device crashed so notice there's the IP address of the PC going to the server using this port number. Back on Wikipedia that confirms the range used by Windows devices but what about Linux? Does Linux use that Port range or does it use something else? To demonstrate that what I'll do is let's use a different port number in this example let's use SSH and I'll connect to SSH on the server from both Ubuntu as well as Windows so on Windows I'll open up another PuTTY session but SSH to the server 10.1.1.102 and login is kali password is kali so lsb_release -a shows us that we've SSH from my Windows computer to Kali. So just to confirm that notice I'm using PuTTY on Windows and I've SSH to the server and in Wireshark if I look for traffic notice we've got SSH traffic from this port number 49992 now going to the destination Port 22. My Windows device is connecting to the Kali machine we can see the destination Mac address is a Cisco router because we're routing by this router to get to the server but at the IP layer we can see that the source is 10.1.2.103 going to 10.1.1.102 in other words this PC with this IP address is connecting to the Kali machine. Okay so here's Ubuntu this is running as a virtual machine on my Windows computer before I continue let's get the IP address so the IP address of this device is 10.1.2.102 so that's going to be interesting we got 10.1.2.102 connecting to 10.1.1.102 once again the Kali machine has this IP address 10.1.1.102 Okay so I'll clear the screen ssh kali@10.1.1.102 put in the username notice lsb_release -a this is Kali. I've SSH from Ubuntu to Kali. So here's some traffic 10.1.2.102 is connecting to 10.1.1.102 using SSH version 2 we can see the client Elliptic Curve Diffie Helman Key Exchange in it so we initiating key exchanges here but the important piece I want to show you is the port number is 42954 going to Port 22. So server is listing on Port 22 SSH client in this example has initiated a session from 42954 so we can see that it's not using the dynamic or private port numbers or ephemeral port numbers as listed on the IANA's website notice 49152 also specified on Wikipedia it's using a different range of port numbers. The thing to note is we have the theory and then we have the real world implementation and this stuff's been around for a long time so different implementations vary. Things have changed over time so the source port number used by Linux is different for instance to the source port number used by Windows. Now what about a client such as a phone in this example I'll use my iPhone and use an SSH client to connect to the Kali machine now before I do that I want to capture the traffic so what I'll do is capture it using Wireshark on this Windows computer that Kali machine is actually a virtual machine running on Windows. So I'll capture the traffic going to the server and connect and what you can see there is straight away we seeing traffic from the phone to the Kali machine I'll put in my password and log in and notice I've logged in. So what I'm doing once again is I've connected from my phone to Kali using SSH via this USB Ethernet adapter and I could once again use the command lsb_release and press enter and we can see once again that we're running 2023.2 Kali on that virtual machine and I've connected to it from my phone but notice the port number used here is 58290 that is the ephemeral port or random port number that's used so it's also in this range now. I wouldn't try and memorize port numbers just be aware that we have the well-known port numbers and they various well-known port numbers such as 22 for SSH I've SSH from a phone to the Kali machine I've SSH from Windows you can see here has my connection on Windows to Kali. The server is listening on Port 22 the well-known port number that clients use ephemeral or random port numbers to connect to the server and that becomes important when you want to deny or permit traffic on a router as an example. So what I'll do here is create a new session and I'll simply telnet to the Cisco router rather than going by the console so I'm on my Cisco router again if I created an access list so access-list 100 permit tcp any any and then created another entry access list 100 permitip any any does SSH use TCP or UDP? It uses TCP which is part of of IP but what's going to happen here is it's going to match that line before it matches this line. So if I do something on my phone as an example and just press enter a few times and show that access list again notice the entries have increased we can see the hits on the access list. If I do that on the Windows computer let's do lsb_release you can see hits on that line have increased. Now once again on the access list I can see the the entries an access list like this actually gives you line numbers so I can insert lines before other entries in the access list so so I could say ip access-list 100 and it's actually extended because this is an extended IP access list and let's say 5 here and deny TCP going from anywhere to anywhere equal to 22 so just to show you what I did there I have added an entry to the access list now denying TCP any any equal to 22. Originally we were having hits against this TCP traffic but now notice nothing actually happens on my sessions. This session has died I'll duplicate the session in other words I'm going to try and set up an SSH session again to the server and what we should see is hits against this line denying traffic to Port 22. Nothing's happening here this one has now timed out nothing happening connection timed out and what we see is hits against the denying statement. If you don't understand source and destination port numbers you wouldn't be able to create an access list like this now this is a very simple access list I'm denying traffic to Port 22 but I could also deny traffic from specific source port numbers and that's typically where you would say greater than 1024 or greater than certain port numbers because system ports on this range we also have user ports in this range so they've had to extend the port numbers that you may decide to deny any port number greater than 1023 as an example so that the whole range of user ports Dynamic ports Emeral ports are denied okay so you've probably been waiting to know what the difference is between a port number and a socket IBM have a great example here showing you the difference we're told that a socket uniquely identifies the Endo of a connection between two application hosts and it says a socket has three parts it has a protocol a local address and a local port number port numbers are different they are not associated with an IP address or a protocol we just have a port number 53 which could be DNS using TCP or it could be DNS using UDP. A socket has three parts so in this example if we have a connection between A and B the port number on this side is 1028 port number on this side is 2034 they're using TCP, they're using IP so the socket would be the IP address of the host 9673896 protocol is TCP and the port number is 1028 that combination of protocol, TCP in this example, IP address and port number is the socket so socket A is TCP this IP address and this port number. Socket B for host B is this protocol TCP IP address and port number. We're also told that socket and Port are sometimes used interchangeably or as synonyms please note that the terms port number and socket are not like one another a port is part of a socket so it's one part of a socket and can be represented by a number like 1028 in this example that they used here but a socket is represented by protocol, IP address or host name and port number. Wikipedia kind of show the same thing but I much prefer that example from IBM they say on Wikipedia that a internet socket is a local socket address consisting of the IP address and the protocol such as TCP or UDP and a port number. Especially in the real world you're going to do a lot of work with port numbers. For instance if you use NMAP to scan a host you're going to see which open ports they are showed you an example on a phone so it's really important that you understand port numbers. You're going to use them with firewalls, you're going to use them with routers. For instance using access lists you're going to use it with NMAP if you want to scan a host to see which services are running on that host you're going to scan for open port numbers. I showed you an example using the phone how to scan on the server but NMAP is probably one of the most popular tools and I'll cover that in another video if you're interested there are well-known port numbers that you need to know listed by the IANA. What about this one nslookup let's look up google.com as an example so I'll clear my Wireshark capture, let's clear that and do an NS lookup. We're told the IP address of Google from the server if I ping google.com as an example notice that is the IP address traffic is sent to here resolved to a different IP address so again nslook up google.com different IP addresses provided here but that's an IP address of Google. So DNS and notice here's the information DNS allows us to find out the IP address of a server rather than using IP addresses we use domain names. So which protocol does DNS use? It depends in this example, for doing name lookups the protocol used is UDP, Source Port used here 64000 going to the well-known port number 53 and then the server replies with that information. Notice how the port numbers are swapped round if I talk to the server on Port 53 using my Ephemeral Port 64000 or dynamic port number or random port number if you like the server will reply back from Port 53 to my Ephemeral or random port number. So notice how that swapped around here and we'll see that through the whole conversation. Client talking to DNS port number is this, destination is 53 when the reply comes back that is swapped around. So let's prove this at the moment we've got an access list denying TCP but it's not denying DNS. If I created another entry in my access list so I'm going to go on to access list 100 and I say let's say line number three deny tcp any any not UDP TCP equal to 53 will it affect my domain lookups? So do that again nslook up google.com do that a few times notice it doesn't affect that because the DNS that we're using here is UDP not TCP. TCP is used for Zone transfers in DNS but lookups like this use UDP. So go back onto my access list let's add an entry line number to deny UDP any any equal 53 and that should be 53 not 52 so no line number two do that again 53. So show access-lists there's our entry denying UDP, denying TCP, if we do a nslookup again notice it's hanging now timeout was 2 seconds time out and that's because traffic is being denied took it a while but there are the hits on the line notice we are denying UDP traffic in this case DNS traffic and notice that timed out. We can't get to the DNS server because the traffic has been dropped by the router. Okay this video is getting really long and I've covered a whole bunch of stuff in this video. I'm actually just covering some of the basics here. Hopefully you've learned what a socket is, hopefully you've learned what a port number is, hopefully you've seen the difference between an ephemeral and a well-known port number, hopefully you've learned that different Operating Systems use different ephemeral or random port numbers, hopefully you've seen that when I set up a session to a server so let's say I'm setting up a session from my client to your server I will use an ephemeral or random port number to connect to your server on a well-known Port, if your server is listing on that port and the connection is accepted the server will receive the traffic and then it'll reply back with the port numbers reversed. So if you're running a web server on Port 80 I'll connect from say 65000 to Port 80 you'll reply back from Port 80 going to 65000 port numbers get reversed depending on the direction of traffic. I know a lot of people ask this so let's do one last one, HTTPS. I'm going to go to google.com and notice just realized we are actually blocking DNS so this may not work so if I go to my router notice we're getting a lot of blocks on UDP, so what I'll do is say no access-list 100 let's just remove that entire access list and once I did that notice I can get access to Google before I can connect to the Google server I need to know what the IP address of the server is so DNS needs to be used to find out the IP address of the server so notice she has a whole bunch of DNS queries, I was blocking all the DNS but scrolling down what happens down to the bottom here is I get TCP but then I'm getting quick. What I'm going to filter for is destination port number equal to 443 that's the port number used for SSL and you'll notice there is a connection from source port number 5048 to 443 there's a whole bunch of stuff negotiated including Ciphers application data etc but actually what this browser is using is QUIC and quick is UDP not TCP. So you can see there is bunch of QUIC information notice it's using UDP rather than TCP I'll link a video below where I spoke about QUIC with Chris Greer changes the game from what a lot of us are used to in that we are using UDP rather than TCP. So what I'll do is close my Chrome browsers and my Brave browsers and let's do this again with a different browser let's do Edge here and I'll go to google.com again with Edge and what you'll notice is it's actually using QUIC. But let's go to a different website what I'll do is go to microsoft.com and let's see what this looks like notice we're seeing a lot of TCP and we're seeing TLS so this is TCP rather than QUIC. So scrolling up notice we see TLS we don't see QUIC different protocol used in this example when you go to a lot of websites like YouTube it's actually using UDP rather than TCP. Notice the port number 443 and if we scroll down we can see for instance 443 going to Port 5314 same here with TCP here we've got got certificate information for TLS 1.2 scrolling down we can see a whole bunch of TLS traffic. So in the real world you have to be careful because you may think that you're using TCP Port 443 for your connection to a web server but it actually may be using QUIC especially to YouTube and Google sites. Okay I think that's enough I've linked the video below to my interview with Chris Greer where we talk about QUIC in a whole bunch of detail so there's a whole hour of content there. I've also link some other videos below where I talk to Chris about various protocols. In this video I wanted to give you a practical example about port numbers and explain what port numbers are used for and what sockets are used for. It's important that you understand port numbers practically because you're going to see them all over the place. Let me know if you enjoy this type of content hopefully you did enjoy this video. Hopefully I can create a lot more. I'm thinking about doing some more in-depth networking type videos I want to make sure that everyone has a good foundation in networking. I'll do some basic networking and also some more advanced networking let me know what you want to see as always I'm David Bombal and I want to wish you all the very best.",
    "transcript_keywords": [
        "port number",
        "port",
        "port number port",
        "number",
        "TCP",
        "numbers",
        "wellknown port numbers",
        "server",
        "Kali",
        "random port number",
        "access list",
        "wellknown port",
        "Kali machine",
        "Ephemeral Port",
        "ephemeral port numbers",
        "ports",
        "source port number",
        "DNS port number",
        "number port numbers",
        "notice"
    ],
    "transcript_entity_values": [
        "number three",
        "Linux",
        "three",
        "TLS",
        "SSH",
        "80",
        "Port 20",
        "Cisco",
        "two",
        "19",
        "Kali Linux",
        "52",
        "LPT",
        "PCU",
        "TCP",
        "second",
        "1983",
        "YouTube",
        "Google",
        "10.1.2.103",
        "49992",
        "google.com",
        "Port 5314",
        "HTTP",
        "TCPIP",
        "Linux",
        "2034",
        "425",
        "an Ephemeral Port",
        "Port Port",
        "NMAP",
        "Port 52426",
        "52",
        "David Bombal",
        "22",
        "Internet Assigned Numbers Authority",
        "9,600 bits",
        "49944",
        "0/0/0",
        "USB",
        "g0/0/0",
        "Android",
        "49151",
        "10.1.2.102",
        "Port 80",
        "52116",
        "Ephemeral",
        "a whole hour",
        "Wikipedia",
        "today",
        "RFC",
        "Chris",
        "Apache 2 Debian",
        "0/0/0",
        "NS",
        "one",
        "Windows Vista",
        "CHARGEN",
        "IANA",
        "100",
        "52116",
        "2023.2",
        "TCP",
        "Kali Linux",
        "DNS",
        "Port 19",
        "Windows",
        "IBM",
        "Edge",
        "first",
        "1028",
        "6",
        "Port",
        "Mac",
        "64000",
        "1.2",
        "443",
        "Wi-Fi",
        "Operating Systems",
        "Avian",
        "SSL",
        "NAT",
        "iPhone",
        "23",
        "IP",
        "Linux",
        "Ephemeral Port 64000",
        "1",
        "5",
        "apache2",
        "1023",
        "six",
        "53",
        "router",
        "Port 53",
        "Chrome",
        "Port of 80",
        "65000",
        "Ethernet",
        "1024",
        "Elliptic Curve Diffie Helman Key Exchange",
        "One",
        "kali",
        "FTP",
        "Android iOS",
        "Wireshark",
        "2 seconds",
        "42954",
        "2",
        "Apache",
        "an Operating System",
        "Port 22",
        "Kali",
        "58290",
        "Port of 5216",
        "53",
        "HTTPS",
        "Windows 11",
        "9673896",
        "Chris Greer",
        "USB Ethernet",
        "0",
        "Wireshark",
        "10.1.1.102",
        "Port 21",
        "Port 23",
        "QUIC",
        "number 5048",
        "UDP"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "CARDINAL",
        "FAC",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "NORP",
        "ORDINAL",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "FAC",
        "ORG",
        "ORG",
        "GPE",
        "CARDINAL",
        "CARDINAL",
        "FAC",
        "FAC",
        "ORG",
        "FAC",
        "DATE",
        "PERSON",
        "CARDINAL",
        "ORG",
        "QUANTITY",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "NORP",
        "ORG",
        "DATE",
        "DATE",
        "FAC",
        "CARDINAL",
        "PERSON",
        "TIME",
        "ORG",
        "DATE",
        "ORG",
        "PERSON",
        "PRODUCT",
        "ORG",
        "GPE",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "ORG",
        "PERSON",
        "ORG",
        "FAC",
        "PRODUCT",
        "ORG",
        "PERSON",
        "ORDINAL",
        "CARDINAL",
        "CARDINAL",
        "FAC",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "LOC",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "FAC",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "FAC",
        "ORG",
        "FAC",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PERSON",
        "ORG",
        "ORG",
        "PRODUCT",
        "TIME",
        "DATE",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "FAC",
        "PERSON",
        "DATE",
        "FAC",
        "DATE",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "FAC",
        "FAC",
        "ORG",
        "CARDINAL",
        "ORG"
    ],
    "vector": [
        -0.03820352628827095,
        -0.02394271269440651,
        -0.030237503349781036,
        -0.0654047504067421,
        0.002348352922126651,
        -0.01886550523340702,
        -0.003605972044169903,
        -0.0070965709164738655,
        0.0590335913002491,
        0.012028991244733334,
        0.0011643212055787444,
        0.05878356471657753,
        -0.012646320275962353,
        -0.014438655227422714,
        -0.0009266502456739545,
        -0.057783305644989014,
        0.02934233471751213,
        -0.15611886978149414,
        0.022908849641680717,
        -0.05988985672593117,
        -0.04293402284383774,
        -0.0739864856004715,
        0.008419043384492397,
        -0.11462479084730148,
        -0.02016584761440754,
        0.044178180396556854,
        0.0009365762234665453,
        0.058812543749809265,
        -0.03211236372590065,
        0.003894050372764468,
        -0.08159009367227554,
        0.111859530210495,
        -0.04946050047874451,
        0.023574335500597954,
        -0.13654819130897522,
        0.00989832915365696,
        0.07101143151521683,
        0.019312113523483276,
        -0.035368796437978745,
        0.057725224643945694,
        0.018918950110673904,
        -0.12490502744913101,
        -0.03603250905871391,
        0.06647194176912308,
        -0.08115892857313156,
        -0.012552651576697826,
        0.026584478095173836,
        -0.019435981288552284,
        -0.06065143272280693,
        -0.057119425386190414,
        -0.0698816254734993,
        0.05554579943418503,
        0.003167657647281885,
        0.06146542727947235,
        -0.020688988268375397,
        -0.10493677854537964,
        -0.042273521423339844,
        0.03727082535624504,
        0.011835847049951553,
        0.08449055999517441,
        0.027438048273324966,
        0.0038636126555502415,
        -0.0455758236348629,
        0.01747829280793667,
        0.029401440173387527,
        -0.025974387302994728,
        0.05161948874592781,
        0.028620734810829163,
        0.06295587122440338,
        -0.014375453814864159,
        -0.08566262573003769,
        -0.0028695163782685995,
        -0.014304936863481998,
        0.03439893573522568,
        0.009034216403961182,
        0.00325795728713274,
        0.00573698990046978,
        0.03760707378387451,
        -0.03359987586736679,
        -0.06016650050878525,
        0.03938203305006027,
        -0.03409721702337265,
        -0.06789315491914749,
        0.00013345373736228794,
        -0.0914863869547844,
        0.05255195498466492,
        -0.023712530732154846,
        0.08283377438783646,
        -0.01967810094356537,
        -0.012660614214837551,
        0.006172679830342531,
        0.06486968696117401,
        0.0014377663610503078,
        0.05459640175104141,
        0.011278832331299782,
        0.046842169016599655,
        -0.0036910478956997395,
        -0.015478745102882385,
        -0.03532630205154419,
        0.03725438937544823,
        -0.021878743544220924,
        -0.01980324648320675,
        -0.046005167067050934,
        -0.09178885817527771,
        -0.03655838221311569,
        0.05030982568860054,
        -0.04502546042203903,
        0.0377020388841629,
        0.0622238963842392,
        -0.012351540848612785,
        -0.017882416024804115,
        0.002373803872615099,
        -0.05126980319619179,
        0.011049790307879448,
        -0.04366641491651535,
        0.06842242181301117,
        -0.011886317282915115,
        0.011847494170069695,
        0.03348881006240845,
        0.0785963162779808,
        0.06010530889034271,
        0.08175012469291687,
        0.024126224219799042,
        0.0462789349257946,
        0.0002955146483145654,
        0.07130583375692368,
        -0.011968476697802544,
        5.931829551629337e-33,
        0.06154961511492729,
        0.06630918383598328,
        -0.07878905534744263,
        0.03829243779182434,
        0.027099603787064552,
        -0.00012445126776583493,
        0.06314312666654587,
        0.09235460311174393,
        -0.013663212768733501,
        0.024330737069249153,
        -0.029318487271666527,
        -0.02933606132864952,
        5.346728357835673e-05,
        -0.02793075330555439,
        0.05228159949183464,
        -0.0075318776071071625,
        -0.032987818121910095,
        -0.05667051300406456,
        -0.01168113388121128,
        -0.030972136184573174,
        0.044182777404785156,
        -0.06480459868907928,
        -0.002143197925761342,
        -0.04655744880437851,
        0.08413264155387878,
        -0.020707013085484505,
        -0.06022462248802185,
        0.0632849782705307,
        0.0396047979593277,
        0.02500523440539837,
        -0.009131143800914288,
        0.013734639622271061,
        -0.04086822643876076,
        0.028092171996831894,
        0.11095870286226273,
        -0.014750532805919647,
        0.07163812965154648,
        -0.06314719468355179,
        -0.016819974407553673,
        -0.06632489711046219,
        -0.030034424737095833,
        0.02546563930809498,
        -0.0453667938709259,
        -0.003304733196273446,
        0.00401234021410346,
        -0.031868331134319305,
        -0.05125918239355087,
        -0.018557962030172348,
        -0.033542126417160034,
        0.007327274885028601,
        -0.028345413506031036,
        0.02788017876446247,
        -0.014164350926876068,
        -0.005430609453469515,
        -0.033515334129333496,
        0.033866822719573975,
        0.02076561748981476,
        0.012714124284684658,
        -0.06565429270267487,
        0.09325758367776871,
        0.051564425230026245,
        0.02077394351363182,
        -0.0746876671910286,
        -0.012751960195600986,
        -0.0457625687122345,
        0.05906359851360321,
        0.006426586303859949,
        0.06717028468847275,
        0.026524841785430908,
        0.04022981971502304,
        -0.04051073640584946,
        0.06331265717744827,
        0.057231541723012924,
        0.030238565057516098,
        0.030599428340792656,
        0.042277924716472626,
        -0.02238139696419239,
        -0.046101249754428864,
        0.019778303802013397,
        0.0454116016626358,
        0.003591614542528987,
        0.09114857763051987,
        0.07015420496463776,
        -0.003326121252030134,
        -0.03036545217037201,
        -0.01985876075923443,
        0.034158919006586075,
        -0.03635977581143379,
        0.025879785418510437,
        0.021823404356837273,
        -0.07138222455978394,
        0.03937893360853195,
        0.05956511199474335,
        -0.027761999517679214,
        0.027701789513230324,
        -8.158456828428668e-33,
        -0.08417903631925583,
        0.013992749154567719,
        -0.1014535203576088,
        0.06352755427360535,
        0.08038172870874405,
        -0.0812293142080307,
        -0.03758504241704941,
        0.07088162004947662,
        0.003113765036687255,
        -0.04243667423725128,
        0.023975970223546028,
        -0.011916507966816425,
        0.03929813206195831,
        -0.06191859766840935,
        -0.023771675303578377,
        -0.10691990703344345,
        -0.027438271790742874,
        -0.011495930142700672,
        -0.028563478961586952,
        -0.0407959446310997,
        0.012926705181598663,
        0.029250217601656914,
        -0.0026948379818350077,
        -0.09707284718751907,
        -0.004052857402712107,
        -0.0035326071083545685,
        0.06149803847074509,
        -0.016680026426911354,
        -0.010758413933217525,
        0.029412785544991493,
        0.05271058529615402,
        -0.005884549580514431,
        0.03020477667450905,
        0.05257995426654816,
        -0.0727386623620987,
        0.07798223942518234,
        0.07899945974349976,
        0.049634676426649094,
        0.051779475063085556,
        -0.0294660497456789,
        0.11415167897939682,
        -0.022475996986031532,
        -0.025851847603917122,
        -0.04873858392238617,
        -0.12546007335186005,
        0.05852387100458145,
        -0.04482395946979523,
        -0.02288200706243515,
        -0.05997911095619202,
        -0.03981409966945648,
        0.04295029118657112,
        0.06834914535284042,
        0.01081052701920271,
        -0.040162499994039536,
        0.040571294724941254,
        0.035961661487817764,
        0.028750892728567123,
        0.009330720640718937,
        0.03579665720462799,
        0.07115229219198227,
        0.09023486822843552,
        -0.027204815298318863,
        -0.08866573870182037,
        0.04293844848871231,
        0.07627328485250473,
        -0.023122237995266914,
        -0.038054101169109344,
        0.051035281270742416,
        0.05249558761715889,
        -0.02203391306102276,
        -0.02459902875125408,
        -0.008445440791547298,
        -0.11887022107839584,
        -0.043947480618953705,
        0.0034727267920970917,
        -0.07711219042539597,
        -0.045427583158016205,
        0.022093016654253006,
        -0.08750803023576736,
        0.06976620107889175,
        0.006814939901232719,
        0.04645754396915436,
        -0.1266714185476303,
        0.008744125254452229,
        0.04304555431008339,
        0.08279230445623398,
        0.06163264438509941,
        0.010581164620816708,
        0.018324002623558044,
        -0.07098212093114853,
        0.010440368205308914,
        0.0027112935204058886,
        -0.11289577931165695,
        0.06409433484077454,
        0.1042483001947403,
        -5.632590927007186e-08,
        0.05538541078567505,
        -0.026809336617588997,
        -0.04905586689710617,
        0.0032670223154127598,
        0.021001150831580162,
        0.09081913530826569,
        -0.06847764551639557,
        0.004565863870084286,
        -0.015567670576274395,
        0.02335161156952381,
        0.004406246822327375,
        0.010197297669947147,
        -0.01112026534974575,
        -0.062427178025245667,
        0.033961113542318344,
        0.051529932767152786,
        -0.027401506900787354,
        -0.09644255042076111,
        -0.04569832980632782,
        -0.04043859243392944,
        0.05657430738210678,
        -0.055558085441589355,
        -0.02145923115313053,
        0.007119352929294109,
        -0.0650768056511879,
        -0.053270064294338226,
        -0.02915908396244049,
        0.08102606236934662,
        -0.06988604366779327,
        -0.0035358278546482325,
        -0.09385070949792862,
        -0.05638173222541809,
        -0.03404846042394638,
        -0.007367817219346762,
        -0.019346581771969795,
        0.028317462652921677,
        -0.1211356520652771,
        -0.07566668093204498,
        0.04882834106683731,
        0.08120734244585037,
        -0.04276282712817192,
        -0.07726594060659409,
        -0.026418516412377357,
        0.06387418508529663,
        0.033935923129320145,
        -0.00811276026070118,
        -0.039357129484415054,
        -0.008799230679869652,
        -0.023364422842860222,
        0.0016597670037299395,
        0.03350754827260971,
        -0.011441250331699848,
        0.08220177888870239,
        -0.05462058633565903,
        0.13271145522594452,
        0.10608188807964325,
        -0.022227713838219643,
        -0.0719914585351944,
        -0.00932023674249649,
        0.021779846400022507,
        -0.0007719456334598362,
        0.0853172168135643,
        -0.03373638540506363,
        0.007823293097317219
    ]
}