{
    "id": "0LrTZfetZNo",
    "title": "How do networks actually work? | Free CCNA 200-301 Course | Video #10",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-08-05T16:38:32Z",
    "video_url": "https://www.youtube.com/watch?v=0LrTZfetZNo",
    "category": "Science & Technology",
    "tags": [
        "ccna",
        "ccna 200-301",
        "networking",
        "ethertype",
        "protocols",
        "port numbers",
        "ports",
        "arp",
        "ethernet",
        "tcp/ip",
        "ccna training",
        "cisco ccna",
        "free ccna",
        "ccna study",
        "ccna certification",
        "ccna exam",
        "new ccna",
        "ccna full course",
        "best ccna",
        "ccna fundamentals",
        "200 120 ccna",
        "cisco ccna certification",
        "cisco",
        "ccna tutorial",
        "ccna 200-301 full course",
        "ccna 2020",
        "ccna course for beginners",
        "200-301",
        "ccna lecture",
        "free ccna video",
        "ccnp",
        "cisco certification",
        "cisco training",
        "cisco ccna 200-301",
        "network engineer"
    ],
    "views": 73162,
    "likes": 1897,
    "comments_count": 146,
    "description": "How do networks actually work? Lots to discuss here! DavidBombal.com: CCNA ($10):  support the mission, join thisisIT:   In this video I practically demonstrate ARP, TCP 3-way handshakes, HTTP, Ethernet Types, Protocol Numbers, Port numbers and more. A lot of information in this video!  This is video #10 of my FREE CCNA Course 200-301 - a complete CCNA course for the new Cisco CCNA exam. I am going to be covering all the topics in the exam blueprint in this course.   I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  The course will contain: - Videos - Labs using Cisco Packet Tracer - Quiz Questions - And more!  Menu: Overview: 0:00 Topology: 0:39 Devices at your home: 1:10 IP lights demo: 2:03 Packet Tracer Lab: 2:54 ARP: 3:31 TCP 3-way handshake: 6:10 HTTP message: 6:35 How are higher layer protocols referenced? 7:08 Ethernet Type Field: 7:47 Layer 3 Protocol Field: 9:29 Port numbers: 10:30 Server Services: 11:40 Dynamic / Private / Ephermeral Port numbers: 13:34 What to learn for the CCNA exam: 16:19 What about return traffic? 16:52 Thank you to my supporters: 19:08  Packet Tracer lab used in this video:   CCNA 200-301 Playlist:   Support me via thisisIT: support the mission, join thisisIT:   Or, buy the CCNA course and support me: DavidBombal.com: CCNA ($10):  Udemy CCNA Course:  GNS3 CCNA Course: CCNA ($10):   ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  CCNA Free CCNA 200-301 ccna 200-301 free ccna course network networking thisisit osi model tcp/ip model  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccna #ccna200301p #networking",
    "description_links": [
        "http://bit.ly/yt999ccna",
        "https://bit.ly/thisisitccna",
        "https://bit.ly/tcpipmodellab",
        "https://www.youtube.com/playlist?list=PLhfrWIlLOoKPc2RecyiM_A9nf3fUU3e6g",
        "https://bit.ly/thisisitccna",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/ccnafor10dollars",
        "https://bit.ly/gns3ccna10"
    ],
    "transcript": "- Now you will learn a lot more by doing rather than just watching me talk about protocols and talk about things. So make sure that you download this Packet Tracer file. And try this yourself. I'm gonna walk you through a scenario, and a few scenarios in this video and in subsequent videos, and labs, but try this yourself. You will learn far more by doing than by watching or listening. You learn to ride a bicycle by riding, you don't learn to ride a bicycle by watching someone else ride a bicycle or watching videos, so try this yourself. Okay, so in this example, I've got a topology consisting of multiple devices. So zooming out, I've got a whole bunch of devices, but for this initial video, we're going to concentrate on this PC, which is in our internal network. In other words, think of this as being at your home or company, and then we've got a device that's connected to the internet here. So this would be our internet router. What we're gonna do, however, is connect to a server in our internal network. At home, you may have multiple internet connected devices, you could as an example, simply open up a web browser on your PC and connected to your internet router. As an example, if I open up a web browser, and connect to an IP address in my network, and don't worry too much about IP addresses at this point if you don't understand them. Basically, an IP address is a number that you allocate to a device that allows it to communicate using a protocol, which in this example is IP, IP version 4 in this specific example. Here I've got a BT Home Hub. So you may have devices at home that you can connect to. We're gonna mimic that or represent that in Packet Tracer. So on the left here, I have some servers running internally. I have a internet router, which is connecting me to the internet. As a further demonstration, here, I've got an iPhone, I could connect to that light, that's a hue, like using Bluetooth, and then do something to that light. Now in your home, you may have some devices that are connected via IP as well, that light isn't using IP as a normal IP, it's using Bluetooth. So I'm connecting to that light via Bluetooth from my iPhone and turning it on and off. But this light as an example, is connected via IP. So I can go into my phone, and then I could say, \"Okay, let's turn that light off.\" So it's gone off, turn it on. Now the way that works is I'm simply connecting to that light via TCP IP. You can actually look at the traffic on your home network using an application called Wireshark. I'll talk about that in a separate video. But in this example, let's use Packet Tracer so that we can talk about the same protocols together. So on this PC, I'm gonna open up a desktop. And I'm gonna open up a web browser. Now before I connect to a server, I'm gonna change the Packet Tracer mode to simulation mode so that we can see the actual packets going across the network. On my Windows PC, I'm gonna connect via HTTP to the server on the left, which is 10 11100. Notice nothing happens, but when we go back here we can see that some packets have been created. First one is ARP. Now on Ethernet devices communicate using what's called a MAC address. A MAC address is a burnt in address on a network interface card. So I'm connecting from this PC to the server. The PC doesn't know the MAC address of the server. This is the MAC address of the PC and we can see that by going to the config of the PC, go to Fast Ethernet, notice MAC address ends in 1199. So this PC is basically arping or requesting. An ARP is address resolution protocol requesting the MAC address of the server. So it's basically saying who has this IP address. So that gets sent to the switch. Now this is what's called a broadcast frame. Notice the destination is F's. That's a broadcast basically saying who has this IP address. If we look at the PDU, or protocol data unit, what you'll notice is the target MAC addresses blank. Target IP addresses this. Now this is a broadcast and a layer two switch will flood the broadcast which basically says it sends it out of all ports. So it gets sent to the server. This server drops the message because it doesn't have the IP address requested by the PC. This router will also drop the packet, but this server will reply back. So the inbound PDU is from the PC to a broadcast address. But the reply is now from the server ending in zero zero eight six as its MAC address to the PC. Notice how Packet Tracer uses seven layers here. At the moment, it only shows layer one and two here. If we look at the inbound PDU, however, at layer two we have Ethernet, at layer three we have ARP and in the outbound PDU, that's what we see, something similar layer two, layer three ARP. Target IP address is the PC, source IP address is the server source MAC address is the server. And we can see that by looking at the interface notice zero zero 86 is the MAC address. So what happens now is that it gets sent back to the switch and get sent to the PC. So now the PC knows the MAC address of the server and can communicate directly to the server. Notice this is a TCP packet. So in TCP before communication takes place, they do what's called a three-way handshake. They agree on certain parameters, such as sequence numbers, and how much data they can send. And then an HTTP packet is sent into the network. So if we look at the actual HTTP, and that's the one I wanna concentrate on here, let's look at the HTTP packet or HTTP message. Packet Tracer shows us very nicely, gigabit 104 on the switch receives the frame. So this interface receives the frame from the PC. We've got layer one and layer two information here. It's gonna be forwarded out of gigabit 102. So forwarded to the the server. But let's look at the inbound PDU and outbound PDU or protocol data unit in a lot of detail. Source MAC addresses the PC, destination MAC address is the server, we have a Type field. How does one layer referred to the layer above it? At layer two on Ethernet it uses a Type field. This type 0800 in hexadecimal 0 hexa means hexadecimal, indicates that the higher layer protocols IP version 4, we could have other protocols here like IP version 6. So if I go back to a ARP packet and have a look at that, notice the Type field is different here. It's zero eight zero six, that indicates ARP. So when a device receives a frame at layer two, it needs to know which protocol to use, in other words, which protocol stack to use. We can see that in Windows by going to control panel and if we have a look at our adapter, so this is the wireless adapter that I'm currently using and go to properties, what you'll notice is we have IP version 4, and IP version 6. Two protocols at layer three have been enabled on this PC. When the PC receives frames off the wire, so when that PC receives data, how does it know which protocol stack to use? In other words, is it an IP version 4 packet or is it an IP version 6 packet, it's based on the Type field at layer two. So this server on the left here, when it receives this HTTP packet, will know that it needs to use the IP version 4 protocol stack. If you send IP version 4 packets to IP version 6, it's not gonna understand it. In the same way that I have in English protocol stack, and I have an Afrikaans protocol stack. I'm much better at English than I am at Afrikaans. If I say good morning, how are you and use the English protocol stack it's gonna make a lot of sense. If you speak multiple languages and you hear different languages, your mind will just switch to that language very easily. But on that PC it needs to know which protocol stack or which language to use. So in this example, IP version 4 is the layer three protocol. And here we can see IP version 4 source and destination IP addresses. Now, same thing again, how does it know which protocol is being used at layer four. Ethernet is the layer two encapsulation, IP version 4 is the layer three protocol, TCP is the layer four protocol. This number here indicates, so it's a six in hexadecimal or six in decimal, indicates that the protocol used at layer four is TCP. You can find protocol information easily by just searching for IP version 4 protocol numbers, and then the IANA website gives you a list of protocol numbers. So as an example, TCP is protocol number six, 17, if we scroll down is UDP, TCP, or Transmission Control Protocol is reliable. User Datagram Protocol, or UDP is not reliable. So again protocol at layer four is TCP, which layer seven protocols use. Notice destination port is 80, 80 is HTTP. Notice we've got what's called a destination port. We could search in Google for port numbers. And let's go to the IANA website which is the Internet Assigned Numbers Authority and if we search for 80 in that list, you can see that HTTP Port 80 is World Wide Web HTTP. Now some protocols such as DNS, or Domain Name Server, or Domain Name System, as it's sometimes called, uses both TCP and UDP. HTTP generally uses TCP, because we want reliability. So again, layer three protocol is IP version 4, layer four protocol is TCP. We are indicating the application that we wanna send the data to by the port number. Think of it as follows, the server is running multiple services, and I want you to see the services and look at the protocols going to the services. So under services, we've got an HTTP server. We've also got a TFTP server. We've got an FTP server, and email server and various other servers. Where should the data go, it needs to go to the right application, you're not going to open up a mp3 music file in a word processor, it's not gonna work. Word opens word processing files. An application, such as a music application gets used to open music files. So you need the right application or right service to work with the right data. So again, you use a port number to send the HTTP traffic to the HTTP server, you'd use a port number, like 53 to send traffic to a DNS server, you use Port 21, to send it to FTP server or service. 69 to a TFTP service. You have one physical server running different processes or different applications, and you wanna send the data to the correct service or correct server application. Those applications listen on a specific port number. So the HTTP server listens on port 80. The FTP server will listen on port 21, TFTP will listen on port 69. So this is indicating to the server that this data needs to go to the application listening on port 80, and here you can see the HTTP request. So, packet gets sent to the server, the server because it's listening on that port, will receive the data and send it to the relevant application. What you'll also notice here is the source port is 1025. So let's talk about port numbers in a bit more detail. A server service will listen on what's called a well known port number. But when you initiate a session to a well known port number, such as 80, you will use what's called a femoral or random port number. Now, going back to the IANA, we're told that service names are assigned on a first come first serve basis as documented in this RFC. Service names and port numbers are used to distinguish between services that run over transport protocols such as TCP, UDP, and others. This is the important part, these port numbers in the range zero to 1023 are signed as system port numbers. So 80 is in that range. We have what's called a user port numbers in this range, and then we have what are called dynamic or private port numbers, also called ephemeral port numbers. Again, people use different terms. Is that a router, is it a router? Is it a highway or a motorway? Is it a sneaker, is it a trainer or in South Africa, is it a tackie? So a tackie is a word that comes from Afrikaans, but we use that as the English word in South Africa. So is it a tackie, is it a trainer like in the UK, was it a sneaker in the USA? Different terms used by different people, but dynamic or random port numbers or private port numbers, or ephemeral port numbers are dynamically or randomly used. Now you'll notice Packet Tracer is actually using a port number in this range, 1025 is the source port number. Things change over time. If I do a search in Google for ephemeral port numbers on Wikipedia, you can read more detail about how the IANA recommends those port numbers for dynamic or private ports, but many Linux kernels use this range. BSD used this range. Windows XP used this range by default, so 1025 not 1024 Vista, Windows 7, 2008 use the IANA range. Windows 2003 used this range. Basically different operating systems used different ranges. You can also see that Windows allows you to customize this. So you can specify custom range. The moral of the story is servers, and for the CCNA, I need to worry about some of the well known port numbers, 80, HTTP 21, FTP 69, TFTP and there's a few others. 23 is telnet, 22 is SSH. Know the well known protocols. HTTPS as an example is 443. You'll get to know these protocols as you work with networks, but for the exam study the well known port numbers and well known protocols. So here we can see the PCs using this source port number, going to the server. However, what you'll notice and let's show that in the PDU. Is that the port numbers get swapped round when the server replies. So this is the inbound PDU, this is the PDU from the PC to the server. Source MAC addresses the PC, source IP addresses the PC. Source port number is 1025 but for the reply that gets reversed round. Source MAC address is the server, destination is the PC. Source IP addresses the server, destination is the PC. Source port numbers 80, destination port number is 1025. So basically for our communication, MAC addresses gets swapped round, IP addresses get swapped round and port numbers get swapped round. So if you talk from your PC to my server on port 80, I'll reply from port 80 to the port number that you've chosen. The reason why the PC will choose dynamic port numbers, is if you open up two sessions to my server, your first session may use port number 1025, and your second session may use port number 1026. They should be randomized, but often they're not done. That's why hackers can often guess what port number is gonna be used next by application. But there you go, that's an example of layer two, layer three, layer four, and layer seven. If we look in the OSI model here, they don't show layer seven as the protocol here. But that's actually the protocol used in the TCP IP protocol stack. Again, TCP IP model, originally four layers, we now have five layers. So we group layer five, six and seven together as the application but we talk about layer seven because of the history with the OSI model. Okay, so that was quite detailed. I'm hoping that helps you understand a bit about port numbers, protocol numbers, ethernet types, and so forth. In the next video, I'm gonna show you another protocol. Let's use email and let's say FTP. Spend some time however, going through this yourself, having a look at the different protocols. (soothing music)",
    "transcript_keywords": [
        "port numbers",
        "port",
        "MAC address",
        "server",
        "protocol",
        "layer",
        "MAC",
        "numbers",
        "HTTP",
        "Packet Tracer",
        "TCP",
        "number",
        "address",
        "Packet",
        "protocols",
        "HTTP packet",
        "HTTP server",
        "source port number",
        "PDU",
        "source MAC"
    ],
    "transcript_entity_values": [
        "three",
        "Domain Name System",
        "SSH",
        "World Wide Web HTTP",
        "Afrikaans",
        "80",
        "two",
        "104",
        "four",
        "eight",
        "TCP",
        "second",
        "Google",
        "HTTP",
        "English",
        "Linux",
        "eight zero",
        "17",
        "80",
        "BT Home Hub",
        "OSI",
        "10 11100",
        "22",
        "User Datagram Protocol",
        "XP",
        "4",
        "Wikipedia",
        "Fast Ethernet",
        "Windows",
        "2003",
        "one",
        "IANA",
        "0800",
        "TCP",
        "DNS",
        "BSD",
        "Vista",
        "first",
        "UK",
        "Bluetooth",
        "6",
        "443",
        "USA",
        "69",
        "CCNA",
        "South Africa",
        "iPhone",
        "23",
        "Transmission Control Protocol",
        "IP",
        "Packet Tracer",
        "MAC",
        "ARP",
        "First",
        "1199",
        "F's",
        "102",
        "1023",
        "six",
        "53",
        "1026",
        "seven",
        "Ethernet",
        "1024",
        "five",
        "Wireshark",
        "FTP",
        "zero",
        "1025",
        "Packet Tracer",
        "21",
        "HTTPS",
        "PDU",
        "Tracer",
        "Two",
        "Port 21",
        "0 hexa means hexadecimal",
        "UDP"
    ],
    "transcript_entity_types": [
        "CARDINAL",
        "PERSON",
        "ORG",
        "WORK_OF_ART",
        "NORP",
        "CARDINAL",
        "CARDINAL",
        "FAC",
        "CARDINAL",
        "CARDINAL",
        "NORP",
        "ORDINAL",
        "ORG",
        "ORG",
        "LANGUAGE",
        "GPE",
        "DATE",
        "DATE",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "DATE",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORDINAL",
        "GPE",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "GPE",
        "CARDINAL",
        "NORP",
        "GPE",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "ORG",
        "PRODUCT",
        "CARDINAL",
        "FAC",
        "QUANTITY",
        "ORG"
    ],
    "vector": [
        -0.051224853843450546,
        -0.03189393877983093,
        0.052437882870435715,
        0.0007921544602140784,
        -0.023867610841989517,
        -0.029410265386104584,
        0.03380044549703598,
        -0.013555445708334446,
        -0.08210253715515137,
        -0.0073503656312823296,
        -0.014039656147360802,
        -0.039539411664009094,
        -0.04838577285408974,
        -0.040308430790901184,
        0.014068850316107273,
        0.003606659360229969,
        0.050623875111341476,
        -0.08028674125671387,
        -0.019336752593517303,
        -0.029894405975937843,
        0.007402998395264149,
        -0.037693850696086884,
        0.01470985822379589,
        -0.04887860268354416,
        -0.03729226812720299,
        0.041605763137340546,
        0.0248392466455698,
        -0.042635295540094376,
        0.0009846893372014165,
        -0.057033997029066086,
        -0.031244363635778427,
        0.06956148147583008,
        -0.010255789384245872,
        0.04935826361179352,
        -0.07820343971252441,
        -0.06378166377544403,
        0.032272957265377045,
        0.027311651036143303,
        0.004326499532908201,
        0.06490458548069,
        -0.012684094719588757,
        -0.03595597669482231,
        0.016674134880304337,
        -0.0034574917517602444,
        0.006745042745023966,
        -0.06499553471803665,
        0.009212667122483253,
        -0.009512276388704777,
        0.003990502096712589,
        -0.07544878870248795,
        -0.05461658164858818,
        -0.0006955991266295314,
        -0.035572439432144165,
        0.028947649523615837,
        0.025118527933955193,
        -0.004901259671896696,
        -0.04346702620387077,
        -0.028148800134658813,
        -0.003587740007787943,
        -0.024403229355812073,
        0.010999820195138454,
        -0.05223056301474571,
        -0.04098345711827278,
        0.026634110137820244,
        0.05284024402499199,
        -0.02598332241177559,
        0.014268879778683186,
        0.09769885241985321,
        0.07249633967876434,
        -0.043958231806755066,
        -0.07570967823266983,
        -0.000498532026540488,
        -0.04438162222504616,
        0.06172185763716698,
        0.020832795649766922,
        0.034762538969516754,
        0.048722684383392334,
        0.0026151135098189116,
        -0.005365838296711445,
        -0.04513826593756676,
        0.07078178972005844,
        -0.00687000947073102,
        0.007035747170448303,
        0.03775972127914429,
        0.03754076734185219,
        -0.016676457598805428,
        -0.04959200322628021,
        0.0004748476203531027,
        -0.11310752481222153,
        -0.05121136084198952,
        -0.01905234158039093,
        0.06315252929925919,
        -0.07494623214006424,
        0.025468984618782997,
        0.09830012172460556,
        0.04816790297627449,
        0.012833762913942337,
        -0.0934494137763977,
        -0.01746482402086258,
        0.05623241513967514,
        0.0857890397310257,
        -0.013330930843949318,
        -0.0050439066253602505,
        -0.08616826683282852,
        -0.08138733357191086,
        0.039433401077985764,
        0.014016714878380299,
        0.009302916936576366,
        0.07083646953105927,
        0.039989110082387924,
        -0.06574645638465881,
        0.019127825275063515,
        -0.08438004553318024,
        -0.08933345973491669,
        0.027058517560362816,
        0.008623331785202026,
        -0.01850637048482895,
        0.07408358156681061,
        0.038218218833208084,
        0.031474899500608444,
        -0.08223429322242737,
        0.04607125744223595,
        -0.015286515466868877,
        -0.04541313275694847,
        0.06108759716153145,
        -0.04767533764243126,
        0.025469942018389702,
        9.027477026788538e-33,
        -0.04488036781549454,
        0.03520987182855606,
        -0.11233338713645935,
        0.07056558132171631,
        0.1196114793419838,
        -0.02766617201268673,
        0.05054965987801552,
        0.014999900944530964,
        -0.04318512976169586,
        0.057144924998283386,
        -0.004772989545017481,
        0.0026108494494110346,
        -0.041217777878046036,
        0.04270811378955841,
        0.05708984658122063,
        -0.03552444651722908,
        -0.09634624421596527,
        -0.09311875700950623,
        0.0009555244469083846,
        0.001516683492809534,
        0.012975831516087055,
        -0.014564504846930504,
        0.06203669309616089,
        0.027977369725704193,
        0.09017926454544067,
        0.005126438569277525,
        0.009688712656497955,
        -0.02884768322110176,
        0.017791030928492546,
        -0.020424066111445427,
        -0.019770842045545578,
        0.037537943571805954,
        -0.02260657399892807,
        0.010400686413049698,
        0.03581426665186882,
        0.05130191147327423,
        0.023903686553239822,
        -0.07543088495731354,
        -0.011315734125673771,
        -0.05232422426342964,
        -0.05797123163938522,
        -0.0332842655479908,
        -0.042658913880586624,
        0.016866428777575493,
        -0.07991708815097809,
        -0.03934737667441368,
        -0.0386938713490963,
        0.0367729514837265,
        0.0031298361718654633,
        0.029823658987879753,
        0.008549057878553867,
        -0.034167952835559845,
        -0.06300068646669388,
        -0.06565483659505844,
        0.06533332169055939,
        -0.037340279668569565,
        0.04092371091246605,
        0.023081310093402863,
        0.008835220709443092,
        0.10586219280958176,
        0.049981217831373215,
        0.019532009959220886,
        -0.06084921956062317,
        0.055393725633621216,
        -0.05783325061202049,
        0.06592343002557755,
        -0.10332535952329636,
        0.02385290339589119,
        0.13033299148082733,
        -0.009341426193714142,
        -0.045593611896038055,
        0.027902739122509956,
        0.041656818240880966,
        -0.03727969154715538,
        0.11721564084291458,
        0.10431784391403198,
        -0.12212816625833511,
        -0.03185421600937843,
        -0.026604261249303818,
        0.05349871516227722,
        -0.05506225675344467,
        -0.00902722217142582,
        0.06103193759918213,
        0.034389227628707886,
        -0.05498753488063812,
        -0.037014272063970566,
        0.05312473699450493,
        -0.03978358581662178,
        0.008394797332584858,
        0.07681203633546829,
        0.05465729534626007,
        -0.002687980653718114,
        0.05856626480817795,
        0.02850022353231907,
        0.022399723529815674,
        -9.333922526576154e-33,
        0.0010056830942630768,
        0.09821568429470062,
        -0.10788530856370926,
        0.011970995925366879,
        -0.012551951222121716,
        -0.06151491776108742,
        0.058605678379535675,
        -0.012860428541898727,
        0.03385414928197861,
        -0.0335925854742527,
        0.019404731690883636,
        0.04085051640868187,
        0.018174026161432266,
        0.004841653164476156,
        0.02237412892282009,
        -0.09860000014305115,
        -0.06807485967874527,
        -0.04658476635813713,
        -0.017950475215911865,
        -0.08019936084747314,
        0.03658169507980347,
        0.0743807777762413,
        -0.11245350539684296,
        -0.07288391143083572,
        -0.05067651718854904,
        0.007766553200781345,
        0.056677721440792084,
        -0.026932086795568466,
        0.09853566437959671,
        0.012945950031280518,
        -0.018148992210626602,
        -0.0030792492907494307,
        0.07918636500835419,
        0.08349578827619553,
        0.0489414818584919,
        0.08459895849227905,
        0.11988752335309982,
        0.046070780605077744,
        0.0020742984488606453,
        -0.06467439234256744,
        0.07097117602825165,
        -0.03497421368956566,
        -0.07657384127378464,
        -0.04699418693780899,
        0.00815802812576294,
        0.040609218180179596,
        -0.029807863757014275,
        0.022707929834723473,
        -0.14501909911632538,
        -0.02230175770819187,
        0.06879982352256775,
        -0.033568549901247025,
        -0.0021289095748215914,
        -0.031024005264043808,
        0.03422340378165245,
        0.10347255319356918,
        -0.0004215186054352671,
        -0.020741602405905724,
        0.09149181842803955,
        0.025725528597831726,
        -0.00041996216168627143,
        -0.05955362692475319,
        -0.02021210826933384,
        0.07822239398956299,
        0.01247756090015173,
        -0.048279259353876114,
        -0.012366138398647308,
        -0.053649336099624634,
        -0.016763705760240555,
        0.005776116158813238,
        -0.10049300640821457,
        0.0396476648747921,
        0.038134947419166565,
        -0.07586093246936798,
        0.05915963649749756,
        -0.01957930065691471,
        0.0018499959260225296,
        0.003701312467455864,
        -0.023248862475156784,
        -0.033440347760915756,
        -0.05848531052470207,
        -0.005211940035223961,
        -0.05979485809803009,
        0.05410891771316528,
        0.030979955568909645,
        0.08715759217739105,
        0.05162277817726135,
        0.011806538328528404,
        -0.000985218328423798,
        0.039368871599435806,
        -0.007088711019605398,
        0.04913819953799248,
        0.030610961839556694,
        -0.007713761646300554,
        0.030920224264264107,
        -6.526015994268164e-08,
        -0.08396106213331223,
        0.054064903408288956,
        -0.07735038548707962,
        -0.012328517623245716,
        0.008089596405625343,
        0.06342942267656326,
        0.024492492899298668,
        -0.0015486475313082337,
        0.026095569133758545,
        0.053109265863895416,
        -0.010469351895153522,
        0.009923858568072319,
        -0.09656921029090881,
        0.028108926489949226,
        0.03872319683432579,
        0.048411786556243896,
        -0.03806408494710922,
        -0.03796100988984108,
        0.013242545537650585,
        -0.09101689606904984,
        -0.015598800964653492,
        -0.028182221576571465,
        -0.04745972529053688,
        0.07078404724597931,
        -0.033040598034858704,
        0.02539382129907608,
        0.005943716503679752,
        0.09253690391778946,
        -0.04760098084807396,
        -0.001028183032758534,
        -0.02433471940457821,
        -0.030984317883849144,
        0.0031636985950171947,
        -0.003960910253226757,
        0.026444515213370323,
        0.018871096894145012,
        -0.010903002694249153,
        -0.06304571777582169,
        0.07598067075014114,
        0.06412133574485779,
        -0.124139204621315,
        -0.1003677025437355,
        -0.041340503841638565,
        0.006160414777696133,
        0.04196661338210106,
        -0.06648103892803192,
        -0.13347631692886353,
        0.011534454300999641,
        -0.027487702667713165,
        0.013089461252093315,
        0.021705836057662964,
        -0.011753621511161327,
        0.006729337852448225,
        -0.03051767870783806,
        0.061630189418792725,
        0.04183869808912277,
        0.023393334820866585,
        -0.055277373641729355,
        -0.06718563288450241,
        0.09411352872848511,
        0.030411651358008385,
        0.08736125379800797,
        -0.060652632266283035,
        0.041793037205934525
    ]
}