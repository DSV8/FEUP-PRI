{
    "id": "9CY42I04MFw",
    "title": "Free Wireshark and Ethical Hacking Course: Video #1",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-08-15T15:35:07Z",
    "video_url": "https://www.youtube.com/watch?v=9CY42I04MFw",
    "category": "Science & Technology",
    "tags": [
        "ethical hacking",
        "wireshark",
        "hacking",
        "wireshark tutorial 2020",
        "ethical hacker",
        "wireshark tutorial for beginners",
        "wireshark download",
        "wireshark 2020",
        "networking",
        "how to hack",
        "wireshark filters",
        "wireshark tutorial",
        "how to use wireshark",
        "gns3 wireshark",
        "http",
        "packets",
        "sniffing",
        "how to",
        "packet analyzer",
        "kali linux",
        "hacker",
        "ethical hacking course",
        "hackers",
        "udemy wireshark",
        "networking tutorial for beginners",
        "packet sniffing",
        "learn hacking",
        "tutorial",
        "kali linux tutorial",
        "hacking course"
    ],
    "views": 66100,
    "likes": 2507,
    "comments_count": 221,
    "description": "This is a complete Wireshark and Ethical hacking course.  Get the full Wireshark course for $9:  support the mission, join thisisIT:  DavidBombal.com: CCNA ($10):   Previous video in this series:   In this video I'll show you how to capture HTTP traffic, read the website data, recreate png images and learn about the OSI and TCP/IP models practically.  In this course I'm going to show you how to capture packets from a network, how to capture passwords, replay voice conversations, view routing protocol updates and many more options.  Do you know network protocols? Do you know how to hack? Want to learn wireshark and have some fun with Ethical hacking? This is the course for you:   Learn Wireshark practically. Wireshark pcapng files provided so you can practice while you learn! There is so much to learn in this course:  - Capture Telnet, FTP, TFTP, HTTP passwords. - Replay VoIP conversations. - Capture routing protocol (OSPF) authentication passwords. - Troubleshoot network issues. - Free software. - Free downloadable pcapng files. - Answer quiz questions.  The course is very practical. You can practice while you learn!  Learn how to analyze and interpret network protocols and leverage Wireshark for what it was originally intended: Deep Packet Inspection and network analysis.  Protocols we capture and discuss in this course include: - Telnet - FTP - TFTP - HTTP - VoIP - OSPF - EIGRP - DNS - ICMP  Menu: Overview and pcap files: 0:00 Lab Topology: 0:23 Capture Packets using Wireshark: 1:50 Filter for http: 2:50 What are frames, packets, segments: 4:00 Reading the captured HTML pages: 12:22 Recreate png file: 13:52 Summary: 15:46 Thank you to my supporters: 16:29  pcap file used in the video:  Wireshark playlist:   ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link:  Code: DBAF15P  GNS3 Academy: CCNA ($10):  Wireshark ($10):   DavidBombal.com CCNA ($10):  Wireshark ($9):   Who this course is for: Network Engineers Network Architects Ethical hackers Networking Students  Wireshark wireshark download  wireshark tutorial 2020  wireshark tutorial for beginners  wireshark 2020  packet sniffing ethical hacking hacking  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #Wireshark #Hacking #CCNA",
    "description_links": [
        "https://bit.ly/wireshark9",
        "https://bit.ly/thisisitwireshark",
        "http://bit.ly/yt999ccna",
        "https://youtu.be/QXfaGOMT7MY",
        "https://bit.ly/sharkpcap1",
        "https://bit.ly/wiresharkhacking",
        "https://bit.ly/boson15",
        "https://bit.ly/gns3ccna10",
        "https://bit.ly/gns3wireshark",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/wireshark9"
    ],
    "transcript": "- Now I'm going to demonstrate stuff practically using GNS three, but rather than you trying to bolder this typology and replicate what I've done, you can simply download the pcap files and then follow along. The pcap files that I'm sharing are the actual captures that I'm gonna do now, so you'll be able to follow along and also use wireshark to see the results that I get. In this topology, I've got two Windows PCs, PC one and PC two. See here's PC one, here's PC two. PC One has IP address, 10, one, one, one, default gateway is 10, one, one, two, five, four, which is the router in the topology. PC two has IP address 10, one, two, one, default gateway is 10, one, two, two, five, four, which is the router in the topology. So I'm simulating an entire network here in GNS three, and I'm gonna show you how to capture packets, or capture frames, and we'll talk about those terms in a moment, and then you'll be able to see what's going on. I've also got a server in this topology. The server is a web server, FTP server, TFTP server, and runs other services. So what I'll do is send traffic from the hosts to each other, so PC one to PC two back again, and also from the PCs to the server, and then have a look at the captured packets, and hopefully you'll be able to see what's going on and get an understanding of the frames, packets, segments, and so forth, and also get an understanding of how to use wireshark. (upbeat music) Okay, so I'm gonna open up a web browser from PC one to the server. The server's IP address, and this is a Linux server is 10.1.1.100. I used the command ifconfig to see the server's IP address. So what I'll do is start capturing traffic between the PC and the switch. GNS three makes this very easy. It allows us to capture traffic directly within the topology, rather than having to install a hub or a wiretap, or something to see the traffic. So I'm gonna capture the traffic between the PC and the switch, and we'll be able to see exactly what's going on within this wireshark capture. So you can see that we've got spanning tre traffic, we've got EIGRP traffic, dynamic trunk protocol traffic already displayed, and being captured by wireshark. What I'm gonna do, however, is filter for HTTP. There's no HTTP traffic at the moment, but what we'll do is open up a web browser on the PC and connect it to the server. So let's use PC one. Open up a web browser. I'm gonna browse to 10.1.1.100, which is the server. And as you can see, the web page is displayed. That's nothing fancy, it's just a basic web page hosted on the server, but it's enough for us to see what's going on. So in wireshark, you can see that traffic was sent from a source IP address, 10, one, one, one, to a destination IP address of 10, one, one, 100. This is HTTP traffic. You can see the protocol there is HTTP. You can see the length. You can see that it's an HTTP GET, in other words, the PC is trying to get a webpage from the server. Now, before I go through the wireshark capture in more detail, let's explain some of the basics that you see in wireshark. The first thing you see is a frame. Now in networking, this is known as layer two of the OSI model. Information captured here are known as frames, so this is known as a frame. We've captured an ethernet II frame. In other words, we've captured traffic on ethernet. There are different types of ethernet frames, but Ethernet II is the most common. The source Mac address is a VMware host. Destination Mac address is this. So the source Mac address is the PC. This PC is actually running inside of VMware. If I type ipconfig/all, you'll be able to see the Mac address of the host, zero, zero, zero, C29, ending in DCD, seven. And hopefully that's what we see over here. So notice this Mac address is the Mac address of the PC, destination address is this. That's the Mac address of the server. Notice the Mac address over here, 36, E, four, five, C, 40, 91, A, two. There you go. That's the IP address of the server, Mac address of the server. Here's the IP address of the PC and the Mac address of the PC. So in networking, we use the term frame at layer two. You get different types of frames. On ethernet, typically ethernet II, but on a WAN connection or wide area network connection, you could be using something like point to point protocol or PPP or HDLC, or in the old days you had encapsulations like frame relay, or ATM. In other words, the layer two frame changes depending on the physical technology that you're using. Most common technology today is ethernet. Most common ethernet frame type is ethernet II. So this is known as a frame. Now just to make it more confusing, in wireshark, they talk about frames here as well, but this is actually just metadata used within wireshark that tells us about the frame. So again, this is just metadata. We don't typically talk about that as a frame. In networking, this is known as a frame. This is known as layer two in the OSI model. So this is a frame. At layer three, we have what's called a packet. So when we refer to the layers in the OSI model, we use terms such as frame at layer two, packet at layer three, and segment at layer four. At layer three, we've captured the IP version four addresses. So this is IP version four information. The protocol used at layer four is IP version four. What I'll do actually at this point is stop my wireshark capture so that the capture that I share with you isn't too big. And I'll save this as basic wireshark capture one. Notice it's a pcapng file, or pcap next generation wireshark file. So that's the file that you'll download and you'll be able to do something similar to what I've done here. So again, protocol at layer three is IP version four. Source IP address is this, destination IP address is this. IP version four contains a lot of information. Differentiated services code points, or differentiated services field, DSCP, differentiated services code points is to do with quality of service. Quality of service or QOS, or QOS, allows us to differentiate some traffic types from others. So in other words, we could say that voice traffic is more important than FTP traffic. So when you make a voice call, it should be prioritized over file transfer protocol or FTP traffic. This is a way to indicate to the network how important the traffic is. A lot of other information is shown in this header, including as an example that to the protocol used at layer four is TCP. So at layer four, once again, this is layer two, frame, layer three is packet, layer four is segment. At layer four in the OSI model, we are using TCP here and you can see source and destination port numbers. HTTP or hypertext transfer protocol uses the well-known port number of 80. The server was listening on port 80, that's why when the client made a connection to the server, the webpage displayed. The client initiated a session to port 80. The server was listening on port 80. It served because it's a server. It served a webpage to the client, in this case using the protocol HTTP. So it basically has this page, this webpage hosted on its hard drive, and it served that page to the client when the client connected on port 80. The client uses this random port number or ephemeral port number to use the correct term. So it connects to the server using an ephemeral or random port number going to a well-known port number of 80. And then you can see here, the application used is hypertext transfer protocol. Now in networking, we talk about the OSI model, but typically it's a hybrid model between the TCP model and the OSI model. At the top of the OSI model, we have application, presentation and session. Those layers are often grouped into a single layer called application. So notice we have layer two here. Layer one is the physical medium, so that's not shown in the wireshark capture. The physical medium here is ethernet, it could be copper or could be fiber. In our example, this is just a virtual network, but in the real world, this would be physical ethernet, in this case, perhaps copper. So the physical media is copper, so that's the physical connection. Here is just a virtual logical connection. So layer one, physical, layer two, data link on this case, it's ethernet. Layer three is network, in this case, we've got IP. Layer four is transport, in this case, it's TCP. And then the top three layers are kind of combined into one layer, application layer, so notice hypertext transfer protocol. And inside here we can see details such as the client used. It shows up still as Windows NT 10, win 64 bit, using a browser Mozilla 5.0. So in this example, I'm actually using Microsoft edge, that's the browser used within Windows 10. So this is a Windows 10 virtual computer. In other words, it's a virtualized. I'm actually running on a Mac here, recording on a Mac, but I'm running VMware, which allows me to virtualize multiple devices within my GNS three typology. So the wireshark capture sees the client as a Windows 10 computer, which is correct, using 64 bit Windows. Mozilla is the browser. It's actually Microsoft edge. And then the server replies back. Notice in the server example, the Mac addresses are swapped round. In this example, I've got a layer two switch. A layer two switch means that it's just simply switching frames. In other words, layer two data from one port to another. It's not trying to router the data from one network to another, these two hosts are in the same sub-net or the same network. So switch is simply switching the traffic from one port to another. So in this example, the IP addresses are swapped round, and so are the Mac addresses. Going back to the first example, notice source Mac address is this, destination Mac address is this. When the server replies, those are simply swapped around. So the server is replying with its Mac address as the source, destination Mac address is the Windows computer. IP addresses are swapped round and so are port numbers. And if we look at the hypertext protocol, notice we can see services 200 OK. 200 means that the server was able to provide the data to the client. We didn't have a 404 HTML error as an example. Some data was provided to the client. Notice you can see here, the actual webpage that was served to the client. So you can see it says network as toolkit. You can see the PNG file. Notice, network is toolkit. And if I look at that webpage on the client, notice you can see the output here. It says www files located at var www.HTML. And if we look here, that's actually what you see. File's located at var www.HTML. So if I scroll to the right, notice, you see the full output. You get to root off the logging in. Notice, we told you you can place files in TFTP boot, and that's exactly what you see over here. So wireshark has read the HTTP traffic. Be careful with HTTP, it's clear text. So through wireshark, you can see exactly what's going on. Here the client is trying to get the PNG image. So it's trying to get the actual PNG image, and he had the server, which is an Ubuntu server is providing the PNG file, so that's the actual file. And you can actually export that. And I'll do this again in other videos, but let's do it right now. GNS three image. So I'm gonna export that to my desktop, and on my desktop, I'm gonna change that to a PNG file. And then when I open it up, notice there's the actual image. So wireshark captured all the data from the server, as well as the image, and that's the image that we have on the server. So once again, to do that, click portable network graphics, because it's a PNG file, and then go export packet bytes. Save it to your hard drive. So I'm gonna save it once again, as GNS three image two, and then I'm gonna rename it. So it's saved it as a burn file. I'm gonna rename that as PNG because it's a PNG file, and then when I open it up, you can see that it say PNG file, and there's the actual image. So you can see here, it's getting the favicon, and then we're getting something, HTTP 404 error, something not found, so something went wrong here. But the point is is that you can read the actual HTTP traffic. And remember, because these devices are on the same sub-net. All that happens is the Mac addresses are swapped around, IP addresses are swapped around, port numbers are swapped around during that communication. So source IP is host. Here source IP is the server. So when the server replies back, it's replying back from port 80 to the client. So that was a very basic example of using wireshark to see what's going on in the network. Were you able to download the pcap file? Were you able to open it up in wireshark and actually do something similar to what I've done here? There is no better way to learn than to practically use wireshark capture frames and see for yourself what's going on. I've made it a little bit more simple by giving you some pcap files, but hopefully they mean something because you're using the actual files that I'm recording right now, rather than just some random file that you got off the internet. Now, please note it means a lot to me if you provide feedback on the course. So if you're enjoying the video, then please say so. We both deserve it",
    "transcript_keywords": [
        "Mac address",
        "Mac",
        "server",
        "layer",
        "address",
        "source Mac address",
        "Destination Mac address",
        "traffic",
        "wireshark",
        "HTTP",
        "PNG file",
        "file",
        "frame",
        "HTTP traffic",
        "OSI model",
        "port",
        "PNG",
        "notice",
        "client",
        "source Mac"
    ],
    "transcript_entity_values": [
        "first",
        "Microsoft",
        "DSCP",
        "Linux",
        "three",
        "Mac",
        "EIGRP",
        "36",
        "200",
        "80",
        "seven",
        "40",
        "ATM",
        "five",
        "64",
        "two",
        "four",
        "DCD",
        "91",
        "C",
        "PPP",
        "TCP",
        "zero",
        "today",
        "10",
        "IP",
        "Mac",
        "one",
        "Mozilla",
        "the old days",
        "VMware",
        "10.1.1.100",
        "Ethernet II",
        "404",
        "Windows 10",
        "100",
        "Destination Mac",
        "OSI",
        "Windows",
        "QOS",
        "10"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "DATE",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "NORP",
        "CARDINAL",
        "DATE",
        "DATE",
        "ORG",
        "PERSON",
        "CARDINAL",
        "ORG",
        "DATE",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "PRODUCT",
        "CARDINAL",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "CARDINAL"
    ],
    "vector": [
        -0.09547706693410873,
        0.020004674792289734,
        -0.029065027832984924,
        -0.051329582929611206,
        0.026113824918866158,
        -0.04615413770079613,
        0.021453816443681717,
        -0.0422123447060585,
        -0.025072595104575157,
        0.04434141144156456,
        0.01625024527311325,
        -0.01878105290234089,
        0.01004891935735941,
        -0.054925382137298584,
        -0.020555144175887108,
        -0.033719442784786224,
        -0.018883533775806427,
        0.027414333075284958,
        0.03603285178542137,
        -0.07019568234682083,
        -0.004871702287346125,
        -0.05933639779686928,
        0.08549287915229797,
        -0.06898251920938492,
        -0.025823252275586128,
        0.07002455741167068,
        0.05166870355606079,
        0.022184092551469803,
        -0.042678914964199066,
        -0.02559029497206211,
        -0.04352244734764099,
        0.04275982826948166,
        -0.014647248201072216,
        0.02941220812499523,
        -0.03559743985533714,
        -0.04949161037802696,
        0.06217692047357559,
        0.03567122668027878,
        0.003957630135118961,
        -0.0020104465074837208,
        -0.037515789270401,
        -0.021653812378644943,
        -0.02372623048722744,
        -0.005365517921745777,
        -0.06302236765623093,
        -0.04809706658124924,
        0.0028185106348246336,
        -0.009739169850945473,
        0.01787295565009117,
        -0.0596260204911232,
        -0.014519579708576202,
        -0.009097829461097717,
        0.015251021832227707,
        0.06753744930028915,
        0.0033837100490927696,
        -0.0920630693435669,
        -0.015806714072823524,
        0.04424748942255974,
        0.017392603680491447,
        -0.011344206519424915,
        -0.04573579132556915,
        0.010503989644348621,
        -0.08446595072746277,
        0.05449264869093895,
        -0.03934761881828308,
        0.044698748737573624,
        -0.003990406636148691,
        0.1600823551416397,
        0.0813387855887413,
        -0.04589155688881874,
        -0.189281165599823,
        0.009017898701131344,
        -0.043365634977817535,
        0.03776874020695686,
        0.009971989318728447,
        0.035552918910980225,
        0.024396665394306183,
        -0.002057859441265464,
        -0.06742154061794281,
        -0.03791014105081558,
        0.06691944599151611,
        -0.02862992323935032,
        -0.031618405133485794,
        0.07167091965675354,
        0.0291061419993639,
        0.006648397073149681,
        -0.041158366948366165,
        0.015630992129445076,
        0.018161771818995476,
        0.010070974938571453,
        -0.04078191891312599,
        0.06554343551397324,
        -0.0018435121746733785,
        0.01842857524752617,
        0.023816805332899094,
        0.00434627290815115,
        0.0055565121583640575,
        -0.02604053169488907,
        -0.050000958144664764,
        0.0623515360057354,
        -0.03645094856619835,
        -0.04088481143116951,
        -0.022093944251537323,
        -0.1599431186914444,
        0.026388950645923615,
        0.06560239940881729,
        0.00044454660383053124,
        -0.03735419735312462,
        0.10395387560129166,
        0.032718319445848465,
        -0.06719347834587097,
        0.049338892102241516,
        -0.07206632196903229,
        -0.08274932205677032,
        0.1070900484919548,
        0.11839817464351654,
        -0.05741069093346596,
        0.061433032155036926,
        0.024193331599235535,
        0.013455221429467201,
        -0.010932615026831627,
        0.018714366480708122,
        -0.024668723344802856,
        0.04097270220518112,
        0.08296553045511246,
        -0.07289765030145645,
        0.017171548679471016,
        1.3650764266839752e-33,
        0.060962457209825516,
        0.10179830342531204,
        -0.09277040511369705,
        0.028141189366579056,
        0.054609306156635284,
        0.022669443860650063,
        0.09863539785146713,
        0.034286998212337494,
        -0.059860557317733765,
        0.10097312182188034,
        0.015614990144968033,
        -0.0214296393096447,
        -0.025448214262723923,
        -0.0168476365506649,
        0.05862439051270485,
        -0.020760271698236465,
        -0.10348553210496902,
        -0.03772224485874176,
        0.002678404562175274,
        0.06178082898259163,
        0.01591544598340988,
        -0.06749027222394943,
        0.0774725005030632,
        0.029643818736076355,
        0.0665091872215271,
        -0.004679504316300154,
        -0.03751373291015625,
        -0.056005559861660004,
        0.10785263031721115,
        0.02602514810860157,
        -0.042774807661771774,
        0.025698969140648842,
        -0.02583240531384945,
        -0.008209540508687496,
        0.05880067124962807,
        0.0306443702429533,
        -0.0032093506306409836,
        -0.07556620985269547,
        -0.02626827545464039,
        -0.019882936030626297,
        -0.08964468538761139,
        -0.02910183183848858,
        -0.014057501219213009,
        -0.05872076749801636,
        -0.016855591908097267,
        -0.06733844429254532,
        -0.006072009913623333,
        -0.0299487616866827,
        0.04596049338579178,
        0.025729035958647728,
        -0.0467536561191082,
        -0.029750719666481018,
        -0.010584674775600433,
        -0.07476343214511871,
        -0.03774504363536835,
        -0.012661391869187355,
        0.049415431916713715,
        -0.034572191536426544,
        0.007414734922349453,
        0.07638584077358246,
        0.03539678081870079,
        0.06930681318044662,
        -0.042599957436323166,
        -0.018723126500844955,
        -0.05898620933294296,
        -0.010319340974092484,
        -0.014377176761627197,
        0.03948609530925751,
        0.03938976675271988,
        0.0022313580848276615,
        -0.07915835827589035,
        0.04625917598605156,
        -0.03518145903944969,
        -0.003190109971910715,
        -0.01302191149443388,
        0.11813696473836899,
        0.007259486708790064,
        0.03148467838764191,
        0.023505140095949173,
        0.06356370449066162,
        0.021779099479317665,
        -0.027344966307282448,
        0.09066325426101685,
        -0.0031830822117626667,
        -0.023382334038615227,
        -0.03495604544878006,
        0.02870211936533451,
        -0.07643652707338333,
        0.04762662202119827,
        0.08378839492797852,
        -0.017702095210552216,
        -0.014409447088837624,
        -0.01875857263803482,
        -0.002430379157885909,
        0.005831437651067972,
        -3.0051806952359486e-33,
        0.013129346072673798,
        0.0877511203289032,
        -0.048964645713567734,
        0.04053373634815216,
        0.03208070248365402,
        -0.034973952919244766,
        0.01623574085533619,
        0.03632797300815582,
        0.007443761918693781,
        0.0032015363685786724,
        -0.017958125099539757,
        0.003077584318816662,
        0.01393379271030426,
        -0.04731155186891556,
        0.09155621379613876,
        -0.09065548330545425,
        -0.04983042553067207,
        -0.0038155955262482166,
        -0.07423831522464752,
        -0.08252020180225372,
        -0.05085371062159538,
        0.09796275943517685,
        -0.03323149308562279,
        -0.08453843742609024,
        0.006815002765506506,
        0.007871463894844055,
        0.02133389748632908,
        0.045918092131614685,
        0.08735401183366776,
        0.07811987400054932,
        0.020508017390966415,
        0.03769765794277191,
        0.036140356212854385,
        0.0386490635573864,
        -0.009011531248688698,
        0.06419944763183594,
        0.13352036476135254,
        0.07662224024534225,
        0.05053291842341423,
        -0.039402637630701065,
        0.11800330132246017,
        0.010555471293628216,
        -0.026285281404852867,
        -0.04190827161073685,
        -0.04558524861931801,
        -0.07802695780992508,
        -0.10603058338165283,
        0.06767429411411285,
        -0.08476618677377701,
        -0.028065316379070282,
        0.08554694056510925,
        0.008059357292950153,
        0.02785021997988224,
        -0.05443176254630089,
        0.033351313322782516,
        0.08015209436416626,
        0.036450404673814774,
        -0.014546027407050133,
        0.08578819781541824,
        0.011570588685572147,
        -0.01308076549321413,
        -0.025646261870861053,
        -0.09101588279008865,
        0.06551700085401535,
        -0.01232010219246149,
        0.0044577945955097675,
        0.0034294603392481804,
        0.008134149014949799,
        -0.06136947497725487,
        0.03779507055878639,
        -0.031936559826135635,
        -0.020545195788145065,
        0.0056094094179570675,
        -0.08160416036844254,
        0.05770355835556984,
        -0.013465166091918945,
        -0.055706433951854706,
        0.061250992119312286,
        -0.0717805027961731,
        0.0242097657173872,
        0.09622728079557419,
        -0.028577441349625587,
        -0.05311275273561478,
        0.023955054581165314,
        0.03750600665807724,
        0.06658713519573212,
        0.02314824052155018,
        0.02755068428814411,
        0.008124468848109245,
        -0.06269238889217377,
        -0.07919836789369583,
        -0.004975310992449522,
        0.012889149598777294,
        0.06274884939193726,
        0.12256678193807602,
        -4.531764119519721e-08,
        -0.05688640475273132,
        -0.013037004508078098,
        -0.01660129614174366,
        0.0370456725358963,
        0.033665597438812256,
        0.10668918490409851,
        -0.03470787778496742,
        -0.04378148540854454,
        -0.006612331140786409,
        0.006701276637613773,
        0.030275672674179077,
        -0.017213668674230576,
        -0.03706330433487892,
        -0.014564619399607182,
        -0.0279429629445076,
        0.021138153970241547,
        -0.0655488595366478,
        -0.04872146248817444,
        -0.008269824087619781,
        0.0038433505687862635,
        0.03250579163432121,
        -0.039886169135570526,
        -0.048363830894231796,
        0.010298263281583786,
        -0.016076944768428802,
        -0.023119090124964714,
        0.007106510456651449,
        0.07275272160768509,
        -0.012155970558524132,
        -0.03245781734585762,
        -0.07439136505126953,
        -0.0008122787112370133,
        0.008218418806791306,
        -0.05658252164721489,
        -0.03821305185556412,
        0.03470306843519211,
        -0.12842516601085663,
        -0.09814080595970154,
        0.007645071018487215,
        0.025715645402669907,
        -0.11729860305786133,
        -0.051025040447711945,
        0.008684179745614529,
        -0.01646077260375023,
        -0.023381225764751434,
        0.0029934390913695097,
        -0.021070731803774834,
        -0.033432845026254654,
        -0.0009641124634072185,
        0.0052173142321407795,
        -0.004574720747768879,
        -0.03461699187755585,
        0.03164917603135109,
        0.0027649840340018272,
        0.054090920835733414,
        0.09620168060064316,
        0.013076593168079853,
        -0.07913506776094437,
        -0.013520235195755959,
        0.03910190984606743,
        0.026954280212521553,
        0.04699714109301567,
        -0.05292223021388054,
        0.005618266295641661
    ]
}