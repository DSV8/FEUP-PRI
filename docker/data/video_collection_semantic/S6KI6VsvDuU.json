{
    "id": "S6KI6VsvDuU",
    "title": "DHCP Snooping: Stop Kali DHCP Hacks and MITM",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-01-24T19:24:15Z",
    "video_url": "https://www.youtube.com/watch?v=S6KI6VsvDuU",
    "category": "Science & Technology",
    "tags": [
        "kali linux",
        "dhcp",
        "dhcp snooping",
        "hacking",
        "kali linux tutorial",
        "hacker",
        "dhcp hack",
        "dhcp server",
        "kali linux install",
        "kali linux hacking tutorials playlist",
        "kali linux basics",
        "kali linux tutorial for beginners",
        "kali linux 2019",
        "kali linux 2020",
        "kali linux hacking tutorials",
        "ethical hacking",
        "ethical hacking tutorial",
        "ethical hacking course",
        "ccna",
        "ccna 200-301",
        "linux tutorial",
        "oscp",
        "cisco training",
        "ine",
        "cbt nuggets",
        "ccna study",
        "kali",
        "yersinia",
        "whitehat",
        "linux",
        "hack",
        "how to hack",
        "null byte"
    ],
    "views": 41587,
    "likes": 1289,
    "comments_count": 91,
    "description": "Learn how to stop Kali DHCP hacks and Man-in-the-middle attacks using DHCP Snooping. With Kali Linux it is so easy to run scripts and applications to break networks! Learn how to stop these kinds of attacks using DHCP Snooping, Dynamic ARP Inspection and other mitigation techniques.  I previously showed you the following. Now learn how to stop these attacks: Learn how to use Kali Linux to use a Denial of service attack (DOS) against a DHCP server; set up a rogue DHCP server on Kali Linux and then get hosts to send traffic via Kali Linux so you can use a man-in-the-middle (MITM) attack and capture packets and see usernames and passwords using Wireshark.  It's can be so easy to hack badly configured networks with Kali Linux! Make sure you have got your network configured securely. Otherwise, look how you can hack networks using Kali Linux running on a Windows 10 computer and applications like Yersinia! It's important that you as a network professional know how to protect networks from hackers. Even the new Cisco CCNA 200-301 exam covers some of these hacking topics. Don't just learn the theory of hacking, learn how to hack practically.   In this Ethical Hacking with Kali Linux playlist, I'm going to show you step by step how to hack and protect networks.  Menu: Overview: 0:00 Testing network before attack: 2:09 Kali Linux Rogue DHCP server demo: 3:39 Enable and verify DHCP Snooping: 7:38 Enable trusted port: 11:52 DHCP Option 82 issues and fix: 12:58 Rate Limit Interfaces to Stop DOS attack: 16:15  ====================== I hope you like these: ====================== DHCP Snooping Guide:  Packet Tracer initial lab:  Packet Tracer completed lab:  Packet Tracer Answer video:   ====================== Referenced Videos: ====================== DHCP Attacks and MITM:  DHCP Basics:  EVE-NG:  GNS3:  Kali:   kali linux hacking ethical hacking ceh oscp   EVE-NG GNS3 VIRL 10x Engineer CCNA   CCNP Enterprise CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional  LPIC 1  LPIC 2 Linux Professional Institute LX0-103 LX0-104  XK0-004   Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #kalilinux #ethicalhacking #hacker",
    "description_links": [
        "http://bit.ly/dhcpsnooping",
        "http://bit.ly/2Rpxium",
        "http://bit.ly/2vnmKDH",
        "https://youtu.be/u3EmleryJ9A",
        "https://youtu.be/g9OGphrEMb0",
        "https://youtu.be/Dp2mFo3YSDY",
        "https://youtu.be/FDbgTlr-tnw",
        "https://youtu.be/Ibe3hgP8gCA",
        "https://youtu.be/K1bMSPje6pw"
    ],
    "transcript": "- In a previous video which I have linked here and below, I showed you how to set up Kali or Kali, if you prefer Linux as a DHCP server, and then implement a man in the middle attack. In a topology such as this, Kali Linux is set up as a DHCP server to allocate IP addresses to PCs such as this Windows 10 host, and then set the default gateway to itself. So the traffic is sent through the Kali Linux server onto the internet and onto other destinations. That allows us then to implement a man in the middle attack because all traffic is going through Kali to other devices in the topology. Now to stop that from happening, we're going to set up this switch to use DHCP snooping, so it's going to snoop or listen in on DHCP messages and only allow certain DHCP messages from trusted servers. So the switch will allow clients to request IP addresses but will not allow Kali or other servers on untrusted ports to offer IP addresses to clients. We'll set up this interface on the switch as a trusted port, so that the router is able to allocate IP addresses to the PC but Kali is not able to do that. Okay, so I'm not going to show you practically how to use DHCP snooping to stop these kind of attacks. But I've also added some additional information below this video. There's a PowerPoint presentation that you can download as an example, that gives you the commands to set this up on a switch. So if you want to download that and keep that as a reference, then use that. I've also added a Packet Tracer lab file below this video so that you can try this yourself using Packet Tracer. Now if you don't mind, please consider subscribing to my YouTube channel. If you enjoy these types of videos, please like this video and please click on the bell to get notifications when I post a new video. Okay, so let's get started. (upbeat music) Okay, so on the Windows computer, I'm gonna open up command prompt. So open up a CMD prompt. IP config shows me that this is the IP address of the PC at the moment, default gateways 10.1.1.254, which is the router in the topology on the router, show IP interface brief. Notice IP address of the router is this. The router is configured as a DHCP server, show IP DHCP binding, shows me that two IP addresses have been allocated, one to the Windows computer and one to Kali. On Kali as an example, if I open up a terminal and type if config, This is the IP address that's been allocated to the Kali Linux server. Once again, this is the IP address allocated to the PC. If I type ipconfig slash release to release the IP address. I'll make that a bit bigger. And then type ipconfig, you'll notice that it's not been allocated an IP address, it's using a link local IP version four address and link local IP version six address. But if I type IP config slash renew, it should get an IP address from the DHCP server. And there you go IP address has been allocated by the router to the Windows computer. But now let's set up Kali as a rogue DHCP server. So to do that, I'm going to run yersinia and use a graphical user interface. I showed you previously how to use this application in a lot of detail. So once again, refer to the previous videos if you wanna learn more about this application, but it's quite simple. All I'm gonna do is launch an attack and I'm going to set up a rogue DHCP server. So I'm gonna select that option and click OK. The IP address of the rogue DHCP server is gonna be the local Kali Linux host, which has an IP address of 10.1.1.1/24. Now I'll use a different range of IP addresses for hosts that we allocate addresses to use in Kali. So let's say 100 to 110, lease time and renew time I'll set to 3600 seconds, subnet mask will be a slash 24 mask. And this is how I can implement a man in the middle attack. I'm going to set myself as the default gateway. That means that the host will send traffic to the Kali Linux host, which will then forward traffic to the router. So we can implement a man in the middle attack without the user knowing what's going on. DNS server I'll set to Google and the domain are simply set to home.com. And click OK. So if we look at actions, list attacks, you can see that I'm running a DHCP rogue server attack, you can see that the DHCP rogue server is currently running. So on the client, I'm going to release my IP address again and then renew it. Now, it may get an IP address from the router rather than from the Kali Linux server. It just depends which device replies first. So you can see it got its IP address from the router. So on the router, I'm going to type no service dhcp. I'm gonna disable the DHCP service on the router. So show IP DHCP binding, you could see that the bindings have been removed from the router. So on the PC, I'll release my IP address. And then I'll renew it. And let's see if it gets an IP address from the Kali Linux server. On Kali, you can see there's a DHCP discover, DHCP discovers are being received. Now sometimes this application bombs out or breaks, so you have to rerun the DHCP server. That's a lesson in hacking. You can't expect everything to work the first time, you got to be persistent and be tenacious and keep on trying. So now it received a DHCP request from the client and it acknowledged it. In other words, when I run IP config slash renew again, it got an IP address. Okay, so the PC has been given an IP address, but note previously I had an error here saying unable to contact your DHCP server, request timed out. The yersinia application, sometimes bombs out, especially the graphical user interface. It is an alpha release, that's probably why you want to do stuff through the CLI, if you can, but to keep things simple, I've done it through the GUI. But the net result is that the PC has been given an IP address from the Kali Linux server. That's all we don't want. Notice the default gateway is Kali. That means a man in the middle attack could be used here. Okay, so to stop this nonsense. Now on the switch that the devices connect to, I'm gonna enable DHCP snooping. This is a layer two switch, always configured as a layer two switch, it does support other options. Show IP DHCP snooping. At the moment, DHCP snooping is disabled. There's the command. Notice DHCP snooping is disabled, it's not configured on any VLANs, and it's not operational on any VLANs. No interfaces have been configured to be trusted. So in global configuration mode, I'm simply gonna type ip dhcp snooping, that enables DHCP snooping on the switch globally, but please note that that's not how you make it work, this is the first step. Type the command, show IP DHCP snooping again, you can see that it's now been globally enabled, but it's not enabled on any VLANs. So don't forget to enable it on the VLAN, and to do that you type IP DHCP snooping VLAN one. So two commands are required. Show run pipe include DHCP. We have now used this command globally as well as this command globally on the switch. Show IP DHCP snooping, shows us that DHCP snooping is now enabled on VLAN one. I'll type ipconfig slash renew on the PC now. At this point, it's not gonna get any IP addresses because we've got DHCP snooping enabled. The Kali Linux host won't be able to allocate IP addresses to the PC but nor will the router. So to prove that on the router, I'll enable the DHCP service again. So show run shows us that we've got this DHCP pool configured. This is the network, this is the default gateway, this is the DNS server, but the PC is not getting any IP addresses. So IP config slash renew. Notice no IP address is being allocated. Show IP DHCP binding. No IP addresses are allocated by the router and no IP addresses are being allocated by the Kali Linux host. Now to see what's actually going on, we can run a debug on the switch. So let's run debug IP DHCP snooping packets so we can see a lot of detail. Be careful with packets, you'll see a lot of detail in the output here. So you may prefer to use events, but let's run this again. ipconfig slash renew. Notice we're seeing a lot of output, but what I'll do now is turn off debugging for the moment. We can see, received a new DHCP packet from input interface gigabit 02. That is the PC, it's a discover message. Notice the source MAC address is this ending in seven c double zero on the PC IP config slash all. That is the MAC address of the Windows computer. So the Windows computer is requesting an IP address at layer two we can see the source MAC address of the PC, destination is a broadcast, notice all f's so hexadecimal f's broadcast at layer three destination is a broadcast IP version four, source IP address is unknown, it doesn't currently have an IP address, it's requesting an IP address. So we've got invalid entry for flooding on ingress VLAN one, bridge output port is null, packet is dropped. So the switches essentially just dropping that packet. It's not forwarding it anywhere. To forward that request to the router on this interface, we need to trust this port. So we need to make gigabit 00 a trusted port. So that that DHCP request can be forwarded to the router. So on the switch interface gigabit 00, that's this interface connecting to the router, IP DHCP snooping. We're going to trust the port. Debug IP DHCP snooping packet back on the PC. IP config slash renew. Let's try and get an IP address. You can see a lot happening here, but notice right at the bottom of this debug, bridge packet sent to port gigabit 00, so the DHCP request received by the switch from the PC is being forwarded to the router. We've got DHCP discover from the PC on gigabit 02 asking for an IP address, but notice this problem, we see here option 82. Option 82 can cause problems. Option 82 is used when you need to forward the HTTP requests from a router to a DHCP server as an example, and include information such as port numbers. So if you have problems with that, on the switch, type no ip dhcp snooping information option, enter. So we're not gonna forward option 82 information to the router. So let's try that again. IP config slash renew. Notice the PC nuggets and IP address. So back on the switch a lot of outputs in the debug. So once again the PC is requesting an IP address inbound interface is gigabit zero two, the switches sending the packet to the router on gigabit 00, the router replies back, there's the DHCP packet inbound on gigabit 00. We see the router allocating an IP address to the client. So in the output here we can see that this IP address which is the router is sending a broadcast. It's a broadcasted layer two, broadcasted layer three, allocating the IP address to the PC. This once again, if you remember is the MAC address of the PC. So the router has successfully allocated an IP address to the PC. The PC got to that IP address from the router. Now it got given 10.1.1.100 because the PC will ask for the IP address that it had previously. Previously, it had been given that IP address by the Kali Linux server. So windows remembers that information and basically requests the IP address it had before. So it got a different IP address, but that IP address is in the pool of IP addresses on the router. So you can see that this IP address was allocated to the PC and if we have a look at DHCP pool once again, you can see that the pool is all IP addresses in 10.1.1.0. So 10.1.1.100 is a valid IP address in that range. Okay, so back on the switch, let's recap what we configured. Show run pipe include DHCP, we configured DHCP snooping globally on the switch. we configured it globally on the VLAN one. So those are global configuration commands. We also stopped option 82 by configuring that globally, and then we trusted that gigabit 00 interface. So show run interface gigabit 00. Notice this interface has been configured as a trusted interface. Okay, we should do some show commands, so show IP DHCP snooping. We can see through the output of this command that DHCP snooping is enabled, globally, also enabled on VLAN one, not and other VLANs. All the devices in this network are on VLAN one. Gigabit 00 is a trusted interface. We are not rate limiting that interface, but what we may wanna do is rate limit requests from PCs. So we may wanna rate limit this interface and this interface. The reason why is on Kali Linux, we could do a DHCP, a denial of service attack. So send a DHCP packets and basically just flood the network with a huge amount of DHCP requests, and that can actually kill or cause problems in the network. It's actually killing the switch. So I'll stop that attack. So actions list attacks and I'll stop the DHCP discover attack because it basically kills the switch, I'm gonna get a huge amount of debug output now, because I was running a debug. So important lesson, don't leave a debug running. And Kali sent a huge amount of packets to the switch. So this may take a while. So I'll turn off debugging. Not sure if you saw that, but I typed that quickly, but there it is again un all and what I'll do is on the interface to the Kali Linux server, which is gigabit 01. I'll enable rate limiting. So IP DHCP snooping limit rate to 10 packets and that means 10 packets per second. So we'll rate limit this packet generation on Kali basically stop it from sending too many packets. So back on the switch and notice DHCP snooping era disabled. We've received more than 10 DHCP packets on gigabit 00 DHCP snooping rate limit is exceeded, more packets have been received and what has happened, the interface has been taken down. So show IP interface brief on the switch. There's the command again. Notice this interface has gone down because Kali has sent too many packets. I'll shut it down, to manually shut it and then no Shut it, and let's see what happens. It's actually locked up my switch now. You can see the CPU is gone crazy. So on Kali I'll stop that attack. This is one of the problems using a virtual environment such as DNS three or Cisco viral or even G. The problem is this is not a physical switch, so it hasn't got the ASIX to forward lots of traffic through it. So you can basically destroy the switch which has happened here. But after a while, what happened was the messages displayed, DHCP snooping 10 DHCP packets have been received, and what has happened now is the interface is shut down once again. So show IP interface brief, interface has gone down. So basically what happened is I shut the interface, no Shut it. So many packets were being received from the Kali Linux host, that the switch bombed out. Now physical switch wouldn't necessarily have that problem, because it's got the ASIX, then the 10 packet limit kicked in, and the port was shut down to protect the switch. So there was a delay from the interface going up, CPU being hammered by Kali to the port being shut down by that command, and that's because I'm using a virtual switch rather than a physical switch. Physical switch with both an ASIX would stop this kind of nonsense from happening. Net result however, is that the interface has gone down, we've protected the network. So in this video I showed you how to protect a network using DHCP snooping. I showed you how to stop rogue DHCP servers on the network. I showed you how to stop a denial of service attack by Kali Linux way, it sends a whole bunch of DHCP messages. The switch will shut the port down if it receives too many DHCP requests in a certain amount of time. Don't forget option 82 can cause problems like it did here. (upbeat music)",
    "transcript_keywords": [
        "DHCP",
        "DHCP snooping",
        "Kali Linux",
        "Kali Linux server",
        "DHCP server",
        "Kali",
        "Kali Linux host",
        "address",
        "Linux",
        "Linux server",
        "switch",
        "router",
        "rogue DHCP server",
        "DHCP packets",
        "interface",
        "snooping",
        "DHCP snooping VLAN",
        "Notice DHCP snooping",
        "rogue DHCP",
        "server"
    ],
    "transcript_entity_values": [
        "first",
        "six",
        "three",
        "gigabit 00",
        "Gigabit 00",
        "seven",
        "Cisco",
        "G.",
        "two",
        "four",
        "3600 seconds",
        "Windows",
        "CPU",
        "zero",
        "second",
        "YouTube",
        "Google",
        "Packet Tracer",
        "IP",
        "VLAN",
        "Kali",
        "Linux",
        "HTTP",
        "ASIX",
        "PowerPoint",
        "MAC",
        "82",
        "110",
        "un",
        "more than 10",
        "Tracer",
        "GUI",
        "100",
        "24",
        "Kali Linux",
        "DNS",
        "Windows",
        "DHCP",
        "CLI",
        "the Kali Linux",
        "10"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "CARDINAL",
        "CARDINAL",
        "DATE",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERSON",
        "CARDINAL",
        "CARDINAL",
        "TIME",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORDINAL",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL"
    ],
    "vector": [
        -0.044213708490133286,
        0.05697675049304962,
        0.03505802899599075,
        0.0018206146778538823,
        -0.03676944598555565,
        0.024632200598716736,
        0.05470382049679756,
        -0.0803290531039238,
        -0.049030933529138565,
        0.018957074731588364,
        0.011854775249958038,
        0.017140835523605347,
        -0.014798026531934738,
        -0.018109362572431564,
        -0.06712048500776291,
        -0.02199193462729454,
        0.03194117918610573,
        0.07559379935264587,
        0.06769075244665146,
        -0.07896874845027924,
        -0.025422492995858192,
        -0.015242904424667358,
        0.03204959258437157,
        -0.004194365814328194,
        -0.08706437796354294,
        0.0401054285466671,
        0.0642479881644249,
        0.0030116206035017967,
        -0.07958812266588211,
        -0.048222146928310394,
        0.021161723881959915,
        -0.010492730885744095,
        -0.05463752523064613,
        0.0028833942487835884,
        -0.07540237158536911,
        -0.05812900513410568,
        0.01777355559170246,
        0.10884682834148407,
        0.05344902351498604,
        -0.07096876204013824,
        0.032708749175071716,
        -0.08160830289125443,
        -0.00018533883849158883,
        0.02922765538096428,
        -0.013638459146022797,
        0.0006486425991170108,
        -0.05943893641233444,
        0.07709694653749466,
        0.07042720168828964,
        -0.05413075163960457,
        0.0004926029359921813,
        0.00606297142803669,
        0.0092838816344738,
        0.007187545299530029,
        0.04900649935007095,
        -0.1693090796470642,
        0.02564534917473793,
        0.03616424649953842,
        0.07862802594900131,
        -0.010055510327219963,
        -0.07528859376907349,
        0.049554649740457535,
        -0.05534717068076134,
        0.07410826534032822,
        -0.021115144714713097,
        0.00955496821552515,
        0.02400044910609722,
        0.10645058006048203,
        0.015063520520925522,
        0.08578652888536453,
        0.029259562492370605,
        0.0382915623486042,
        0.009885751642286777,
        -0.02575059048831463,
        0.0036006199661642313,
        0.09006067365407944,
        -0.08485264331102371,
        -0.06303685903549194,
        -0.01606203429400921,
        0.020932501181960106,
        0.10328670591115952,
        0.07526256144046783,
        0.015283768996596336,
        0.05147545412182808,
        -0.0013603238621726632,
        0.030273446813225746,
        -0.0853300392627716,
        0.0022566774860024452,
        0.04023273289203644,
        -0.07343506813049316,
        -0.02095349319279194,
        0.055740952491760254,
        -0.04421845078468323,
        0.04384048655629158,
        0.10611633956432343,
        0.00814131274819374,
        0.004077978897839785,
        -0.013107309117913246,
        -0.07569737732410431,
        0.050893742591142654,
        -0.030127154663205147,
        -0.04559507593512535,
        -0.034172963351011276,
        -0.09071411192417145,
        0.06299293786287308,
        0.08889596164226532,
        0.08681323379278183,
        -0.07878080010414124,
        0.014924904331564903,
        0.06814722716808319,
        -0.09938942641019821,
        0.0031405771151185036,
        -0.08841467648744583,
        -0.09733905643224716,
        0.03755534812808037,
        0.004293642472475767,
        0.057165298610925674,
        0.10455770045518875,
        -0.02605827897787094,
        -0.01565699093043804,
        -0.002794625936076045,
        -0.005594272166490555,
        0.01622733846306801,
        -0.010517103597521782,
        0.028016166761517525,
        0.01278166938573122,
        0.02661958709359169,
        2.51486198136981e-33,
        0.048406753689050674,
        0.05785294622182846,
        -0.06177394092082977,
        -0.020131558179855347,
        0.049903035163879395,
        -0.07454182952642441,
        0.07132340222597122,
        0.017617076635360718,
        -0.04096975177526474,
        0.07498760521411896,
        0.017277948558330536,
        -0.029344068840146065,
        0.0021481411531567574,
        -0.016091499477624893,
        0.10535397380590439,
        0.008336115628480911,
        0.05186925083398819,
        -0.0010946709662675858,
        0.0498589426279068,
        0.06735146790742874,
        -0.023836398497223854,
        -0.10903274267911911,
        0.028212815523147583,
        0.0012248343555256724,
        0.06763269007205963,
        0.013157261535525322,
        -0.07136162370443344,
        -0.06183190271258354,
        0.022830834612250328,
        0.02348778210580349,
        -0.011022239923477173,
        0.02414817549288273,
        -0.02109438367187977,
        0.06388764828443527,
        -0.13811638951301575,
        -0.03229780122637749,
        -0.09387794882059097,
        -0.043786656111478806,
        -0.010946194641292095,
        -0.09044148772954941,
        -0.05243315547704697,
        -0.07441118359565735,
        -0.03200376406311989,
        -0.03075042925775051,
        0.03472689166665077,
        -0.008786795660853386,
        -0.025917815044522285,
        -0.005271757487207651,
        -0.00013843154010828584,
        0.04853477701544762,
        0.023131199181079865,
        -0.027992187067866325,
        -0.07652994990348816,
        -0.012126297689974308,
        0.0038609527982771397,
        -0.008121002465486526,
        0.05048935115337372,
        -0.04914284497499466,
        0.029061632230877876,
        0.06823641806840897,
        -0.0425376258790493,
        -0.026755640283226967,
        -0.04207978397607803,
        -0.00632222555577755,
        -0.07085864245891571,
        -0.12105265259742737,
        -0.039352331310510635,
        -0.008238823153078556,
        0.000408483378123492,
        0.08190585672855377,
        -0.05604144558310509,
        -0.03544138744473457,
        -0.024220315739512444,
        -0.022931138053536415,
        -0.04811990633606911,
        0.0101552102714777,
        -0.007222300861030817,
        0.06609615683555603,
        0.005940305069088936,
        0.027171937748789787,
        0.04620124027132988,
        -0.014923027716577053,
        0.04460996389389038,
        -0.014490307308733463,
        0.005622270051389933,
        -0.022036774083971977,
        -0.008025179617106915,
        -0.03622712939977646,
        -0.030924616381525993,
        0.05329253897070885,
        -0.01696091704070568,
        0.018133055418729782,
        0.028622960671782494,
        0.05226084962487221,
        0.0030287643894553185,
        -4.40393962684579e-33,
        -0.023799393326044083,
        0.07826431095600128,
        0.0013766820775344968,
        -0.03497149422764778,
        -0.051913078874349594,
        -0.031134363263845444,
        -0.02291906252503395,
        0.05027284100651741,
        0.001581916818395257,
        -0.007432346697896719,
        -0.08078516274690628,
        -0.04644302651286125,
        0.020277531817555428,
        -0.0410926379263401,
        0.027247820049524307,
        -0.049342408776283264,
        -0.0010901711648330092,
        0.014468471519649029,
        -0.04631156474351883,
        0.04042793810367584,
        -0.005240320228040218,
        0.18653079867362976,
        -0.052472908049821854,
        -0.033501818776130676,
        -0.018053650856018066,
        0.03995916247367859,
        -0.006215653847903013,
        0.09847114980220795,
        0.015475868247449398,
        0.07411330193281174,
        -0.02348538301885128,
        0.006395780947059393,
        0.011243388056755066,
        -0.024396836757659912,
        0.0431378073990345,
        0.04218538850545883,
        0.051338162273168564,
        0.13413548469543457,
        -0.003855871967971325,
        0.03644941747188568,
        0.0693543329834938,
        0.03991549834609032,
        -0.05366974696516991,
        -0.02044103294610977,
        0.032625019550323486,
        -0.03571097552776337,
        0.05493612214922905,
        0.08019817620515823,
        -0.08889776468276978,
        -0.08836466073989868,
        0.016021989285945892,
        -0.0022303368896245956,
        -0.02987838350236416,
        0.06048468500375748,
        -0.036076225340366364,
        0.08191896229982376,
        -0.05908560752868652,
        -0.034685827791690826,
        0.06901664286851883,
        0.03272074833512306,
        -0.015844793990254402,
        -0.08785035461187363,
        -0.04447607323527336,
        0.09198269248008728,
        -0.012986727990210056,
        0.03694739192724228,
        -0.02214590646326542,
        -0.047940418124198914,
        0.017496204003691673,
        0.059168729931116104,
        -0.04183724522590637,
        -0.009380337782204151,
        -0.006818230729550123,
        0.03856896981596947,
        0.038820598274469376,
        -0.09800606220960617,
        -0.011954088695347309,
        -0.012054899707436562,
        -0.05112847685813904,
        0.055833932012319565,
        0.07109364867210388,
        0.011702010408043861,
        -0.10271764546632767,
        -0.03000180795788765,
        0.02701229602098465,
        0.007645495235919952,
        0.006526080425828695,
        -0.019451770931482315,
        0.0015430456260219216,
        -0.033532701432704926,
        -0.08440178632736206,
        -0.0005495597724802792,
        -0.02703295834362507,
        0.03309151902794838,
        0.049261175096035004,
        -4.060501623825985e-08,
        0.008632970973849297,
        0.07559378445148468,
        0.03347906842827797,
        0.06645314395427704,
        0.006067066453397274,
        -0.0017822962254285812,
        -0.0027783499099314213,
        -0.018762215971946716,
        0.013478947803378105,
        -0.011594787240028381,
        0.016786964610219002,
        0.03632061928510666,
        -0.006643135566264391,
        0.0068744788877666,
        0.017050309106707573,
        0.03046722151339054,
        -0.0392652191221714,
        -0.0575602650642395,
        -0.04546874389052391,
        -0.003418768523260951,
        0.027915552258491516,
        -0.009618420153856277,
        -0.02685440517961979,
        0.04411773011088371,
        -0.07772615551948547,
        0.012080151587724686,
        0.07198191434144974,
        -0.06581403315067291,
        -0.01950562186539173,
        0.13626974821090698,
        -0.05969872325658798,
        -0.0227426216006279,
        -0.022685999050736427,
        0.0008710062829777598,
        0.024033421650528908,
        0.09928321838378906,
        -0.0888073742389679,
        -0.06774711608886719,
        0.05996512621641159,
        0.014551321975886822,
        -0.16477340459823608,
        -0.08975371718406677,
        0.03644997254014015,
        0.019365742802619934,
        -0.05791902914643288,
        -0.009510778822004795,
        -0.039843298494815826,
        0.0079554608091712,
        0.019521262496709824,
        -0.03457702323794365,
        0.0372651182115078,
        0.00587621983140707,
        0.0035227593034505844,
        -0.01431452576071024,
        -0.014263477176427841,
        0.02707713283598423,
        0.05119992792606354,
        -0.07669948041439056,
        0.025512119755148888,
        0.030654078349471092,
        0.015766188502311707,
        -0.05833795294165611,
        -0.026970546692609787,
        0.014557848684489727
    ]
}