{
    "id": "XUncozRGbcs",
    "title": "Own a WiFi network with Python! WiFi DoS and ownership attack ðŸ˜€ ðŸ˜‚",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2021-07-02T14:03:32Z",
    "video_url": "https://www.youtube.com/watch?v=XUncozRGbcs",
    "category": "Science & Technology",
    "tags": [
        "wifi dos",
        "wifi doser",
        "wifi",
        "python",
        "scanner",
        "wifi scanner",
        "python scan",
        "hacking",
        "hackers",
        "ethical hacker",
        "ethical hacking",
        "hacker",
        "hacking course",
        "hacking tutorial",
        "black hat hacking",
        "learn hacking",
        "ethical hacking tutorial",
        "ceh",
        "kali linux",
        "elearnsecurity",
        "ine",
        "ctf",
        "how to hack",
        "learn ethical hacking",
        "cyber security course",
        "windows 10 python",
        "python wifi",
        "wifi password",
        "wifi tips",
        "python tutorial",
        "python 3",
        "learn python",
        "denial of service",
        "ddos attack",
        "dos",
        "wi-fi",
        "python wifi dos"
    ],
    "views": 105454,
    "likes": 4480,
    "comments_count": 356,
    "description": "Use this Python script to DoS a WiFi network and take control. Only devices you specify will be allowed to access the network :) Huge thanks to Linode for sponsoring this video! Get $100 credit:   Script:  Direct GitHub link:   Menu: 0:00  Result!  0:32  Sponsor 0:56  What do you want to see?  1:24  Overview 1:58  Warning 2:50  Python Script 3:18  Lab Setup and requirements 4:15  2.4 GHz Demo 5:22  Download Script 6:05  Troubleshooting 6:45  Take control 9:07  Results of attack 10:01  Script options 10:32  Stop script 11:04  5 GHz Demo 14:56  Nividia GPU  ============= Previous videos: ============= Python WiFi DoS (Basic):  Best WiFi adapters:  Fix Alfa adapter issue:   ============================ Recommended Network Adapters: ============================ Alfa AWUS036NHA:  Alfa AWUS036ACM:  Alfa AWUS036ACH:  or   Others: Alfa AWUS1900:  Alfa Long-Range Dual-Band AC1200:  Alfa AWUS036NEH:  Panda PAU05:  Panda PAU06:  Panda PAU09:  WiFi Nation 802.11ac AC600:  WiFi Nation Atheros AR9271:   ================ Connect with me: ================ Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube:    ================ Support me: ================ DavidBombal.com: CCNA ($10):   Udemy CCNA Course:  GNS3 CCNA Course: CCNA ($10):   wifi wifi dos wifi doser wifi hacking python hacking python python wifi python network scan python scanner python scan oscp  ddos elearnsecurity  oscp certification ethical hacking ceh oscp ine try hack me hack the box hacking ethical hacker ctf for beginners  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #wifi #python #hacking",
    "description_links": [
        "https://davidbombal.wiki/linode",
        "https://davidbombal.wiki/wifidosown",
        "https://github.com/davidbombal/red-python-scripts/blob/main/wifi_dos_own.py",
        "https://youtu.be/iGXB5NanUK4",
        "https://youtu.be/5MOsY3VNLK8",
        "https://youtu.be/hEXwOkyYNL0",
        "https://amzn.to/3wnyVen",
        "https://amzn.to/3fCL4WT",
        "https://amzn.to/3rLAjny",
        "https://amzn.to/2PxkkMV",
        "https://amzn.to/31E0AtH",
        "https://amzn.to/34UUCEL",
        "https://amzn.to/3sK2iW8",
        "https://amzn.to/3ue23Da",
        "https://amzn.to/3wwqRZ8",
        "https://amzn.to/3wosx6X",
        "https://amzn.to/3cLQddm",
        "https://amzn.to/3u8JUqm",
        "https://discord.com/invite/usKSyzb",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "http://bit.ly/yt999ccna",
        "https://bit.ly/ccnafor10dollars",
        "https://bit.ly/gns3ccna10"
    ],
    "transcript": "- I've knocked this iPhone off the network. This iPhone can connect to the network. That PC is knocked off the network. So PC is off the network, iPhone is off the network, not able to connect, but this one can still connect. I have done a Denial-of-Service or DoS attack against the wifi network. Only this device is allowed to access the wifi network. As simple as that, to run the script. Now you can use this menu to jump to specific topics in this video. So if you're only interested in looking at the script, have a look at this menu. But before we continue, I really wanna thank Linode for sponsoring this video. I'm really happy to announce that Linode are going to be sponsoring a bunch of videos, very technical videos. As an example, rather than buying a computer like this that costs a lot of money, that has a GPU in to crack WPA passwords, you can use an online GPU from Linode. So that's one of the videos that I wanna demonstrate. Let me know what you think. Would you like to see how to crack WPA passwords using a crazy GPU like this or a cloud-based GPU? I really wanna thank them for sponsoring this video and sponsoring multiple videos where I'm gonna show you a bunch of stuff using their cloud-based solution. (upbeat music) In this video I'm gonna share and demonstrate a Python script that runs a Denial-of-Service attack against a wifi network. It basically sends DoS messages or deauthentication messages to a wifi access point to knock clients off the network. But in addition, you can specify that certain clients such as an iPhone have access to the network but all other devices are knocked off. So basically you can decide that certain devices that you control have access to the network, but all other devices are deauthenticated or kicked off the wifi network. Now, before we get started, please do not use this script for malicious purposes. Don't use this script in Starbucks and take control of a Starbucks' wifi network. That will only get you into trouble. Don't use this on your parent's network so that you can knock off other people in your family from the wifi network and take control of the wifi network. Do not use it on any network that you don't have permission to run it against. In this example, I've got my own wifi network. I'm testing the script against my own wifi router behind me. I'm using my own wifi devices, such as my own iPhone and my own laptop. I am not using this on networks that I don't have permission to attack. Only use scripts like this when you have permission to attack a network, for instance, to demonstrate the vulnerabilities of wifi networks or on networks that you own. Okay, let's get started. Now, previously I demonstrated a Denial-of-Service attack similar to this in this video, which I've linked here and below, but that was a basic Python script. It was a sequential script from top to bottom. I basically showed you the power of Python using a basic Python script. But this script is a lot more powerful. You'll need to understand more of Python if you wanna understand all the details of the script. But all you need to do to run the script is run Python in Kali or Kali Linux as an example. So to demonstrate this I've got Kali, or Kali if you prefer, running within a virtual machine on my Mac. You will need a wifi adapter such as this Alpha adapter or an Alpha adapter like this that supports packet injection and monitoring mode. This is one of my favorite wifi adapters because it works out of the box with Kali, but the limitation of this wifi adapter is that it only supports 2.4 gigahertz. This wifi adapter supports 2.4 as well as five gigahertz. So a lot more powerful, but is more expensive. You also have to install drivers to make that wifi adapter work. The same with this one, another very popular Alpha adapter, but you do need drivers to make this work. I've put links below to other videos where I show you how to get those working with Kali. I've also listed other videos that you may find useful when making a decision on which wifi adapter to purchase. You can, in some cases, use a built-in wifi adapter, but in many cases you need an external wifi adapter. So in this example, I'm gonna plug in this wifi adapter to my Mac. So I'm simply connecting this to my Mac using a USB port. And on my Mac, I'm gonna say connect to Linux because I want the wifi adapter connected to my Kali Linux installation. I'll open up a Command Prompt, make this a bit bigger. If I type iwconfig, you'll see that I've got a wifi adapter connected to Kali. That's required to make this work. I'll clear the screen. And what I'll do is open up Nano, which is a text editor, and I'll create a Python script called wifidosown. I'm gonna run a Denial-of-Service attack against the wifi network and own it so that specific devices have access to the wifi network and others don't. I'll knock off this Windows laptop as an example, I'll knock off an iPhone, but allow this iPhone to continue using the wifi network. Okay, so open up Nano, and then what I'm gonna do is copy this script. I've put a link to the script below this video. Once again, you can find it on my GitHub page, but what I'm gonna simply do is copy that into the script. On Kali, Control + X, Y to save the file, press enter to save it. So now when I type ls, I have this file and I can use sudo python3 wifidosown to run that script. Okay, so first thing you need, once again, is a wifi adapter that's picked up in Kali, that's done here. You need a wifi network that gonna attack. I've got my own wifi network here. You need some clients that you're going to attack. With scripts like this and the software that's used in the background, you often need a client to connect to the wifi network. So if nothing happens, then get a client to connect to the wifi network. So what I'm gonna do is on this Windows laptop next to me, I'm gonna open up a Command Prompt and I'm gonna set it to ping google.com continuously. You can see that that ping is succeeding. You can see that the wifi network that the PC is connected to is TP Link F3FC, which is, once again, this wifi network behind me. Only attack wifi networks that you have permission to attack. Always remember that, do not use the script maliciously. On my two iPhones, I'll go to settings. And what you'll notice is both of these phones are connected to the TP Link network as well. So I've got three clients connected to the same network. I'll run the script, put in my sudo password. Now it asks me for the MAC address that I want to exclude. In other words, which MAC address or MAC addresses is gonna be allowed access to the network. So on my iPhone, I'll have a look at the MAC address. I'm using private MAC addresses here, so in other words, Apple changes the MAC address every time I connect to a wifi network. But in this case, it's BA AD 08 AC 15 A7. I just made that font slightly smaller. So that's the MAC address of the iPhone, that's the one that's gonna be excluded, In other words, allowed to access the network. Then you make a decision. Are you going to connect to 2.4 gigahertz networks or five gigahertz networks or both? I'll select both, even though on this network card it only supports 2.4 gigahertz. You can use both, it just means it takes longer if there are lots of wifi networks. Wifi network that I'm going to run the attack through is wlan0. That's the wifi adapter in Kali. I can see that once again, by opening up a terminal and typing iwconfig, wlan0. So I'm gonna select zero once again and press enter. Now what it's gonna do is it's gonna sniff the air and look for wifi networks. So it's gonna look for specific networks to attack. And in this example, nine is the network that I'm going to attack, which is my TP Link. So I'm gonna press Control + C, I'm gonna say nine and press enter. And just before I press enter, notice the iPhone here is still connected to the wifi network. When I press enter, it should knock me off the wifi network. Now, in this case, I'm not any Mac addresses, and that's because no new client is connected to the network. So what I'll do is I'll just get this to reconnect. So I'll get it to reconnect to the network and now MAC addresses are being discovered. The windows laptop can't connect to the network anymore. And the iPhone gets knocked off. It actually automatically connects to a different network. Notice there it says, unable to connect to the network, but on this iPhone, I'm still connected to the network. And I can still go to the internet, as an example, go to kali.org. I can press menu, look at the blog as an example. I can surf using this iPhone, but this iPhone is not able to connect to that wifi network at all. I've knocked this iPhone off the network. This iPhone can connect to the network. That PC is knocked off the network. So PC is off the network, iPhone is off the network, not able to connect, but this one can still connect. I have done a Denial-of-Service or DoS attack against the wifi network. Only this device is allowed to access the wifi network. As simple as that, to run the script. Now, the script is fairly complicated. It's taken a long time to put this script together, but again, it supports 2.4 gigahertz, it supports five gigahertz, it supports a range of wifi network cards. I have essentially killed the wifi network. Okay, I'll press Control + C to stop the deauth attack. And then hopefully now, the iPhone will be able to connect back to that network, which it can. And I'll be able to go to kali.org as an example, which I can. So that's allowed onto the network and the PC can connect to the network as well. I'm not gonna spend a lot of time going through the Python script. It's a fairly complicated Python script. I put a lot of comments in the script to make it easier to understand what we're doing with the Python script. It's available, once again, using the link below on my GitHub page. Okay, so that works. Now let's try five gigahertz. So for this demonstration I'll use this Alpha network adapter. You could also use this one if you prefer, but for this example, I'll use this one. I'll disconnect my other Alpha adapter so this one is no longer connected. And what I'll do is connect this adapter to Kali, so it's now connected. VMware asks me, do I wanna connect it to Mac or Linux? So I'm gonna connect it to Linux. So in my Command Prompt, iwconfig. I should hopefully see a wifi adapter, which I do. That's, once again, this adapter. And what I'll do here is run the script. So sudo python3 wifidosown. Now in this example, I'm using the same network but five gigahertz. So my PC is connected to that network. I'll connect my iPhones to that network as well. So in settings on the first iPhone, I'll connected to that network. On the settings of the second iPhone, I'll also connect it to the same network. Okay, so this is the phone that's gonna be allowed to access the network. Notice the MAC address is now changed. So in Kali I'll run my script. MAC address that I want to exclude, in this case is 8C 86 1E 58 67 9A. Make that slightly smaller. Again, that's this MAC address. Everyone else will be killed from the network. In this example, I'll select one for five gigahertz so I'm only gonna check the a network. Wlan0 is the wifi adapter that I wanna use. It took it a while, but here's the network that I wanna attack. So I'm gonna press Control + C, use 17 because that's the network that I wanna attack. Before I do that, notice the Windows PC is connected to that network and pings are succeeding. This iPhone, as an example, can go to Kali so I can refresh the page, that works. But what I'll do now is press enter, that should kill the network. Now, again, I found with this network card specifically, you may need to get the client to reconnect or get a new client to connect to the network before the MAC addresses are picked up. So I'm gonna get the iPhone to connect back to that network. And now suddenly you see the MAC addresses are discovered and hopefully what should happen is the network fails. You can see it's failing on the iPhone, so the iPhone can't connect to that network. If I try and connect it back to the network, it's not allowing it to connect, it simply bounces off and goes to another network. iPhone cannot connect to that network at all. So PC is off the network, iPhone is struggling to connect to that network. Let's see if this iPhone can connect to the network. Still able to connect to Kali as an example. So this device can access the network whereas for instance, the other devices can't. I can, once again, try and download Kali. I can connect to the network, go to the blog, et cetera, et cetera, because this device is connected to the TP Link 5G network. It's been allowed into the network, but other devices have been knocked off. Once again, notice here, I'm not able to connect to the network. You can basically take over a wifi network and only allow certain devices onto the network, such as this iPhone and knock everyone else off the network. Be great to demonstrate how to crack passwords using Nvidia GPU. I have got an AMD GPU here, but rather than buying a physical computer like this, you can use the cloud to crack passwords such as WPA passwords or other passwords. As always, only use this for ethical purposes. You can use the link below to get a hundred-dollar credit when you sign up for Linode. Let me know what you want me to demonstrate using their cloud solution. Definitely I'm gonna do GPU password cracking, but perhaps you wanna learn some Linux commands, perhaps you wanna learn artificial intelligence, perhaps you just wanna learn how to host stuff in the cloud, such as GNS3 lab topologies. Let me know what you wanna see in the comments below. (upbeat music)",
    "transcript_keywords": [
        "network",
        "wifi network",
        "wifi",
        "wifi adapter",
        "connect",
        "Mac",
        "Kali",
        "script",
        "iPhone",
        "Python script",
        "adapter",
        "Python",
        "MAC address",
        "networks",
        "attack",
        "MAC addresses",
        "connected",
        "Kali Linux",
        "GPU",
        "run"
    ],
    "transcript_entity_values": [
        "first",
        "AD 08",
        "Starbucks",
        "iPhones",
        "three",
        "five gigahertz",
        "hundred-dollar",
        "USB",
        "Mac",
        "WPA",
        "Apple",
        "17",
        "AC",
        "Alpha",
        "Linode",
        "Nvidia GPU",
        "GNS3",
        "two",
        "five gigahertz",
        "zero",
        "nine",
        "second",
        "58 67",
        "iPhone",
        "Nano",
        "Python",
        "Kali",
        "Linux",
        "Mac",
        "8C",
        "2.4 gigahertz",
        "one",
        "GPU",
        "Linux",
        "DoS",
        "VMware",
        "MAC",
        "GitHub",
        "A7",
        "Python",
        "Kali Linux",
        "Windows",
        "5",
        "2.4"
    ],
    "transcript_entity_types": [
        "ORDINAL",
        "DATE",
        "ORG",
        "NORP",
        "CARDINAL",
        "MONEY",
        "MONEY",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "CARDINAL",
        "ORDINAL",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "ORG",
        "GPE",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "WORK_OF_ART",
        "PERSON",
        "PRODUCT",
        "CARDINAL",
        "CARDINAL"
    ],
    "vector": [
        -0.022915968671441078,
        0.02856135554611683,
        -0.03825956955552101,
        -0.022900495678186417,
        0.003693830920383334,
        -0.02798534743487835,
        0.05726117640733719,
        -0.024062208831310272,
        -0.03849334269762039,
        0.049148742109537125,
        0.0492556132376194,
        0.0043849945068359375,
        0.06172121316194534,
        -0.05955063924193382,
        0.012250462546944618,
        0.03468185290694237,
        0.023683130741119385,
        -0.09835226833820343,
        -0.03333381563425064,
        -0.10917776077985764,
        0.020832017064094543,
        0.09411381185054779,
        0.08073588460683823,
        -0.029749926179647446,
        0.05818803608417511,
        -0.02519301511347294,
        0.0633038729429245,
        0.037684161216020584,
        -0.04427338019013405,
        0.02483223006129265,
        0.04970802366733551,
        0.023085080087184906,
        -0.005366722587496042,
        -0.014622685499489307,
        0.05373707786202431,
        -0.08764173090457916,
        0.009040068835020065,
        0.027777528390288353,
        -0.026460006833076477,
        -0.015490162186324596,
        -0.014744549989700317,
        -0.02924087829887867,
        0.009498903527855873,
        0.05222520977258682,
        -0.06402619183063507,
        0.019320717081427574,
        -0.07234183698892593,
        0.06651768088340759,
        0.0656525045633316,
        -0.04713454842567444,
        -0.026010511443018913,
        0.0035095810890197754,
        0.023019813001155853,
        -0.059541597962379456,
        0.0645114853978157,
        -0.09288880228996277,
        -0.009106910787522793,
        0.02106083370745182,
        0.058128830045461655,
        -0.07788728177547455,
        -0.05822288990020752,
        -0.0011795110767707229,
        -0.01684078760445118,
        0.004411250818520784,
        -0.0387546569108963,
        0.02127261832356453,
        -0.0011408424470573664,
        0.10089107602834702,
        -0.03698179870843887,
        0.03781731799244881,
        0.03171050548553467,
        0.03849787265062332,
        -0.02192167192697525,
        0.06960409134626389,
        0.04957559332251549,
        -0.031062491238117218,
        -0.0028188626747578382,
        -0.025485659018158913,
        0.010153928771615028,
        -0.03118850104510784,
        -0.02282741479575634,
        -0.019559381529688835,
        0.03343261778354645,
        -0.0204145610332489,
        0.008466962724924088,
        -0.03222821652889252,
        -0.04363419860601425,
        0.06892109662294388,
        0.11526830494403839,
        0.0057664611376821995,
        -0.059844475239515305,
        0.0466778539121151,
        0.020524686202406883,
        0.007904145866632462,
        0.07752250134944916,
        0.07847633212804794,
        -0.028061019256711006,
        -0.07860269397497177,
        -0.11094822734594345,
        0.05181003734469414,
        -0.006661497056484222,
        -0.10259226709604263,
        -0.018225308507680893,
        0.04336102679371834,
        0.02271857112646103,
        0.033585324883461,
        0.022633787244558334,
        0.02151237055659294,
        0.023042837157845497,
        0.004066775552928448,
        -0.012568849138915539,
        0.020557399839162827,
        -0.040980804711580276,
        -0.03102700226008892,
        0.06452330946922302,
        0.042775943875312805,
        0.02664615586400032,
        0.11231058090925217,
        0.002277958206832409,
        0.007928392849862576,
        -0.028690973296761513,
        -0.044413451105356216,
        -0.052525535225868225,
        -0.048373594880104065,
        0.0450265072286129,
        0.04732061177492142,
        0.029923846945166588,
        8.404396695243584e-33,
        0.03021129034459591,
        -0.025614460930228233,
        -0.12323141098022461,
        0.004220351576805115,
        0.06417465209960938,
        -0.015530290082097054,
        0.01981275901198387,
        0.004042762331664562,
        -0.10137280821800232,
        0.029806779697537422,
        -0.11181871592998505,
        -0.07857996970415115,
        -0.05589555576443672,
        0.004763191565871239,
        0.014682624489068985,
        -0.0448775514960289,
        0.0564228780567646,
        0.008206319995224476,
        0.08193908631801605,
        0.09599316120147705,
        0.003642629599198699,
        -0.06911823898553848,
        -0.004023768473416567,
        -0.052841708064079285,
        -0.028542635962367058,
        -0.0038444665260612965,
        -0.09141331911087036,
        0.013836618512868881,
        0.06319568306207657,
        0.02961125038564205,
        -0.07961923629045486,
        -0.024610133841633797,
        -0.03509211167693138,
        -0.07704255729913712,
        -0.01909695751965046,
        -0.035233691334724426,
        -0.09623339772224426,
        -0.032052963972091675,
        -0.015175892040133476,
        -0.011598171666264534,
        -0.05590111389756203,
        -0.03602626174688339,
        -0.11184906214475632,
        -0.014326870441436768,
        -0.005244769621640444,
        -0.05756727233529091,
        -0.08211717009544373,
        0.06631140410900116,
        -0.031412187963724136,
        0.11174710094928741,
        -0.07546927034854889,
        0.028290018439292908,
        0.018259534612298012,
        -0.09259312599897385,
        0.011613000184297562,
        0.0052292002364993095,
        0.02020549401640892,
        0.03819527477025986,
        0.04302271455526352,
        0.005850998684763908,
        0.03802398964762688,
        0.042013201862573624,
        0.032181110233068466,
        0.03708171099424362,
        0.04620750620961189,
        -0.049945466220378876,
        -0.0020043759141117334,
        0.020811643451452255,
        -0.06640888750553131,
        0.07835821062326431,
        -0.07861127704381943,
        -0.008307711221277714,
        -0.03058093786239624,
        -0.014028814621269703,
        0.02698022872209549,
        -0.04240861535072327,
        0.030988765880465508,
        0.0102041931822896,
        -0.07793494313955307,
        -0.007561262231320143,
        0.10372006893157959,
        0.01719190552830696,
        0.03678338974714279,
        -0.025176048278808594,
        -0.03954349085688591,
        -0.009933979250490665,
        -0.024862706661224365,
        -0.07809910178184509,
        -0.05909919738769531,
        0.05445588752627373,
        -0.05074643716216087,
        0.012886621989309788,
        0.017795836552977562,
        0.006984061095863581,
        -0.03216917812824249,
        -1.0986921049801687e-32,
        0.03447824344038963,
        0.05160801485180855,
        0.07736335694789886,
        -0.06120511516928673,
        -0.016550550237298012,
        -0.06530587375164032,
        -0.019816048443317413,
        -0.024917026981711388,
        0.041435495018959045,
        -0.0027352378237992525,
        0.03663543611764908,
        -0.08590517193078995,
        -0.02390260063111782,
        -0.0678524374961853,
        0.050881195813417435,
        -0.07475271821022034,
        0.01868993043899536,
        -0.020191684365272522,
        -0.01915830746293068,
        -0.03686597943305969,
        -0.06652314215898514,
        0.09553227573633194,
        0.03260248526930809,
        -0.08024859428405762,
        -0.10696256905794144,
        -0.05366798862814903,
        -0.03805244714021683,
        0.09480899572372437,
        0.011062673293054104,
        1.4563535842171405e-05,
        -0.07798562943935394,
        -0.03807908669114113,
        0.004472195636481047,
        0.008655405603349209,
        0.06561535596847534,
        0.05422922223806381,
        0.09934554994106293,
        0.06073344871401787,
        -0.036878831684589386,
        -0.0048204585909843445,
        0.08097432553768158,
        0.05491355434060097,
        -0.04935803264379501,
        0.03372546285390854,
        0.008367231115698814,
        -0.05094204097986221,
        0.05363288149237633,
        -0.040258634835481644,
        -0.08242395520210266,
        -0.07268932461738586,
        0.07058532536029816,
        0.0069255586713552475,
        0.017254596576094627,
        0.050665851682424545,
        -0.011453645303845406,
        0.046878110617399216,
        0.11839867383241653,
        -0.04130838066339493,
        0.015429881401360035,
        -0.0543949231505394,
        0.011583355255424976,
        -0.12973174452781677,
        -0.058511678129434586,
        0.08604834973812103,
        -0.0032844794914126396,
        -0.0554361566901207,
        -0.07893040776252747,
        0.030211778357625008,
        -0.009674298577010632,
        0.015744514763355255,
        -0.033598463982343674,
        -0.10352028906345367,
        0.050020668655633926,
        0.02785654179751873,
        -0.022720154374837875,
        0.004963639657944441,
        -0.009489547461271286,
        0.06409287452697754,
        -0.0735890343785286,
        0.08234478533267975,
        0.008753221482038498,
        0.07895568758249283,
        -0.054543592035770416,
        -0.015710754320025444,
        0.008375516161322594,
        0.01697143353521824,
        0.04131327569484711,
        -0.020392173901200294,
        0.04104579612612724,
        0.029331794008612633,
        -0.06328694522380829,
        -0.000770049577113241,
        0.032274700701236725,
        0.073194220662117,
        -0.03178197890520096,
        -5.8991254547891003e-08,
        -0.01630595326423645,
        0.03395204246044159,
        -0.04382562264800072,
        0.046068765223026276,
        -0.03555460274219513,
        0.045030251145362854,
        0.002836791565641761,
        -0.17117194831371307,
        0.009445984847843647,
        0.042878616601228714,
        0.013528811745345592,
        0.05414779856801033,
        -0.08469416946172714,
        0.02196560986340046,
        -0.07125718891620636,
        0.02702176570892334,
        -0.08079815655946732,
        -0.03483632579445839,
        0.01566828414797783,
        0.03446006774902344,
        0.026671700179576874,
        -0.05944453179836273,
        0.029275955632328987,
        0.027442285791039467,
        -0.02186558209359646,
        0.07334044575691223,
        -0.049392759799957275,
        -0.0575643889605999,
        -0.04119764640927315,
        0.054338421672582626,
        -0.05461435765028,
        -0.053593095391988754,
        -0.01705632358789444,
        0.022183995693922043,
        -0.0024678371846675873,
        0.02366587705910206,
        -0.030566541478037834,
        0.012801957316696644,
        0.04791640117764473,
        0.06730292737483978,
        -0.14483289420604706,
        -0.016639340668916702,
        -0.0032027580309659243,
        0.01103285513818264,
        0.0041494774632155895,
        0.01179200503975153,
        -0.057995375245809555,
        0.00047581689432263374,
        0.036688465625047684,
        -0.026226377114653587,
        0.040316175669431686,
        -0.02716229297220707,
        -0.014772786758840084,
        -0.0450872965157032,
        -0.00015287222049664706,
        0.06612662225961685,
        0.03015817329287529,
        -0.12641729414463043,
        -0.05920277163386345,
        0.04744289442896843,
        0.011132052168250084,
        0.08575201034545898,
        -0.006468875799328089,
        -0.05560269579291344
    ]
}