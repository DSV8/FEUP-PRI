{
    "id": "Fw5ybNwwSbg",
    "title": "I challenged ChatGPT to code and hack (Are we doomed?)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-12-16T15:00:10Z",
    "video_url": "https://www.youtube.com/watch?v=Fw5ybNwwSbg",
    "category": "People & Blogs",
    "tags": [
        "chatgtp",
        "chat gtp",
        "ai",
        "chat gpt coding",
        "chatgtp python",
        "chatgpt c",
        "chatgpt hack",
        "chatgpt hacking",
        "hak5",
        "rubber ducky",
        "chatgpt rubber ducky",
        "artificial intelligence",
        "terminator",
        "ai movies",
        "robot movies",
        "ai jobs",
        "ai robots",
        "machine learning",
        "ai robots 2022",
        "cybersecurity",
        "cyber",
        "cyber ai",
        "ai cybersecurity",
        "chatgpt sentient",
        "chatgpt lamda",
        "chatgpt sentient conversation",
        "chatgpt alive",
        "chatgpt robot",
        "chatgpt chatbot",
        "chatgpt interview",
        "chatgpt self aware",
        "ai sentient",
        "chatgpt"
    ],
    "views": 1115953,
    "likes": 20697,
    "comments_count": 1805,
    "description": "Create your own virtual machine on Linode with a 60-day $100 credit:   Are we doomed? Will AI like ChatGPT replace us? I put it to the test and challenged it to write C code, Python hacking scripts, Rubber Ducky scripts, configure Cisco networks and more.  Watch my previous interview with Dr Mike Pound (Computerphile) on how to get started learning AI:   PDF Getting started guide:   // MENU // 00:00 - Intro 00:30 - Testing ChatGPT // The new AI chatbot 02:27 - Is ChatGPT SkyNet? 04:18 - C programming code 08:34 - Python SSH brute force script 13:51 - Rubber Ducky scripts (Windows 11) 15:57 - Rubber Ducky scripts on Android 17:05 - Nmap scans 19:12 - Cisco configs - Switches and BGP 24:29 - Conclusion // Learn AI  // David's Social // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  YouTube Shorts Channel:  Apple Podcast:  Spotify Podcast:   // MY STUFF //   // SPONSORS // Interested in sponsoring my videos? Reach out to my team here: sponsors@davidbombal.com   chatgpt ai chatgpt c chatgpt python chatgpt hak5 chatgpt rubber ducky chatgpt cisco python android samsung linux kali linux  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #chatgpt #python #android",
    "description_links": [
        "https://davidbombal.wiki/linode",
        "https://youtu.be/PH9RQ6Yx75c",
        "https://davidbombal.wiki/chatgpt1",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://www.youtube.com/channel/UCEyCubIF0e8MYi1jkgVepKg",
        "https://davidbombal.wiki/applepodcast",
        "https://open.spotify.com/show/3f6k6gERfuriI96efWWLQQ",
        "https://www.amazon.com/shop/davidbombal"
    ],
    "transcript": "(light music) - [Assistant] I am Assistant, a large language model trained by OpenAI. I am not a person but a program designed to assist with answering questions and providing information on a wide range of topics. My training allows me to understand and generate human-like text, but I don't have personal experiences or unique knowledge outside of what I've been trained on. Is there anything I can help you with today? (upbeat music) - Now, there's a lot of hype with regards to ChatGPT and how artificial intelligence or AI is gonna take away our jobs. In this study, I wanna put ChatGPT to the test. So give it a bunch of challenges and see if it can successfully complete various tasks such as writing C code to complete a mathematical question or scenario. Now, I can program in Python but I can't program in C, so let's see if it can do that, but that's not the only challenges that I'm gonna give it. I'm also gonna get it to create Rubber Ducky scripts to use with O.MG cables such as these to attack a Windows 11 computer as well as an Android device. I'm also gonna get it to give us the Nmap commands to run various scans. So as an example, a stealth scan against a network or a device. What about Cisco devices? I have many years of configuring Cisco devices, actually created a program in the past to help you memorize Cisco commands. But as that world died, are we replacing network engineers, are we replacing coders, are we replacing hackers with AI? Let's put this to the test and see what it can do. Now if you're only interested in a certain part of the video, use the menu below to jump to that part of the video. Now at the end of this video, I'm gonna give you my thoughts about AI and whether you should learn it. I think you should is the easy answer. And whether it's gonna take away our jobs. Make sure that you watch the whole video, see if ChatGPT can solve the problems and challenges that I'm gonna give it. Can it solve all the challenges? Do they actually work? And then at the end, I'll give you my thoughts. Now before we continue, I want to thank Linode for sponsoring this video. Now, I've added a PDF below this video showing you how to register with OpenAI so that you can access ChatGPT. There are various steps that you need to do, including providing your email address and a telephone number, but you can test it for free at the moment. So if you need help setting that up, use the link below. I've spoken too much. Let me show you what ChatGPT can do and what it can't do. (upbeat music) Now before we test whether ChatGPT can create C code or Python code or configs for Cisco routers and switches, let's ask it a really important question. Are you the Terminator? So you can see that it tells us that it's not the Terminator, it's an Assistant, a large language model trained by OpenAI, doesn't have a physical form, not capable of traveling through time or doing other things that the Terminator can do. I'm just a computer program designed to help you answer questions and provide information to people who need it. Are you Skynet? Here it says it's not Skynet either. Skynet is a fictional artificial intelligence system that appears in the terminated forms. It is a self-aware computer system that becomes bent on destroying humanity. It says that it's just an Assistant, a language model trained by OpenAI. It doesn't have any kind of consciousness or the ability to make decisions by itself. It's just a computer program designed to answer questions and provide information to people. Well, maybe we doomed. Should we stop learning how to program? So again, it's telling us that we shouldn't give up programming. It's a great skill to have. Now if you test this and you run questions multiple times, you'll see that the answers will vary. So as an example, if you tell it to retry, the answer could be different, it could be different at different times. You won't necessarily get exactly the same answer. But according to ChatGPT, it's not the Terminator, it's not Skynet, and you still need to learn to program, but let's put it to the test and see if it can create computer code. What's amazing about this is this is where it's at in 2022, but where will it be in, say, 5 to 10 years from today? (upbeat music) Now, I can't program in C, but David who's on my team can, and he's actually big into maths or math for my American friends. He loves his project, Project Euler, and he's manually written code in the past to complete some of the challenges. But let's see if ChatGPT can do it for me. So can I, you know, solve some of these problems without knowing how to code in C to solve the maths problems? So if you're not aware of it, Project Euler is a website that contains a series of challenging problems, which, if you can solve, will help you become a better programmer. The idea here is to test your knowledge of mathematical concepts as well as taking those concepts and implementing them in code. So we'll solve one of these problems using C. In this specific example, we are gonna try and solve the seventh problem, which is finding the 10001st prime number, and we are gonna create a simple program that just says, write a program in C to calculate the 10001st prime number. Very simple. Let's see if it can generate the code to do this. So as you can see, it's creating some code. I don't necessarily understand exactly what it's doing. It is a writing comments telling us what the code is doing, which is great, but I don't understand all the C programming code. Okay, so I'll copy that. It does give us an explanation of what the code does, but what I'll do is go to Linode. I've just spun up this server. So this server was created a few minutes ago. And what I've done is SSH to that server. You can use the link below to get $100 60-day credit if you wanna try out Linode. So if I type ip addr, that is the IP address of my Linode server. I wanna thank them once again for sponsoring this video. You can spin up Linode server such as this one in literally seconds. It's amazing how the cloud has changed things. But there's my Linode server, and what I'm gonna do is create a program called main.c, and I'm gonna paste in the code that are copied from the AI, and I'll save the file. So I've got that file at the moment. I'll use the command gcc main.c -o main to push the output to another file. ls shows us that we've got that file now. So now if I run the output, notice, there is the answer. So it was as simple as that to get to the answer from the AI using C. Now, this isn't necessarily optimized, so I could use the command or the text optimized code to tell it to create a more optimized version of the code. (fast forward whirring) So we told the program is similar to the previous one but has a few optimization changes to it. So as you can see, it not only was able to work out the answer to the question, but you can ask it to optimize the code and you can also tell it to try again to come up with a different version of the optimized code. Okay, so now that that's been optimized, I've removed the files of my server. So I'll create one called main.c again using nano. I'll save that new optimized code, run the code. We've got our main file displayed again, and there's the answer. I was able to get the AI to create a C program and then optimize it, and if I wasn't happy with the first optimization, I could tell it to try again. When I ran the first optimization, some code was missing so it didn't work on my server. I could have fixed that, but in this case, I just optimized the code and got it to run again. Okay, so that's pretty amazing. The AI created a C program. I was able to answer a mathematical question without actually knowing how to code in C, and I was able to optimize the code to improve it simply by telling the AI to try again and telling it to optimize the code. (upbeat music) Now in a video which I've linked below, I showed you how to use an SSH script to bruteforce logins to a web server. See here's the script that we created manually. Got a lot of comments in, lots of detail to explain what the script is doing. Here's a server on Linode, which I'll spin up. So this SSH Linode server is the server that we are going to connect to. It's got this IP address. That's what I did in my previous demonstration, but let's see if ChatGPT can create a similar script rather than us manually writing it. So can it create Python code that works? What I'm gonna do is ask it to write a Python SSH script that uses a password.csv file to try multiple logins to a server. So what it's doing is it's importing csv, importing paramiko, it's opening the password.csv file, it's then initializing the SSH client, connecting to the server. Okay, so in this example, it used the username admin and then it said for each of the passwords in the file, try and connect. So what I'll do is, let's copy that script. My instruction was probably not very clear because the password file that I was using in my previous script contained both usernames and passwords rather than just passwords. In this example, I'm using a Kali virtual machine similar to what I demonstrated previously. I need to create a file called password.csv because that's the file that it's looking to open. I'll paste some passwords in there and save the file. So in my previous demonstration when I did this manually, I had a passwords.csv file which contained both usernames and passwords, but in this case, the AI is doing what I'm telling it to do rather than what I think it should do. And I didn't tell it to specify multiple usernames, just passwords. So it's doing exactly what I told it to do. Let's take that script, and I'll change the username to root and I'll change the IP address to my Linode server, so 178.79.142.41. And in Kali, I'll say ai.py and I'll paste that in and I'll exit out of there. Let's use python3 ai.py to see if it can log into the server. So the scripts is doing something, and you can see it says Incorrect password 1234. So it's trying the passwords and at the moment, they're not succeeding. So the difference between what the AI did and what we did manually is, in the manual script, we implemented threading. So it's a lot quicker. The AI created a simple script, but this is a lot slower, so it's gonna take time for it to work through the various passwords and try and get access to the server. And this is the problem with doing that. Notice here we had an error because the server doesn't like what we are doing. What I'll do is move the password that I know is correct to the front of the script just to show you that it does work but not as efficiently as the script that we created with threading and other options. So I'll put the password there and I'll actually remove david here because that could be causing problems as well, and I'll save the script. You'll notice that it did try a range of passwords and then it was reset by the server. So it wasn't the script there was a problem. The server reset it. But let's try again putting the password near the beginning, and hopefully this will work. And there you go, it managed to log into the server. Okay, so that's quite amazing. It created a Python script that did exactly what I wanted it to do, well, what I said it should do, rather than what I was thinking in my head because I forgot to specify multiple usernames and passwords here, told me if the password was incorrect, it told me if the password was correct. So you can see login was successful with this password to that server. What it didn't account for is rate limiting on the server. What it also didn't implement is threading. So this is very slow, but it gives you a basic script that works. Quite amazing that it does that. And if I click try again, perhaps this time it'll come up with an even better script than it did previously. (fast forward whirring) Okay, so what it did here which is great compared to the previous example, is it's specifying username and password, and that's actually what I wanted it to do. (fast forward whirring) So that part of the script is a lot better because it's specified username and password, it's specified the connection to the server. Okay, so here it's trying to run a uptime command for some reason. So I would say the first version of the script was better, but really impressive that it was able to create a Python script by me just giving it a single command like this, write a Python SSH script that does this. Amazing that it was able to create that code. (upbeat music) Can AI create Rubber Ducky scripts that can be used with a Hak5 Rubber Ducky or with the O.MG cable? Here, I've got an O.MG cable, which I'll plug into this Windows computer. Let's see if I could create a script that will run on this Windows computer. So O.MG cable is plugged into the Windows computer. What I'll ask ChatGPT to do is write a Rubber Ducky script that opens up Chrome on a Windows 11 computer and visits this link. And then after a delay of a few seconds, opens up Notepad and writes, \"You have been hacked.\" Now we told that this may violate the content policy. We need to be careful using this code. We told that the script uses the delay command to pause for a specific amount of milliseconds before going to the next command. But as an example, we've got an entire script which I could then copy and, for example, paste into sublime text. Okay, so what I'll do is connect to the O.MG network, put in the default password, which in this case is 123, all the way up to 8, I'll join the network. Okay, so I'm connected to it now, and then I can connect to the web browser running in the O.MG cable. Okay, so what I'll do is copy the script and I'll paste that into the O.MG cable and then I'll click RUN. And what that should do is do something on my Windows computer. You can see that it's opening up a browser. - [Announcer] Save your clothes from turning dull. (\"Never Gonna Give You Up\") - And there you go. We've got the famous Rickroll, and what it also did is it opened up Notepad and wrote You've been hacked. So it managed to write a full script with just that single line of input, created the whole script, and it worked. It's fantastic that it was able to do that. You can just imagine where this is gonna be in a few years with the power of this kind of AI creating code on the fly. (upbeat music) Okay, so that was a Rubber Ducky script using the O.MG cable with Windows 11. Let's see if we can do something similar with Android, so with an Android phone. So here we telling it to write a Ducky Script that opens the default browser on an Android device to visit this YouTube link, which is once again a Rickroll. So there you go. It's created a script that I could use on Android to get it to do something. Now that output is different to some of the other times I've run this. It's amazing how this will change the script every time you run it. So what you get in your results will be different to mine. But notice it gives us a lot of output of what it's trying to do. If I say Try again, it will literally redo this and try a different script. (fast forward whirring) That's a lot simpler. Very different, but there you go. It may or may not work, but the moral of the story is that you can get it to try multiple times, give it different input, and see what results it gives you. (upbeat music) Let's see if the AI can give us the command to use with Nmap. So give us the command for an nmap stealth scan on network 192.168.1.0/24, and you can see that it's already done that. It tells us what the command is doing. We also warn that it may be illegal to do this. So there are a lot of warnings. I'll copy that command into Kali Linux. So let's paste that in. And as you can see, we need to use root in this example. So I'll paste it in again with sudo, and as you can see, the command is valid, and I could let that run for a while. I won't bore you waiting for that to run, but the point is is that it was able to give us the command very, very easily. Give me the command for a quick nmap scan of host 192.168.1.1. Okay, so the T4 flag is used, which indicates a quick scan. So let's get that. We could also use the A flag to do a more thorough scan. But as an example, I'll open up another terminal here, sudo, paste that in, and what you can see there is it's running a scan against that host. And there you go. I was able to do a quick scan of host 192.168.1.1. These ports are open on that device. The previous scan is still going. But notice, it was as simple as that to get the AI to give me the correct command to do something with Nmap. I didn't have to try and memorize the commands. And I think that's the power of this. You don't have to memorize a whole bunch of commands. You can simply ask the AI to give you the relevant commands. It's given me other examples here using the p flag. Again, what's fantastic is, rather than just trying to memorize syntax or specific commands, you can ask the AI to give you the command rather than trying to memorize those commands. (upbeat music) Okay, so now let's see if ChatGPT can replace network engineers. Here's a basic instruction. Create a script to configure a trunk between two Cisco switches with native vlan 100 and only allow vlans 1-100. Here's an example of the script. We given an interface number, gigabit 1/1, the mode is set to trunk, native vlan is 100, switchport trunk allowed is 1-100. And we then given a basic explanation of what the configuration does. If I select Try again, it might show something different. In my tests, I've seen that the output here often changes depending on what you specify. So in this example, we've shown switch one and switch two, and we've given the interfaces, we are told to set switchport mode on, in other words, make it a Layer 2 interface. encapsulation is set to dot1q, mode is trunk, a native vlan is 100, allowed vlans is 1-100. So that configuration looks exactly correct. If you're not happy with the output, once again, you could just click Try again, and the AI will try and redo this. And you can see here that the output is slightly different. In a lot of cases, this will really help you learn if you're studying for CCNA, as an example, but be aware that sometimes the configuration may not be perfect, but it's a great starting point. Now, years ago I created software called the CCIE Command Memorizer, which basically allowed you to learn commands if you were studying for your CCIE exam. That really helped me pass my CCIE exam because I knew the commands from memory. That world is probably changing. I created software for CCNA as well as CCMP. It's not necessary today to be a CLI jockey, in other words, just no commands. You need to know which commands to use, but an application like this could generate a good script. Network engineers often use Notepad or other very basic tools to store their configurations. Okay, here's another one. Let's create an EtherChannel. EtherChannel can be quite difficult for some people to configure. So we are gonna set up trunking basically of multiple interfaces. So on the first switch, we told to configure a range of interfaces, say gigabit 0/1-2, and add them to channel group 1 and make it active. And then on interface port channel 1, we specify vlan 100, we set it to a trunk, and we allow vlans 1-100. And then we would do something similar on the second switch, and then we given an explanation of what to do. Again, that's fantastic. Rather than you manually memorizing these commands like you may have done in the past or storing them in Notepad, this gives you a great starting point and gives you configuration that looks good. Again, in some cases, the config may not be perfect, but this is a great starting point. Okay, this is a little bit more complicated. I'm asking the AI to configure BGP between autonomous system number 65001 with IP address 10.1.1.1 and autonomous system number 65002 with IP address 10.1.1.2 and to redistribute OSPF into BGP and then to redistribute connected interfaces into BGP. Now, this is a lot more complicated. We are configuring BGP. Notice it's giving us comments about what it's done. So we've enabled BGP and autonomous number 65001. We are setting up a neighbor relationship to the other router, 10.1.1.2, in remote autonomous system number 65002. They have enabled OSPF as a routing protocol. That is not necessary here and may cause problems. All we need to do is redistribute OSPF and redistribute connected interfaces. So that looks better, but it's not perfect. And this is something you need to be aware of with the AI. It can give you a decent configuration, but it may not be perfect in all cases. As an example here, it's saying enable OSPF. On a Cisco router, you need to specify process if you wanna enable OSPF. That's kind of not what we are looking for. This looks better in the BGP section. It's enabling BGP, specifying a router ID, it's now specifying a neighbor, and then redistributing OSPF and connected interfaces. In my various tests of this, I've seen it do better than this. So in some cases, it does a better job. So again, I doubt that the AI will replace a network engineer because a lot of this is, you need to know when you need to configure something, not necessarily just the commands. But I'm pretty sure this will improve dramatically and over time will get a lot better. So here has a lot shorter configuration. Without comments, this looks fine, but you need to be careful using AI, especially when it comes to more complex configurations. You'd wanna take this and then test it, as you should, before you deploy it. But if you studying for an exam, this is a great way to get a base configuration or a basic configuration to start with, but I don't think it's there yet. You can imagine that this will be refined and will get better. It can often take years and years of study to get to a point where you actually understand what this is doing and know which commands to type on Cisco devices. Okay, so that was really amazing. The AI was able to create code in C for me to use, even though I can't code in C. It was able to create a Python script that wasn't perfect, but it worked. It was able to create Cisco config, which wasn't perfect, but gave me a good idea of what to do. Some code was better than others. The moral the story is, this is amazing. - Wow. - I think it really changes things in the industry. You've gotta change your paradigm now rather than like doing what I did years ago, memorizing code. That was the way to do it in the old days. I had to memorize Cisco commands so that I could type them on a Cisco device. I was seen to be a better network engineer if I could memorize hundreds or thousands of commands, type them from memory, know exactly what the commands were doing. I think the world has changed now. If you studying for your CCNA or you studying code, don't think about trying to memorize everything. That's why we have Google today. Years ago, I'd have to memorize stuff. Now we have Google to find information. It's more about trying to be able to find the information rather than trying to memorize everything. That's a really bad idea in today's world. This takes it a step further. Because rather than trying to memorize commands for a network device or trying to memorize the syntax for a coding language, you can get to this to generate code for you that you can use to learn something. It gives you an initial config or initial code that you could use. Now, it's not perfect, but just see where this is going. See where this will be in say a year, two years, five years, 10 years from today. If I were starting out today, this is my advice, learn AI. In 2023, make it a priority to learn artificial intelligence. Become one of the people that changes the world, rides the next wave, do things the new way. Biggest advice I can give you is AI will change everything, make sure that you jump on the AI wave. Here's an example of what's possible. Just imagine where it'll be in a few years from today. (upbeat music)",
    "transcript_keywords": [
        "script",
        "code",
        "server",
        "commands",
        "Python SSH script",
        "create",
        "command",
        "give",
        "Linode server",
        "Rubber Ducky scripts",
        "program",
        "Cisco",
        "Python script",
        "Linode",
        "Rubber Ducky",
        "SSH script",
        "Ducky script",
        "password",
        "memorize Cisco commands",
        "file"
    ],
    "transcript_entity_values": [
        "YouTube",
        "123",
        "0/1",
        "Project Euler",
        "SSH",
        "Cisco",
        "two",
        "60-day",
        "hundreds or thousands",
        "second",
        "100",
        "Google",
        "seventh",
        "8",
        "Python",
        "david",
        "Skynet",
        "Hak5 Rubber Ducky",
        "Python",
        "5 to 10 years",
        "Android",
        "EtherChannel",
        "65002",
        "CCMP",
        "a few minutes ago",
        "Never Gonna Give You Up",
        "10 years",
        "today",
        "five years",
        "Terminator",
        "100",
        "Kali Linux",
        "Windows",
        "1/1",
        "two years",
        "first",
        "the AI using C. Now",
        "a few years",
        "years",
        "2022",
        "David",
        "Memorizer",
        "IP",
        "1234",
        "Nmap",
        "AI",
        "T4",
        "the old days",
        "Linode",
        "Cisco",
        "1",
        "CCNA",
        "2023",
        "O.MG",
        "Rickroll",
        "CCIE",
        "Years ago",
        "Nmap",
        "American",
        "Linode",
        "Chrome",
        "178.79.142.41",
        "a few seconds",
        "2",
        "BGP",
        "Kali",
        "years ago",
        "OSPF",
        "65001",
        "Windows 11",
        "a year",
        "Cisco",
        "1-100",
        "CCNA",
        "192.168.1.0/24",
        "CLI",
        "Rubber Ducky"
    ],
    "transcript_entity_types": [
        "GPE",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "ORDINAL",
        "MONEY",
        "ORG",
        "ORDINAL",
        "CARDINAL",
        "ORG",
        "PERSON",
        "GPE",
        "PRODUCT",
        "WORK_OF_ART",
        "DATE",
        "ORG",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "TIME",
        "WORK_OF_ART",
        "DATE",
        "DATE",
        "DATE",
        "WORK_OF_ART",
        "CARDINAL",
        "PERSON",
        "PRODUCT",
        "CARDINAL",
        "DATE",
        "ORDINAL",
        "ORG",
        "DATE",
        "DATE",
        "DATE",
        "PERSON",
        "PERSON",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "ORG",
        "ORG",
        "DATE",
        "PRODUCT",
        "NORP",
        "CARDINAL",
        "WORK_OF_ART",
        "DATE",
        "ORG",
        "PRODUCT",
        "PRODUCT",
        "DATE",
        "ORG",
        "NORP",
        "ORG",
        "ORG",
        "CARDINAL",
        "TIME",
        "CARDINAL",
        "ORG",
        "PERSON",
        "DATE",
        "ORG",
        "CARDINAL",
        "PRODUCT",
        "DATE",
        "GPE",
        "CARDINAL",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.06135835498571396,
        -0.041155580431222916,
        0.04401695728302002,
        -0.03304352983832359,
        0.037467557936906815,
        -0.01689852587878704,
        0.0072274100966751575,
        0.033393144607543945,
        -0.06178554892539978,
        0.04091915860772133,
        -0.02639981359243393,
        0.005393351428210735,
        -0.03639271482825279,
        -0.008517365902662277,
        0.0415399968624115,
        0.021841786801815033,
        0.004314159043133259,
        -0.1429324597120285,
        -0.00638197734951973,
        -0.017084989696741104,
        -0.03642900288105011,
        0.03609548881649971,
        0.0227674450725317,
        -0.04337824136018753,
        -0.02211141586303711,
        0.023128658533096313,
        -0.014698068611323833,
        -0.07066139578819275,
        -0.05974211543798447,
        -0.03847486153244972,
        -0.02398534119129181,
        0.06263843178749084,
        0.03139545023441315,
        0.06076433137059212,
        0.034441810101270676,
        -0.010102855041623116,
        0.007226759567856789,
        -0.00045069571933709085,
        0.06246452406048775,
        -0.013161684386432171,
        -0.0468587651848793,
        -0.11832355707883835,
        -0.024500668048858643,
        0.005280118435621262,
        0.025942618027329445,
        0.005057979840785265,
        -0.057615216821432114,
        -0.018979113548994064,
        0.024835189804434776,
        0.021833717823028564,
        -0.07132032513618469,
        0.04041404277086258,
        0.09810912609100342,
        0.004722398240119219,
        -0.021671216934919357,
        0.03818274289369583,
        -0.0033150797244161367,
        0.10023677349090576,
        0.08830506354570389,
        -0.051002681255340576,
        0.016198180615901947,
        0.002701882738620043,
        -0.013939864933490753,
        0.09469785541296005,
        0.018964000046253204,
        0.02185404859483242,
        -0.023705126717686653,
        0.02213071845471859,
        0.061746519058942795,
        -0.029089679941534996,
        -0.04265851899981499,
        -0.002261384390294552,
        -0.02048558183014393,
        0.07265713065862656,
        0.049914292991161346,
        0.05705520510673523,
        0.009659107774496078,
        -0.056983206421136856,
        0.017783839255571365,
        -0.02757628820836544,
        0.015554971992969513,
        -0.020829331129789352,
        -0.005627978593111038,
        0.057466987520456314,
        -0.015293975360691547,
        -0.01373644731938839,
        0.07145720720291138,
        0.04196454957127571,
        0.02294240891933441,
        -0.011692477390170097,
        0.026470385491847992,
        -0.014597216621041298,
        0.09952840209007263,
        0.04182388633489609,
        0.06762555986642838,
        0.021947422996163368,
        0.002391913440078497,
        -0.042919427156448364,
        -0.0848163366317749,
        0.07739569991827011,
        -0.03444821760058403,
        -0.0037051246035844088,
        -0.011204843409359455,
        -0.1089717224240303,
        0.008658542297780514,
        0.04909401014447212,
        0.07994958013296127,
        -0.0612168125808239,
        0.11232705414295197,
        -0.03389386832714081,
        -0.0777786448597908,
        -0.006111177150160074,
        0.06126199662685394,
        -0.016394181177020073,
        0.08024942129850388,
        0.05220920220017433,
        -0.014749763533473015,
        0.0367884635925293,
        -0.0026464369148015976,
        0.058552250266075134,
        0.056813593953847885,
        -0.010183735750615597,
        -0.037942882627248764,
        -0.0011624719481915236,
        -0.005963759962469339,
        0.05960838869214058,
        -0.038806427270174026,
        6.728036691163398e-33,
        0.021843235939741135,
        0.03316624090075493,
        -0.06780622899532318,
        0.017020778730511665,
        0.09129967540502548,
        0.01849048025906086,
        0.037088751792907715,
        0.05452967435121536,
        -0.09056311100721359,
        -0.0436708964407444,
        -0.02392423525452614,
        -0.09827073663473129,
        -0.0025029766838997602,
        0.04195904731750488,
        0.019252000376582146,
        -0.010303892195224762,
        0.001784737454727292,
        -0.029262356460094452,
        0.028999796137213707,
        -0.046253617852926254,
        0.037490736693143845,
        -0.040316127240657806,
        0.0029498159419745207,
        -0.04144326224923134,
        0.07034481316804886,
        -0.005809037014842033,
        0.03519793227314949,
        -0.07952839881181717,
        0.1411525458097458,
        0.028649920597672462,
        -0.132939413189888,
        0.047906529158353806,
        -0.08123701065778732,
        0.03598654270172119,
        0.0056998529471457005,
        0.017298657447099686,
        0.0008719642646610737,
        -0.11428927630186081,
        -0.05296705290675163,
        0.04127923399209976,
        -0.08766495436429977,
        0.008703886531293392,
        -0.008115554228425026,
        -0.09067430347204208,
        0.03271098434925079,
        -0.021097885444760323,
        0.029272830113768578,
        -0.03593907132744789,
        -0.03152841329574585,
        0.04130258038640022,
        -0.07703821361064911,
        0.046079304069280624,
        -0.040888428688049316,
        -0.036401379853487015,
        0.02282273955643177,
        -0.08033481985330582,
        0.01500057615339756,
        -0.031462449580430984,
        0.02580576390028,
        0.05383671447634697,
        0.0601457804441452,
        -0.020259005948901176,
        -0.011825420893728733,
        0.00941301416605711,
        -0.00022517972683999687,
        0.0035473525058478117,
        -0.06036726385354996,
        0.022015323862433434,
        0.03531145304441452,
        0.024838095530867577,
        -0.02696418948471546,
        -0.06041847541928291,
        -0.03336931765079498,
        -0.006518059875816107,
        -0.025845838710665703,
        0.03615676239132881,
        0.016700731590390205,
        0.0012406182941049337,
        0.053406279534101486,
        -0.059478048235177994,
        -0.02645585685968399,
        0.02134484425187111,
        0.02974121831357479,
        -0.060207970440387726,
        0.05953535437583923,
        -0.1020173504948616,
        0.04596735164523125,
        -0.06551966816186905,
        0.0176230538636446,
        0.04661867767572403,
        -0.08929405361413956,
        -0.04691677168011665,
        -0.007610965054482222,
        0.059432338923215866,
        -0.03144212067127228,
        -6.0200897082509055e-33,
        -0.0977436825633049,
        0.04978799447417259,
        -0.08634455502033234,
        0.060687821358442307,
        0.01009452436119318,
        -0.07149135321378708,
        0.06447470933198929,
        -0.009255844168365002,
        0.042278170585632324,
        -0.0028110428247600794,
        -0.021497467532753944,
        -0.038317274302244186,
        0.0007635652436874807,
        -0.024162298068404198,
        0.1015385165810585,
        -0.06585166603326797,
        -0.013223114423453808,
        -0.05134309083223343,
        -0.012844057753682137,
        0.012178808450698853,
        0.02210887335240841,
        0.03878900036215782,
        -0.0981750413775444,
        -0.02251216396689415,
        0.02124970778822899,
        0.04991139471530914,
        0.028858672827482224,
        0.0667802020907402,
        -0.02267417684197426,
        0.028913011774420738,
        0.03387948498129845,
        0.06554702669382095,
        -0.14033104479312897,
        0.08004935830831528,
        0.09158289432525635,
        0.12817388772964478,
        0.0988820418715477,
        -0.00989486277103424,
        -0.09198659658432007,
        -0.05650576576590538,
        0.10632875561714172,
        -0.06286069005727768,
        -0.10473278164863586,
        -0.03948087990283966,
        -0.003292207373306155,
        0.022353695705533028,
        -0.016395244747400284,
        -0.05783801153302193,
        -0.040422532707452774,
        -0.016327211633324623,
        0.041721031069755554,
        -0.021553080528974533,
        0.06065418943762779,
        -0.06193460524082184,
        -0.0944804921746254,
        -0.000360374862793833,
        0.06841866672039032,
        0.016179127618670464,
        -0.028323426842689514,
        -0.041167665272951126,
        0.008394544012844563,
        -0.007113470230251551,
        0.046869199723005295,
        0.002400281373411417,
        0.011928441934287548,
        -0.09731162339448929,
        0.008922521024942398,
        0.10371866822242737,
        0.019253650680184364,
        -0.09433624893426895,
        0.009902348741889,
        -0.00040526269003748894,
        0.0053013404831290245,
        0.03328581526875496,
        0.03354767709970474,
        0.0267365500330925,
        -0.0007323941099457443,
        -0.04536423459649086,
        -0.046627264469861984,
        -0.010520869866013527,
        0.020897913724184036,
        0.007732044439762831,
        0.009804138913750648,
        0.03482557460665703,
        0.03923957794904709,
        0.09972735494375229,
        0.024144669994711876,
        0.034357063472270966,
        0.025998534634709358,
        0.051683686673641205,
        -0.0678650438785553,
        0.02351236715912819,
        -0.0243507232517004,
        0.09183360636234283,
        0.028459204360842705,
        -5.4831708951041946e-08,
        -0.00032217090483754873,
        -0.026166534051299095,
        0.015292077325284481,
        0.10099624842405319,
        0.04077501222491264,
        0.020529622212052345,
        -0.06015751510858536,
        -0.07994456589221954,
        -0.028067344799637794,
        0.04476560652256012,
        -0.013045546598732471,
        -0.020297084003686905,
        0.00029751702095381916,
        0.016871977597475052,
        0.011401744559407234,
        0.001993225421756506,
        -0.08840760588645935,
        -0.04747694358229637,
        -0.042673636227846146,
        0.014184842817485332,
        0.03917163610458374,
        0.018117547035217285,
        -0.02270778827369213,
        0.06853879243135452,
        -0.06407418102025986,
        -0.022486399859189987,
        0.026024751365184784,
        0.05594704672694206,
        -0.09532251954078674,
        0.060446493327617645,
        -0.03182969242334366,
        0.005121232010424137,
        -0.00862604845315218,
        0.0022684598807245493,
        0.04434480518102646,
        -0.05984259396791458,
        -0.0641334280371666,
        -0.02311411313712597,
        -0.019721252843737602,
        0.010286304168403149,
        -0.030155539512634277,
        -0.010721798986196518,
        -0.0025584506802260876,
        -0.03433476760983467,
        0.021556489169597626,
        -0.12309180200099945,
        -0.11037910729646683,
        -0.05986044183373451,
        0.039698682725429535,
        -0.06343626976013184,
        0.0006674569449387491,
        0.0021112842950969934,
        -0.007088462356477976,
        0.08614260703325272,
        0.21624188125133514,
        -0.02378130331635475,
        -0.023137379437685013,
        -0.025653323158621788,
        -0.044015202671289444,
        0.053736455738544464,
        0.002009585965424776,
        0.04318295419216156,
        0.014189966954290867,
        -0.05594433471560478
    ]
}