{
    "id": "BSugciSUIek",
    "title": "Python Brute Force Password hacking (Kali Linux SSH)",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2022-12-09T15:00:12Z",
    "video_url": "https://www.youtube.com/watch?v=BSugciSUIek",
    "category": "People & Blogs",
    "tags": [
        "linux",
        "python",
        "ssh",
        "kali linux",
        "python linux",
        "ssh script",
        "python ssh script",
        "python ssh",
        "kali linux passwords",
        "password database",
        "python passwords",
        "python brute",
        "python ssh brute force",
        "hack",
        "hacking",
        "hacker",
        "hacks",
        "hackers",
        "how to hack",
        "howto",
        "how to",
        "tutorial",
        "guide",
        "cyber",
        "brute force",
        "password hacking",
        "secure shell ssh",
        "secure shell tutorial",
        "ethical hacking",
        "ssh keys",
        "python brute force",
        "python brute force passwords",
        "python ssh passwords"
    ],
    "views": 125253,
    "likes": 4737,
    "comments_count": 179,
    "description": "Create your own virtual machine on Linode with a 60-day $100 credit:   If that link doesn't work for you, try this link:   Please note: Credits expire in 60 days. Big thanks to Linode for sponsoring this video!  // MENU // 00:00 - Intro 00:16 - SSH Brute Force demo using Linode 01:37 - Your password is vulnerable 01:58 - Leaked passwords // rockyou database 03:25 - SSH Brute Force demo (continued) 05:59 - Disclaimer 06:20 - SSH Brute Force demo (continued) 10:24 - Conclusion  // Script // Download from github here:   // Sites mentioned // Haveibeenpwned:  Kali Linux seclists:  Daniel's GitHub page:   // David's Social // Discord:  Twitter:   Instagram:   LinkedIn:   Facebook:   TikTok:  YouTube Main Channel:   YouTube Tech Channel:  YouTube Clips Channel:  YouTube Shorts Channel:  Apple Podcast:  Spotify Podcast:   linux python ssh kali linux python linux ssh script python ssh script python ssh python  Disclaimer: This video is for educational purposes only. I own all equipment used for this demonstration. No actual attack took place on any websites.  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!   #python #passwords #linux",
    "description_links": [
        "https://davidbombal.wiki/linode",
        "https://www.linode.com/lp/youtube-viewers/?ifso=davidbombal",
        "https://github.com/davidbombal/ssh_bruteforcing",
        "https://haveibeenpwned.com/",
        "https://gitlab.com/kalilinux/packages/seclists/-/tree/kali/master/Passwords/Leaked-Databases",
        "https://github.com/danielmiessler/SecLists/tree/master/Passwords/Leaked-Databases",
        "https://discord.gg/davidbombal",
        "https://www.twitter.com/davidbombal",
        "https://www.instagram.com/davidbombal",
        "https://www.linkedin.com/in/davidbombal",
        "https://www.facebook.com/davidbombal.co",
        "http://tiktok.com/@davidbombal",
        "https://www.youtube.com/davidbombal",
        "https://youtube.com/channel/UCZTIRrENWr_rjVoA7BcUE_A",
        "https://www.youtube.com/channel/UCbY5wGxQgIiAeMdNkW5wM6Q",
        "https://www.youtube.com/channel/UCEyCubIF0e8MYi1jkgVepKg",
        "https://davidbombal.wiki/applepodcast",
        "https://open.spotify.com/show/3f6k6gERfuriI96efWWLQQ"
    ],
    "transcript": "- In this video, I'm gonna show you a simple Python script that runs an SSH or Secure Shell brute force attack against a web server. (bright music) In this example, I'm using a Linode Ubuntu server. I wanna thank Linode for sponsoring this video. You can use the link below to get $100 60 day credit. You don't have to use a Linode server. That's just what I'm using in this demonstration. As an example, if I use the command ssh, name of user, which in this case is root, IP address of the server, I'm prompted to accept the public key of the server, which I can do, and then I can paste in my password and I have access to the Ubuntu server. So uname -a as an example shows me that I'm using Debian Linux in the cloud. So I've successfully SSHed or used a Secure Shell to access a server on the internet. Now, that's great. SSH is used in many, many places, on routers, on switches, on servers, used all over the place to provide a Secure Shell or terminal to a device. So I can now configure this device and as an example, use IP address to see the IP address of the server that I'm connecting to. Now that's okay, but what we are gonna do is we are gonna use a Python script. Now I've put a link below to GitHub where you can get hold of the script. My team and I have created the script and put a lot of comments in the script. So I'm not gonna bore you going through every single line of the code because there are a whole bunch of comments showing you what the script does. This script leverages a password database. This is a big warning for both you and your family. Passwords that you are currently using on websites such as Facebook and others has most likely been leaked in the past or is most likely gonna be leaked in future. This website, Have I Been Pwned, allows you to see whether your usernames, passwords, and the like have been dumped in data breaches and are available online. Kali Linux, which is what I'm gonna be using in this demonstration, has a whole bunch of databases built into it. Here are some of the examples of the leaked database passwords that you can simply download online. So here's an example, is NordVPN. There are a list of leaked passwords from NordVPN, and I'll actually use some of these passwords in my database. There are many others. Here's Ashley Madison as an example. We have got Adobe, we have got Bible, so passwords from the Bible that people may be using. One of the most famous ones is the RockYou database, millions of passwords stored in this database, but the point is, is that there are password leaks taking place all the time. Here's Adobe. Notice the fantastic passwords that people are using. - The password is passwords. - He has passwords from the Bible that people may be using. So the point is passwords are being leaked all the time. On Have I Been Pwned, you can see that 509 million Facebook account details were leaked. This kind of thing is happening all the time. Passwords are available online. Make sure that you and your family are using random passwords and use a password manager as an example. And also if you're a high value target, in other words, you wanna make sure that you're more secure, then look at a YubiKey or a Google Titan key to improve your security. Just relying on passwords is no longer good enough in a lot of cases. - I can't even remember my own password. - Okay, so enough talking. Let's demonstrate what the script can do. Here I've manually SSHed into the server. Once again, there's the IP address of the server. I'll exit out of there. Let's go into Kali. And what I'll do is open up a terminal. ls me that in this SSH directory, it's just a directory that I've created. There are no files. What I'll do is use nano to create a file called main.py. nano is a text editor. On my Mac, I'm gonna copy the script that I've created. I'll talk through the script details in a moment. And all I'm gonna do is paste that into Kali, exit out, and save the file. I'm using Kali within VMware Fusion on my Mac in this example. You could use Kali natively, so install it directly on bare metal or on a Raspberry Pi. You don't have to use Kali. It's just makes it a lot easier. One of the requirements for the script to work is Paramiko, and that is installed on Kali, so I can use that. And then I'm gonna create a file called passwords.csv. In my example, I'm gonna use a simple database that looks just like this, but you could use a larger database for your tests. I'll save that file. And notice, I've got those two files. I'll clear the screen. And once again, I've got those two files there, main and passwords. And then what I'll do is run python3 main.py. Okay, we asked to enter the IP address of the server that we are going to attack. In this example, the IP address is this, which is a server on Linode once again. I'm gonna paste that IP address in. And what this does is make multiple connections to the server. So we're using threading in this Python script, and it's connecting to the server multiple times and testing the various passwords. Now, lots of servers will implement rate limiting, and that's what's happened here. Even though the server rate limited the connection, we continued to make connections to the server. You can see some passwords were incorrect, but we found a password for david over there. And if I look at my files, you can see we've got a credentials file. So if I cat that, you can see two usernames and passwords were discovered. We've got root using this password, and we've got this username, david and this password, and those worked on this host. Now, this script can be made a lot better. I've tried to keep the script simple because this is about learning. Again, do not go and use the script to attack devices that you don't own or have permission to attack. In this example, I'm using a Linode server. I'm working in collaboration with Linode to demonstrate, number one, the vulnerabilities of software out there, issues with passwords, and to make you aware of things that you need to do in the real world. This is for educational purposes only, once again. What the script does is it runs the main function. So this is where the script starts. We are removing some of the logging 'cause otherwise you get a lot of messages to the screen. I just want you to see a brief error message. So as an example, in the script, we saw that rate limiting was being used on the server. It looks for this file called passwords.csv. So you could go to the Kali GitLab page and download various passwords. You could also get that from GitHub. So Daniel has got a whole bunch of the SecLists, so various leaked databases on GitHub that you could download. So you'll see it's the same kind of thing. We've got Hotmail and various other databases that you could use. So basically you're gonna put your password in that file, firstly, Username, comma, and then the Password. It asks you for the IP address of the host that you're gonna connect to. And then it opens the file and works through the passwords. But notice we are using threading here. So multiple connections are made to speed things up. This SSH function connects to the host using the username and password that you've created. One of the things you need to be aware of with SSH is you need to accept the public key of the device that you're connecting to. So when I did that connection manually to the server, notice we were told that the connection could not be established because we had to accept the public key, which I then did, and now I can connect to that host. So now when I connect back, notice I'm prompted for a password. I don't need to accept the public key, but our script needs to do that. So it's gonna automatically accept the public key of the device that we are connecting to, and then it's gonna connect to the device using port 22, the username that we've specified, and the password that we specified. It opens up the credentials file and then sends the username and password to the server to try and connect to it. If there's an issue, so like there's a problem with the authentication, so in exception basically, we told that the username and password is incorrect. As you can see over here, this username and password is incorrect. Otherwise, if there's an SSH exception, it tells us that rate limiting is enabled on the server. Now again, you could make the script a lot more complicated. You can extend it. I just wanted to give you a basic example of a working SSH brute force attack. This function get IP address asks you for the IP address of the server. Make sure that it's a valid IPv4 address. And if you enter the IP address incorrectly, it'll tell you that it's an invalid IP address. Okay, so that's basically the script once again. Let's change the database. So as an example, if I wanted to add more usernames to the database, and let me just grab a few more passwords from the NordVPN hack, I'd take those passwords and what I'll do is just put them in a text editor and I'll paste them in there and then I could specify the username to try. Now, some password breaches have both username and password in the list, so you would know which usernames and passwords to use. But in this example, I'm just gonna assume that it's root. So I'll copy that, paste that in, and just remove all those spaces, copy that, and then in my Kali database, I'll paste them, for instance, here. So I've just added all of those passwords to my Kali database. Notice there are some of the additional passwords that I've added. I could run the script again, specify the IP address of the server that I'm going to connect to. Okay, rate limiting is enabled on the server. You can see we're getting quite a few rate limiting errors because we're trying to make a lot of connections to the server. But the script continues, keeps trying to make connections to the server. ls shows us the credentials files. If I cat that, you'll notice it's found the username, root and david, which are the passwords that were discovered previously. Okay, so this is a basic brute force SSH Python script. Hope you enjoyed this video. If you did, please like it. Please consider subscribing to my YouTube channel and clicking on the bell to get notifications. I'm David Bombal, and I wanna wish you all the very best. (bright music)",
    "transcript_keywords": [
        "Passwords",
        "server",
        "password",
        "script",
        "Kali",
        "address",
        "SSH",
        "Python script",
        "Linode Ubuntu server",
        "database",
        "username",
        "file",
        "Linode",
        "Ubuntu server",
        "Make",
        "Linode server",
        "SSH Python script",
        "Kali database",
        "leaked",
        "lot"
    ],
    "transcript_entity_values": [
        "Facebook",
        "SSH",
        "a Raspberry Pi",
        "nano",
        "Linode",
        "SSH Python",
        "ssh",
        "SSHed",
        "One",
        "millions",
        "two",
        "Hotmail",
        "Bible",
        "SecLists",
        "YubiKey",
        "100",
        "YouTube",
        "Google",
        "60 day",
        "IP",
        "Python",
        "Adobe",
        "Kali",
        "Mac",
        "david",
        "Secure Shell",
        "VMware Fusion",
        "Linode",
        "GitHub",
        "firstly",
        "Paramiko",
        "Daniel",
        "Kali Linux",
        "Ashley Madison",
        "David Bombal",
        "509 million",
        "python3",
        "22"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "PRODUCT",
        "PRODUCT",
        "ORG",
        "CARDINAL",
        "CARDINAL",
        "CARDINAL",
        "ORG",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "MONEY",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "PERSON",
        "PERSON",
        "PERSON",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORDINAL",
        "GPE",
        "PERSON",
        "PERSON",
        "PERSON",
        "PERSON",
        "CARDINAL",
        "FAC",
        "CARDINAL"
    ],
    "vector": [
        -0.0576147697865963,
        0.00779038155451417,
        -0.038466066122055054,
        -0.04469509795308113,
        0.029103923588991165,
        -0.0069806561805307865,
        -0.047694236040115356,
        -0.03686103969812393,
        -0.01759885437786579,
        0.03243882954120636,
        0.05823485180735588,
        -0.050204165279865265,
        0.04713108390569687,
        0.009142477996647358,
        0.012980693019926548,
        -0.03465191647410393,
        -0.056362446397542953,
        0.03260623663663864,
        0.040294695645570755,
        -0.04834628105163574,
        -0.05142435058951378,
        0.029116326943039894,
        0.004367355722934008,
        0.01667332462966442,
        0.036312609910964966,
        -0.04325904697179794,
        0.03185878321528435,
        0.00036071837530471385,
        -0.07412146031856537,
        -0.05013611912727356,
        -0.00836407020688057,
        0.03638249263167381,
        -0.05049510672688484,
        0.04725431278347969,
        0.03632713109254837,
        -0.0006258148932829499,
        -0.01316440012305975,
        0.026355953887104988,
        -0.031395427882671356,
        0.00416374858468771,
        -0.06598250567913055,
        -0.09045938402414322,
        -0.043042510747909546,
        0.005656779278069735,
        -0.019126569852232933,
        0.004363029729574919,
        -0.11457081884145737,
        0.011273869313299656,
        0.08879195153713226,
        -0.07108557224273682,
        -0.06946790218353271,
        0.04906371980905533,
        0.07715893536806107,
        0.07771490514278412,
        -0.027708353474736214,
        -0.04474494233727455,
        0.04652330279350281,
        0.02391289547085762,
        0.05209841951727867,
        -0.004180685617029667,
        0.027819376438856125,
        0.041735731065273285,
        -0.020894702523946762,
        0.03050835430622101,
        -0.03639187663793564,
        -0.03801262378692627,
        -0.0018804599530994892,
        0.01200850959867239,
        0.018407445400953293,
        0.06657819449901581,
        -0.003213324351236224,
        -0.07013115286827087,
        -0.05827277898788452,
        -0.009474114514887333,
        0.024083076044917107,
        -0.02340526133775711,
        -0.05760856717824936,
        -0.08498433232307434,
        0.008398615755140781,
        0.05629459396004677,
        -0.042178522795438766,
        -0.06632804870605469,
        -0.02435370720922947,
        0.09340690821409225,
        -0.008408786728978157,
        0.03686995804309845,
        0.033208414912223816,
        0.042826224118471146,
        0.03954768925905228,
        -0.08496832847595215,
        0.03914652392268181,
        0.010135949589312077,
        -0.010809896513819695,
        -0.05413171276450157,
        0.029880277812480927,
        0.012239300645887852,
        -0.013525056652724743,
        0.036423251032829285,
        -0.09192855656147003,
        0.031144706532359123,
        -0.04894707351922989,
        0.013074470683932304,
        0.009564165957272053,
        -0.08415886014699936,
        0.08538445085287094,
        0.0413961298763752,
        0.12297066301107407,
        -0.01958109252154827,
        0.06145206466317177,
        -0.010806078091263771,
        -0.0538024976849556,
        0.006103254854679108,
        0.04652545601129532,
        0.008783100172877312,
        0.07067599892616272,
        0.07519359141588211,
        0.01246644090861082,
        0.06364334374666214,
        -0.013656862080097198,
        0.0696399137377739,
        0.11104808747768402,
        0.012176726944744587,
        -0.0007837268058210611,
        0.0575854629278183,
        -0.01588592864573002,
        0.033791434019804,
        -0.006476236041635275,
        8.166073297138027e-33,
        0.08595035970211029,
        0.06769899278879166,
        -0.016238046810030937,
        -0.046050503849983215,
        0.08928840607404709,
        -0.031180033460259438,
        -0.033633530139923096,
        -0.03378738835453987,
        -0.15448908507823944,
        0.08699218183755875,
        -0.04022343084216118,
        -0.0654476210474968,
        -0.010082562454044819,
        -0.047812025994062424,
        0.04236837103962898,
        -0.042571380734443665,
        0.021008536219596863,
        0.02009950950741768,
        0.004986034240573645,
        0.01474866084754467,
        0.014597159810364246,
        -0.04410092532634735,
        0.03920368477702141,
        -0.009331978857517242,
        0.01832769066095352,
        -0.08206880837678909,
        -0.0359765887260437,
        -0.05130615085363388,
        0.05956404656171799,
        0.02440383844077587,
        -0.03435198962688446,
        -0.034005068242549896,
        -0.02039898745715618,
        -0.025839559733867645,
        -0.07458376884460449,
        -0.09241650253534317,
        0.0111628333106637,
        -0.06621836870908737,
        -0.027532435953617096,
        -0.054876141250133514,
        -0.024136658757925034,
        0.02326984517276287,
        0.011301232501864433,
        -0.002027018228545785,
        -0.03187944367527962,
        -0.025478854775428772,
        0.010291513986885548,
        0.013411717489361763,
        0.08450013399124146,
        0.08646851032972336,
        -0.0839630588889122,
        -0.004052316304296255,
        -0.059974994510412216,
        2.313167897227686e-05,
        -0.041684698313474655,
        0.02437756583094597,
        0.017469150945544243,
        -0.02937181293964386,
        0.009074634872376919,
        0.06451380997896194,
        0.030329803004860878,
        0.007131390739232302,
        0.015683259814977646,
        -0.058031413704156876,
        0.02949231117963791,
        -0.14501386880874634,
        -0.0097137950360775,
        0.04483089596033096,
        -0.02165348082780838,
        0.07564715296030045,
        -0.07600770145654678,
        0.0055391667410731316,
        -0.03489517793059349,
        -0.020395778119564056,
        -0.017101282253861427,
        -0.08681117743253708,
        0.12320379167795181,
        0.029781080782413483,
        0.05467018857598305,
        -0.055606383830308914,
        0.043461792171001434,
        -0.04830126836895943,
        -0.06278981268405914,
        0.025781460106372833,
        -0.024528590962290764,
        0.0636112242937088,
        0.03977923467755318,
        -0.04716172814369202,
        -0.05592148378491402,
        -0.019531449303030968,
        -0.023799236863851547,
        -0.028647365048527718,
        0.04857292026281357,
        -0.08860058337450027,
        -0.057708293199539185,
        -9.442497796973824e-33,
        0.025369619950652122,
        -0.006101096980273724,
        0.007332317065447569,
        0.01218891330063343,
        0.17099899053573608,
        -0.045997314155101776,
        -0.036548200994729996,
        0.06147303059697151,
        -0.0197552889585495,
        -0.038896575570106506,
        -0.004689698573201895,
        0.037745315581560135,
        0.009013356640934944,
        -0.05184369161725044,
        0.10001547634601593,
        0.014753637835383415,
        0.03354573994874954,
        0.034704241901636124,
        -0.03529229760169983,
        -0.009098498150706291,
        -0.04859152436256409,
        0.09155585616827011,
        -0.004610972013324499,
        -0.02447560429573059,
        0.050046514719724655,
        0.041103821247816086,
        0.06540662795305252,
        0.11324835568666458,
        0.017605362460017204,
        0.05437607690691948,
        0.005258323159068823,
        0.07669002562761307,
        -0.15612363815307617,
        0.0915076732635498,
        0.02973276749253273,
        0.005964723415672779,
        0.05706487223505974,
        0.12257304042577744,
        -0.035861849784851074,
        -0.001306339050643146,
        0.09989222884178162,
        0.05669654160737991,
        -0.05293874070048332,
        -0.02867237664759159,
        0.006050669122487307,
        0.004894171375781298,
        -0.005109251476824284,
        0.045742668211460114,
        -0.00940774567425251,
        -0.08762272447347641,
        0.039143312722444534,
        -0.06677227467298508,
        0.08790117502212524,
        0.024832885712385178,
        -0.045478858053684235,
        0.008068200200796127,
        -0.04003354534506798,
        -0.0027814339846372604,
        0.010168883018195629,
        -0.06751763075590134,
        -0.025225019082427025,
        -0.008782008662819862,
        -0.03569836914539337,
        0.04471419006586075,
        -0.04876992851495743,
        -0.09267788380384445,
        -0.1060541421175003,
        0.014405104331672192,
        -0.019045090302824974,
        -0.029378805309534073,
        0.004033732693642378,
        0.014774599112570286,
        0.06611479073762894,
        0.07279543578624725,
        0.025222694501280785,
        0.010203286074101925,
        -0.13154391944408417,
        0.02095213159918785,
        -0.020773349329829216,
        -0.00019964655803050846,
        0.07242545485496521,
        0.06824948638677597,
        -0.07743863016366959,
        -0.05155882239341736,
        0.034839991480112076,
        0.0019972098525613546,
        0.013630601577460766,
        0.07477183640003204,
        0.04749693349003792,
        -0.03777875378727913,
        -0.0770547017455101,
        0.0022181817330420017,
        0.00036828292650170624,
        0.06804794818162918,
        0.06413039565086365,
        -5.572933758912768e-08,
        0.0929664894938469,
        -0.018340595066547394,
        0.04971254989504814,
        0.02057209424674511,
        0.06876372545957565,
        0.014644763432443142,
        0.019683463498950005,
        -0.10791585594415665,
        -0.038995880633592606,
        -0.021996237337589264,
        -0.025978758931159973,
        0.01852823607623577,
        0.059523988515138626,
        0.023084241896867752,
        -0.058223068714141846,
        0.05049490928649902,
        -0.02702743373811245,
        -0.03359295055270195,
        -0.008767293766140938,
        0.001967559102922678,
        0.015010714530944824,
        -0.04894993081688881,
        0.01135006919503212,
        0.006837191991508007,
        -0.09426386654376984,
        0.0799659788608551,
        0.01670355163514614,
        0.029867682605981827,
        -0.09760454297065735,
        -0.055363889783620834,
        0.008335706777870655,
        -0.029072929173707962,
        -0.0782034695148468,
        -0.021205509081482887,
        -0.009084430523216724,
        0.05792113021016121,
        -0.13462358713150024,
        -0.08382676541805267,
        -0.018017083406448364,
        0.0316726379096508,
        -0.11253214627504349,
        -0.0587177500128746,
        0.014222424477338791,
        -0.013047986663877964,
        -0.032626401633024216,
        -0.045129794627428055,
        -0.004654564429074526,
        -0.001329528633505106,
        0.005132607650011778,
        -0.05079156905412674,
        0.008055344223976135,
        -0.02763483300805092,
        -0.04386894777417183,
        0.0320669524371624,
        0.07144588977098465,
        0.015398897230625153,
        0.006414053495973349,
        -0.039292994886636734,
        -0.022501571103930473,
        -0.02323508821427822,
        0.06694327294826508,
        0.02536650560796261,
        0.03176704794168472,
        -0.02570987306535244
    ]
}