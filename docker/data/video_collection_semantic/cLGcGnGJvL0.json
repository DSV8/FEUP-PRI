{
    "id": "cLGcGnGJvL0",
    "title": "“Starting at” is the Biggest Lie in Tech - The True Cost of \"Entry-Level\"",
    "channel": "Linus Tech Tips",
    "channel_id": "UCXuqSBlHAE6Xw-yeJA0Tunw",
    "subscriber_count": 15900000,
    "upload_date": "2023-07-24T17:15:21Z",
    "video_url": "https://www.youtube.com/watch?v=cLGcGnGJvL0",
    "category": "Science & Technology",
    "tags": [
        "apple",
        "dell",
        "soldered ram",
        "soldered storage",
        "ssd",
        "nand",
        "computer upgrades",
        "upgrades",
        "ripoff",
        "starting price",
        "scam",
        "laptop upgrades",
        "camm",
        "lpddr5",
        "ddr5",
        "base model",
        "laptop configuration"
    ],
    "views": 2104647,
    "likes": 86897,
    "comments_count": 4342,
    "description": "Looking for electronic components and equipment? Consult the specialists! Head over to   Check out MSIs epic Summer Sale today using the link below!   Its easy to look at the starting at price for a new laptop and think its a great deal. But when you look closer, its a lie. That entry level config is barely good enough for what you need to do today, let alone tomorrow, and you cant even upgrade the thing after you buy it!  Discuss on the forum:   CAMM Explained:   Purchases made through some store links may provide some compensation to Linus Media Group.   GET MERCH:   LTX 2023 TICKETS AVAILABLE NOW:   GET EXCLUSIVE CONTENT ON FLOATPLANE:   SPONSORS, AFFILIATES, AND PARTNERS:   EQUIPMENT WE USE TO FILM LTT:   OUR WAN PODCAST GEAR:   FOLLOW US  ---------------------------------------------------  Twitter:  Facebook:  Instagram:  TikTok:  Twitch:   MUSIC CREDIT --------------------------------------------------- Intro: Laszlo - Supernova Video Link:  iTunes Download Link:  Artist Link:   Outro: Approaching Nirvana - Sugar High Video Link:  Listen on Spotify:  Artist Link:   Intro animation by MBarek Abdelwassaa  Monitor And Keyboard by vadimmihalkevich / CC BY 4.0  Mechanical RGB Keyboard by BigBrotherECE / CC BY 4.0  Mouse Gamer free Model By Oscar Creativo / CC BY 4.0   CHAPTERS --------------------------------------------------- 0:00 Intro 1:51 The Benefits 4:55 SoM 5:37 Storage 6:50 What does it really cost? 10:49 What's the solution? 14:48 Outro",
    "description_links": [
        "https://lmg.gg/CircuitSpecialists",
        "https://msi.page/3qUXYY9",
        "https://linustechtips.com/topic/1521523-%E2%80%9Cstarting-at%E2%80%9D-is-the-biggest-lie-in-tech/",
        "https://www.youtube.com/watch?v=WXp4g-KzdAI",
        "https://lttstore.com",
        "https://lmg.gg/ltx23",
        "https://lmg.gg/lttfloatplane",
        "https://lmg.gg/partners",
        "https://lmg.gg/LTTEquipment",
        "https://lmg.gg/wanset",
        "https://twitter.com/linustech",
        "http://www.facebook.com/LinusTech",
        "https://www.instagram.com/linustech",
        "https://www.tiktok.com/@linustech",
        "https://www.twitch.tv/linustech",
        "https://www.youtube.com/watch?v=PKfxmFU3lWY",
        "https://itunes.apple.com/us/album/supernova/id936805712",
        "https://soundcloud.com/laszlomusic",
        "https://www.youtube.com/watch?v=ngsGBSCDwcI",
        "http://spoti.fi/UxWkUw",
        "http://www.youtube.com/approachingnirvana",
        "https://www.instagram.com/mbarek_abdel/",
        "https://geni.us/PgGWp",
        "https://geni.us/mj6pHk4",
        "https://geni.us/Ps3XfE"
    ],
    "transcript": "Have you ever noticed that the starting at configuration always sucks, it cheaps out on memory, and usually has zip all for storage, meaning that you're gonna need to upgrade the thing if you want to keep it useful in the longer term, which used to be a much smaller problem, because you could just pick up the base model today, then upgrade years down the road once your needs have changed. And the best part is you'd often save a bundle of money doing that, thanks to the improved affordability of those replacement parts. But you can't do that anymore. RAM and even storage drives are being soldered directly onto the mainboards of everything from phones to laptops, forcing consumers to pay today's price upfront for their hypothetical future needs. But today's prices aren't even the reason I'm making this video. You see, while there can be consumer benefits to more integrated product designs, a convenient side effect for manufacturers is that whether it's today or tomorrow, the only source of otherwise commodity upgrades for your system is them, which has led to a troubling trend that I really don't think we're talking about enough. The complete and utter disconnect between market pricing for commodity memory and storage chips, and the prices that are being charged to consumers by big brands like Apple and Dell. Prices that we are forced to pay if we don't want to be stuck literally forever with a machine that is hamstrung by its utterly inappropriate starting configuration. Let's take a look then at how we got here and see if we can come up with some ideas for how to fix this going forward. And some ideas for a message from our sponsor. MSI, don't just shop for a laptop, level up your gaming experience with MSI's summer sale event. Check it out at the link below. It's only fair for me to begin with the advantages of a tightly integrated hardware design because they are real and in some cases provide measurable benefits to a platform. Let's start with memory. Have you ever wondered why your GPU doesn't have memory slots the same way your CPU does? I mean, they're certainly capable of being equipped with different capacities. Well, believe it or not, they used to, but this practice fell out of fashion for a number of good reasons. For starters, slots or sockets add complexity and therefore cost to the board design, which will need to be passed along to the end user. And for what? To deal with more compatibility edge cases and user error? And besides, who knows better than the GPU designer, what memory configuration would be an ideal match both for the onboard processing power and for upcoming games? All of which is fair enough. But the biggest reason by far was performance. To address the growing demand for high fidelity visuals, GPUs needed to be fed with ever faster memory. Have you ever wondered why your GPU memory is laid out like this rather than like this or like this? The reason is that the shorter you can keep your traces, the connections between your graphics processor and its memory chips, the stronger the signal and the higher you can push your performance. And while GPU makers could theoretically just cover the board in little sockets for RAM chips, the interface pins or the pads or whatever they ended up using would ultimately have the exact same effect of lengthening the traces. That is, that they would harm signal integrity and therefore real world performance. And we can see this exact same thing in action in modern DDR5 laptops. Have you ever noticed that while you can buy DDR5 SODIMM sticks, they run at much lower speeds compared to systems with LPDDR5 memory soldered to the motherboard? We did a whole video about a new memory module standard that Dell is proposing to overcome this challenge, but the TLDR is that traditional slotted memory modules suffer from signal integrity issues that prevent them from reaching the same speeds as their non-upgradable counterparts. And that puts manufacturers who choose to stick with slots at a performance disadvantage compared to the ones that don't. And this disadvantage extends to more than just performance. From some quick digging, DDR5 slots appear to be much more expensive than DDR4 slots, adding as much as $8 each to the cost of the machine while also taking up valuable internal space that could be used for cooling or just to make the device slimmer and sexier. So this trend isn't reversing. And in fact, it's accelerating. LPDDR5X is coming in at speeds of up to 8,500 megatransfers per second. That is double what we can get from a DDR5 SODIMM. And surprise, surprise, it needs to be even closer to the processor in order to achieve these speeds, with Asus using a technique that they're calling SOM or System On Module to hit 7,467 megatransfers per second. What's SOM, you ask? Well, basically, it's exactly what Apple's been doing ever since the introduction of their M1 Apple Silicon, where they took the system memory that they were already soldering to the motherboard and moved it onto the same package as the processing die, which I guess is actually a pretty strong argument for integration, am I right? I mean, Apple Silicon is pretty impressive from a performance and efficiency standpoint. But here's where I think it becomes clear that this whole trend was never just about performance. Why is storage being soldered down? Every argument that we've considered for memory, the extra thickness it adds to the machine, the high cost of the interface, the performance, all of it falls apart completely for storage, which almost exclusively runs over PCI Express in modern laptops. And while PCI Express certainly has its own signal integrity challenges to overcome over the next decade or so, it is designed to scale to the data center level and can easily run at the distance between a storage chip and the controller on your CPU or SOC. This is where the tinfoil hat comes out a little bit then, but hold on, don't tune out, because I think I can demonstrate why I think that this just comes straight down to maintaining a monopoly on upgrade parts for your computer. All we've got to do is follow the money because the profit that can be captured by doing this is astounding. Now, Apple is not the only company to have taken the step of soldering down their storage, but they are the only one that's brazen enough to put barriers in place that prevent users from upgrading even their non-soldered SSDs. So we're going to be picking on them a little bit. I want to start by going back to memory. Apple appears to have decided at some point that eight gigabytes of memory costs $200. That same figure pops up, whether we go from 8 to 16 or from 16 to 24. By comparison, if Apple had heroically charged us a little bit more even for our MacBook and added some memory slots, the average price we found for a single eight gig DDR5 sodium was around $30 at the time of recording. And even if we assume, rightly, that Apple is using premium memory chips and we go with the highest price we found, that's $60, which is still $140 less than what Apple wants for that exact same capacity. Where else in the consumer electronics industry can you get away with a 300% markup? Oh, don't worry. We found somewhere. Let's talk about storage. The SSD in a MacBook is not magic. As I mentioned before, PC, Mac, they're all using the PCI express bus and the NVMe protocol, just like the M.2 drive that you would stick into a PC or, I mean, who cares for that matter, a PlayStation. The only real difference is they built the controller for the flash storage chips into their Apple Silicon rather than using a discrete one. Oh, and I guess they also limited themselves to two NAND flash chips while discrete drives can have space for four or more, which improves capacity at the cost of, well, cost. As with Apple's RAM, we can't necessarily source the exact chips they're using for storage, but just like with the RAM, we can ballpark it to give you some idea what's going on here. The sweet spot for commodity SSD drives these days then is about two terabytes. These will cost around $100 and use four 512 gigabyte NAND chips, which means the cost to manufacture each of those must be well under $25. In Apple's base models, they're using only a single NAND chip. You've probably seen the stories talking about the reduced storage performance in those models as a result of that choice, by the way. And what that means is that upgrading a MacBook Air or a 13-inch MacBook Pro to 512 gigabytes is really just adding a second 256 gigabyte chip, which at the current price of around six cents a gig is going to set Apple back $16 if they were paying retail market pricing, which they're not. Then again, of course, neither is the customer. That's right. Apple wants a whopping $200 from you for that extra 256 gigabytes of storage. That is more than 12 times the retail price of that chip integrated into a different product. I mean, that is just wow. And Apple's not the only one doing it. The configurator for the Dell XPS 13 two-in-one allows me to go from 512 gigs to one terabyte for, wait for it, $150. It might look downright reasonable next to Apple, especially considering how relatively usable that base configuration is. So I don't have to, but oh, I didn't even include this in the script, but iCloud, of course, they don't want any storage on the machine. So you can just pay the monthly for iCloud instead. Okay. That's a whole other level to, I need my hat back. No, it doesn't matter. What matters is that in either case, the SSD is likely the most profitable component in either of these machines, which I mean might be worth it if they were doing something super performant or they were extra reliable or something. That's what industrial disclosure framework does where they lay out exactly what model they'll be using so you can compare prices and decide if it's worth it. But instead brands like Apple and Dell are simply putting in whatever they like, regardless of the performance impact. Again, like we saw with those single chip MacBook SSDs. So then what's the solution here? Well, this is going to sound pretty wild, but I'm not actually asking Apple to take less margin on their products or even markup their upgrades less. Contrary to the narrative, Apple isn't even an obscenely profitable company. They operate at about 40% gross margin. That's a little higher than Intel, similar to us on lttstore.com. By the way, knock to addition screwdrivers coming soon, sign up for a notification at the link down below and actually much lower than others in the technology space like Google, Nvidia and Texas instruments. All I'm really asking for is misleading starting at pricing to disappear. The performance claims that they make are nearly always based on a juiced up config that costs in some cases double or more compared to that palatable starting at. And all of this is because of those awful starting configs that are by design barely enough for today, let alone for five years from now. And because of the ever growing markups on the upgrade parts that can only be obtained from the manufacturer. So I guess I am asking for them to charge a little less for the upgrades. And while I'm at it, I'm also asking for some consideration for the longevity of this hardware. I mean, okay, okay, okay. Keep the configurator prices high. Most customers aren't going to run out and source upgrade parts anyway. So you might as well profit from them, but for the ones that do want to, swappable components would be a godsend. Here's a couple of ideas for how to do it. For RAM, we'll link the video we did on the CAM standard, which would bring a big improvement over SODIMMS and even enable modular LPDDR. But even if CAM doesn't take off, there's been an interesting uptick in enthusiasts who are performing DIY upgrades to soldered components on everything from phones to GPUs. And so I guess all I'm asking then is if you must have your integrated memory because of, you know, unified memory access for the CPGP, whatever, just please don't make any further moves towards locking down hardware swaps. I mean, maybe that's the solution in the longer term as robotics and automation get cheaper year by year. I mean, remember when Scotty from strange parts blew the world away with his video showing off the cottage industry players in China that made it possible for him to build a new iPhone completely from scratch? Well, maybe it won't be that long before your neighborhood computer shop has a robot arm in the back that can do quick, reliable component swaps, adding more memory to your MacBook or more storage to your phone, even if everything is all soldered to the mainboard. What I know isn't the solution is just the trade in and recycling programs that are already there. They're going to be part of it, but there's a far greater environmental impact in producing a thousand complete computers, even with some recycled materials, compared to producing a thousand chips of memory for upgrades to existing ones. I mean, Apple wouldn't need to recycle a thousand more computers down the line if they could have just been upgraded to be more functional in the first place, could they? And you can still sell them iCloud storage, just like I can sell you this segue to our sponsor. Circuit specialists, they provide tools and supplies to the STEM community at competitive prices because looking for electronics components and equipment shouldn't fry your brain or your bank account. Speaking from experience, neither of those are fun. Whether you're looking for resistors, capacitors, soldering stations, siloscopes, or quantum resonance generators, circuit specialists probably has it all, especially if it's a real thing and not a made-up sci-fi one. Because as their name implies, they know tech and they know how to find it, so they've made it their goal to give customers access to tools and parts that may otherwise be unavailable or too expensive. And their commitment to quality means they will make sure that those products are reliable and suited to your unique needs. So let circuit specialists help you upgrade your electronics toolkit by checking them out at the link down below. If you liked this video, maybe check out the one we did upgrading the old Mac Pro. From back when Apple let us do wild things like install memory and computers beyond.",
    "transcript_keywords": [
        "Apple",
        "memory",
        "Apple Silicon",
        "storage",
        "performance",
        "chips",
        "memory chips",
        "Apple RAM",
        "cost",
        "prices",
        "RAM",
        "storage chips",
        "upgrade",
        "chip",
        "PCI Express",
        "today",
        "smaller problem",
        "memory slots",
        "price",
        "GPU"
    ],
    "transcript_entity_values": [
        "year",
        "SSD",
        "MacBook",
        "monthly",
        "300%",
        "XPS 13",
        "GPU",
        "iPhone",
        "Dell",
        "512 gigabytes",
        "Mac",
        "around six cents",
        "five years from now",
        "NAND",
        "24",
        "256 gigabytes",
        "512",
        "years",
        "about two terabytes",
        "Apple",
        "first",
        "25",
        "CPGP",
        "up to 8,500",
        "LPDDR",
        "about 40%",
        "TLDR",
        "Scotty",
        "256 gigabyte",
        "MSI",
        "60",
        "sci-fi one",
        "MacBook Pro",
        "CPU",
        "four 512 gigabyte",
        "DIY",
        "Intel",
        "tomorrow",
        "CAM",
        "Apple Silicon",
        "SOM or System On Module",
        "four",
        "16",
        "Google",
        "China",
        "MacBook",
        "around $100",
        "one terabyte",
        "150",
        "140",
        "M1 Apple Silicon",
        "16",
        "a thousand",
        "13-inch",
        "7,467",
        "Mac Pro",
        "iCloud",
        "eight gigabytes",
        "two",
        "these days",
        "second",
        "SOC",
        "PCI Express",
        "DDR5 SODIMM",
        "Asus",
        "summer",
        "around $30",
        "MacBook Air",
        "200",
        "today",
        "PCI",
        "as much as $8",
        "RAM",
        "8",
        "the next decade",
        "Texas",
        "more than 12",
        "Nvidia",
        "MacBook SSDs",
        "PlayStation",
        "DDR5"
    ],
    "transcript_entity_types": [
        "DATE",
        "ORG",
        "FAC",
        "DATE",
        "PERCENT",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "QUANTITY",
        "ORG",
        "MONEY",
        "DATE",
        "PRODUCT",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "DATE",
        "CARDINAL",
        "ORG",
        "ORDINAL",
        "MONEY",
        "ORG",
        "CARDINAL",
        "ORG",
        "PERCENT",
        "ORG",
        "PERSON",
        "QUANTITY",
        "ORG",
        "MONEY",
        "ORG",
        "ORG",
        "ORG",
        "QUANTITY",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "MONEY",
        "ORG",
        "GPE",
        "ORG",
        "MONEY",
        "QUANTITY",
        "MONEY",
        "MONEY",
        "FAC",
        "CARDINAL",
        "CARDINAL",
        "QUANTITY",
        "CARDINAL",
        "ORG",
        "ORG",
        "QUANTITY",
        "CARDINAL",
        "DATE",
        "ORDINAL",
        "ORG",
        "ORG",
        "PERSON",
        "ORG",
        "DATE",
        "MONEY",
        "PRODUCT",
        "MONEY",
        "DATE",
        "ORG",
        "MONEY",
        "ORG",
        "CARDINAL",
        "DATE",
        "GPE",
        "CARDINAL",
        "ORG",
        "PRODUCT",
        "PRODUCT",
        "PERSON"
    ],
    "vector": [
        -0.049112290143966675,
        -0.08246997743844986,
        -0.0019480505725368857,
        -0.06331971287727356,
        0.13239353895187378,
        0.026788873597979546,
        0.021210765466094017,
        0.1116868257522583,
        -0.008781244978308678,
        0.010743043385446072,
        0.0070866490714251995,
        0.02401077188551426,
        0.03328556939959526,
        -0.02239154651761055,
        0.09132268279790878,
        -0.0017494785133749247,
        0.032497212290763855,
        -0.16809199750423431,
        -0.00793357565999031,
        -0.05062669888138771,
        0.014748119749128819,
        -0.015889178961515427,
        0.0015748009318485856,
        -0.02699345350265503,
        0.05059250816702843,
        -0.061301104724407196,
        0.043961986899375916,
        -0.07032059878110886,
        0.015944363549351692,
        -0.01094179879873991,
        -0.0335780493915081,
        0.07284015417098999,
        -0.043308645486831665,
        0.03173305466771126,
        0.029587307944893837,
        -0.09958559274673462,
        0.07523813098669052,
        -0.09166152030229568,
        -0.05734355375170708,
        -0.04610268026590347,
        -0.014998027123510838,
        -0.05478616803884506,
        -0.037920303642749786,
        -0.04469403997063637,
        0.05009925737977028,
        -0.021163802593946457,
        0.06341582536697388,
        -0.04718990623950958,
        0.03490012511610985,
        0.02861146256327629,
        0.01270202174782753,
        -0.05987215042114258,
        -0.006794970016926527,
        -0.06462724506855011,
        -0.101094551384449,
        0.08952958136796951,
        0.013470492325723171,
        -0.0557023324072361,
        0.007719308137893677,
        -0.0752101019024849,
        0.02210087701678276,
        -0.14277680218219757,
        -0.005569406319409609,
        0.06920474022626877,
        -0.023284411057829857,
        -0.058614812791347504,
        0.017453599721193314,
        0.007507065776735544,
        0.00012098829029127955,
        -0.03187411278486252,
        -0.04247676208615303,
        -0.008693127892911434,
        0.03887363523244858,
        0.11668341606855392,
        -0.027713121846318245,
        0.052383385598659515,
        0.10450427979230881,
        0.021921291947364807,
        0.08773435652256012,
        -0.034624408930540085,
        -0.011317916214466095,
        0.02116176299750805,
        -0.002999577671289444,
        0.0015983922639861703,
        -0.006064499728381634,
        0.017566615715622902,
        0.059654511511325836,
        0.013975325971841812,
        0.003470455063506961,
        -0.059312961995601654,
        0.0115288021042943,
        0.00896208081394434,
        -0.01207723654806614,
        0.0465887226164341,
        -0.05239591747522354,
        -0.005637149326503277,
        0.02987114153802395,
        -0.06703480333089828,
        0.016743237152695656,
        0.03875016048550606,
        -0.03075292706489563,
        0.021800177171826363,
        0.08373750746250153,
        -0.04312976822257042,
        -0.11071739345788956,
        -0.08024535328149796,
        -0.01315947063267231,
        0.05292178690433502,
        0.021454930305480957,
        -0.08184972405433655,
        -0.07535702735185623,
        0.043206725269556046,
        -0.028414953500032425,
        -0.030417166650295258,
        0.03944459185004234,
        0.03873402625322342,
        -0.04148832708597183,
        -0.0652867779135704,
        0.04960735887289047,
        -0.027193721383810043,
        0.003649134188890457,
        -0.05513980612158775,
        -0.03522592410445213,
        0.01827540434896946,
        -0.05372384563088417,
        0.03382759913802147,
        -0.02014518901705742,
        2.1617759881484348e-33,
        0.012841159477829933,
        0.0487663596868515,
        -0.05377906560897827,
        -0.03212114796042442,
        0.008660463616251945,
        0.026134183630347252,
        0.0521133728325367,
        -0.03137847036123276,
        -0.0017233097460120916,
        0.02192234992980957,
        -0.10112503170967102,
        0.032736729830503464,
        -0.10524416714906693,
        -0.0018028945196419954,
        0.07043984532356262,
        -0.0490650050342083,
        -0.021990668028593063,
        0.00663828756660223,
        0.020543698221445084,
        -0.023099565878510475,
        -0.008424072526395321,
        -0.011078923009335995,
        0.04187280312180519,
        -0.054378364235162735,
        0.09008397907018661,
        -0.0030544197652488947,
        0.041938576847314835,
        -0.0019371495582163334,
        0.07701225578784943,
        0.02518746815621853,
        -0.04073004424571991,
        -0.053738102316856384,
        -0.005051633343100548,
        -0.053964678198099136,
        -0.0192963145673275,
        -0.002307244809344411,
        -0.09328731894493103,
        -0.07902798801660538,
        0.07747525721788406,
        -0.034380439668893814,
        -0.0428139865398407,
        0.09062764793634415,
        -0.08794595301151276,
        -0.09412870556116104,
        -0.030397824943065643,
        0.015974529087543488,
        0.009431044571101665,
        0.036607109010219574,
        0.06031547114253044,
        0.021407943218946457,
        -0.11416137963533401,
        0.043926287442445755,
        -0.029077541083097458,
        -0.03217596933245659,
        -0.057548828423023224,
        -0.01067388616502285,
        0.03017808496952057,
        -0.06339458376169205,
        0.04417257755994797,
        0.02310185506939888,
        0.01842363364994526,
        -0.03913448005914688,
        0.0039792717434465885,
        0.0027262791991233826,
        -0.06193094700574875,
        0.06320903450250626,
        0.06328488886356354,
        -0.02073889970779419,
        -0.02367527410387993,
        -0.011217929422855377,
        -0.026101892814040184,
        -0.02954978309571743,
        0.011730080470442772,
        -0.07553494721651077,
        0.07449150830507278,
        0.030308203771710396,
        -0.09095882624387741,
        -0.012028473429381847,
        0.009773529134690762,
        0.04340444877743721,
        -0.05409061163663864,
        0.06886348128318787,
        0.013226255774497986,
        0.07031809538602829,
        0.048898689448833466,
        0.01594812422990799,
        0.012170000933110714,
        -0.007709084544330835,
        -0.023574238643050194,
        0.02631976827979088,
        -0.0049056862480938435,
        0.015004470944404602,
        -0.017934510484337807,
        0.06382099539041519,
        -0.006760560907423496,
        -3.861597022761111e-33,
        0.016591597348451614,
        0.009023783728480339,
        0.003364444710314274,
        0.0027841534465551376,
        0.013573347590863705,
        0.021864522248506546,
        0.010862987488508224,
        0.06601358205080032,
        0.038810182362794876,
        -0.01613680087029934,
        0.011805107817053795,
        0.05454451963305473,
        -0.04158315807580948,
        0.012006218545138836,
        0.007758427876979113,
        -0.08217541128396988,
        0.0014843479730188847,
        -0.048333294689655304,
        0.07174266129732132,
        -0.03590989485383034,
        0.1424957662820816,
        0.014613864943385124,
        -0.01523513998836279,
        -0.0226371418684721,
        -0.00340127176605165,
        0.0003330466279294342,
        -0.04534327983856201,
        0.06047762557864189,
        -0.05043601244688034,
        -0.008851311169564724,
        0.04748183861374855,
        -0.010920627042651176,
        0.027569346129894257,
        -0.0013811741955578327,
        0.05934780463576317,
        -0.02273455075919628,
        0.10729480534791946,
        0.06105784699320793,
        0.03461134061217308,
        0.01685924269258976,
        0.06665728241205215,
        -0.03493493050336838,
        0.0777139887213707,
        -0.027663864195346832,
        0.06513974070549011,
        -0.06687699258327484,
        -0.02011735551059246,
        -0.1010836660861969,
        0.007391896564513445,
        -0.019858527928590775,
        -0.053352680057287216,
        -0.08316923677921295,
        0.14723563194274902,
        -0.034573573619127274,
        0.006810522172600031,
        -0.004743083380162716,
        -0.0053323861211538315,
        0.0362224280834198,
        -0.017909016460180283,
        -0.06476488709449768,
        0.04487507790327072,
        0.07270332425832748,
        -0.024848995730280876,
        -0.0321209654211998,
        -0.00705808587372303,
        -0.007879029028117657,
        0.06845209747552872,
        -0.006640770472586155,
        -0.05111749470233917,
        -0.045863136649131775,
        -0.023361515253782272,
        -0.0139052364975214,
        -0.009150547906756401,
        -0.09819041937589645,
        -0.06365270912647247,
        -0.014244415797293186,
        -0.014604519121348858,
        -0.03886634111404419,
        0.020896749570965767,
        -0.060156144201755524,
        -0.03148108348250389,
        0.015684068202972412,
        -0.010056587867438793,
        -0.01399838924407959,
        0.013632724992930889,
        0.03505133092403412,
        0.05577433109283447,
        -0.05302094295620918,
        0.02055194228887558,
        -0.01632397435605526,
        -0.11145513504743576,
        -0.00041219458216801286,
        -0.021341826766729355,
        0.04451702907681465,
        0.002599711762741208,
        -5.832923122284228e-08,
        -0.06931550800800323,
        0.037155989557504654,
        -0.0017248986987397075,
        0.07075624912977219,
        0.03838348016142845,
        -0.07839473336935043,
        -0.003352109808474779,
        0.041332606226205826,
        0.11544386297464371,
        0.009240522980690002,
        0.06676449626684189,
        -0.08129037171602249,
        0.008728235960006714,
        0.00320482742972672,
        -0.00840469729155302,
        0.07914065569639206,
        -0.05559306964278221,
        0.04749036952853203,
        0.0008849414298310876,
        -0.05761207640171051,
        0.035027265548706055,
        0.024073775857686996,
        0.13441604375839233,
        0.009883709251880646,
        0.07804670184850693,
        -0.005559434182941914,
        0.001211483613587916,
        0.0575200580060482,
        0.11119922995567322,
        -0.006453416310250759,
        -0.10743064433336258,
        0.008297632448375225,
        0.023108838126063347,
        0.060575906187295914,
        0.019438736140727997,
        -0.07765112817287445,
        -0.08341999351978302,
        0.10901928693056107,
        0.08817806839942932,
        0.03394273668527603,
        0.013640153221786022,
        -0.03838435932993889,
        0.01616932824254036,
        0.02325574867427349,
        0.04281512275338173,
        0.011776663362979889,
        -0.0854984000325203,
        -0.07037890702486038,
        -0.004833224229514599,
        -0.04176456108689308,
        -0.04485667124390602,
        -0.012155560776591301,
        -0.010151874274015427,
        0.046404317021369934,
        -0.04455208405852318,
        0.002832327736541629,
        -0.03106032684445381,
        0.06462758779525757,
        -0.04177508503198624,
        0.04998701065778732,
        -0.003984360024333,
        -0.12232446670532227,
        -0.05087948217988014,
        0.09010852873325348
    ]
}