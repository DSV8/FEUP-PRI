{
    "id": "5iA_ZBcFwEU",
    "title": "Free CCNP 350-401 ENCOR Complete Course: 6.4: REST APIs Part 1",
    "channel": "David Bombal",
    "channel_id": "UCP7WmQ_U4GB3K51Od9QvM0w",
    "subscriber_count": 2650000,
    "upload_date": "2020-05-07T16:57:42Z",
    "video_url": "https://www.youtube.com/watch?v=5iA_ZBcFwEU",
    "category": "Science & Technology",
    "tags": [
        "encor",
        "ccnp",
        "rest",
        "rest api",
        "restful api",
        "350-401",
        "python",
        "json",
        "ccna",
        "ccnp encor",
        "ccnp enterprise",
        "ccnp training",
        "new ccnp",
        "ccnp study",
        "cisco certifications",
        "cisco training",
        "cisco",
        "cisco certified network professional",
        "ccnp certification",
        "encor 350-401",
        "ccnp automation",
        "ccie",
        "ccie encor",
        "cisco ccnp exam",
        "ccie enterprise",
        "cisco certification 2020",
        "cisco ccnp",
        "cisco encor training",
        "cisco encor exam",
        "2020 ccnp",
        "ccnp review",
        "cisco ccna",
        "ccna study",
        "ccna training",
        "cisco encor test"
    ],
    "views": 39964,
    "likes": 946,
    "comments_count": 132,
    "description": "This is a FREE complete CCNP 350-401 ENCOR Course. In this first REST API video we start our discussion of RESTful (REST) Application Programming interfaces (APIs). We look at some practical examples and start our theory discussion. This is the first of multiple REST API videos. In subsequent videos I'll show you practical demonstrations using both PostMan and Python scripts to interact with Cisco's DNA Center and a Cisco router.  It's important that you learn both REST APIs and Python for the ENCOR exam as well as the real world.  I will be covering all the topics in the Cisco CCNP ENCOR exam in this course. I want to make this content practical and it will include a lots of labs and demonstrations to help you better understand topics on the exam.  Slides:    CCNP ENCOR playlist:   Menu: Overview: 0:00 API Example: 0:18 Why do we care: 0:35 Alexa API demo: 1:15 What we are going to cover: 2:49 Real world reasons: 6:30 REST API Theory: 7:52  ====================== Special Offers: ====================== Cisco Press: Up to 50% discount Save every day on Cisco Press learning products! Use discount code BOMBAL during checkout to save 35% on print books (plus free shipping in the U.S.), 45% on eBooks, and 50% on video courses and simulator software. Offer expires December 31, 2020. Shop now.  Link: bit.ly/ciscopress50  Boson software: 15% discount Link: bit.ly/boson15 Code: DBAF15P  GNS3 Academy: CCNA ($10): bit.ly/gns3ccna10 Wireshark ($10): bit.ly/gns3wireshark  DavidBombal.com CCNA ($10):  Wireshark ($9): bit.ly/wireshark9  Python REST API JSON CCNP CCIE CCNP ENCOR CCNP 350-401 CCNP Enterprise ccnp training CCNP Security CCNP Data Center CCNP Service Provider CCNP Collaboration Cisco Certified Devnet Professional Cisco Certified Network Professional  Please note that links listed may be affiliate links and provide me with a small percentage/kickback should you use them to purchase any of the items listed or recommended. Thank you for supporting me and this channel!    #ccnp #encor #restapi",
    "description_links": [
        "https://bit.ly/encorapi1",
        "https://bit.ly/freeccnp",
        "http://bit.ly/yt999ccna"
    ],
    "transcript": "- In this video, we're going to discuss REST APIs or Representational State Transfer application programming interfaces. Long name, basically short name REST APIs. Application programming interfaces allow us to get one application to interact with another application. As an example, if you want to use the functionality of Google Maps rather than developing your own mapping system, you can integrate Google Maps with your application and then you can send queries to Google Maps using an application and then get responses back from Google Maps. REST APIs are used everywhere! It's really important that you learn the basics of REST APIs, you have to have an understanding of REST APIs and have an understanding of DNA Center. In this video however, I'm gonna show you how you can interact with a Cisco device using a REST API and a Python script. So we're gonna write Python script that interacts with the REST API on a Cisco router. If you want to differentiate yourself from others it's well worth learning REST APIs, well worth learning Python. (upbeat techno music playing) - Okay APIs are used everywhere. You probably use then all the time without realizing. Applications talk to other applications using application programming interfaces. These are becoming more and more and more important. It's a very difficult for applications to share information using non-structured data. In a separate video, I spoke about JSON and how you need to use JSON formatting to share information between devices. Structured data is really important! Having a structured application programming interface is really important, if you want machines talking to machines. Here's an example, notice that lamp. I press a button on my phone, it goes off. This is a Hue Lamp, it has an exposed API. Now because of APIs, I can once again do this. Alexa, turn off David Office Old Big Lamp. - Okay. - Notice the lamp when off. Very simple example of an API. Alexa, turn on David Office Old Big Lamp. - Okay. - Alexa, Off! So, that's an example of one program talking to another program. We've got a Hue lamp system, we've got Alexa and they are talking to each other and application programming interfaces allow me to do interesting things like that. Where I can get one device to interact with another device and do something. Now I'm going to cover this section differently to other instructors. Too many of them say connect to this Dev Net server but they're using a Pre Bolt application or Pre Bolt information and it's very difficult to replicate what they're doing if you don't download Pre Bolt stuff from Cisco DevNet. So I wanna show you this from the ground up. I wanna show you how you can interact with REST APIs without using Pre Bolt stuff that's been downloaded. I'm gonna show you how to download an application called Postman. I'm gonna show you how you can manually update Postman with IP addresses and other information, not using Pre Bolt stuff. So I'm gonna show you how you can overcome some issues that you will encounter if you do this manually rather than using Pre Bolt stuff. There's an issue with certificates, as an example. You have to tell Postman to accept self-signed certificates otherwise it wont' interact with the devices that are using self-signed certificates. We're gonna manually configure IP addresses rather than, once again using Pre Bolt stuff. But to make it easier for you, I've created this entire PowerPoint Presentation. In this PowerPoint Presentation, I've given you links to Cisco's DevNet labs. So the DevNet DNA Center always on Labs, the URL is here. Here is the username and here is the password. So you can simply download this PowerPoint Presentation and use it. All the links are here that I'm using. All the information is within this document. As an example, here's the API documentation. A question people often ask is, \"How do I know what APIs to use?\" Well there's an example of the API documentation for DNA center. There's also a DevNet Lab that you can follow if you want to. So if you want to go through one of the DevNet Labs, there is a good example of a DevNet Lab. But what I'm gonna show you as an example is how to connect to labs manually. So we're going to use Postman, which is an application I'll show you in a moment how to download. It allows you very easily to interact with APIs, allows you to do some basic testing and check for issues. Really good application for testing APIs. So I'm gonna show you the URL to connect to. I'll show you how to bypass the issue with self-signed certificates. You need to turn this off, otherwise you will have problems. If you try and connect to some of their labs, it's not going to work because you need to turn this off otherwise Postman by default rejects the connection. All the username and password information is within this document. And I'm showing you step by step what to do. I'm gonna demonstrate it practically using a video. So I'm gonna show you how to do this but I've also given you this entire PowerPoint Presentation so that you can keep this as reference for later. I've also included a Python script. So this is a very basic Python script that allows me to connect to a Cisco router. And this example, we're going to connect to a Cisco xe router. We're going to connect to this router on this port number and then we gonna get a list of interfaces from the router using an API. So I really hope this helps you. If you follow along in this video, you should get a really good understanding. And I'll show you step by step how to interact with both DNA Center as well as with an xe router, in other words with a Cisco router. But you can download this PowerPoint Presentation and have it as as reference to really help you, after you've watched these videos. Six months from today, you might just wanna have this as a reference. Now you can use SSH to simple SSH to a router and configure a router. The problem is when you type 'show version' or 'show IP interface brief' that data that's displayed is for human consumption. In other words, humans will understand the information but machines will struggle with the information that's displayed. If they show version command as run on different routers; Cisco Nexus, Cisco IOS, Classic IOS, Monolithic IOS versus xe then the output will be slightly different and machines will struggle with that output. What you really want, is that my application can talk to your application using and exposed and well documented API. Now that's the theory! In reality, APIs change. In reality, not all devices use the same API. So if you talk to DNA Center the APIs that it uses will be different to IOS xe router. And it can change from version to version. That is a frustration of APIs. But longterm, hopefully Cisco will standardize the APIs more and more. This is where the world is going. We are no longer gonna manually configure devices using a CLI. We're gonna have applications interacting with other applications and programming other applications. So my program will program that program in the same way that an Alexa can be used to interact with many devices out there. Now there's some theory with regards to REST. I'm gonna quickly go through it now. Don't get hung up about the theory! Jump to the next video if the theory is a bit boring. You're gonna learn more if I show you the stuff practically. I've given you the PowerPoint slide that contains some useful information. So download that if you want to uh for reading later or for studying. But you're going to learn much more if you just do it. Don't read about it. If you do it practically the stuff will make sense. So if you find this boring, please go to the next video. Do it practically and then you can come back to the theory. (upbeat happy music playing) - Now the first question is, \"What is REST?\" And a great place to look for good information is RESTfulAPI.net. And we're told that REST is an acronym for REpresentational State Transfer. It is an architectural style for distributed hypermedia systems that was first presented by Roy Fielding in 2000 in his famous dissertation. They've got a link to his dissertation. And you can read this whole dissertation to get an idea of what it's about. He talks about how it's Client-Server and it's Stateless, Caching is supported and a whole bunch of other detailed information. So if you really want to get into it, you can have a look at this. But let's just summarize it. I wanna go through this fairly quickly and actually show you practically how it works because you'll learn a lot more if you see it practically rather than just looking at some theory. First thing is it's Client-server, by separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms. It's basically a client talking to a server. So I've got a PC talking to a server, client-server model, similar to what we do with HTTP. I wanna go to Facebook.com or some kind of web server, I've got a client running on my computer here, MAC, and I'm connecting to the server. I send a get, I get back a bunch of information that's then displayed on my web browser interface. It's stateless. Each request from client to server must contain all the information necessary to understand the request. And it cannot take advantage of stored context on the server. Session state is therefore entirely kept on the client. That's very different to SOAP, which was an older way of implementing APIs in an enterprise. In that example, state information is maintained on the server. Here we don't maintain state on the server. Everything needs to be maintained on the client. Its also cacheable. Cache constraints require that data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later equivalent requests. You may have come across cacheing on your web browser many many times. Data is cache by web browsers. Happens a lot! If I want to force a page to refresh, as an example, I have to press Ctrl+R on a MAC. You sometimes have to reforce a refresh of the page because stale information will be stored on your local computer. So something could be changed on your server but you don't see the changes on your PC. So on Windows and other browsers you have to press Ctrl+F5 to refresh the page and force a download of all the elements, such as the pictures and other information rather than using a locally stored cache of some of the information. So we might not want everything stored in cache so REST APIs as an example and web servers will allow information to be cached on the local client rather than pulling everything from the server every time I go to a web page or I make an API call Okay, so that's enough about the principles. Have a read of this if you're interested. They also talk about a resource, key abstraction of information in REST is a resource. Any information that can be named can be a resource. Which could be a document, an image, a service, a collection of resources, etc. etc. So I would suggest you have a quick read of some of this. But you're gonna learn a lot more if I just demonstrate this practically, so that's what I'm gonna do. Now something else you'll come across is CRUD, which in computer programming means Create Read Update and Delete. And are four basic functions of persistent storage. These are four actions performed by an application. We could create something on a server. We could read data from the server. We could update something on the server and we can delete information on the server. Now I'm gonna demonstrate the use of Postman in a moment. But notice, here we've got GET, here we've got POST, here we've got DELETE, we've got PATCH we've got other what are known as HTTP verbs. So POST will allow me to create new data structures and variables. That's the C in CRUD for create. GET allows me to read or retrieve verbal name structures or values. PATCH and PUT allow me to update or replace values of some variable. And DELETE, fairly easy to understand, allows me to delete variables and data structures. Now Postman, an application that we're going to use in a moment has those HTTP verbs but it's not gonna mean much to you just by reading about this stuff. It means a lot more if we just do it, so I'm gonna show you practically how to do it. (upbeat techno music playing)",
    "transcript_keywords": [
        "REST APIs",
        "REST",
        "Google Maps",
        "Pre Bolt stuff",
        "Pre Bolt",
        "APIs",
        "discuss REST APIs",
        "REST API",
        "information",
        "show",
        "application",
        "API",
        "Cisco",
        "server",
        "DNA Center",
        "application programming interfaces",
        "learning REST APIs",
        "Pre Bolt application",
        "Bolt stuff",
        "application programming"
    ],
    "transcript_entity_values": [
        "xe",
        "first",
        "Six months from today",
        "a Hue Lamp",
        "Roy Fielding",
        "Cisco Nexus",
        "PowerPoint Presentation",
        "Cisco IOS",
        "JSON",
        "SSH",
        "Google Maps",
        "David Office Old Big Lamp",
        "IOS",
        "Alexa",
        "Cisco",
        "Hue",
        "Labs",
        "API",
        "Create Read Update",
        "Dev Net",
        "Pre Bolt",
        "the DevNet Labs",
        "four",
        "Monolithic IOS",
        "a DevNet Lab",
        "the REST API",
        "Classic IOS",
        "Facebook.com",
        "IP",
        "2000",
        "Python",
        "the DevNet DNA Center",
        "SOAP",
        "one",
        "Alexa",
        "PowerPoint",
        "REpresentational State Transfer",
        "Postman",
        "MAC",
        "Alexa",
        "Python",
        "Cisco",
        "First",
        "Windows",
        "CLI",
        "POST",
        "Representational State Transfer",
        "Cisco DevNet"
    ],
    "transcript_entity_types": [
        "ORG",
        "ORDINAL",
        "DATE",
        "WORK_OF_ART",
        "PERSON",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "ORG",
        "GPE",
        "ORG",
        "ORG",
        "WORK_OF_ART",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "ORG",
        "ORG",
        "ORG",
        "PRODUCT",
        "ORG",
        "ORG",
        "DATE",
        "ORG",
        "ORG",
        "ORG",
        "CARDINAL",
        "FAC",
        "PRODUCT",
        "ORG",
        "PERSON",
        "ORG",
        "PERSON",
        "WORK_OF_ART",
        "GPE",
        "ORDINAL",
        "PRODUCT",
        "ORG",
        "ORG",
        "ORG",
        "ORG"
    ],
    "vector": [
        -0.09894423931837082,
        -0.005543065257370472,
        -0.015308716334402561,
        -0.038146011531353,
        0.0033581184688955545,
        -0.05254332721233368,
        -0.075586698949337,
        0.040283218026161194,
        -0.10091756284236908,
        0.03551284596323967,
        -0.012666444294154644,
        -0.030913392081856728,
        -0.040758538991212845,
        0.028843827545642853,
        0.07792173326015472,
        -0.027020856738090515,
        0.06999516487121582,
        -0.00464756740257144,
        0.03651949390769005,
        -0.04707272723317146,
        0.012879932299256325,
        -0.0038197042886167765,
        0.05057293921709061,
        0.013591066002845764,
        -0.10738058388233185,
        0.025259384885430336,
        0.010933103039860725,
        0.023732637986540794,
        -0.02378266490995884,
        -0.0581987202167511,
        -0.042620949447155,
        0.029358265921473503,
        0.0029834171291440725,
        0.02861184999346733,
        -0.008990724571049213,
        -0.008880192413926125,
        0.059820231050252914,
        -0.08112401515245438,
        0.00646918173879385,
        0.012261402793228626,
        -0.029893791303038597,
        -0.015292217023670673,
        -0.05635382607579231,
        0.004283085931092501,
        0.05305672436952591,
        -0.06617317348718643,
        -0.04886651039123535,
        -0.051523733884096146,
        0.02117910608649254,
        -0.021846581250429153,
        -0.031698908656835556,
        -0.02298622950911522,
        -0.007633666507899761,
        -0.06357263773679733,
        -0.02390681579709053,
        -0.030149688944220543,
        -0.010867228731513023,
        -0.008450359106063843,
        0.015058639459311962,
        -0.030207430943846703,
        0.025618210434913635,
        -0.08004143834114075,
        0.014188812114298344,
        0.025053752586245537,
        0.05738821625709534,
        -0.044788964092731476,
        -0.00433741882443428,
        0.0719665139913559,
        0.08274068683385849,
        -0.07428538799285889,
        -0.08453411608934402,
        -0.011839660815894604,
        -0.04921620339155197,
        0.05959128960967064,
        0.008839148096740246,
        -0.0006821304559707642,
        0.04187336936593056,
        -0.0853615552186966,
        -0.03888462856411934,
        -0.022751057520508766,
        0.07803943008184433,
        0.04181484505534172,
        -0.05838516727089882,
        0.028803367167711258,
        0.05298442393541336,
        0.03685211390256882,
        -0.007447587791830301,
        0.06876525282859802,
        -0.09074843674898148,
        -0.02077868953347206,
        0.052206747233867645,
        -0.07337625324726105,
        -0.056674525141716,
        0.017193226143717766,
        0.059921715408563614,
        0.03550184145569801,
        0.011093058623373508,
        -0.10786997526884079,
        -0.07373735308647156,
        0.03860996291041374,
        0.055777329951524734,
        -0.023866400122642517,
        -0.019366342574357986,
        -0.03893495351076126,
        -0.03696631267666817,
        -0.019350817427039146,
        0.06635863333940506,
        0.030258266255259514,
        0.08477866649627686,
        0.01707323268055916,
        -0.06572651863098145,
        0.011183872818946838,
        -0.023179303854703903,
        -0.03918161243200302,
        0.04365725442767143,
        0.10341162234544754,
        0.013353372924029827,
        0.08133205026388168,
        0.08513601124286652,
        0.02646424062550068,
        0.009620429947972298,
        0.01900472305715084,
        0.0031104041263461113,
        -0.007329903077334166,
        0.0324808731675148,
        -0.08917241543531418,
        0.06447256356477737,
        7.349300883936331e-33,
        0.015745067968964577,
        0.024751130491495132,
        -0.014806709252297878,
        0.04452798515558243,
        0.051834214478731155,
        -0.007354277186095715,
        0.0973464697599411,
        0.0845036432147026,
        -0.09556596726179123,
        -0.029511963948607445,
        0.01131849642843008,
        0.11510275304317474,
        0.002333220560103655,
        0.03363775461912155,
        -0.03544943034648895,
        -0.04681101068854332,
        -0.11751583218574524,
        0.03608117252588272,
        0.014902763068675995,
        0.05617772042751312,
        0.03824877366423607,
        -0.014410600997507572,
        0.018486779183149338,
        0.026948848739266396,
        0.039779290556907654,
        0.007480458356440067,
        -0.024849366396665573,
        -0.03673342242836952,
        0.04056404158473015,
        0.0198687594383955,
        -0.053986694663763046,
        0.026720471680164337,
        -0.1038241982460022,
        0.007436871062964201,
        0.08778072893619537,
        0.010223434306681156,
        -0.0051782503724098206,
        -0.03365698084235191,
        -0.06402839720249176,
        -0.05226317048072815,
        -0.09292574971914291,
        0.0806499645113945,
        -0.057760074734687805,
        -0.04568292200565338,
        -0.10099592804908752,
        -0.02943991869688034,
        0.02534637600183487,
        -0.003134126542136073,
        0.05968698859214783,
        -0.03397217392921448,
        -0.016248242929577827,
        0.025224054232239723,
        -0.03609819710254669,
        -0.10324457287788391,
        0.0327179841697216,
        -0.07966115325689316,
        0.05619168281555176,
        -0.02058372274041176,
        -0.03083116188645363,
        -0.03679905831813812,
        0.05071858689188957,
        -0.016802601516246796,
        -0.03346005827188492,
        -0.04556949436664581,
        -0.05136379972100258,
        0.02652178891003132,
        -0.13983812928199768,
        -0.02932085655629635,
        0.1267370879650116,
        0.02345181442797184,
        -0.04352924972772598,
        0.047708429396152496,
        -0.020831068977713585,
        -0.022976133972406387,
        0.04406944289803505,
        0.042399898171424866,
        -0.04101693630218506,
        -0.007547632325440645,
        0.011234159581363201,
        0.03164279833436012,
        0.03406631574034691,
        -0.02564682811498642,
        -0.012496627867221832,
        -0.017602048814296722,
        -0.020589467138051987,
        -0.015045697800815105,
        0.047679319977760315,
        -0.06052383780479431,
        -0.08937888592481613,
        -0.001162933767773211,
        0.01037172693759203,
        -0.016042999923229218,
        0.06513264030218124,
        0.028108546510338783,
        0.046256691217422485,
        -8.182577237823572e-33,
        0.014787756837904453,
        0.019678667187690735,
        -0.06622801721096039,
        0.00209548557177186,
        -0.0041558281518518925,
        -0.04095304012298584,
        0.07285429537296295,
        0.04733245447278023,
        0.055930931121110916,
        0.041016291826963425,
        0.01559957955032587,
        -0.040447723120450974,
        0.030694227665662766,
        0.03465757891535759,
        0.020145373418927193,
        -0.06835531443357468,
        -0.12634606659412384,
        -0.0016668873140588403,
        0.011557095684111118,
        0.03484494239091873,
        -0.03621024638414383,
        0.13652068376541138,
        -0.10245458036661148,
        -0.06632159650325775,
        -0.007454067002981901,
        0.06656404584646225,
        -0.03133727237582207,
        -0.04015025869011879,
        0.051425788551568985,
        -0.05319909751415253,
        -0.02903367578983307,
        -0.003743269480764866,
        -0.03182388097047806,
        0.04665491357445717,
        -0.027799516916275024,
        0.07639643549919128,
        0.09126920998096466,
        0.0834098681807518,
        -0.017992854118347168,
        -0.029574144631624222,
        0.0920395702123642,
        0.014065024442970753,
        -0.048549164086580276,
        -0.045514486730098724,
        0.0350804403424263,
        -0.008562741801142693,
        -0.027307841926813126,
        0.08142078667879105,
        -0.07565319538116455,
        0.050369471311569214,
        0.031560443341732025,
        0.017745355144143105,
        -0.09095903486013412,
        -0.07074005156755447,
        0.0314285010099411,
        -0.004999181255698204,
        0.0061690728180110455,
        -0.03937622159719467,
        -0.021456172689795494,
        0.014476784504950047,
        -0.026220008730888367,
        0.02385147474706173,
        -0.033550482243299484,
        0.08208739012479782,
        0.002898464212194085,
        -0.0568745881319046,
        -0.04648642987012863,
        -0.02584812045097351,
        -0.006802390329539776,
        -0.05167653039097786,
        -0.03544476628303528,
        -0.008558143861591816,
        0.0646277517080307,
        -0.0321936272084713,
        0.07308855652809143,
        -0.010292598977684975,
        -0.014724534004926682,
        -0.04097486287355423,
        -0.03464045003056526,
        -0.015892375260591507,
        -0.08783987164497375,
        -0.04783932492136955,
        0.025177786126732826,
        0.14723719656467438,
        0.030180322006344795,
        0.049649160355329514,
        0.06829339265823364,
        -0.006109732668846846,
        -0.05207980051636696,
        0.07292043417692184,
        -0.03996029868721962,
        0.03752705454826355,
        0.04203392192721367,
        0.10821017622947693,
        0.029355183243751526,
        -5.351194332092746e-08,
        -0.0037081788759678602,
        -0.0060302191413939,
        -0.04381094500422478,
        0.06756246834993362,
        -0.08895732462406158,
        0.05700501799583435,
        0.01607762649655342,
        -0.05256897583603859,
        0.014985346235334873,
        0.04046909883618355,
        0.016722341999411583,
        0.02473110891878605,
        -0.03662946820259094,
        0.06704353541135788,
        0.01917152665555477,
        0.06431346386671066,
        -0.0028073962312191725,
        0.014343678019940853,
        -0.014957396313548088,
        -0.07712115347385406,
        -0.0012160793412476778,
        -0.02993142418563366,
        -0.019536560401320457,
        0.010415446944534779,
        -0.04099608585238457,
        0.07251627743244171,
        0.010856835171580315,
        0.08643835037946701,
        -0.012792643159627914,
        -0.06697424501180649,
        -0.028182754293084145,
        -0.09776788204908371,
        0.028338715434074402,
        -0.028325935825705528,
        0.060534413903951645,
        0.009074326604604721,
        -0.07399601489305496,
        -0.03462646156549454,
        0.01741737686097622,
        0.06235285475850105,
        -0.055922266095876694,
        -0.037844978272914886,
        -0.04160924628376961,
        0.032177019864320755,
        0.13370852172374725,
        -0.026917804032564163,
        -0.05275576189160347,
        -0.025157399475574493,
        -0.01630445383489132,
        0.036164961755275726,
        -0.052396807819604874,
        -0.07073808461427689,
        -0.006595750339329243,
        -0.03238791599869728,
        0.08666708320379257,
        0.14735236763954163,
        0.007086026016622782,
        -0.03979136422276497,
        -0.05278298258781433,
        0.04762431979179382,
        0.07224760949611664,
        0.10760096460580826,
        -0.005607848055660725,
        0.026943793520331383
    ]
}